/**
 * This namespace handles the basic lifecycle of the components.
 * @public
 */
export declare namespace Lifecycle {
    type ComponentBasedProgram<Components> = {
        /**
         * async stop() finishes all the components of the service and awaits for completion
         * it should be called to gracefully stop the program.
         *
         * It is automatically called on SIGTERM
         */
        stop(): Promise<void>;
        /**
         * The components are present here only for debugging reasons. Do not use
         * it as part of your program.
         */
        readonly components: Components;
    };
    type EntryPointParameters<Components> = ComponentBasedProgram<Components> & {
        startComponents(): Promise<void>;
    };
    /**
     * Program lifecycle configurations
     */
    type ProgramConfig<Components> = {
        /**
         * async main(program)\{ .. \} entry point of the application.
         * It should wire components together i.e. wiring routes to http-servers
         * and listeners to kafka.
         *
         * The main function must also call the program.
         *
         * Example:
         * ```ts
         * async main(program) {
         *   const { components, startComponents } = program
         *   components.server.use(routeHandler)
         *
         *   // start all components, including http listener
         *   await startComponents()
         * }
         * ```
         */
        main: (program: EntryPointParameters<Components>) => Promise<any>;
        /**
         * initComponents is a function that returns the components to be used by
         * the app.
         */
        initComponents: () => Promise<Components>;
    };
    /**
     * Program entry point, this should be the one and only top level
     * expression of your program.
     *
     * @deprecated Lifecycle.programEntryPoint is deprecated, please use Lifecycle.run()
     */
    function programEntryPoint<Components extends Record<string, any>>(config: {
        main: (components: Components) => Promise<any>;
        initComponents: () => Promise<Components>;
    }): Promise<ComponentBasedProgram<Components>>;
    /**
     * Program entry point, this should be the one and only top level
     * expression of your program.
     */
    function run<Components extends Record<string, any>>(config: ProgramConfig<Components>): PromiseLike<ComponentBasedProgram<Components>>;
}
//# sourceMappingURL=lifecycle.d.ts.map