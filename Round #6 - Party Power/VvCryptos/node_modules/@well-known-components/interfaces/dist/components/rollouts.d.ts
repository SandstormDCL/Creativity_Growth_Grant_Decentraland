/**
 * @beta
 */
export declare namespace IRolloutComponent {
    type RolloutContext = {
        userId?: string;
        sessionId?: string;
        remoteAddress?: string;
        environment?: string;
        appName?: string;
        properties?: Record<string, string | number | undefined>;
    };
    /**
     * @beta
     */
    enum PayloadType {
        STRING = "string"
    }
    /**
     * @beta
     */
    interface Override {
        contextName: string;
        values: String[];
    }
    /**
     * @beta
     */
    interface Payload {
        type: PayloadType;
        value: string;
    }
    /**
     * @beta
     */
    interface VariantDefinition {
        name: string;
        weight: number;
        payload: Payload;
        overrides: Override[];
    }
    /**
     * @beta
     */
    interface Variant {
        name: string;
        enabled: boolean;
        payload?: Payload;
    }
    /**
     * @beta
     */
    type FallbackFunction = (name: string, context: RolloutContext) => boolean;
}
/**
 * @beta
 */
export type IRolloutComponent = {
    isEnabled(name: string, context: IRolloutComponent.RolloutContext, fallbackFunction?: IRolloutComponent.FallbackFunction): boolean;
    getVariant(name: string, context: IRolloutComponent.RolloutContext, fallbackVariant?: IRolloutComponent.Variant): IRolloutComponent.Variant;
};
//# sourceMappingURL=rollouts.d.ts.map