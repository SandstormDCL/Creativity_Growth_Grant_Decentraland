import { IConfigComponent } from "@well-known-components/interfaces";
/**
 * Creates a composed config provider, using the provided order, getting configurations
 * will cascade to the next provider if the result is undefined
 * @public
 */
export declare function composeConfigProviders(...providers: IConfigComponent[]): IConfigComponent;
/**
 * Creates a simple configuration provider out of a dictionary (process.env)
 * @public
 * @param optionMap - a dictionary to search values, usually process.env
 * @param defaultValues - default values
 */
export declare function createConfigComponent(optionMap: Partial<Record<string, string>>, defaultValues?: Partial<Record<string, string>>): IConfigComponent;
/**
 * Creates a simple configuration provider out of a dictionary (process.env)
 * @public
 * @param optionMap - a dictionary to search values, usually process.env
 */
export declare function createRecordConfigComponent(optionMap: Partial<Record<string, string>>): IConfigComponent;
/**
 * Creates a simple configuration provider out of a dictionary (process.env)
 * All previously existing environment variables will not be replaced by the
 * .env contents.
 *
 * "path" can be an array of strings, the values will be overwritten
 * in the order of parsing
 *
 * @public
 * @param options - configurations for the .env file
 * @param defaultValues - default values
 */
export declare function createDotEnvConfigComponent(options: {
    path?: string | string[];
    encoding?: string;
    debug?: boolean;
}, defaultValues?: Partial<Record<string, string>>): Promise<IConfigComponent>;
//# sourceMappingURL=index.d.ts.map