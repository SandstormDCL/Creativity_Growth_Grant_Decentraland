/**
 * Creates a linkedList of <T> elements
 * @public
 */
export declare function linkedList<T>(): {
    enqueue: (value: T) => void;
    dequeue: () => T | undefined;
    isEmpty: () => boolean;
    size: () => number;
};
/**
 * Creates a pushable channel
 * @public
 */
export declare function pushableChannel<T>(onIteratorClose: () => void): {
    iterable: AsyncGenerator<T, any, unknown>;
    bufferSize: () => number;
    push: (value: T, resolve: (err?: any) => void) => void;
    close: () => void;
    failAndClose: (errorToThrow: Error) => void;
    isClosed: () => boolean;
    [Symbol.asyncIterator]: () => AsyncGenerator<T, any, unknown>;
};
/**
 * Creates a queue of <T> elements
 * @public
 */
export declare class AsyncQueue<T> implements AsyncGenerator<T> {
    private requestingNext;
    values: {
        enqueue: (value: IteratorResult<T, any>) => void;
        dequeue: () => IteratorResult<T, any> | undefined;
        isEmpty: () => boolean;
        size: () => number;
    };
    settlers: {
        enqueue: (value: {
            resolve(x: IteratorResult<T>): void;
            reject(error: Error): void;
        }) => void;
        dequeue: () => {
            resolve(x: IteratorResult<T>): void;
            reject(error: Error): void;
        } | undefined;
        isEmpty: () => boolean;
        size: () => number;
    };
    closed: boolean;
    error: Error | undefined;
    constructor(requestingNext: (queue: AsyncQueue<T>, action: "next" | "close") => void);
    [Symbol.asyncIterator](): AsyncGenerator<T>;
    enqueue(value: T): void;
    /**
     * @returns a Promise for an IteratorResult
     */
    next(): Promise<IteratorResult<T>>;
    return(value: any): Promise<IteratorResult<T>>;
    throw(error: Error): Promise<IteratorResult<T>>;
    close(error?: Error): void;
}
//# sourceMappingURL=push-channel.d.ts.map