"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.incrementMetric = exports.createGenericLogComponent = void 0;
/**
 * Creates a scoped logger component using a LogLineFunction function.
 * @public
 */
async function createGenericLogComponent(components, print) {
    const levelsEnum = { ALL: 0, LOG: 1, DEBUG: 2, INFO: 4, WARN: 8, ERROR: 16, OFF: 1 | 2 | 4 | 8 | 16 };
    let minLogLevel = "ALL";
    let numericMinLevel = levelsEnum[minLogLevel] || 0;
    function setLogLevel(level) {
        if (level && level in levelsEnum) {
            minLogLevel = level;
            numericMinLevel = levelsEnum[minLogLevel] || 0;
        }
    }
    // set ALL log level by default
    setLogLevel("ALL");
    if (components.config) {
        try {
            // if a config component is provided, we try to get the LOG_LEVEL config
            const newLevel = await components.config.getString("LOG_LEVEL");
            if (newLevel)
                setLogLevel(newLevel);
        }
        catch (error) {
            print(components, "ERROR", "LOG_LEVEL", error.toString(), error);
        }
    }
    // Print every log greater than or equal to a certain level
    const shouldPrint = (logLevel) => {
        const numericLevel = levelsEnum[logLevel];
        return numericLevel >= numericMinLevel;
    };
    return {
        getLogger(loggerName) {
            return {
                log(message, extra) {
                    if (shouldPrint("LOG")) {
                        print(components, "LOG", loggerName, message, extra);
                    }
                },
                warn(message, extra) {
                    if (shouldPrint("WARN")) {
                        print(components, "WARNING", loggerName, message, extra);
                    }
                },
                info(message, extra) {
                    if (shouldPrint("INFO")) {
                        print(components, "INFO", loggerName, message, extra);
                    }
                },
                debug(message, extra) {
                    if (shouldPrint("DEBUG")) {
                        print(components, "DEBUG", loggerName, message, extra);
                    }
                },
                error(error, extra) {
                    if (shouldPrint("ERROR")) {
                        let message = `${error}`;
                        let printTrace = true;
                        if (error instanceof Error && "stack" in error && typeof error.stack == "string") {
                            if (error.stack.includes(error.message)) {
                                message = error.stack;
                                printTrace = false;
                            }
                        }
                        print(components, "ERROR", loggerName, message, extra || error);
                        if (printTrace) {
                            console.trace();
                        }
                    }
                },
            };
        },
    };
}
exports.createGenericLogComponent = createGenericLogComponent;
// @internal
function incrementMetric(components, loggerName, level) {
    if (components.metrics) {
        components.metrics.increment("wkc_logger_logs_total", { logger: loggerName, level });
    }
}
exports.incrementMetric = incrementMetric;
//# sourceMappingURL=helpers.js.map