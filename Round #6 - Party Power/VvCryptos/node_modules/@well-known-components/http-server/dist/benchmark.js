"use strict";
// this server shuts down after 10100 requests.
Object.defineProperty(exports, "__esModule", { value: true });
const interfaces_1 = require("@well-known-components/interfaces");
const env_config_provider_1 = require("@well-known-components/env-config-provider");
const index_1 = require("./index");
const logger_1 = require("@well-known-components/logger");
const fs_1 = require("fs");
// Lifecycle.run manages the lifecycle of the application and components
// it is particularly useful for servers with many components with state
// like database connectors, servers, or batch jobs.
// It also handles POSIX signals like SIGTERM to gracefully stop the
// components
interfaces_1.Lifecycle.run({ initComponents, main });
// main entry point of the application, it's role is to wire components
// together (controllers, handlers) and ultimately start the components
// by calling startComponents
async function main({ components, startComponents, stop }) {
    const globalContext = { components };
    // wire the server
    components.server.setContext(globalContext);
    components.server.use(async function logger(ctx, next) {
        // Log the response time of all the requests handled by this server
        return await next();
    });
    let counter = 0;
    const staticBuffer = Buffer.from(new Array(10000).fill(0).map(() => Math.floor(Math.random() * 256)));
    const staticArrayBuffer = new Uint8Array(staticBuffer);
    const packageJsonString = (0, fs_1.readFileSync)("package.json").toString();
    const packageJson = JSON.parse(packageJsonString);
    const TOTAL_REQUESTS = 10100;
    const TOTAL_STAGES = 5;
    components.server.use(async function handler(ctx) {
        counter++;
        if (counter >= TOTAL_REQUESTS) {
            setTimeout(() => stop().catch(console.log), 0);
        }
        const headers = {};
        const stage = Math.floor((counter / TOTAL_REQUESTS) * TOTAL_STAGES);
        switch (stage) {
            case 1:
                return {
                    headers,
                    status: 200,
                    body: staticBuffer,
                };
            case 2:
                return {
                    headers,
                    status: 200,
                    body: staticArrayBuffer,
                };
            case 3:
                return {
                    headers,
                    status: 200,
                    body: packageJsonString,
                };
            case 4:
                return {
                    headers,
                    status: 200,
                    body: packageJson,
                };
        }
        // Respond hello world
        return {
            headers,
            status: 200,
            body: {
                json: true,
                text: "Hello world",
            },
        };
    });
    // start server and other components
    await startComponents();
}
// initComponents role is to create BUT NOT START the components,
// this function is only called once by the Lifecycle manager
async function initComponents() {
    const logs = await (0, logger_1.createLogComponent)({});
    const config = (0, env_config_provider_1.createConfigComponent)({
        HTTP_SERVER_PORT: "5000",
        HTTP_SERVER_HOST: "0.0.0.0",
    });
    const server = await (0, index_1.createServerComponent)({ logs, config }, {});
    return /*components*/ {
        logs,
        config,
        server,
    };
}
//# sourceMappingURL=benchmark.js.map