import { IHttpServerComponent as http } from "@well-known-components/interfaces";
import { Key } from "path-to-regexp";
import { Middleware } from "./middleware";
import { RoutedContext } from "./router";
export type LayerOptions = Partial<{
    name: string;
    sensitive: boolean;
    strict: boolean;
    ignoreCaptures: boolean;
    end: boolean;
    prefix: string;
}>;
/**
 * Initialize a new routing Layer with given `method`, `path`, and `middleware`.
 *
 * @param path - Path string or regular expression.
 * @param methods - Array of HTTP verbs.
 * @param middleware - Layer callback/middleware or series of.
 * @param opts - Layer options
 *
 * @public
 */
export declare class Layer<Context, Path extends string> {
    opts: LayerOptions;
    name: string | null;
    methods: http.HTTPMethod[];
    paramNames: Key[];
    stack: Middleware<RoutedContext<http.DefaultContext<Context>, Path>>[];
    path: string;
    regexp: RegExp;
    constructor(path: Path, methods: ReadonlyArray<http.HTTPMethod>, middleware: Middleware<RoutedContext<http.DefaultContext<Context>, Path>> | Middleware<RoutedContext<http.DefaultContext<Context>, Path>>[], opts?: LayerOptions);
    /**
     * Returns whether request `path` matches route.
     *
     * @param path -
     */
    match(path: string): boolean;
    /**
     * Returns map of URL parameters for given `path` and `paramNames`.
     *
     * @param path -
     * @param captures -
     * @param existingParams -
     */
    params(captures: Array<string>, existingParams: Record<string, string>): object;
    /**
     * Returns array of regexp url path captures.
     *
     * @param path -
     */
    captures(path: string): Array<string>;
    /**
     * Prefix route path.
     *
     * @param prefix -
     */
    setPrefix(prefix: string): this;
}
