"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initTestServerComponents = exports.wireTestServerComponents = void 0;
const env_config_provider_1 = require("@well-known-components/env-config-provider");
const logger_1 = require("@well-known-components/logger");
const test_helpers_1 = require("@well-known-components/test-helpers");
const node_fetch_1 = require("node-fetch");
const stream_1 = require("stream");
const _1 = require(".");
/**
 * Wires together the server and router. Also logs every request that is handled in the process.
 */
async function wireTestServerComponents(context) {
    const { components } = context;
    components.server.setContext(context);
    components.server.use(async function logger(ctx, next) {
        const resetFG = '\u001b[0m';
        const greenFG = '\u001b[32m';
        const greyFG = '\u001b[30;0m';
        const whiteFG = '\u001b[37m';
        process.stderr.write('req ❭ ' + greenFG + ctx.request.method + ' ' + greyFG + ctx.url.toString() + resetFG + '\n');
        for (let [header, value] of ctx.request.headers) {
            process.stderr.write('      ' + whiteFG + header + ': ' + greyFG + value + '\n');
        }
        const response = await next();
        process.stderr.write('res ❬ ' + greenFG + 'HTTP ' + whiteFG + (response.status || 200) + '\n');
        if (response.headers) {
            for (let [header, value] of new node_fetch_1.Headers(response.headers)) {
                process.stderr.write('      ' + whiteFG + header + ': ' + greyFG + value + '\n');
            }
        }
        if (response.body) {
            if (Buffer.isBuffer(response.body)) {
                process.stderr.write(response.body.toString() + '\n');
            }
            else if (response.body instanceof stream_1.Readable) {
                process.stderr.write('      ' + '<< STREAM >>\n');
            }
            else if (typeof response.body == 'string') {
                process.stderr.write('      ' + response.body + '\n');
            }
            else if (response.body instanceof ArrayBuffer) {
                process.stderr.write('      ' + '<< ArrayBuffer >>\n');
            }
            else if (typeof response.body == 'object') {
                process.stderr.write('      ' + JSON.stringify(response.body) + '\n');
            }
            else {
                process.stderr.write('      ' + '<<BODY ' + Object.prototype.toString.apply(response.body) + '>>\n');
            }
        }
        process.stderr.write('\n');
        return response;
    });
    components.server.use(components.router.middleware());
}
exports.wireTestServerComponents = wireTestServerComponents;
/**
 * Creates a test server and returns all the components and helpers
 */
async function initTestServerComponents() {
    const config = (0, env_config_provider_1.createConfigComponent)({ ...(0, test_helpers_1.defaultServerConfig)(), LOG_LEVEL: "INFO" });
    const logs = await (0, logger_1.createLogComponent)({ config });
    const server = await (0, _1.createServerComponent)({ logs, config }, {});
    const router = new _1.Router();
    const getBaseUrl = async () => {
        return `http://${await config.requireString('HTTP_SERVER_HOST')}:${await config.requireString('HTTP_SERVER_PORT')}`;
    };
    const getUrl = async (url) => {
        return await getBaseUrl() + url;
    };
    return {
        logs,
        config,
        getBaseUrl,
        getUrl,
        router,
        server,
    };
}
exports.initTestServerComponents = initTestServerComponents;
//# sourceMappingURL=test-server.js.map