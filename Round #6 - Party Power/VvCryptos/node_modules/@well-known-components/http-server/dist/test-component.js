"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestServerComponent = void 0;
const fetch = __importStar(require("node-fetch"));
const server_handler_1 = require("./server-handler");
const stream_1 = require("stream");
/**
 * Creates a http-server component for tests
 * @public
 */
function createTestServerComponent() {
    let currentContext = {};
    const serverHandler = (0, server_handler_1.createServerHandler)();
    const ret = {
        async fetch(url, initRequest) {
            let req;
            if (url instanceof fetch.Request) {
                req = url;
            }
            else {
                const tempHeaders = new fetch.Headers(initRequest?.headers);
                const hostname = tempHeaders.get("X-Forwarded-Host") || tempHeaders.get("host") || "0.0.0.0";
                const protocol = tempHeaders.get("X-Forwarded-Proto") == "https" ? "https" : "http";
                let newUrl = new URL(protocol + "://" + hostname + url);
                try {
                    newUrl = new URL(url, protocol + "://" + hostname);
                }
                catch { }
                req = new fetch.Request(newUrl.toString(), initRequest);
            }
            try {
                const res = await serverHandler.processRequest(currentContext, req);
                if (res.body instanceof stream_1.Stream) {
                    // since we have no server and actual socket pipes, what we receive here
                    // is a readable stream that needs to be decoupled from it's original
                    // stream to ensure a consistent behavior with real servers
                    return new Promise((resolve, reject) => {
                        resolve(new fetch.Response((0, stream_1.pipeline)(res.body, new stream_1.PassThrough(), reject), res));
                    });
                }
                return res;
            }
            catch (error) {
                console.error(error);
                return new fetch.Response("DEV-SERVER-ERROR: " + (error.stack || error.toString()), { status: 500 });
            }
        },
        use: serverHandler.use,
        setContext(ctx) {
            currentContext = Object.create(ctx);
        },
        resetMiddlewares: serverHandler.resetMiddlewares,
    };
    return ret;
}
exports.createTestServerComponent = createTestServerComponent;
//# sourceMappingURL=test-component.js.map