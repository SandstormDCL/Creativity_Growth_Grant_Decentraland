{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.36.3",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "eth-connect!",
  "docComment": "",
  "name": "eth-connect",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "eth-connect!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Interface",
          "canonicalReference": "eth-connect!AbiConstructor:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AbiConstructor "
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "AbiConstructor",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiConstructor#anonymous:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "anonymous?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "anonymous",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiConstructor#constant:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constant?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "constant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiConstructor#gas:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gas?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "gas",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiConstructor#inputs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inputs?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiInput",
                  "canonicalReference": "eth-connect!AbiInput:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "inputs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiConstructor#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiConstructor#outputs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outputs?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiOutput",
                  "canonicalReference": "eth-connect!AbiOutput:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "outputs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiConstructor#payable:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "payable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "payable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiConstructor#stateMutability:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stateMutability?: "
                },
                {
                  "kind": "Reference",
                  "text": "StateMutabilityType",
                  "canonicalReference": "eth-connect!StateMutabilityType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "stateMutability",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiConstructor#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "'constructor'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "eth-connect!AbiEvent:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AbiEvent "
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "AbiEvent",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiEvent#anonymous:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "anonymous?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "anonymous",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiEvent#constant:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constant?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "constant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiEvent#gas:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gas?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "gas",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiEvent#inputs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inputs?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiInput",
                  "canonicalReference": "eth-connect!AbiInput:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "inputs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiEvent#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiEvent#outputs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outputs?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiOutput",
                  "canonicalReference": "eth-connect!AbiOutput:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "outputs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiEvent#payable:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "payable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "payable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiEvent#stateMutability:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stateMutability?: "
                },
                {
                  "kind": "Reference",
                  "text": "StateMutabilityType",
                  "canonicalReference": "eth-connect!StateMutabilityType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "stateMutability",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiEvent#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "'event'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "eth-connect!AbiFallback:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AbiFallback "
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "AbiFallback",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiFallback#anonymous:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "anonymous?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "anonymous",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiFallback#constant:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constant?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "constant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiFallback#gas:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gas?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "gas",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiFallback#inputs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inputs?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiInput",
                  "canonicalReference": "eth-connect!AbiInput:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "inputs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiFallback#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiFallback#outputs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outputs?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiOutput",
                  "canonicalReference": "eth-connect!AbiOutput:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "outputs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiFallback#payable:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "payable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "payable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiFallback#stateMutability:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stateMutability?: "
                },
                {
                  "kind": "Reference",
                  "text": "StateMutabilityType",
                  "canonicalReference": "eth-connect!StateMutabilityType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "stateMutability",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiFallback#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "'fallback'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "eth-connect!AbiFunction:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AbiFunction "
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "AbiFunction",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiFunction#anonymous:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "anonymous?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "anonymous",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiFunction#constant:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constant?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "constant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiFunction#gas:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gas?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "gas",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiFunction#inputs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inputs?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiInput",
                  "canonicalReference": "eth-connect!AbiInput:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "inputs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiFunction#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiFunction#outputs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outputs?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiOutput",
                  "canonicalReference": "eth-connect!AbiOutput:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "outputs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiFunction#payable:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "payable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "payable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiFunction#stateMutability:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stateMutability?: "
                },
                {
                  "kind": "Reference",
                  "text": "StateMutabilityType",
                  "canonicalReference": "eth-connect!StateMutabilityType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "stateMutability",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiFunction#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "'function'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "eth-connect!AbiInput:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AbiInput extends "
            },
            {
              "kind": "Reference",
              "text": "AbiOutput",
              "canonicalReference": "eth-connect!AbiOutput:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "AbiInput",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiInput#indexed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "indexed?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "indexed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!AbiItem:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AbiItem = "
            },
            {
              "kind": "Reference",
              "text": "AbiFunction",
              "canonicalReference": "eth-connect!AbiFunction:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "AbiEvent",
              "canonicalReference": "eth-connect!AbiEvent:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "AbiConstructor",
              "canonicalReference": "eth-connect!AbiConstructor:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "AbiFallback",
              "canonicalReference": "eth-connect!AbiFallback:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "AbiItemGeneric",
              "canonicalReference": "eth-connect!AbiItemGeneric:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "AbiItem",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "eth-connect!AbiItemGeneric:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AbiItemGeneric "
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "AbiItemGeneric",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiItemGeneric#anonymous:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "anonymous?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "anonymous",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiItemGeneric#constant:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constant?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "constant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiItemGeneric#gas:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gas?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "gas",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiItemGeneric#inputs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inputs?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiInput",
                  "canonicalReference": "eth-connect!AbiInput:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "inputs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiItemGeneric#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiItemGeneric#outputs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outputs?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiOutput",
                  "canonicalReference": "eth-connect!AbiOutput:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "outputs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiItemGeneric#payable:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "payable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "payable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiItemGeneric#stateMutability:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stateMutability?: "
                },
                {
                  "kind": "Reference",
                  "text": "StateMutabilityType",
                  "canonicalReference": "eth-connect!StateMutabilityType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "stateMutability",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiItemGeneric#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "eth-connect!AbiOutput:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AbiOutput "
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "AbiOutput",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiOutput#components:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "components?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiOutput",
                  "canonicalReference": "eth-connect!AbiOutput:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "components",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiOutput#internalType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "internalType?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "internalType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiOutput#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!AbiOutput#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!AbiType:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AbiType = "
            },
            {
              "kind": "Content",
              "text": "'function' | 'constructor' | 'event' | 'fallback'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "AbiType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "eth-connect!AbstractFilter:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class AbstractFilter<ReceivedLog, TransformedLog = "
            },
            {
              "kind": "Content",
              "text": "ReceivedLog"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "../src/Filter.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ReceivedLog",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TransformedLog",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "isAbstract": true,
          "name": "AbstractFilter",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "eth-connect!AbstractFilter:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `AbstractFilter` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "eth-connect!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "requestManager",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!AbstractFilter#callbacks:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected callbacks: "
                },
                {
                  "kind": "Content",
                  "text": "((message: TransformedLog) => void)[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callbacks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": true,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!AbstractFilter#filterId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected filterId: "
                },
                {
                  "kind": "Reference",
                  "text": "IFuture",
                  "canonicalReference": "eth-connect!IFuture:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "filterId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": true,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!AbstractFilter#formatter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "formatter: "
                },
                {
                  "kind": "Content",
                  "text": "(x: ReceivedLog) => TransformedLog"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "formatter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!AbstractFilter#getChanges:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected abstract getChanges(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ReceivedLog[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": true,
              "name": "getChanges"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!AbstractFilter#getNewFilter:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected abstract getNewFilter(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": true,
              "name": "getNewFilter"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!AbstractFilter#isDisposed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isDisposed: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isDisposed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!AbstractFilter#isStarted:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isStarted: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isStarted",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!AbstractFilter#requestManager:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "eth-connect!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestManager",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!AbstractFilter#start:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "start"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!AbstractFilter#stop:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stop(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "stop"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!AbstractFilter#stopSemaphore:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected stopSemaphore: "
                },
                {
                  "kind": "Reference",
                  "text": "IFuture",
                  "canonicalReference": "eth-connect!IFuture:type"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stopSemaphore",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": true,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!AbstractFilter#uninstall:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected abstract uninstall(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": true,
              "name": "uninstall"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!AbstractFilter#watch:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "watch(callback: "
                },
                {
                  "kind": "Content",
                  "text": "(message: TransformedLog) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "watch"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!Address:type",
          "docComment": "/**\n * Hex string of 20 bytes\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Address = "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "Address",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "eth-connect!BigNumber:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BigNumber implements "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Instance",
              "canonicalReference": "eth-connect!BigNumber.Instance:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "../node_modules/bignumber.js/bignumber.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "BigNumber",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "eth-connect!BigNumber:constructor(1)",
              "docComment": "/**\n * Returns a new instance of a BigNumber object with value `n`, where `n` is a numeric value in the specified `base`, or base 10 if `base` is omitted or is `null` or `undefined`.\n * ```ts\n * x = new BigNumber(123.4567)              // '123.4567'\n * // 'new' is optional\n * y = BigNumber(x)                         // '123.4567'\n * ```\n *\n * If `n` is a base 10 value it can be in normal (fixed-point) or exponential notation. Values in other bases must be in normal notation. Values in any base can have fraction digits, i.e. digits after the decimal point.\n * ```ts\n * new BigNumber(43210)                     // '43210'\n * new BigNumber('4.321e+4')                // '43210'\n * new BigNumber('-735.0918e-430')          // '-7.350918e-428'\n * new BigNumber('123412421.234324', 5)     // '607236.557696'\n * ```\n *\n * Signed `0`, signed `Infinity` and `NaN` are supported.\n * ```ts\n * new BigNumber('-Infinity')               // '-Infinity'\n * new BigNumber(NaN)                       // 'NaN'\n * new BigNumber(-0)                        // '0'\n * new BigNumber('.5')                      // '0.5'\n * new BigNumber('+2')                      // '2'\n * ```\n *\n * String values in hexadecimal literal form, e.g. `'0xff'`, are valid, as are string values with the octal and binary prefixs `'0o'` and `'0b'`. String values in octal literal form without the prefix will be interpreted as decimals, e.g. `'011'` is interpreted as 11, not 9.\n * ```ts\n * new BigNumber(-10110100.1, 2)            // '-180.5'\n * new BigNumber('-0b10110100.1')           // '-180.5'\n * new BigNumber('ff.8', 16)                // '255.5'\n * new BigNumber('0xff.8')                  // '255.5'\n * ```\n *\n * If a base is specified, `n` is rounded according to the current `DECIMAL_PLACES` and `ROUNDING_MODE` settings. This includes base 10, so don't include a `base` parameter for decimal values unless this behaviour is desired.\n * ```ts\n * BigNumber.config({ DECIMAL_PLACES: 5 })\n * new BigNumber(1.23456789)                // '1.23456789'\n * new BigNumber(1.23456789, 10)            // '1.23457'\n * ```\n *\n * An error is thrown if `base` is invalid.\n *\n * There is no limit to the number of digits of a value of type string (other than that of JavaScript's maximum array size). See `RANGE` to set the maximum and minimum possible exponent value of a BigNumber.\n * ```ts\n * new BigNumber('5032485723458348569331745.33434346346912144534543')\n * new BigNumber('4.321e10000000')\n * ```\n *\n * BigNumber `NaN` is returned if `n` is invalid (unless `BigNumber.DEBUG` is `true`, see below).\n * ```ts\n * new BigNumber('.1*')                    // 'NaN'\n * new BigNumber('blurgh')                 // 'NaN'\n * new BigNumber(9, 2)                     // 'NaN'\n * ```\n *\n * To aid in debugging, if `BigNumber.DEBUG` is `true` then an error will be thrown on an invalid `n`. An error will also be thrown if `n` is of type number with more than 15 significant digits, as calling `toString` or `valueOf` on these numbers may not result in the intended value.\n * ```ts\n * console.log(823456789123456.3)          //  823456789123456.2\n * new BigNumber(823456789123456.3)        // '823456789123456.2'\n * BigNumber.DEBUG = true\n * // 'Error: Number has more than 15 significant digits'\n * new BigNumber(823456789123456.3)\n * // 'Error: Not a base 2 number'\n * new BigNumber(9, 2)\n * ```\n *\n * A BigNumber can also be created from an object literal. Use `isBigNumber` to check that it is well-formed.\n * ```ts\n * new BigNumber({ s: 1, e: 2, c: [ 777, 12300000000000 ], _isBigNumber: true })    // '777.123'\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of `n`, integer, 2 to 36 (or `ALPHABET.length`, see `ALPHABET`).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#abs:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the absolute value, i.e. the magnitude, of the value of this BigNumber.\n *\n * The return value is always exact and unrounded.\n * ```ts\n * x = new BigNumber(-0.8)\n * x.abs()                     // '0.8'\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abs(): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "abs"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#absoluteValue:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the absolute value, i.e. the magnitude, of the value of this BigNumber.\n *\n * The return value is always exact and unrounded.\n * ```ts\n * x = new BigNumber(-0.8)\n * x.absoluteValue()           // '0.8'\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "absoluteValue(): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "absoluteValue"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!BigNumber#c:member",
              "docComment": "/**\n * The coefficient of the value of this BigNumber, an array of base 1e14 integer numbers, or null.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly c: "
                },
                {
                  "kind": "Content",
                  "text": "number[] | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "c",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber.clone:member(1)",
              "docComment": "/**\n * Returns a new independent BigNumber constructor with configuration as described by `object`, or with the default configuration if object is `null` or `undefined`.\n *\n * Throws if `object` is not an object.\n * ```ts\n * BigNumber.config({ DECIMAL_PLACES: 5 })\n * BN = BigNumber.clone({ DECIMAL_PLACES: 9 })\n *\n * x = new BigNumber(1)\n * y = new BN(1)\n *\n * x.div(3)                        // 0.33333\n * y.div(3)                        // 0.333333333\n *\n * // BN = BigNumber.clone({ DECIMAL_PLACES: 9 }) is equivalent to:\n * BN = BigNumber.clone()\n * BN.config({ DECIMAL_PLACES: 9 })\n * ```\n *\n * @param object - The configuration object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static clone(object?: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Config",
                  "canonicalReference": "eth-connect!BigNumber.Config:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Constructor",
                  "canonicalReference": "eth-connect!BigNumber.Constructor:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "clone"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#comparedTo:member(1)",
              "docComment": "/**\n * Returns | | :-------:|:--------------------------------------------------------------| 1 | If the value of this BigNumber is greater than the value of `n` -1 | If the value of this BigNumber is less than the value of `n` 0 | If this BigNumber and `n` have the same value `null` | If the value of either this BigNumber or `n` is `NaN`\n * ```ts\n *\n * x = new BigNumber(Infinity)\n * y = new BigNumber(5)\n * x.comparedTo(y)                 // 1\n * x.comparedTo(x.minus(1))        // 0\n * y.comparedTo(NaN)               // null\n * y.comparedTo('110', 2)          // -1\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "comparedTo(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "comparedTo"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber.config:member(1)",
              "docComment": "/**\n * Configures the settings that apply to this BigNumber constructor.\n *\n * The configuration object, `object`, contains any number of the properties shown in the example below.\n *\n * Returns an object with the above properties and their current values.\n *\n * Throws if `object` is not an object, or if an invalid value is assigned to one or more of the properties.\n * ```ts\n * BigNumber.config({\n *     DECIMAL_PLACES: 40,\n *     ROUNDING_MODE: BigNumber.ROUND_HALF_CEIL,\n *     EXPONENTIAL_AT: [-10, 20],\n *     RANGE: [-500, 500],\n *     CRYPTO: true,\n *     MODULO_MODE: BigNumber.ROUND_FLOOR,\n *     POW_PRECISION: 80,\n *     FORMAT: {\n *         groupSize: 3,\n *         groupSeparator: ' ',\n *         decimalSeparator: ','\n *     },\n *     ALPHABET: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n * });\n *\n * BigNumber.config().DECIMAL_PLACES        // 40\n * ```\n *\n * @param object - The configuration object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static config(object?: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Config",
                  "canonicalReference": "eth-connect!BigNumber.Config:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Config",
                  "canonicalReference": "eth-connect!BigNumber.Config:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "config"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!BigNumber.DEBUG:member",
              "docComment": "/**\n * To aid in debugging, if a `BigNumber.DEBUG` property is `true` then an error will be thrown if the BigNumber constructor receives an invalid `BigNumber.Value`, or if `BigNumber.isBigNumber` receives a BigNumber instance that is malformed.\n * ```ts\n * // No error, and BigNumber NaN is returned.\n * new BigNumber('blurgh')    // 'NaN'\n * new BigNumber(9, 2)        // 'NaN'\n * BigNumber.DEBUG = true\n * new BigNumber('blurgh')    // '[BigNumber Error] Not a number'\n * new BigNumber(9, 2)        // '[BigNumber Error] Not a base 2 number'\n * ```\n *\n * An error will also be thrown if a `BigNumber.Value` is of type number with more than 15 significant digits, as calling `toString` or `valueOf` on such numbers may not result in the intended value.\n * ```ts\n * console.log(823456789123456.3)       //  823456789123456.2\n * // No error, and the returned BigNumber does not have the same value as the number literal.\n * new BigNumber(823456789123456.3)     // '823456789123456.2'\n * BigNumber.DEBUG = true\n * new BigNumber(823456789123456.3)\n * // '[BigNumber Error] Number primitive has more than 15 significant digits'\n * ```\n *\n * Check that a BigNumber instance is well-formed:\n * ```ts\n * x = new BigNumber(10)\n *\n * BigNumber.DEBUG = false\n * // Change x.c to an illegitimate value.\n * x.c = NaN\n * // No error, as BigNumber.DEBUG is false.\n * BigNumber.isBigNumber(x)    // true\n *\n * BigNumber.DEBUG = true\n * BigNumber.isBigNumber(x)    // '[BigNumber Error] Invalid BigNumber'\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static DEBUG?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "DEBUG",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#decimalPlaces:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the value of this BigNumber rounded by rounding mode `roundingMode` to a maximum of `decimalPlaces` decimal places.\n *\n * If `decimalPlaces` is omitted, or is `null` or `undefined`, the return value is the number of decimal places of the value of this BigNumber, or `null` if the value of this BigNumber is ±`Infinity` or `NaN`.\n *\n * If `roundingMode` is omitted, or is `null` or `undefined`, `ROUNDING_MODE` is used.\n *\n * Throws if `decimalPlaces` or `roundingMode` is invalid.\n * ```ts\n * x = new BigNumber(1234.56)\n * x.decimalPlaces()                      // 2\n * x.decimalPlaces(1)                     // '1234.6'\n * x.decimalPlaces(2)                     // '1234.56'\n * x.decimalPlaces(10)                    // '1234.56'\n * x.decimalPlaces(0, 1)                  // '1234'\n * x.decimalPlaces(0, 6)                  // '1235'\n * x.decimalPlaces(1, 1)                  // '1234.5'\n * x.decimalPlaces(1, BigNumber.ROUND_HALF_EVEN)     // '1234.6'\n * x                                      // '1234.56'\n * y = new BigNumber('9.9e-101')\n * y.decimalPlaces()                      // 102\n * ```\n *\n * @param decimalPlaces - Decimal places, integer, 0 to 1e+9.\n *\n * @param roundingMode - Rounding mode, integer, 0 to 8.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decimalPlaces(): "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "decimalPlaces"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#decimalPlaces:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decimalPlaces(decimalPlaces: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roundingMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.RoundingMode",
                  "canonicalReference": "eth-connect!BigNumber.RoundingMode:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "decimalPlaces",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "roundingMode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "decimalPlaces"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#div:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the value of this BigNumber divided by `n`, rounded according to the current `DECIMAL_PLACES` and `ROUNDING_MODE` settings.\n * ```ts\n * x = new BigNumber(355)\n * y = new BigNumber(113)\n * x.div(y)                    // '3.14159292035398230088'\n * x.div(5)                    // '71'\n * x.div(47, 16)               // '5'\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "div(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "div"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#dividedBy:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the value of this BigNumber divided by `n`, rounded according to the current `DECIMAL_PLACES` and `ROUNDING_MODE` settings.\n * ```ts\n * x = new BigNumber(355)\n * y = new BigNumber(113)\n * x.dividedBy(y)                  // '3.14159292035398230088'\n * x.dividedBy(5)                  // '71'\n * x.dividedBy(47, 16)             // '5'\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dividedBy(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "dividedBy"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#dividedToIntegerBy:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the integer part of dividing the value of this BigNumber by `n`.\n * ```ts\n * x = new BigNumber(5)\n * y = new BigNumber(3)\n * x.dividedToIntegerBy(y)              // '1'\n * x.dividedToIntegerBy(0.7)            // '7'\n * x.dividedToIntegerBy('0.f', 16)      // '5'\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dividedToIntegerBy(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "dividedToIntegerBy"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#dp:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the value of this BigNumber rounded by rounding mode `roundingMode` to a maximum of `decimalPlaces` decimal places.\n *\n * If `decimalPlaces` is omitted, or is `null` or `undefined`, the return value is the number of decimal places of the value of this BigNumber, or `null` if the value of this BigNumber is ±`Infinity` or `NaN`.\n *\n * If `roundingMode` is omitted, or is `null` or `undefined`, `ROUNDING_MODE` is used.\n *\n * Throws if `decimalPlaces` or `roundingMode` is invalid.\n * ```ts\n * x = new BigNumber(1234.56)\n * x.dp()                                 // 2\n * x.dp(1)                                // '1234.6'\n * x.dp(2)                                // '1234.56'\n * x.dp(10)                               // '1234.56'\n * x.dp(0, 1)                             // '1234'\n * x.dp(0, 6)                             // '1235'\n * x.dp(1, 1)                             // '1234.5'\n * x.dp(1, BigNumber.ROUND_HALF_EVEN)     // '1234.6'\n * x                                      // '1234.56'\n * y = new BigNumber('9.9e-101')\n * y.dp()                                 // 102\n * ```\n *\n * @param decimalPlaces - Decimal places, integer, 0 to 1e+9.\n *\n * @param roundingMode - Rounding mode, integer, 0 to 8.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dp(): "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "dp"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#dp:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dp(decimalPlaces: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roundingMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.RoundingMode",
                  "canonicalReference": "eth-connect!BigNumber.RoundingMode:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "decimalPlaces",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "roundingMode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "dp"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!BigNumber#e:member",
              "docComment": "/**\n * The exponent of the value of this BigNumber, an integer number, -1000000000 to 1000000000, or null.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly e: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "e",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#eq:member(1)",
              "docComment": "/**\n * Returns `true` if the value of this BigNumber is equal to the value of `n`, otherwise returns `false`.\n *\n * As with JavaScript, `NaN` does not equal `NaN`.\n * ```ts\n * 0 === 1e-324                    // true\n * x = new BigNumber(0)\n * x.eq('1e-324')                  // false\n * BigNumber(-0).eq(x)             // true  ( -0 === 0 )\n * BigNumber(255).eq('ff', 16)     // true\n *\n * y = new BigNumber(NaN)\n * y.eq(NaN)                       // false\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eq(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "eq"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!BigNumber.EUCLID:member",
              "docComment": "/**\n * See `MODULO_MODE`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly EUCLID: "
                },
                {
                  "kind": "Content",
                  "text": "9"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "EUCLID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#exponentiatedBy:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the value of this BigNumber exponentiated by `n`, i.e. raised to the power `n`, and optionally modulo a modulus `m`.\n *\n * If `n` is negative the result is rounded according to the current `DECIMAL_PLACES` and `ROUNDING_MODE` settings.\n *\n * As the number of digits of the result of the power operation can grow so large so quickly, e.g. 123.456**10000 has over 50000 digits, the number of significant digits calculated is limited to the value of the `POW_PRECISION` setting (unless a modulus `m` is specified).\n *\n * By default `POW_PRECISION` is set to 0. This means that an unlimited number of significant digits will be calculated, and that the method's performance will decrease dramatically for larger exponents.\n *\n * If `m` is specified and the value of `m`, `n` and this BigNumber are integers and `n` is positive, then a fast modular exponentiation algorithm is used, otherwise the operation will be performed as `x.exponentiatedBy(n).modulo(m)` with a `POW_PRECISION` of 0.\n *\n * Throws if `n` is not an integer.\n * ```ts\n * Math.pow(0.7, 2)                    // 0.48999999999999994\n * x = new BigNumber(0.7)\n * x.exponentiatedBy(2)                // '0.49'\n * BigNumber(3).exponentiatedBy(-2)    // '0.11111111111111111111'\n * ```\n *\n * @param n - The exponent, an integer.\n *\n * @param m - The modulus.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exponentiatedBy(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", m?: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "m",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "exponentiatedBy"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#exponentiatedBy:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exponentiatedBy(n: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", m?: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "m",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "exponentiatedBy"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#gt:member(1)",
              "docComment": "/**\n * Returns `true` if the value of this BigNumber is greater than the value of `n`, otherwise returns `false`.\n * ```ts\n * 0.1 > (0.3 - 0                     // true\n * x = new BigNumber(0.1)\n * x.gt(BigNumber(0.3).minus(0.2))    // false\n * BigNumber(0).gt(x)                 // false\n * BigNumber(11, 3).gt(11.1, 2)       // true\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gt(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "gt"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#gte:member(1)",
              "docComment": "/**\n * Returns `true` if the value of this BigNumber is greater than or equal to the value of `n`, otherwise returns `false`.\n * ```ts\n * (0.3 - 0.2) >= 0.1                    // false\n * x = new BigNumber(0.3).minus(0.2)\n * x.gte(0.1)                            // true\n * BigNumber(1).gte(x)                   // true\n * BigNumber(10, 18).gte('i', 36)        // true\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gte(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "gte"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#idiv:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the integer part of dividing the value of this BigNumber by `n`.\n * ```ts\n * x = new BigNumber(5)\n * y = new BigNumber(3)\n * x.idiv(y)                       // '1'\n * x.idiv(0.7)                     // '7'\n * x.idiv('0.f', 16)               // '5'\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "idiv(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "idiv"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#integerValue:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the value of this BigNumber rounded to an integer using rounding mode `rm`.\n *\n * If `rm` is omitted, or is `null` or `undefined`, `ROUNDING_MODE` is used.\n *\n * Throws if `rm` is invalid.\n * ```ts\n * x = new BigNumber(123.456)\n * x.integerValue()                        // '123'\n * x.integerValue(BigNumber.ROUND_CEIL)    // '124'\n * y = new BigNumber(-12.7)\n * y.integerValue()                        // '-13'\n * x.integerValue(BigNumber.ROUND_DOWN)    // '-12'\n * ```\n *\n * @param rm - The roundng mode, an integer, 0 to 8.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "integerValue(rm?: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.RoundingMode",
                  "canonicalReference": "eth-connect!BigNumber.RoundingMode:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rm",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "integerValue"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber.isBigNumber:member(1)",
              "docComment": "/**\n * Returns `true` if `value` is a BigNumber instance, otherwise returns `false`.\n *\n * If `BigNumber.DEBUG` is `true`, throws if a BigNumber instance is not well-formed.\n * ```ts\n * x = 42\n * y = new BigNumber(x)\n *\n * BigNumber.isBigNumber(x)             // false\n * y instanceof BigNumber               // true\n * BigNumber.isBigNumber(y)             // true\n *\n * BN = BigNumber.clone();\n * z = new BN(x)\n * z instanceof BigNumber               // false\n * BigNumber.isBigNumber(z)             // true\n * ```\n *\n * @param value - The value to test.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isBigNumber(value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "eth-connect!value"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "isBigNumber"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#isEqualTo:member(1)",
              "docComment": "/**\n * Returns `true` if the value of this BigNumber is equal to the value of `n`, otherwise returns `false`.\n *\n * As with JavaScript, `NaN` does not equal `NaN`.\n * ```ts\n * 0 === 1e-324                           // true\n * x = new BigNumber(0)\n * x.isEqualTo('1e-324')                  // false\n * BigNumber(-0).isEqualTo(x)             // true  ( -0 === 0 )\n * BigNumber(255).isEqualTo('ff', 16)     // true\n *\n * y = new BigNumber(NaN)\n * y.isEqualTo(NaN)                // false\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isEqualTo(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "isEqualTo"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#isFinite:member(1)",
              "docComment": "/**\n * Returns `true` if the value of this BigNumber is a finite number, otherwise returns `false`.\n *\n * The only possible non-finite values of a BigNumber are `NaN`, `Infinity` and `-Infinity`.\n * ```ts\n * x = new BigNumber(1)\n * x.isFinite()                    // true\n * y = new BigNumber(Infinity)\n * y.isFinite()                    // false\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isFinite(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "isFinite"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#isGreaterThan:member(1)",
              "docComment": "/**\n * Returns `true` if the value of this BigNumber is greater than the value of `n`, otherwise returns `false`.\n * ```ts\n * 0.1 > (0.3 - 0.2)                             // true\n * x = new BigNumber(0.1)\n * x.isGreaterThan(BigNumber(0.3).minus(0.2))    // false\n * BigNumber(0).isGreaterThan(x)                 // false\n * BigNumber(11, 3).isGreaterThan(11.1, 2)       // true\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isGreaterThan(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "isGreaterThan"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#isGreaterThanOrEqualTo:member(1)",
              "docComment": "/**\n * Returns `true` if the value of this BigNumber is greater than or equal to the value of `n`, otherwise returns `false`.\n * ```ts\n * (0.3 - 0.2) >= 0.1                                  // false\n * x = new BigNumber(0.3).minus(0.2)\n * x.isGreaterThanOrEqualTo(0.1)                       // true\n * BigNumber(1).isGreaterThanOrEqualTo(x)              // true\n * BigNumber(10, 18).isGreaterThanOrEqualTo('i', 36)   // true\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isGreaterThanOrEqualTo(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "isGreaterThanOrEqualTo"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#isInteger:member(1)",
              "docComment": "/**\n * Returns `true` if the value of this BigNumber is an integer, otherwise returns `false`.\n * ```ts\n * x = new BigNumber(1)\n * x.isInteger()                   // true\n * y = new BigNumber(123.456)\n * y.isInteger()                   // false\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isInteger(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "isInteger"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#isLessThan:member(1)",
              "docComment": "/**\n * Returns `true` if the value of this BigNumber is less than the value of `n`, otherwise returns `false`.\n * ```ts\n * (0.3 - 0.2) < 0.1                       // true\n * x = new BigNumber(0.3).minus(0.2)\n * x.isLessThan(0.1)                       // false\n * BigNumber(0).isLessThan(x)              // true\n * BigNumber(11.1, 2).isLessThan(11, 3)    // true\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isLessThan(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "isLessThan"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#isLessThanOrEqualTo:member(1)",
              "docComment": "/**\n * Returns `true` if the value of this BigNumber is less than or equal to the value of `n`, otherwise returns `false`.\n * ```ts\n * 0.1 <= (0.3 - 0.2)                                 // false\n * x = new BigNumber(0.1)\n * x.isLessThanOrEqualTo(BigNumber(0.3).minus(0.2))   // true\n * BigNumber(-1).isLessThanOrEqualTo(x)               // true\n * BigNumber(10, 18).isLessThanOrEqualTo('i', 36)     // true\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isLessThanOrEqualTo(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "isLessThanOrEqualTo"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#isNaN:member(1)",
              "docComment": "/**\n * Returns `true` if the value of this BigNumber is `NaN`, otherwise returns `false`.\n * ```ts\n * x = new BigNumber(NaN)\n * x.isNaN()                       // true\n * y = new BigNumber('Infinity')\n * y.isNaN()                       // false\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNaN(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "isNaN"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#isNegative:member(1)",
              "docComment": "/**\n * Returns `true` if the value of this BigNumber is negative, otherwise returns `false`.\n * ```ts\n * x = new BigNumber(-0)\n * x.isNegative()                  // true\n * y = new BigNumber(2)\n * y.isNegative()                  // false\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNegative(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "isNegative"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#isPositive:member(1)",
              "docComment": "/**\n * Returns `true` if the value of this BigNumber is positive, otherwise returns `false`.\n * ```ts\n * x = new BigNumber(-0)\n * x.isPositive()                  // false\n * y = new BigNumber(2)\n * y.isPositive()                  // true\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isPositive(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "isPositive"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#isZero:member(1)",
              "docComment": "/**\n * Returns `true` if the value of this BigNumber is zero or minus zero, otherwise returns `false`.\n * ```ts\n * x = new BigNumber(-0)\n * x.isZero()                 // true\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isZero(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "isZero"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#lt:member(1)",
              "docComment": "/**\n * Returns `true` if the value of this BigNumber is less than the value of `n`, otherwise returns `false`.\n * ```ts\n * (0.3 - 0.2) < 0.1                       // true\n * x = new BigNumber(0.3).minus(0.2)\n * x.lt(0.1)                               // false\n * BigNumber(0).lt(x)                      // true\n * BigNumber(11.1, 2).lt(11, 3)            // true\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lt(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "lt"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#lte:member(1)",
              "docComment": "/**\n * Returns `true` if the value of this BigNumber is less than or equal to the value of `n`, otherwise returns `false`.\n * ```ts\n * 0.1 <= (0.3 - 0.2)                  // false\n * x = new BigNumber(0.1)\n * x.lte(BigNumber(0.3).minus(0.2))    // true\n * BigNumber(-1).lte(x)                // true\n * BigNumber(10, 18).lte('i', 36)      // true\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lte(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "lte"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber.max:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the maximum of the arguments.\n *\n * The return value is always exact and unrounded.\n * ```ts\n * x = new BigNumber('3257869345.0378653')\n * BigNumber.max(4e9, x, '123456789.9')      // '4000000000'\n *\n * arr = [12, '13', new BigNumber(14)]\n * BigNumber.max.apply(null, arr)            // '14'\n * ```\n *\n * @param n - A numeric value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static max(...n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "max"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber.maximum:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the maximum of the arguments.\n *\n * The return value is always exact and unrounded.\n * ```ts\n * x = new BigNumber('3257869345.0378653')\n * BigNumber.maximum(4e9, x, '123456789.9')      // '4000000000'\n *\n * arr = [12, '13', new BigNumber(14)]\n * BigNumber.maximum.apply(null, arr)            // '14'\n * ```\n *\n * @param n - A numeric value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static maximum(...n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "maximum"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber.min:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the minimum of the arguments.\n *\n * The return value is always exact and unrounded.\n * ```ts\n * x = new BigNumber('3257869345.0378653')\n * BigNumber.min(4e9, x, '123456789.9')             // '123456789.9'\n *\n * arr = [2, new BigNumber(-14), '-15.9999', -12]\n * BigNumber.min.apply(null, arr)                   // '-15.9999'\n * ```\n *\n * @param n - A numeric value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static min(...n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "min"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber.minimum:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the minimum of the arguments.\n *\n * The return value is always exact and unrounded.\n * ```ts\n * x = new BigNumber('3257869345.0378653')\n * BigNumber.minimum(4e9, x, '123456789.9')          // '123456789.9'\n *\n * arr = [2, new BigNumber(-14), '-15.9999', -12]\n * BigNumber.minimum.apply(null, arr)                // '-15.9999'\n * ```\n *\n * @param n - A numeric value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static minimum(...n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "minimum"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#minus:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the value of this BigNumber minus `n`.\n *\n * The return value is always exact and unrounded.\n * ```ts\n * 0.3 - 0.1                       // 0.19999999999999998\n * x = new BigNumber(0.3)\n * x.minus(0.1)                    // '0.2'\n * x.minus(0.6, 20)                // '0'\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minus(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "minus"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#mod:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the value of this BigNumber modulo `n`, i.e. the integer remainder of dividing this BigNumber by `n`.\n *\n * The value returned, and in particular its sign, is dependent on the value of the `MODULO_MODE` setting of this BigNumber constructor. If it is 1 (default value), the result will have the same sign as this BigNumber, and it will match that of Javascript's `%` operator (within the limits of double precision) and BigDecimal's `remainder` method.\n *\n * The return value is always exact and unrounded.\n *\n * See `MODULO_MODE` for a description of the other modulo modes.\n * ```ts\n * 1 % 0.9                      // 0.09999999999999998\n * x = new BigNumber(1)\n * x.mod(0.9)                   // '0.1'\n * y = new BigNumber(33)\n * y.mod('a', 33)               // '3'\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mod(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "mod"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#modulo:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the value of this BigNumber modulo `n`, i.e. the integer remainder of dividing this BigNumber by `n`.\n *\n * The value returned, and in particular its sign, is dependent on the value of the `MODULO_MODE` setting of this BigNumber constructor. If it is 1 (default value), the result will have the same sign as this BigNumber, and it will match that of Javascript's `%` operator (within the limits of double precision) and BigDecimal's `remainder` method.\n *\n * The return value is always exact and unrounded.\n *\n * See `MODULO_MODE` for a description of the other modulo modes.\n * ```ts\n * 1 % 0.9                         // 0.09999999999999998\n * x = new BigNumber(1)\n * x.modulo(0.9)                   // '0.1'\n * y = new BigNumber(33)\n * y.modulo('a', 33)               // '3'\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "modulo(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "modulo"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#multipliedBy:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the value of this BigNumber multiplied by `n`.\n *\n * The return value is always exact and unrounded.\n * ```ts\n * 0.6 * 3                                // 1.7999999999999998\n * x = new BigNumber(0.6)\n * y = x.multipliedBy(3)                  // '1.8'\n * BigNumber('7e+500').multipliedBy(y)    // '1.26e+501'\n * x.multipliedBy('-a', 16)               // '-6'\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multipliedBy(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "multipliedBy"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#negated:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the value of this BigNumber negated, i.e. multiplied by -1.\n * ```ts\n * x = new BigNumber(1.8)\n * x.negated()                     // '-1.8'\n * y = new BigNumber(-1.3)\n * y.negated()                     // '1.3'\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "negated(): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "negated"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#plus:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the value of this BigNumber plus `n`.\n *\n * The return value is always exact and unrounded.\n * ```ts\n * 0.1 + 0.2                       // 0.30000000000000004\n * x = new BigNumber(0.1)\n * y = x.plus(0.2)                 // '0.3'\n * BigNumber(0.7).plus(x).plus(y)  // '1.1'\n * x.plus('0.1', 8)                // '0.225'\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "plus(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "plus"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#pow:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the value of this BigNumber exponentiated by `n`, i.e. raised to the power `n`, and optionally modulo a modulus `m`.\n *\n * If `n` is negative the result is rounded according to the current `DECIMAL_PLACES` and `ROUNDING_MODE` settings.\n *\n * As the number of digits of the result of the power operation can grow so large so quickly, e.g. 123.456**10000 has over 50000 digits, the number of significant digits calculated is limited to the value of the `POW_PRECISION` setting (unless a modulus `m` is specified).\n *\n * By default `POW_PRECISION` is set to 0. This means that an unlimited number of significant digits will be calculated, and that the method's performance will decrease dramatically for larger exponents.\n *\n * If `m` is specified and the value of `m`, `n` and this BigNumber are integers and `n` is positive, then a fast modular exponentiation algorithm is used, otherwise the operation will be performed as `x.pow(n).modulo(m)` with a `POW_PRECISION` of 0.\n *\n * Throws if `n` is not an integer.\n * ```ts\n * Math.pow(0.7, 2)                   // 0.48999999999999994\n * x = new BigNumber(0.7)\n * x.pow(2)                           // '0.49'\n * BigNumber(3).pow(-2)               // '0.11111111111111111111'\n * ```\n *\n * @param n - The exponent, an integer.\n *\n * @param m - The modulus.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pow(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", m?: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "m",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "pow"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#pow:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pow(n: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", m?: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "m",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "pow"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#precision:member(1)",
              "docComment": "/**\n * Returns the number of significant digits of the value of this BigNumber, or `null` if the value of this BigNumber is ±`Infinity` or `NaN`.\n *\n * If `includeZeros` is true then any trailing zeros of the integer part of the value of this BigNumber are counted as significant digits, otherwise they are not.\n *\n * Throws if `includeZeros` is invalid.\n * ```ts\n * x = new BigNumber(9876.54321)\n * x.precision()                         // 9\n * y = new BigNumber(987000)\n * y.precision(false)                    // 3\n * y.precision(true)                     // 6\n * ```\n *\n * @param includeZeros - Whether to include integer trailing zeros in the significant digit count.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "precision(includeZeros?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "includeZeros",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "precision"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#precision:member(2)",
              "docComment": "/**\n * Returns a BigNumber whose value is the value of this BigNumber rounded to a precision of `significantDigits` significant digits using rounding mode `roundingMode`.\n *\n * If `roundingMode` is omitted or is `null` or `undefined`, `ROUNDING_MODE` will be used.\n *\n * Throws if `significantDigits` or `roundingMode` is invalid.\n * ```ts\n * x = new BigNumber(9876.54321)\n * x.precision(6)                         // '9876.54'\n * x.precision(6, BigNumber.ROUND_UP)     // '9876.55'\n * x.precision(2)                         // '9900'\n * x.precision(2, 1)                      // '9800'\n * x                                      // '9876.54321'\n * ```\n *\n * @param significantDigits - Significant digits, integer, 1 to 1e+9.\n *\n * @param roundingMode - Rounding mode, integer, 0 to 8.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "precision(significantDigits: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roundingMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.RoundingMode",
                  "canonicalReference": "eth-connect!BigNumber.RoundingMode:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "significantDigits",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "roundingMode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "precision"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber.random:member(1)",
              "docComment": "/**\n * Returns a new BigNumber with a pseudo-random value equal to or greater than 0 and less than 1.\n *\n * The return value will have `decimalPlaces` decimal places, or less if trailing zeros are produced. If `decimalPlaces` is omitted, the current `DECIMAL_PLACES` setting will be used.\n *\n * Depending on the value of this BigNumber constructor's `CRYPTO` setting and the support for the `crypto` object in the host environment, the random digits of the return value are generated by either `Math.random` (fastest), `crypto.getRandomValues` (Web Cryptography API in recent browsers) or `crypto.randomBytes` (Node.js).\n *\n * To be able to set `CRYPTO` to true when using Node.js, the `crypto` object must be available globally:\n * ```ts\n * global.crypto = require('crypto')\n * ```\n *\n * If `CRYPTO` is true, i.e. one of the `crypto` methods is to be used, the value of a returned BigNumber should be cryptographically secure and statistically indistinguishable from a random value.\n *\n * Throws if `decimalPlaces` is invalid.\n * ```ts\n * BigNumber.config({ DECIMAL_PLACES: 10 })\n * BigNumber.random()              // '0.4117936847'\n * BigNumber.random(20)            // '0.78193327636914089009'\n * ```\n *\n * @param decimalPlaces - Decimal places, integer, 0 to 1e+9.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static random(decimalPlaces?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "decimalPlaces",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "random"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!BigNumber.ROUND_CEIL:member",
              "docComment": "/**\n * Rounds towards Infinity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly ROUND_CEIL: "
                },
                {
                  "kind": "Content",
                  "text": "2"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ROUND_CEIL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!BigNumber.ROUND_DOWN:member",
              "docComment": "/**\n * Rounds towards zero.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly ROUND_DOWN: "
                },
                {
                  "kind": "Content",
                  "text": "1"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ROUND_DOWN",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!BigNumber.ROUND_FLOOR:member",
              "docComment": "/**\n * Rounds towards -Infinity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly ROUND_FLOOR: "
                },
                {
                  "kind": "Content",
                  "text": "3"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ROUND_FLOOR",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!BigNumber.ROUND_HALF_CEIL:member",
              "docComment": "/**\n * Rounds towards nearest neighbour. If equidistant, rounds towards Infinity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly ROUND_HALF_CEIL: "
                },
                {
                  "kind": "Content",
                  "text": "7"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ROUND_HALF_CEIL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!BigNumber.ROUND_HALF_DOWN:member",
              "docComment": "/**\n * Rounds towards nearest neighbour. If equidistant, rounds towards zero.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly ROUND_HALF_DOWN: "
                },
                {
                  "kind": "Content",
                  "text": "5"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ROUND_HALF_DOWN",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!BigNumber.ROUND_HALF_EVEN:member",
              "docComment": "/**\n * Rounds towards nearest neighbour. If equidistant, rounds towards even neighbour.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly ROUND_HALF_EVEN: "
                },
                {
                  "kind": "Content",
                  "text": "6"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ROUND_HALF_EVEN",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!BigNumber.ROUND_HALF_FLOOR:member",
              "docComment": "/**\n * Rounds towards nearest neighbour. If equidistant, rounds towards -Infinity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly ROUND_HALF_FLOOR: "
                },
                {
                  "kind": "Content",
                  "text": "8"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ROUND_HALF_FLOOR",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!BigNumber.ROUND_HALF_UP:member",
              "docComment": "/**\n * Rounds towards nearest neighbour. If equidistant, rounds away from zero .\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly ROUND_HALF_UP: "
                },
                {
                  "kind": "Content",
                  "text": "4"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ROUND_HALF_UP",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!BigNumber.ROUND_UP:member",
              "docComment": "/**\n * Rounds away from zero.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly ROUND_UP: "
                },
                {
                  "kind": "Content",
                  "text": "0"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ROUND_UP",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!BigNumber#s:member",
              "docComment": "/**\n * The sign of the value of this BigNumber, -1, 1, or null.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly s: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "s",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#sd:member(1)",
              "docComment": "/**\n * Returns the number of significant digits of the value of this BigNumber, or `null` if the value of this BigNumber is ±`Infinity` or `NaN`.\n *\n * If `includeZeros` is true then any trailing zeros of the integer part of the value of this BigNumber are counted as significant digits, otherwise they are not.\n *\n * Throws if `includeZeros` is invalid.\n * ```ts\n * x = new BigNumber(9876.54321)\n * x.sd()                         // 9\n * y = new BigNumber(987000)\n * y.sd(false)                    // 3\n * y.sd(true)                     // 6\n * ```\n *\n * @param includeZeros - Whether to include integer trailing zeros in the significant digit count.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sd(includeZeros?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "includeZeros",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "sd"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#sd:member(2)",
              "docComment": "/**\n * Returns a BigNumber whose value is the value of this BigNumber rounded to a precision of `significantDigits` significant digits using rounding mode `roundingMode`.\n *\n * If `roundingMode` is omitted or is `null` or `undefined`, `ROUNDING_MODE` will be used.\n *\n * Throws if `significantDigits` or `roundingMode` is invalid.\n * ```ts\n * x = new BigNumber(9876.54321)\n * x.sd(6)                           // '9876.54'\n * x.sd(6, BigNumber.ROUND_UP)       // '9876.55'\n * x.sd(2)                           // '9900'\n * x.sd(2, 1)                        // '9800'\n * x                                 // '9876.54321'\n * ```\n *\n * @param significantDigits - Significant digits, integer, 1 to 1e+9.\n *\n * @param roundingMode - Rounding mode, integer, 0 to 8.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sd(significantDigits: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roundingMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.RoundingMode",
                  "canonicalReference": "eth-connect!BigNumber.RoundingMode:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "significantDigits",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "roundingMode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "sd"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber.set:member(1)",
              "docComment": "/**\n * Configures the settings that apply to this BigNumber constructor.\n *\n * The configuration object, `object`, contains any number of the properties shown in the example below.\n *\n * Returns an object with the above properties and their current values.\n *\n * Throws if `object` is not an object, or if an invalid value is assigned to one or more of the properties.\n * ```ts\n * BigNumber.set({\n *     DECIMAL_PLACES: 40,\n *     ROUNDING_MODE: BigNumber.ROUND_HALF_CEIL,\n *     EXPONENTIAL_AT: [-10, 20],\n *     RANGE: [-500, 500],\n *     CRYPTO: true,\n *     MODULO_MODE: BigNumber.ROUND_FLOOR,\n *     POW_PRECISION: 80,\n *     FORMAT: {\n *         groupSize: 3,\n *         groupSeparator: ' ',\n *         decimalSeparator: ','\n *     },\n *     ALPHABET: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n * });\n *\n * BigNumber.set().DECIMAL_PLACES        // 40\n * ```\n *\n * @param object - The configuration object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static set(object?: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Config",
                  "canonicalReference": "eth-connect!BigNumber.Config:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Config",
                  "canonicalReference": "eth-connect!BigNumber.Config:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "set"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#shiftedBy:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the value of this BigNumber shifted by `n` places.\n *\n * The shift is of the decimal point, i.e. of powers of ten, and is to the left if `n` is negative or to the right if `n` is positive.\n *\n * The return value is always exact and unrounded.\n *\n * Throws if `n` is invalid.\n * ```ts\n * x = new BigNumber(1.23)\n * x.shiftedBy(3)                      // '1230'\n * x.shiftedBy(-3)                     // '0.00123'\n * ```\n *\n * @param n - The shift value, integer, -9007199254740991 to 9007199254740991.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shiftedBy(n: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "shiftedBy"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#sqrt:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the square root of the value of this BigNumber, rounded according to the current `DECIMAL_PLACES` and `ROUNDING_MODE` settings.\n *\n * The return value will be correctly rounded, i.e. rounded as if the result was first calculated to an infinite number of correct digits before rounding.\n * ```ts\n * x = new BigNumber(16)\n * x.sqrt()                  // '4'\n * y = new BigNumber(3)\n * y.sqrt()                  // '1.73205080756887729353'\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sqrt(): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "sqrt"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#squareRoot:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the square root of the value of this BigNumber, rounded according to the current `DECIMAL_PLACES` and `ROUNDING_MODE` settings.\n *\n * The return value will be correctly rounded, i.e. rounded as if the result was first calculated to an infinite number of correct digits before rounding.\n * ```ts\n * x = new BigNumber(16)\n * x.squareRoot()                  // '4'\n * y = new BigNumber(3)\n * y.squareRoot()                  // '1.73205080756887729353'\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "squareRoot(): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "squareRoot"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber.sum:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the sum of the arguments.\n *\n * The return value is always exact and unrounded.\n * ```ts\n * x = new BigNumber('3257869345.0378653')\n * BigNumber.sum(4e9, x, '123456789.9')      // '7381326134.9378653'\n *\n * arr = [2, new BigNumber(14), '15.9999', 12]\n * BigNumber.sum.apply(null, arr)            // '43.9999'\n * ```\n *\n * @param n - A numeric value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static sum(...n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "sum"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#times:member(1)",
              "docComment": "/**\n * Returns a BigNumber whose value is the value of this BigNumber multiplied by `n`.\n *\n * The return value is always exact and unrounded.\n * ```ts\n * 0.6 * 3                         // 1.7999999999999998\n * x = new BigNumber(0.6)\n * y = x.times(3)                  // '1.8'\n * BigNumber('7e+500').times(y)    // '1.26e+501'\n * x.times('-a', 16)               // '-6'\n * ```\n *\n * @param n - A numeric value.\n *\n * @param base - The base of n.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "times(n: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": ", base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "times"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#toExponential:member(1)",
              "docComment": "/**\n * Returns a string representing the value of this BigNumber in exponential notation rounded using rounding mode `roundingMode` to `decimalPlaces` decimal places, i.e with one digit before the decimal point and `decimalPlaces` digits after it.\n *\n * If the value of this BigNumber in exponential notation has fewer than `decimalPlaces` fraction digits, the return value will be appended with zeros accordingly.\n *\n * If `decimalPlaces` is omitted, or is `null` or `undefined`, the number of digits after the decimal point defaults to the minimum number of digits necessary to represent the value exactly.\n *\n * If `roundingMode` is omitted or is `null` or `undefined`, `ROUNDING_MODE` is used.\n *\n * Throws if `decimalPlaces` or `roundingMode` is invalid.\n * ```ts\n * x = 45.6\n * y = new BigNumber(x)\n * x.toExponential()               // '4.56e+1'\n * y.toExponential()               // '4.56e+1'\n * x.toExponential(0)              // '5e+1'\n * y.toExponential(0)              // '5e+1'\n * x.toExponential(1)              // '4.6e+1'\n * y.toExponential(1)              // '4.6e+1'\n * y.toExponential(1, 1)           // '4.5e+1'  (ROUND_DOWN)\n * x.toExponential(3)              // '4.560e+1'\n * y.toExponential(3)              // '4.560e+1'\n * ```\n *\n * @param decimalPlaces - Decimal places, integer, 0 to 1e+9.\n *\n * @param roundingMode - Rounding mode, integer, 0 to 8.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toExponential(decimalPlaces: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roundingMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.RoundingMode",
                  "canonicalReference": "eth-connect!BigNumber.RoundingMode:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "decimalPlaces",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "roundingMode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "toExponential"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#toExponential:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toExponential(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toExponential"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#toFixed:member(1)",
              "docComment": "/**\n * Returns a string representing the value of this BigNumber in normal (fixed-point) notation rounded to `decimalPlaces` decimal places using rounding mode `roundingMode`.\n *\n * If the value of this BigNumber in normal notation has fewer than `decimalPlaces` fraction digits, the return value will be appended with zeros accordingly.\n *\n * Unlike `Number.prototype.toFixed`, which returns exponential notation if a number is greater or equal to 10**21, this method will always return normal notation.\n *\n * If `decimalPlaces` is omitted or is `null` or `undefined`, the return value will be unrounded and in normal notation. This is also unlike `Number.prototype.toFixed`, which returns the value to zero decimal places. It is useful when normal notation is required and the current `EXPONENTIAL_AT` setting causes `toString` to return exponential notation.\n *\n * If `roundingMode` is omitted or is `null` or `undefined`, `ROUNDING_MODE` is used.\n *\n * Throws if `decimalPlaces` or `roundingMode` is invalid.\n * ```ts\n * x = 3.456\n * y = new BigNumber(x)\n * x.toFixed()                     // '3'\n * y.toFixed()                     // '3.456'\n * y.toFixed(0)                    // '3'\n * x.toFixed(2)                    // '3.46'\n * y.toFixed(2)                    // '3.46'\n * y.toFixed(2, 1)                 // '3.45'  (ROUND_DOWN)\n * x.toFixed(5)                    // '3.45600'\n * y.toFixed(5)                    // '3.45600'\n * ```\n *\n * @param decimalPlaces - Decimal places, integer, 0 to 1e+9.\n *\n * @param roundingMode - Rounding mode, integer, 0 to 8.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toFixed(decimalPlaces: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roundingMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.RoundingMode",
                  "canonicalReference": "eth-connect!BigNumber.RoundingMode:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "decimalPlaces",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "roundingMode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "toFixed"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#toFixed:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toFixed(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toFixed"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#toFormat:member(1)",
              "docComment": "/**\n * Returns a string representing the value of this BigNumber in normal (fixed-point) notation rounded to `decimalPlaces` decimal places using rounding mode `roundingMode`, and formatted according to the properties of the `format` or `FORMAT` object.\n *\n * The formatting object may contain some or all of the properties shown in the examples below.\n *\n * If `decimalPlaces` is omitted or is `null` or `undefined`, then the return value is not rounded to a fixed number of decimal places.\n *\n * If `roundingMode` is omitted or is `null` or `undefined`, `ROUNDING_MODE` is used.\n *\n * If `format` is omitted or is `null` or `undefined`, `FORMAT` is used.\n *\n * Throws if `decimalPlaces`, `roundingMode`, or `format` is invalid.\n * ```ts\n * fmt = {\n *   decimalSeparator: '.',\n *   groupSeparator: ',',\n *   groupSize: 3,\n *   secondaryGroupSize: 0,\n *   fractionGroupSeparator: ' ',\n *   fractionGroupSize: 0\n * }\n *\n * x = new BigNumber('123456789.123456789')\n *\n * // Set the global formatting options\n * BigNumber.config({ FORMAT: fmt })\n *\n * x.toFormat()                              // '123,456,789.123456789'\n * x.toFormat(3)                             // '123,456,789.123'\n *\n * // If a reference to the object assigned to FORMAT has been retained,\n * // the format properties can be changed directly\n * fmt.groupSeparator = ' '\n * fmt.fractionGroupSize = 5\n * x.toFormat()                              // '123 456 789.12345 6789'\n *\n * // Alternatively, pass the formatting options as an argument\n * fmt = {\n *   decimalSeparator: ',',\n *   groupSeparator: '.',\n *   groupSize: 3,\n *   secondaryGroupSize: 2\n * }\n *\n * x.toFormat()                              // '123 456 789.12345 6789'\n * x.toFormat(fmt)                           // '12.34.56.789,123456789'\n * x.toFormat(2, fmt)                        // '12.34.56.789,12'\n * x.toFormat(3, BigNumber.ROUND_UP, fmt)    // '12.34.56.789,124'\n * ```\n *\n * @param decimalPlaces - Decimal places, integer, 0 to 1e+9.\n *\n * @param roundingMode - Rounding mode, integer, 0 to 8.\n *\n * @param format - Formatting options object. See `BigNumber.Format`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toFormat(decimalPlaces: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roundingMode: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.RoundingMode",
                  "canonicalReference": "eth-connect!BigNumber.RoundingMode:type"
                },
                {
                  "kind": "Content",
                  "text": ", format?: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Format",
                  "canonicalReference": "eth-connect!BigNumber.Format:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "decimalPlaces",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "roundingMode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "format",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "toFormat"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#toFormat:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toFormat(decimalPlaces: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roundingMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.RoundingMode",
                  "canonicalReference": "eth-connect!BigNumber.RoundingMode:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "decimalPlaces",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "roundingMode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "toFormat"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#toFormat:member(3)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toFormat(decimalPlaces?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "decimalPlaces",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "toFormat"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#toFormat:member(4)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toFormat(decimalPlaces: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", format: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Format",
                  "canonicalReference": "eth-connect!BigNumber.Format:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 4,
              "parameters": [
                {
                  "parameterName": "decimalPlaces",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "format",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "toFormat"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#toFormat:member(5)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toFormat(format: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Format",
                  "canonicalReference": "eth-connect!BigNumber.Format:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 5,
              "parameters": [
                {
                  "parameterName": "format",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "toFormat"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#toFraction:member(1)",
              "docComment": "/**\n * Returns an array of two BigNumbers representing the value of this BigNumber as a simple fraction with an integer numerator and an integer denominator. The denominator will be a positive non-zero value less than or equal to `max_denominator`. If a maximum denominator, `max_denominator`, is not specified, or is `null` or `undefined`, the denominator will be the lowest value necessary to represent the number exactly.\n *\n * Throws if `max_denominator` is invalid.\n * ```ts\n * x = new BigNumber(1.75)\n * x.toFraction()                  // '7, 4'\n *\n * pi = new BigNumber('3.14159265358')\n * pi.toFraction()                 // '157079632679,50000000000'\n * pi.toFraction(100000)           // '312689, 99532'\n * pi.toFraction(10000)            // '355, 113'\n * pi.toFraction(100)              // '311, 99'\n * pi.toFraction(10)               // '22, 7'\n * pi.toFraction(1)                // '3, 1'\n * ```\n *\n * @param max_denominator - The maximum denominator, integer > 0, or Infinity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toFraction(max_denominator?: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.Value",
                  "canonicalReference": "eth-connect!BigNumber.Value:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": "]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "max_denominator",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "toFraction"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#toJSON:member(1)",
              "docComment": "/**\n * As `valueOf`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#toNumber:member(1)",
              "docComment": "/**\n * Returns the value of this BigNumber as a JavaScript primitive number.\n *\n * Using the unary plus operator gives the same result.\n * ```ts\n * x = new BigNumber(456.789)\n * x.toNumber()                    // 456.789\n * +x                              // 456.789\n *\n * y = new BigNumber('45987349857634085409857349856430985')\n * y.toNumber()                    // 4.598734985763409e+34\n *\n * z = new BigNumber(-0)\n * 1 / z.toNumber()                // -Infinity\n * 1 / +z                          // -Infinity\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toNumber(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toNumber"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#toPrecision:member(1)",
              "docComment": "/**\n * Returns a string representing the value of this BigNumber rounded to `significantDigits` significant digits using rounding mode `roundingMode`.\n *\n * If `significantDigits` is less than the number of digits necessary to represent the integer part of the value in normal (fixed-point) notation, then exponential notation is used.\n *\n * If `significantDigits` is omitted, or is `null` or `undefined`, then the return value is the same as `n.toString()`.\n *\n * If `roundingMode` is omitted or is `null` or `undefined`, `ROUNDING_MODE` is used.\n *\n * Throws if `significantDigits` or `roundingMode` is invalid.\n * ```ts\n * x = 45.6\n * y = new BigNumber(x)\n * x.toPrecision()                 // '45.6'\n * y.toPrecision()                 // '45.6'\n * x.toPrecision(1)                // '5e+1'\n * y.toPrecision(1)                // '5e+1'\n * y.toPrecision(2, 0)             // '4.6e+1'  (ROUND_UP)\n * y.toPrecision(2, 1)             // '4.5e+1'  (ROUND_DOWN)\n * x.toPrecision(5)                // '45.600'\n * y.toPrecision(5)                // '45.600'\n * ```\n *\n * @param significantDigits - Significant digits, integer, 1 to 1e+9.\n *\n * @param roundingMode - Rounding mode, integer 0 to 8.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toPrecision(significantDigits: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roundingMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber.RoundingMode",
                  "canonicalReference": "eth-connect!BigNumber.RoundingMode:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "significantDigits",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "roundingMode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "toPrecision"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#toPrecision:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toPrecision(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toPrecision"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#toString:member(1)",
              "docComment": "/**\n * Returns a string representing the value of this BigNumber in base `base`, or base 10 if `base` is omitted or is `null` or `undefined`.\n *\n * For bases above 10, and using the default base conversion alphabet (see `ALPHABET`), values from 10 to 35 are represented by a-z (the same as `Number.prototype.toString`).\n *\n * If a base is specified the value is rounded according to the current `DECIMAL_PLACES` and `ROUNDING_MODE` settings, otherwise it is not.\n *\n * If a base is not specified, and this BigNumber has a positive exponent that is equal to or greater than the positive component of the current `EXPONENTIAL_AT` setting, or a negative exponent equal to or less than the negative component of the setting, then exponential notation is returned.\n *\n * If `base` is `null` or `undefined` it is ignored.\n *\n * Throws if `base` is invalid.\n * ```ts\n * x = new BigNumber(750000)\n * x.toString()                    // '750000'\n * BigNumber.config({ EXPONENTIAL_AT: 5 })\n * x.toString()                    // '7.5e+5'\n *\n * y = new BigNumber(362.875)\n * y.toString(2)                   // '101101010.111'\n * y.toString(9)                   // '442.77777777777777777778'\n * y.toString(32)                  // 'ba.s'\n *\n * BigNumber.config({ DECIMAL_PLACES: 4 });\n * z = new BigNumber('1.23456789')\n * z.toString()                    // '1.23456789'\n * z.toString(10)                  // '1.2346'\n * ```\n *\n * @param base - The base, integer, 2 to 36 (or `ALPHABET.length`, see `ALPHABET`).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString(base?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "toString"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!BigNumber#valueOf:member(1)",
              "docComment": "/**\n * As `toString`, but does not accept a base argument and includes the minus sign for negative zero.\n *\n * ``ts x = new BigNumber('-0') x.toString() // '0' x.valueOf() // '-0' y = new BigNumber('1.777e+457') y.valueOf() // '1.777e+457' ```\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "valueOf(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "valueOf"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!BigNumber:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export function BigNumber(n: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": ", base?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "eth-connect!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../node_modules/bignumber.js/bignumber.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "n",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "base",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "BigNumber"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "eth-connect!BigNumber:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export namespace BigNumber "
            }
          ],
          "fileUrlPath": "../node_modules/bignumber.js/bignumber.d.ts",
          "releaseTag": "Public",
          "name": "BigNumber",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Interface",
              "canonicalReference": "eth-connect!BigNumber.Config:interface",
              "docComment": "/**\n * See `BigNumber.config` (alias `BigNumber.set`) and `BigNumber.clone`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface Config "
                }
              ],
              "releaseTag": "Public",
              "name": "Config",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Config#ALPHABET:member",
                  "docComment": "/**\n * The alphabet used for base conversion. The length of the alphabet corresponds to the maximum value of the base argument that can be passed to the BigNumber constructor or `toString`.\n *\n * Default value: `'0123456789abcdefghijklmnopqrstuvwxyz'`.\n *\n * There is no maximum length for the alphabet, but it must be at least 2 characters long, and it must not contain whitespace or a repeated character, or the sign indicators '+' and '-', or the decimal separator '.'.\n * ```ts\n * // duodecimal (base 12)\n * BigNumber.config({ ALPHABET: '0123456789TE' })\n * x = new BigNumber('T', 12)\n * x.toString()                // '10'\n * x.toString(12)              // 'T'\n * ```\n *\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "ALPHABET?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "ALPHABET",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Config#CRYPTO:member",
                  "docComment": "/**\n * A boolean: `true` or `false`. Default value: `false`.\n *\n * The value that determines whether cryptographically-secure pseudo-random number generation is used. If `CRYPTO` is set to true then the random method will generate random digits using `crypto.getRandomValues` in browsers that support it, or `crypto.randomBytes` if using a version of Node.js that supports it.\n *\n * If neither function is supported by the host environment then attempting to set `CRYPTO` to `true` will fail and an exception will be thrown.\n *\n * If `CRYPTO` is `false` then the source of randomness used will be `Math.random` (which is assumed to generate at least 30 bits of randomness).\n *\n * See `BigNumber.random`.\n * ```ts\n * // Node.js\n * global.crypto = require('crypto')\n *\n * BigNumber.config({ CRYPTO: true })\n * BigNumber.config().CRYPTO       // true\n * BigNumber.random()              // 0.54340758610486147524\n * ```\n *\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "CRYPTO?: "
                    },
                    {
                      "kind": "Content",
                      "text": "boolean"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "CRYPTO",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Config#DECIMAL_PLACES:member",
                  "docComment": "/**\n * An integer, 0 to 1e+9. Default value: 20.\n *\n * The maximum number of decimal places of the result of operations involving division, i.e. division, square root and base conversion operations, and exponentiation when the exponent is negative.\n * ```ts\n * BigNumber.config({ DECIMAL_PLACES: 5 })\n * BigNumber.set({ DECIMAL_PLACES: 5 })\n * ```\n *\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "DECIMAL_PLACES?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "DECIMAL_PLACES",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Config#EXPONENTIAL_AT:member",
                  "docComment": "/**\n * An integer, 0 to 1e+9, or an array, [-1e+9 to 0, 0 to 1e+9]. Default value: `[-7, 20]`.\n *\n * The exponent value(s) at which `toString` returns exponential notation.\n *\n * If a single number is assigned, the value is the exponent magnitude.\n *\n * If an array of two numbers is assigned then the first number is the negative exponent value at and beneath which exponential notation is used, and the second number is the positive exponent value at and above which exponential notation is used.\n *\n * For example, to emulate JavaScript numbers in terms of the exponent values at which they begin to use exponential notation, use `[-7, 20]`.\n * ```ts\n * BigNumber.config({ EXPONENTIAL_AT: 2 })\n * new BigNumber(12.3)         // '12.3'        e is only 1\n * new BigNumber(123)          // '1.23e+2'\n * new BigNumber(0.123)        // '0.123'       e is only -1\n * new BigNumber(0.0123)       // '1.23e-2'\n *\n * BigNumber.config({ EXPONENTIAL_AT: [-7, 20] })\n * new BigNumber(123456789)    // '123456789'   e is only 8\n * new BigNumber(0.000000123)  // '1.23e-7'\n *\n * // Almost never return exponential notation:\n * BigNumber.config({ EXPONENTIAL_AT: 1e+9 })\n *\n * // Always return exponential notation:\n * BigNumber.config({ EXPONENTIAL_AT: 0 })\n * ```\n *\n * Regardless of the value of `EXPONENTIAL_AT`, the `toFixed` method will always return a value in normal notation and the `toExponential` method will always return a value in exponential form. Calling `toString` with a base argument, e.g. `toString(10)`, will also always return normal notation.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "EXPONENTIAL_AT?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | [number, number]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "EXPONENTIAL_AT",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Config#FORMAT:member",
                  "docComment": "/**\n * An object including any number of the properties shown below.\n *\n * The object configures the format of the string returned by the `toFormat` method. The example below shows the properties of the object that are recognised, and their default values.\n *\n * Unlike the other configuration properties, the values of the properties of the `FORMAT` object will not be checked for validity - the existing object will simply be replaced by the object that is passed in.\n *\n * See `toFormat`.\n * ```ts\n * BigNumber.config({\n *   FORMAT: {\n *     // string to prepend\n *     prefix: '',\n *     // the decimal separator\n *     decimalSeparator: '.',\n *     // the grouping separator of the integer part\n *     groupSeparator: ',',\n *     // the primary grouping size of the integer part\n *     groupSize: 3,\n *     // the secondary grouping size of the integer part\n *     secondaryGroupSize: 0,\n *     // the grouping separator of the fraction part\n *     fractionGroupSeparator: ' ',\n *     // the grouping size of the fraction part\n *     fractionGroupSize: 0,\n *     // string to append\n *     suffix: ''\n *   }\n * })\n * ```\n *\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "FORMAT?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "BigNumber.Format",
                      "canonicalReference": "eth-connect!BigNumber.Format:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "FORMAT",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Config#MODULO_MODE:member",
                  "docComment": "/**\n * An integer, 0, 1, 3, 6 or 9. Default value: `BigNumber.ROUND_DOWN` (1).\n *\n * The modulo mode used when calculating the modulus: `a mod n`. The quotient, `q = a / n`, is calculated according to the `ROUNDING_MODE` that corresponds to the chosen `MODULO_MODE`. The remainder, `r`, is calculated as: `r = a - n * q`.\n *\n * The modes that are most commonly used for the modulus/remainder operation are shown in the following table. Although the other rounding modes can be used, they may not give useful results.\n *\n * Property | Value | Description :------------------|:------|:------------------------------------------------------------------ `ROUND_UP` | 0 | The remainder is positive if the dividend is negative. `ROUND_DOWN` | 1 | The remainder has the same sign as the dividend. | | Uses 'truncating division' and matches JavaScript's `%` operator . `ROUND_FLOOR` | 3 | The remainder has the same sign as the divisor. | | This matches Python's `%` operator. `ROUND_HALF_EVEN` | 6 | The IEEE 754 remainder function. `EUCLID` | 9 | The remainder is always positive. | | Euclidian division: `q = sign(n) * floor(a / abs(n))`\n *\n * The rounding/modulo modes are available as enumerated properties of the BigNumber constructor.\n *\n * See `modulo`.\n * ```ts\n * BigNumber.config({ MODULO_MODE: BigNumber.EUCLID })\n * BigNumber.set({ MODULO_MODE: 9 })          // equivalent\n * ```\n *\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "MODULO_MODE?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "BigNumber.ModuloMode",
                      "canonicalReference": "eth-connect!BigNumber.ModuloMode:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "MODULO_MODE",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Config#POW_PRECISION:member",
                  "docComment": "/**\n * An integer, 0 to 1e+9. Default value: 0.\n *\n * The maximum precision, i.e. number of significant digits, of the result of the power operation - unless a modulus is specified.\n *\n * If set to 0, the number of significant digits will not be limited.\n *\n * See `exponentiatedBy`.\n * ```ts\n * BigNumber.config({ POW_PRECISION: 100 })\n * ```\n *\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "POW_PRECISION?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "POW_PRECISION",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Config#RANGE:member",
                  "docComment": "/**\n * An integer, magnitude 1 to 1e+9, or an array, [-1e+9 to -1, 1 to 1e+9]. Default value: `[-1e+9, 1e+9]`.\n *\n * The exponent value(s) beyond which overflow to Infinity and underflow to zero occurs.\n *\n * If a single number is assigned, it is the maximum exponent magnitude: values wth a positive exponent of greater magnitude become Infinity and those with a negative exponent of greater magnitude become zero.\n *\n * If an array of two numbers is assigned then the first number is the negative exponent limit and the second number is the positive exponent limit.\n *\n * For example, to emulate JavaScript numbers in terms of the exponent values at which they become zero and Infinity, use [-324, 308].\n * ```ts\n * BigNumber.config({ RANGE: 500 })\n * BigNumber.config().RANGE     // [ -500, 500 ]\n * new BigNumber('9.999e499')   // '9.999e+499'\n * new BigNumber('1e500')       // 'Infinity'\n * new BigNumber('1e-499')      // '1e-499'\n * new BigNumber('1e-500')      // '0'\n *\n * BigNumber.config({ RANGE: [-3, 4] })\n * new BigNumber(99999)         // '99999'      e is only 4\n * new BigNumber(100000)        // 'Infinity'   e is 5\n * new BigNumber(0.001)         // '0.01'       e is only -3\n * new BigNumber(0.0001)        // '0'          e is -4\n * ```\n *\n * The largest possible magnitude of a finite BigNumber is 9.999...e+1000000000. The smallest possible magnitude of a non-zero BigNumber is 1e-1000000000.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "RANGE?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | [number, number]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "RANGE",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Config#ROUNDING_MODE:member",
                  "docComment": "/**\n * An integer, 0 to 8. Default value: `BigNumber.ROUND_HALF_UP` (4).\n *\n * The rounding mode used in operations that involve division (see `DECIMAL_PLACES`) and the default rounding mode of the `decimalPlaces`, `precision`, `toExponential`, `toFixed`, `toFormat` and `toPrecision` methods.\n *\n * The modes are available as enumerated properties of the BigNumber constructor.\n * ```ts\n * BigNumber.config({ ROUNDING_MODE: 0 })\n * BigNumber.set({ ROUNDING_MODE: BigNumber.ROUND_UP })\n * ```\n *\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "ROUNDING_MODE?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "BigNumber.RoundingMode",
                      "canonicalReference": "eth-connect!BigNumber.RoundingMode:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "ROUNDING_MODE",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "eth-connect!BigNumber.Constructor:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Constructor = "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Constructor",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Interface",
              "canonicalReference": "eth-connect!BigNumber.Format:interface",
              "docComment": "/**\n * See `FORMAT` and `toFormat`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface Format "
                }
              ],
              "releaseTag": "Public",
              "name": "Format",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Format#decimalSeparator:member",
                  "docComment": "/**\n * The decimal separator.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "decimalSeparator?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "decimalSeparator",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Format#fractionGroupSeparator:member",
                  "docComment": "/**\n * The grouping separator of the fraction part.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "fractionGroupSeparator?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "fractionGroupSeparator",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Format#fractionGroupSize:member",
                  "docComment": "/**\n * The grouping size of the fraction part.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "fractionGroupSize?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "fractionGroupSize",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Format#groupSeparator:member",
                  "docComment": "/**\n * The grouping separator of the integer part.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "groupSeparator?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "groupSeparator",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Format#groupSize:member",
                  "docComment": "/**\n * The primary grouping size of the integer part.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "groupSize?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "groupSize",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Format#prefix:member",
                  "docComment": "/**\n * The string to prepend.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "prefix?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "prefix",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Format#secondaryGroupSize:member",
                  "docComment": "/**\n * The secondary grouping size of the integer part.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "secondaryGroupSize?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "secondaryGroupSize",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Format#suffix:member",
                  "docComment": "/**\n * The string to append.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "suffix?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "suffix",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Interface",
              "canonicalReference": "eth-connect!BigNumber.Instance:interface",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface Instance "
                }
              ],
              "releaseTag": "Public",
              "name": "Instance",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "IndexSignature",
                  "canonicalReference": "eth-connect!BigNumber.Instance:index(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "[key: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": "]: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "key",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Instance#c:member",
                  "docComment": "/**\n * The coefficient of the value of this BigNumber, an array of base 1e14 integer numbers, or null.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly c: "
                    },
                    {
                      "kind": "Content",
                      "text": "number[] | null"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "c",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Instance#e:member",
                  "docComment": "/**\n * The exponent of the value of this BigNumber, an integer number, -1000000000 to 1000000000, or null.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly e: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | null"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "e",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "eth-connect!BigNumber.Instance#s:member",
                  "docComment": "/**\n * The sign of the value of this BigNumber, -1, 1, or null.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly s: "
                    },
                    {
                      "kind": "Content",
                      "text": "number | null"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "s",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "eth-connect!BigNumber.ModuloMode:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type ModuloMode = "
                },
                {
                  "kind": "Content",
                  "text": "0 | 1 | 3 | 6 | 9"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ModuloMode",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "eth-connect!BigNumber.RoundingMode:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type RoundingMode = "
                },
                {
                  "kind": "Content",
                  "text": "0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "RoundingMode",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "eth-connect!BigNumber.Value:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Value = "
                },
                {
                  "kind": "Content",
                  "text": "string | number | "
                },
                {
                  "kind": "Reference",
                  "text": "Instance",
                  "canonicalReference": "eth-connect!BigNumber.Instance:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Value",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!BlockIdentifier:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type BlockIdentifier = "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Tag",
              "canonicalReference": "eth-connect!Tag:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "BlockIdentifier",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!BlockObject:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type BlockObject = "
            },
            {
              "kind": "Content",
              "text": "{\n    number: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    hash: "
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ";\n    parentHash: "
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ";\n    nonce: "
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ";\n    sha3Uncles: "
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ";\n    logsBloom: "
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ";\n    transactionsRoot: "
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ";\n    stateRoot: "
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ";\n    receiptsRoot: "
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ";\n    miner: "
            },
            {
              "kind": "Reference",
              "text": "Address",
              "canonicalReference": "eth-connect!Address:type"
            },
            {
              "kind": "Content",
              "text": ";\n    difficulty: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "eth-connect!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ";\n    totalDifficulty: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "eth-connect!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ";\n    extraData: "
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ";\n    size: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    gasLimit: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    gasUsed: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    timestamp: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    transactions: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TransactionObject",
              "canonicalReference": "eth-connect!TransactionObject:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    uncles: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "BlockObject",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 48
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!bytesToHex:function(1)",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function bytesToHex(bytes: "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bytes",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "bytesToHex"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!bytesToUtf8String:function(1)",
          "docComment": "/**\n * Decodes an Uint8Array or hex string into a UTF-8 string\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function bytesToUtf8String(bytesOrHexString: "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": " | string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utf8.ts",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bytesOrHexString",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "bytesToUtf8String"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!Callback:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Callback = "
            },
            {
              "kind": "Content",
              "text": "(err: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " | null, message?: any) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/providers/common.ts",
          "releaseTag": "Public",
          "name": "Callback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "eth-connect!coder:namespace",
          "docComment": "/**\n * SolidityCoder prototype should be used to encode/decode solidity params of any type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace coder "
            }
          ],
          "fileUrlPath": "../src/solidity/coder.ts",
          "releaseTag": "Public",
          "name": "coder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "eth-connect!coder.decodeParams:function(1)",
              "docComment": "/**\n * Should be used to decode list of params\n *\n * @method decodeParam\n *\n * @param types - \n *\n * @param bytes -  @return {Array} array of plain params\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function decodeParams(outputs: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyArray",
                  "canonicalReference": "!ReadonlyArray:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "AbiOutput",
                  "canonicalReference": "eth-connect!AbiOutput:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string>>"
                },
                {
                  "kind": "Content",
                  "text": ", bytes: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "outputs",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "bytes",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  },
                  "isOptional": false
                }
              ],
              "name": "decodeParams"
            },
            {
              "kind": "Function",
              "canonicalReference": "eth-connect!coder.encodeParams:function(1)",
              "docComment": "/**\n * Should be used to encode list of params\n *\n * @method encodeParams\n *\n * @param types - \n *\n * @param params -  @return {string} encoded list of params\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function encodeParams(types: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyArray",
                  "canonicalReference": "!ReadonlyArray:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "AbiOutput",
                  "canonicalReference": "eth-connect!AbiOutput:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string>>"
                },
                {
                  "kind": "Content",
                  "text": ", params: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "types",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  },
                  "isOptional": false
                }
              ],
              "name": "encodeParams"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!concatBytes:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function concatBytes(...buffers: "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "buffers",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "concatBytes"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!ConfirmedTransaction:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ConfirmedTransaction = "
            },
            {
              "kind": "Reference",
              "text": "TransactionObject",
              "canonicalReference": "eth-connect!TransactionObject:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    type: "
            },
            {
              "kind": "Reference",
              "text": "TransactionType.confirmed",
              "canonicalReference": "eth-connect!TransactionType.confirmed:member"
            },
            {
              "kind": "Content",
              "text": ";\n    receipt: "
            },
            {
              "kind": "Reference",
              "text": "TransactionReceipt",
              "canonicalReference": "eth-connect!TransactionReceipt:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "ConfirmedTransaction",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "eth-connect!Contract:class",
          "docComment": "/**\n * Should be called to create new contract instance\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Contract "
            }
          ],
          "fileUrlPath": "../src/Contract.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "Contract",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "eth-connect!Contract:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Contract` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "eth-connect!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ", abi: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiItem",
                  "canonicalReference": "eth-connect!AbiItem:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "requestManager",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "abi",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!Contract#abi:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abi: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiItem",
                  "canonicalReference": "eth-connect!AbiItem:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "abi",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!Contract#address:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "address",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!Contract#allEvents:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allEvents: "
                },
                {
                  "kind": "Content",
                  "text": "(options: "
                },
                {
                  "kind": "Reference",
                  "text": "FilterOptions",
                  "canonicalReference": "eth-connect!FilterOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "EthFilter",
                  "canonicalReference": "eth-connect!EthFilter:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "allEvents",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!Contract#events:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "events: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "EventFilterCreator",
                  "canonicalReference": "eth-connect!EventFilterCreator:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "events",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!Contract#requestManager:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "eth-connect!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestManager",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!Contract#transactionHash:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transactionHash: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "transactionHash",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "eth-connect!ContractFactory:class",
          "docComment": "/**\n * Should be called to create new ContractFactory instance\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ContractFactory "
            }
          ],
          "fileUrlPath": "../src/ContractFactory.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ContractFactory",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "eth-connect!ContractFactory:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ContractFactory` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "eth-connect!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ", abi: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "requestManager",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "abi",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!ContractFactory#abi:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abi: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "abi",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!ContractFactory#at:member(1)",
              "docComment": "/**\n * Should be called to get access to existing contract on a blockchain\n *\n * @param address - The contract address\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "at(address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Contract",
                  "canonicalReference": "eth-connect!Contract:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "at"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!ContractFactory#deploy:member(1)",
              "docComment": "/**\n * Should be called to create new contract on a blockchain\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deploy(param1: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", param2: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionOptions",
                  "canonicalReference": "eth-connect!TransactionOptions:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Contract",
                  "canonicalReference": "eth-connect!Contract:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "param1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "param2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deploy"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!ContractFactory#deploy:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deploy(param1: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionOptions",
                  "canonicalReference": "eth-connect!TransactionOptions:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Contract",
                  "canonicalReference": "eth-connect!Contract:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "param1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deploy"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!ContractFactory#deploy:member(3)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deploy(options: "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionOptions",
                  "canonicalReference": "eth-connect!TransactionOptions:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Contract",
                  "canonicalReference": "eth-connect!Contract:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deploy"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!ContractFactory#requestManager:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "eth-connect!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestManager",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!Data:type",
          "docComment": "/**\n * Hex string\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Data = "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "Data",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!DroppedTransaction:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type DroppedTransaction = "
            },
            {
              "kind": "Content",
              "text": "{\n    type: "
            },
            {
              "kind": "Reference",
              "text": "TransactionType.dropped",
              "canonicalReference": "eth-connect!TransactionType.dropped:member"
            },
            {
              "kind": "Content",
              "text": ";\n    hash: string;\n    nonce: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "DroppedTransaction",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "eth-connect!eth:namespace",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace eth "
            }
          ],
          "fileUrlPath": "../src/methods/eth.ts",
          "releaseTag": "Public",
          "name": "eth",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_accounts:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_accounts: "
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "eth-connect!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "<any[]>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_accounts",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_blockNumber:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_blockNumber: "
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "eth-connect!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_blockNumber",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_call:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_call: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_call",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_coinbase:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_coinbase: "
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "eth-connect!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_coinbase",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_estimateGas:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_estimateGas: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_estimateGas",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_gasPrice:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_gasPrice: "
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "eth-connect!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_gasPrice",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getBalance:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getBalance: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getBalance",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getBlockByHash:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getBlockByHash: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BlockObject",
                  "canonicalReference": "eth-connect!BlockObject:type"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getBlockByHash",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getBlockByNumber:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getBlockByNumber: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BlockObject",
                  "canonicalReference": "eth-connect!BlockObject:type"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getBlockByNumber",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getBlockTransactionCountByHash:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getBlockTransactionCountByHash: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getBlockTransactionCountByHash",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getBlockTransactionCountByNumber:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getBlockTransactionCountByNumber: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getBlockTransactionCountByNumber",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getCode:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getCode: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getCode",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getFilterChanges:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getFilterChanges: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<any[]>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getFilterChanges",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getFilterLogs:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getFilterLogs: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<any[]>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getFilterLogs",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getLogs:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getLogs: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<any[]>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getLogs",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getStorageAt:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getStorageAt: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getStorageAt",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getTransactionByBlockHashAndIndex:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getTransactionByBlockHashAndIndex: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TransactionObject",
                  "canonicalReference": "eth-connect!TransactionObject:type"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getTransactionByBlockHashAndIndex",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getTransactionByBlockNumberAndIndex:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getTransactionByBlockNumberAndIndex: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TransactionObject",
                  "canonicalReference": "eth-connect!TransactionObject:type"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getTransactionByBlockNumberAndIndex",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getTransactionByHash:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getTransactionByHash: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TransactionObject",
                  "canonicalReference": "eth-connect!TransactionObject:type"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getTransactionByHash",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getTransactionCount:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getTransactionCount: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getTransactionCount",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getTransactionReceipt:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getTransactionReceipt: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TransactionReceipt",
                  "canonicalReference": "eth-connect!TransactionReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getTransactionReceipt",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getUncleByBlockHashAndIndex:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getUncleByBlockHashAndIndex: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BlockObject",
                  "canonicalReference": "eth-connect!BlockObject:type"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getUncleByBlockHashAndIndex",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getUncleByBlockNumberAndIndex:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getUncleByBlockNumberAndIndex: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BlockObject",
                  "canonicalReference": "eth-connect!BlockObject:type"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getUncleByBlockNumberAndIndex",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getUncleCountByBlockHash:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getUncleCountByBlockHash: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getUncleCountByBlockHash",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getUncleCountByBlockNumber:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getUncleCountByBlockNumber: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getUncleCountByBlockNumber",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_getWork:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getWork: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<any[]>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_getWork",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_hashrate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_hashrate: "
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "eth-connect!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_hashrate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_mining:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_mining: "
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "eth-connect!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_mining",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_newBlockFilter:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_newBlockFilter: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_newBlockFilter",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_newFilter:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_newFilter: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_newFilter",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_newPendingTransactionFilter:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_newPendingTransactionFilter: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_newPendingTransactionFilter",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_protocolVersion:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_protocolVersion: "
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "eth-connect!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_protocolVersion",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_sendRawTransaction:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_sendRawTransaction: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_sendRawTransaction",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_sendTransaction:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_sendTransaction: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_sendTransaction",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_sign:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_sign: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_sign",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_submitHashrate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_submitHashrate: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_submitHashrate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_submitWork:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_submitWork: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_submitWork",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_syncing:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_syncing: "
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "eth-connect!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Syncing",
                  "canonicalReference": "eth-connect!Syncing:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_syncing",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.eth_uninstallFilter:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_uninstallFilter: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "eth_uninstallFilter",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.net_listening:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "net_listening: "
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "eth-connect!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "net_listening",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.net_peerCount:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "net_peerCount: "
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "eth-connect!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "net_peerCount",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.net_version:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "net_version: "
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "eth-connect!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "net_version",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.personal_ecRecover:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personal_ecRecover: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "personal_ecRecover",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.personal_importRawKey:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personal_importRawKey: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "personal_importRawKey",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.personal_listAccounts:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personal_listAccounts: "
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "eth-connect!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "<any[]>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "personal_listAccounts",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.personal_lockAccount:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personal_lockAccount: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "personal_lockAccount",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.personal_newAccount:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personal_newAccount: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "personal_newAccount",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.personal_sendTransaction:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personal_sendTransaction: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "personal_sendTransaction",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.personal_sign:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personal_sign: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "personal_sign",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.personal_unlockAccount:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personal_unlockAccount: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "personal_unlockAccount",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.shh_addToGroup:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_addToGroup: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "shh_addToGroup",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.shh_getFilterChanges:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_getFilterChanges: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<any[]>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "shh_getFilterChanges",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.shh_getFilterMessages:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_getFilterMessages: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<any[]>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "shh_getFilterMessages",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.shh_getLogs:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_getLogs: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<any[]>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "shh_getLogs",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.shh_getMessages:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_getMessages: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<any[]>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "shh_getMessages",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.shh_hasIdentity:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_hasIdentity: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "shh_hasIdentity",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.shh_newFilter:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_newFilter: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "shh_newFilter",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.shh_newGroup:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_newGroup: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "shh_newGroup",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.shh_newIdentity:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_newIdentity: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "shh_newIdentity",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.shh_post:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_post: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "shh_post",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.shh_uninstallFilter:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_uninstallFilter: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "shh_uninstallFilter",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.shh_version:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_version: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "shh_version",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.web3_clientVersion:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "web3_clientVersion: "
                },
                {
                  "kind": "Reference",
                  "text": "Property",
                  "canonicalReference": "eth-connect!Property:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "web3_clientVersion",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "eth-connect!eth.web3_sha3:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "web3_sha3: "
                },
                {
                  "kind": "Reference",
                  "text": "Method",
                  "canonicalReference": "eth-connect!Method:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "web3_sha3",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "eth-connect!EthBlockFilter:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class EthBlockFilter extends "
            },
            {
              "kind": "Reference",
              "text": "EthFilter",
              "canonicalReference": "eth-connect!EthFilter:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "../src/Filter.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "EthBlockFilter",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "eth-connect!EthBlockFilter:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `EthBlockFilter` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "eth-connect!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "requestManager",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!EthBlockFilter#getNewFilter:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getNewFilter(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getNewFilter"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "eth-connect!EthFilter:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class EthFilter<TransformedLog = "
            },
            {
              "kind": "Reference",
              "text": "LogObject",
              "canonicalReference": "eth-connect!LogObject:type"
            },
            {
              "kind": "Content",
              "text": ", ReceivedLog = "
            },
            {
              "kind": "Reference",
              "text": "LogObject",
              "canonicalReference": "eth-connect!LogObject:type"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "AbstractFilter",
              "canonicalReference": "eth-connect!AbstractFilter:class"
            },
            {
              "kind": "Content",
              "text": "<ReceivedLog, TransformedLog>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "../src/Filter.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TransformedLog",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "typeParameterName": "ReceivedLog",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "isAbstract": false,
          "name": "EthFilter",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "eth-connect!EthFilter:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `EthFilter` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "eth-connect!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "FilterOptions",
                  "canonicalReference": "eth-connect!FilterOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ", formatter?: "
                },
                {
                  "kind": "Content",
                  "text": "(message: ReceivedLog) => TransformedLog"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "requestManager",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "formatter",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!EthFilter#formatter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "formatter: "
                },
                {
                  "kind": "Content",
                  "text": "(message: ReceivedLog) => TransformedLog"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "formatter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!EthFilter#getChanges:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getChanges(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ReceivedLog[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getChanges"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!EthFilter#getLogs:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getLogs(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ReceivedLog[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getLogs"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!EthFilter#getNewFilter:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getNewFilter(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getNewFilter"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!EthFilter#options:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "options: "
                },
                {
                  "kind": "Reference",
                  "text": "FilterOptions",
                  "canonicalReference": "eth-connect!FilterOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!EthFilter#requestManager:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "eth-connect!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestManager",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!EthFilter#uninstall:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected uninstall(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "uninstall"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "eth-connect!EthPendingTransactionFilter:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class EthPendingTransactionFilter extends "
            },
            {
              "kind": "Reference",
              "text": "EthFilter",
              "canonicalReference": "eth-connect!EthFilter:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "../src/Filter.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "EthPendingTransactionFilter",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "eth-connect!EthPendingTransactionFilter:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `EthPendingTransactionFilter` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "eth-connect!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "requestManager",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!EthPendingTransactionFilter#getNewFilter:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getNewFilter(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getNewFilter"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!EventData:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EventData = "
            },
            {
              "kind": "Content",
              "text": "{\n    data: string;\n    topics: string[];\n    address: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "EventData",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!EventFilterCreator:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EventFilterCreator = "
            },
            {
              "kind": "Content",
              "text": "(indexed: {\n    [key: string]: any;\n}, options?: "
            },
            {
              "kind": "Reference",
              "text": "FilterOptions",
              "canonicalReference": "eth-connect!FilterOptions:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EthFilter",
              "canonicalReference": "eth-connect!EthFilter:class"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Contract.ts",
          "releaseTag": "Public",
          "name": "EventFilterCreator",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!extractDisplayName:function(1)",
          "docComment": "/**\n * Should be called to get display name of contract function\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function extractDisplayName(name: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "extractDisplayName"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!extractTypeName:function(1)",
          "docComment": "/**\n * Should be called to get type name of contract function\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function extractTypeName(name: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "extractTypeName"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!FetchFunction:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type FetchFunction = "
            },
            {
              "kind": "Content",
              "text": "(url: string, params: {\n    body?: any;\n    method?: string;\n    mode?: string;\n    headers?: any;\n}) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/providers/HTTPProvider.ts",
          "releaseTag": "Public",
          "name": "FetchFunction",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!FilterCallback:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type FilterCallback = "
            },
            {
              "kind": "Content",
              "text": "(messages: "
            },
            {
              "kind": "Reference",
              "text": "LogObject",
              "canonicalReference": "eth-connect!LogObject:type"
            },
            {
              "kind": "Content",
              "text": "[] | string[]) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Filter.ts",
          "releaseTag": "Public",
          "name": "FilterCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!FilterOptions:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type FilterOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    fromBlock?: "
            },
            {
              "kind": "Reference",
              "text": "BlockIdentifier",
              "canonicalReference": "eth-connect!BlockIdentifier:type"
            },
            {
              "kind": "Content",
              "text": ";\n    toBlock?: "
            },
            {
              "kind": "Reference",
              "text": "BlockIdentifier",
              "canonicalReference": "eth-connect!BlockIdentifier:type"
            },
            {
              "kind": "Content",
              "text": ";\n    address?: "
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Address",
              "canonicalReference": "eth-connect!Address:type"
            },
            {
              "kind": "Content",
              "text": ";\n    topics?: "
            },
            {
              "kind": "Reference",
              "text": "TopicFilter",
              "canonicalReference": "eth-connect!TopicFilter:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "FilterOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!FinishedTransactionAndReceipt:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type FinishedTransactionAndReceipt = "
            },
            {
              "kind": "Reference",
              "text": "TransactionAndReceipt",
              "canonicalReference": "eth-connect!TransactionAndReceipt:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    status: "
            },
            {
              "kind": "Reference",
              "text": "TransactionStatus",
              "canonicalReference": "eth-connect!TransactionStatus:enum"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "FinishedTransactionAndReceipt",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!fromAscii:function(1)",
          "docComment": "/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fromAscii(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", num?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "fromAscii"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!fromDecimal:function(1)",
          "docComment": "/**\n * Converts value to it's hex representation\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fromDecimal(value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "fromDecimal"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!fromTwosComplement:function(1)",
          "docComment": "/**\n * If the bit N is 1\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fromTwosComplement(num: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "eth-connect!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ", bits?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "eth-connect!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "bits",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "fromTwosComplement"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!fromWei:function(1)",
          "docComment": "/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are: SI Short SI Full Effigy Other - kwei femtoether babbage - mwei picoether lovelace - gwei nanoether shannon nano - -- microether szabo micro - -- milliether finney milli - ether -- -- - kether -- grand - mether - gether - tether\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fromWei(num: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "eth-connect!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ", unit: "
            },
            {
              "kind": "Reference",
              "text": "Unit",
              "canonicalReference": "eth-connect!Unit:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "eth-connect!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "unit",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "fromWei"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!fromWei:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fromWei(num: "
            },
            {
              "kind": "Content",
              "text": "string | number"
            },
            {
              "kind": "Content",
              "text": ", unit: "
            },
            {
              "kind": "Reference",
              "text": "Unit",
              "canonicalReference": "eth-connect!Unit:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "unit",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "fromWei"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!getAddress:function(1)",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAddress(address: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "address",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getAddress"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!getValueOfUnit:function(1)",
          "docComment": "/**\n * Returns value of unit in Wei\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getValueOfUnit(_unit: "
            },
            {
              "kind": "Reference",
              "text": "Unit",
              "canonicalReference": "eth-connect!Unit:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "eth-connect!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "_unit",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getValueOfUnit"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!Hex:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Hex = "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "Hex",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!hexToBytes:function(1)",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hexToBytes(hex: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "hex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "hexToBytes"
        },
        {
          "kind": "Class",
          "canonicalReference": "eth-connect!HTTPProvider:class",
          "docComment": "/**\n * HttpProvider should be used to send rpc calls over http\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class HTTPProvider "
            }
          ],
          "fileUrlPath": "../src/providers/HTTPProvider.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "HTTPProvider",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "eth-connect!HTTPProvider:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `HTTPProvider` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(host: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTTPProviderOptions",
                  "canonicalReference": "eth-connect!HTTPProviderOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "host",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!HTTPProvider#debug:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debug: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "debug",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!HTTPProvider#host:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "host: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "host",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!HTTPProvider#options:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "options: "
                },
                {
                  "kind": "Reference",
                  "text": "HTTPProviderOptions",
                  "canonicalReference": "eth-connect!HTTPProviderOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!HTTPProvider#send:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "send(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "send"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!HTTPProvider#sendAsync:member(1)",
              "docComment": "/**\n * Should be used to make async request\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendAsync(payload: "
                },
                {
                  "kind": "Reference",
                  "text": "RPCMessage",
                  "canonicalReference": "eth-connect!RPCMessage:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "RPCMessage",
                  "canonicalReference": "eth-connect!RPCMessage:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Reference",
                  "text": "Callback",
                  "canonicalReference": "eth-connect!Callback:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "payload",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "sendAsync"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!HTTPProviderOptions:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type HTTPProviderOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    headers?: {\n        [key: string]: string;\n    };\n    timeout?: number;\n    fetch?: "
            },
            {
              "kind": "Reference",
              "text": "FetchFunction",
              "canonicalReference": "eth-connect!FetchFunction:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/providers/HTTPProvider.ts",
          "releaseTag": "Public",
          "name": "HTTPProviderOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!IFuture:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IFuture<T> = "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<T> & {\n    resolve: (x: T) => void;\n    reject: (x: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ") => void;\n    finally: (fn: () => void) => void;\n    isPending: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../node_modules/fp-future/index.d.ts",
          "releaseTag": "Public",
          "name": "IFuture",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!inputAddressFormatter:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inputAddressFormatter(address: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/formatters.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "address",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "inputAddressFormatter"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!inputBlockNumberFormatter:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inputBlockNumberFormatter(blockNumber: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Tag",
              "canonicalReference": "eth-connect!Tag:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/formatters.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "blockNumber",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "inputBlockNumberFormatter"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!inputCallFormatter:function(1)",
          "docComment": "/**\n * Formats the input of a transaction and converts all values to HEX\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inputCallFormatter(options: "
            },
            {
              "kind": "Reference",
              "text": "TransactionOptions",
              "canonicalReference": "eth-connect!TransactionOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TransactionOptions",
              "canonicalReference": "eth-connect!TransactionOptions:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/formatters.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "inputCallFormatter"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!inputDefaultBlockNumberFormatter:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inputDefaultBlockNumberFormatter(blockNumber?: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Tag",
              "canonicalReference": "eth-connect!Tag:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "Tag",
              "canonicalReference": "eth-connect!Tag:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/formatters.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "blockNumber",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "inputDefaultBlockNumberFormatter"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!inputFilterOptions:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inputFilterOptions(options: "
            },
            {
              "kind": "Reference",
              "text": "FilterOptions",
              "canonicalReference": "eth-connect!FilterOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "FilterOptions",
              "canonicalReference": "eth-connect!FilterOptions:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/formatters.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "inputFilterOptions"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!inputPostFormatter:function(1)",
          "docComment": "/**\n * Formats the input of a whisper post and converts all values to HEX\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inputPostFormatter(post: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/formatters.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "post",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "inputPostFormatter"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!inputTransactionFormatter:function(1)",
          "docComment": "/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @param transaction - options\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inputTransactionFormatter(options: "
            },
            {
              "kind": "Reference",
              "text": "TransactionOptions",
              "canonicalReference": "eth-connect!TransactionOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TransactionOptions",
              "canonicalReference": "eth-connect!TransactionOptions:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/formatters.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "inputTransactionFormatter"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!inputTransactionId:function(1)",
          "docComment": "/**\n * Ensures a correct transactionId is provided\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inputTransactionId(txId: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/formatters.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "txId",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "inputTransactionId"
        },
        {
          "kind": "Interface",
          "canonicalReference": "eth-connect!IPropertyOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPropertyOptions<V> "
            }
          ],
          "fileUrlPath": "../src/Property.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IPropertyOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!IPropertyOptions#getter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getter: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!IPropertyOptions#outputFormatter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outputFormatter: "
                },
                {
                  "kind": "Content",
                  "text": "(_: any) => V"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "outputFormatter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!isAddress:function(1)",
          "docComment": "/**\n * Checks if the given string is an address\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isAddress(address: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "address",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isAddress"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!isArray:function(1)",
          "docComment": "/**\n * Returns true if object is array, otherwise false\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isArray<T extends "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ">(object: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "eth-connect!~object"
            },
            {
              "kind": "Content",
              "text": " is T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!isBigNumber:function(1)",
          "docComment": "/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isBigNumber(object: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "eth-connect!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "eth-connect!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isBigNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!isBloom:function(1)",
          "docComment": "/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isBloom(bloom: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bloom",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isBloom"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!isBoolean:function(1)",
          "docComment": "/**\n * Returns true if object is boolean, otherwise false\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isBoolean(object: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "eth-connect!~object"
            },
            {
              "kind": "Content",
              "text": " is boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isBoolean"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!isChecksumAddress:function(1)",
          "docComment": "/**\n * Checks if the given string is a checksummed address\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isChecksumAddress(_address: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "_address",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isChecksumAddress"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!isFunction:function(1)",
          "docComment": "/**\n * Returns true if object is function, otherwise false\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isFunction(object: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "eth-connect!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "CallableFunction",
              "canonicalReference": "!CallableFunction:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isFunction"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!isHex:function(1)",
          "docComment": "/**\n * Converts value to it's decimal representation in string\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isHex(value: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isHex"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!isJson:function(1)",
          "docComment": "/**\n * Returns true if given string is valid json object\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isJson(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isJson"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!isObject:function(1)",
          "docComment": "/**\n * Returns true if object is Objet, otherwise false\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isObject<T extends "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ">(object: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "eth-connect!~object"
            },
            {
              "kind": "Content",
              "text": " is T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isObject"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!isPredefinedBlockNumber:function(1)",
          "docComment": "/**\n * Returns true if the provided blockNumber is 'latest', 'pending' or 'earliest\n *\n * @param blockNumber - The given blocknumber\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPredefinedBlockNumber(blockNumber: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Tag",
              "canonicalReference": "eth-connect!Tag:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "blockNumber",
              "canonicalReference": "eth-connect!~blockNumber"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Tag",
              "canonicalReference": "eth-connect!Tag:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/formatters.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "blockNumber",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "isPredefinedBlockNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!isStrictAddress:function(1)",
          "docComment": "/**\n * Checks if the given string is strictly an address\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isStrictAddress(address: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "address",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isStrictAddress"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!isString:function(1)",
          "docComment": "/**\n * Returns true if object is string, otherwise false\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isString(value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "eth-connect!~value"
            },
            {
              "kind": "Content",
              "text": " is string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isString"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!isTopic:function(1)",
          "docComment": "/**\n * Returns true if given string is a valid log topic.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isTopic(topic: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "topic",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isTopic"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!isValidResponse:function(1)",
          "docComment": "/**\n * Should be called to check if jsonrpc response is valid\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isValidResponse(response: "
            },
            {
              "kind": "Reference",
              "text": "RPCResponse",
              "canonicalReference": "eth-connect!~RPCResponse:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RPCResponse",
              "canonicalReference": "eth-connect!~RPCResponse:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/jsonrpc.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "response",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "isValidResponse"
        },
        {
          "kind": "Interface",
          "canonicalReference": "eth-connect!IWebSocket:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IWebSocket "
            }
          ],
          "fileUrlPath": "../src/providers/WebSocketProvider.ts",
          "releaseTag": "Public",
          "name": "IWebSocket",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "eth-connect!IWebSocket#close:member(1)",
              "docComment": "/**\n * Closes the WebSocket connection, optionally using code as the the WebSocket connection close code and reason as the the WebSocket connection close reason.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close(code?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "code",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "close"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!IWebSocket#onclose:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onclose: "
                },
                {
                  "kind": "Content",
                  "text": "((this: this, ev: any) => any) | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onclose",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!IWebSocket#onerror:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onerror: "
                },
                {
                  "kind": "Content",
                  "text": "((this: this, ev: any) => any) | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onerror",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!IWebSocket#onmessage:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onmessage: "
                },
                {
                  "kind": "Content",
                  "text": "((this: this, ev: any) => any) | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onmessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "eth-connect!IWebSocket#onopen:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onopen: "
                },
                {
                  "kind": "Content",
                  "text": "((this: this, ev: any) => any) | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onopen",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "eth-connect!IWebSocket#send:member(1)",
              "docComment": "/**\n * Transmits data using the WebSocket connection. data can be a string, a Blob, an ArrayBuffer, or an ArrayBufferView.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "send(data: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "send"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!LogObject:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LogObject = "
            },
            {
              "kind": "Content",
              "text": "{\n    removed: boolean;\n    logIndex: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    transactionIndex: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    transactionHash: "
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ";\n    blockHash: "
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ";\n    blockNumber: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    address: "
            },
            {
              "kind": "Reference",
              "text": "Address",
              "canonicalReference": "eth-connect!Address:type"
            },
            {
              "kind": "Content",
              "text": ";\n    data: "
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ";\n    topics: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "LogObject",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 20
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "eth-connect!messageId:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "messageId: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "fileUrlPath": "../src/utils/jsonrpc.ts",
          "isReadonly": false,
          "releaseTag": "Public",
          "name": "messageId",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "eth-connect!Method:class",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Method<Output> "
            }
          ],
          "fileUrlPath": "../src/Method.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "Output",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": false,
          "name": "Method",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "eth-connect!Method:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Method` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(options: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        callName: string;\n        params: number;\n        inputFormatter: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<null | ((a: any) => any)>;\n        outputFormatter: (val: any) => Output;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!Method#callName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!Method#execute:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "execute(requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "eth-connect!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<Output | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "requestManager",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "execute"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!Method#formatInput:member(1)",
              "docComment": "/**\n * Should be called to format input args of method\n *\n * @param args - The array of arguments\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "formatInput(args: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "formatInput"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!Method#formatOutput:member(1)",
              "docComment": "/**\n * Should be called to format output(result) of method\n *\n * @param result - The result to be formatted\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "formatOutput(result: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Output | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "formatOutput"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!Method#inputFormatter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inputFormatter: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<null | ((a: any) => any)>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "inputFormatter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!Method#outputFormatter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outputFormatter: "
                },
                {
                  "kind": "Content",
                  "text": "(something: any) => Output"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "outputFormatter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!Method#params:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "params: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "params",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!Method#toPayload:member(1)",
              "docComment": "/**\n * Should create payload from given input args\n *\n * @param args - The given input arguments\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toPayload(args: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        method: string;\n        params: any[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "toPayload"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!Method#validateArgs:member(1)",
              "docComment": "/**\n * Should be called to check if the number of arguments is correct\n *\n * @param arguments - The list of arguments\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "validateArgs(args: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "validateArgs"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!outputBigNumberFormatter:function(1)",
          "docComment": "/**\n * Should format the output to a big number\n *\n * @param output - The provided output\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function outputBigNumberFormatter(output: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "eth-connect!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/formatters.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "output",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "outputBigNumberFormatter"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!outputBlockFormatter:function(1)",
          "docComment": "/**\n * Formats the output of a block to its proper value\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function outputBlockFormatter(block: "
            },
            {
              "kind": "Reference",
              "text": "BlockObject",
              "canonicalReference": "eth-connect!BlockObject:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BlockObject",
              "canonicalReference": "eth-connect!BlockObject:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/formatters.ts",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "block",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "outputBlockFormatter"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!outputLogFormatter:function(1)",
          "docComment": "/**\n * Formats the output of a log\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function outputLogFormatter(log: "
            },
            {
              "kind": "Reference",
              "text": "LogObject",
              "canonicalReference": "eth-connect!LogObject:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "LogObject",
              "canonicalReference": "eth-connect!LogObject:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/formatters.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "log",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "outputLogFormatter"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!outputPostFormatter:function(1)",
          "docComment": "/**\n * Formats the output of a received post message\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function outputPostFormatter(post: "
            },
            {
              "kind": "Reference",
              "text": "SHHFilterMessage",
              "canonicalReference": "eth-connect!SHHFilterMessage:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "SHHFilterMessage",
              "canonicalReference": "eth-connect!SHHFilterMessage:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/formatters.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "post",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "outputPostFormatter"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!outputSyncingFormatter:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function outputSyncingFormatter(result: "
            },
            {
              "kind": "Reference",
              "text": "Syncing",
              "canonicalReference": "eth-connect!Syncing:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Syncing",
              "canonicalReference": "eth-connect!Syncing:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/formatters.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "result",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "outputSyncingFormatter"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!outputTransactionFormatter:function(1)",
          "docComment": "/**\n * Formats the output of a transaction to its proper values\n *\n * @param tx - The transaction\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function outputTransactionFormatter(tx: "
            },
            {
              "kind": "Reference",
              "text": "TransactionObject",
              "canonicalReference": "eth-connect!TransactionObject:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TransactionObject",
              "canonicalReference": "eth-connect!TransactionObject:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/formatters.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "tx",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "outputTransactionFormatter"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!outputTransactionReceiptFormatter:function(1)",
          "docComment": "/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @param receipt - The transaction receipt\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function outputTransactionReceiptFormatter(receipt: "
            },
            {
              "kind": "Reference",
              "text": "TransactionReceipt",
              "canonicalReference": "eth-connect!TransactionReceipt:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TransactionReceipt",
              "canonicalReference": "eth-connect!TransactionReceipt:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/formatters.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "receipt",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "outputTransactionReceiptFormatter"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!padLeft:function(1)",
          "docComment": "/**\n * Should be called to pad string to expected length\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function padLeft(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", chars: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", sign?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "chars",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "sign",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "padLeft"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!padRight:function(1)",
          "docComment": "/**\n * Should be called to pad string to expected length\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function padRight(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", chars: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", sign?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "chars",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "sign",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "padRight"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!PendingTransaction:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PendingTransaction = "
            },
            {
              "kind": "Reference",
              "text": "TransactionObject",
              "canonicalReference": "eth-connect!TransactionObject:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    type: "
            },
            {
              "kind": "Reference",
              "text": "TransactionType.pending",
              "canonicalReference": "eth-connect!TransactionType.pending:member"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "PendingTransaction",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "eth-connect!Property:class",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Property<V> "
            }
          ],
          "fileUrlPath": "../src/Property.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": false,
          "name": "Property",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "eth-connect!Property:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Property` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(options: "
                },
                {
                  "kind": "Reference",
                  "text": "IPropertyOptions",
                  "canonicalReference": "eth-connect!IPropertyOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "<V>"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!Property#execute:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "execute(requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "eth-connect!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ", ..._unusedArgs: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<V>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "requestManager",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "_unusedArgs",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "execute"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!Property#formatOutput:member(1)",
              "docComment": "/**\n * Should be called to format output(result) of method\n *\n * @param result - The result to be formatted\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "formatOutput(result: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "V"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "formatOutput"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!Property#getter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getter: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!Property#outputFormatter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outputFormatter: "
                },
                {
                  "kind": "Content",
                  "text": "(_: any) => V"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "outputFormatter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!Quantity:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Quantity = "
            },
            {
              "kind": "Content",
              "text": "number | "
            },
            {
              "kind": "Reference",
              "text": "Hex",
              "canonicalReference": "eth-connect!Hex:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "Quantity",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!QueuedTransaction:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type QueuedTransaction = "
            },
            {
              "kind": "Content",
              "text": "{\n    type: "
            },
            {
              "kind": "Reference",
              "text": "TransactionType.queued",
              "canonicalReference": "eth-connect!TransactionType.queued:member"
            },
            {
              "kind": "Content",
              "text": ";\n    hash: string;\n    nonce: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "QueuedTransaction",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!ReplacedTransaction:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ReplacedTransaction = "
            },
            {
              "kind": "Content",
              "text": "{\n    type: "
            },
            {
              "kind": "Reference",
              "text": "TransactionType.replaced",
              "canonicalReference": "eth-connect!TransactionType.replaced:member"
            },
            {
              "kind": "Content",
              "text": ";\n    hash: string;\n    nonce: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "ReplacedTransaction",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "eth-connect!RequestManager:class",
          "docComment": "/**\n * It's responsible for passing messages to providers It's also responsible for polling the ethereum node for incoming messages Default poll timeout is 1 second\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class RequestManager "
            }
          ],
          "fileUrlPath": "../src/RequestManager.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "RequestManager",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "eth-connect!RequestManager:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `RequestManager` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(provider: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "provider",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_accounts:member",
              "docComment": "/**\n * Returns a list of addresses owned by client.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_accounts: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Address",
                  "canonicalReference": "eth-connect!Address:type"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_accounts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_blockNumber:member",
              "docComment": "/**\n * Returns the number of most recent block.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_blockNumber: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Quantity",
                  "canonicalReference": "eth-connect!Quantity:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_blockNumber",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_call:member",
              "docComment": "/**\n * Executes a new message call immediately without creating a transaction on the block chain.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_call: "
                },
                {
                  "kind": "Content",
                  "text": "(options: "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionCallOptions",
                  "canonicalReference": "eth-connect!TransactionCallOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ", block: "
                },
                {
                  "kind": "Reference",
                  "text": "BlockIdentifier",
                  "canonicalReference": "eth-connect!BlockIdentifier:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_call",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_coinbase:member",
              "docComment": "/**\n * Returns the client coinbase address.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_coinbase: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Address",
                  "canonicalReference": "eth-connect!Address:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_coinbase",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_estimateGas:member",
              "docComment": "/**\n * Generates and returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain. Note that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including EVM mechanics and node performance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_estimateGas: "
                },
                {
                  "kind": "Content",
                  "text": "(data: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TransactionCallOptions",
                  "canonicalReference": "eth-connect!TransactionCallOptions:type"
                },
                {
                  "kind": "Content",
                  "text": "> & "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TransactionOptions",
                  "canonicalReference": "eth-connect!TransactionOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ">) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Quantity",
                  "canonicalReference": "eth-connect!Quantity:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_estimateGas",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 14
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_gasPrice:member",
              "docComment": "/**\n * Returns the current price per gas in wei.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_gasPrice: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_gasPrice",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getBalance:member",
              "docComment": "/**\n * Returns the balance of the account of given address.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getBalance: "
                },
                {
                  "kind": "Content",
                  "text": "(address: "
                },
                {
                  "kind": "Reference",
                  "text": "Address",
                  "canonicalReference": "eth-connect!Address:type"
                },
                {
                  "kind": "Content",
                  "text": ", block: "
                },
                {
                  "kind": "Reference",
                  "text": "BlockIdentifier",
                  "canonicalReference": "eth-connect!BlockIdentifier:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "eth-connect!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getBalance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getBlockByHash:member",
              "docComment": "/**\n * Returns information about a block by hash.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getBlockByHash: "
                },
                {
                  "kind": "Content",
                  "text": "(blockHash: "
                },
                {
                  "kind": "Reference",
                  "text": "TxHash",
                  "canonicalReference": "eth-connect!TxHash:type"
                },
                {
                  "kind": "Content",
                  "text": ", fullTransactionObjects: boolean) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BlockObject",
                  "canonicalReference": "eth-connect!BlockObject:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getBlockByHash",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getBlockByNumber:member",
              "docComment": "/**\n * Returns information about a block by block number.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getBlockByNumber: "
                },
                {
                  "kind": "Content",
                  "text": "(block: "
                },
                {
                  "kind": "Reference",
                  "text": "BlockIdentifier",
                  "canonicalReference": "eth-connect!BlockIdentifier:type"
                },
                {
                  "kind": "Content",
                  "text": ", fullTransactionObjects: boolean) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BlockObject",
                  "canonicalReference": "eth-connect!BlockObject:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getBlockByNumber",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getBlockTransactionCountByHash:member",
              "docComment": "/**\n * Returns the number of transactions in a block from a block matching the given block hash.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getBlockTransactionCountByHash: "
                },
                {
                  "kind": "Content",
                  "text": "(blockHash: "
                },
                {
                  "kind": "Reference",
                  "text": "TxHash",
                  "canonicalReference": "eth-connect!TxHash:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getBlockTransactionCountByHash",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getBlockTransactionCountByNumber:member",
              "docComment": "/**\n * Returns the number of transactions in a block matching the given block number.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getBlockTransactionCountByNumber: "
                },
                {
                  "kind": "Content",
                  "text": "(block: "
                },
                {
                  "kind": "Reference",
                  "text": "BlockIdentifier",
                  "canonicalReference": "eth-connect!BlockIdentifier:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getBlockTransactionCountByNumber",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getCode:member",
              "docComment": "/**\n * Returns code at a given address.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getCode: "
                },
                {
                  "kind": "Content",
                  "text": "(address: "
                },
                {
                  "kind": "Reference",
                  "text": "Address",
                  "canonicalReference": "eth-connect!Address:type"
                },
                {
                  "kind": "Content",
                  "text": ", block: "
                },
                {
                  "kind": "Reference",
                  "text": "BlockIdentifier",
                  "canonicalReference": "eth-connect!BlockIdentifier:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getCode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getFilterChanges:member",
              "docComment": "/**\n * Polling method for a filter, which returns an array of logs which occurred since last poll.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getFilterChanges: "
                },
                {
                  "kind": "Content",
                  "text": "(filterId: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TxHash",
                  "canonicalReference": "eth-connect!TxHash:type"
                },
                {
                  "kind": "Content",
                  "text": "> | "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "LogObject",
                  "canonicalReference": "eth-connect!LogObject:type"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getFilterChanges",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 14
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getFilterLogs:member",
              "docComment": "/**\n * Returns an array of all logs matching filter with given id.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getFilterLogs: "
                },
                {
                  "kind": "Content",
                  "text": "(filterId: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TxHash",
                  "canonicalReference": "eth-connect!TxHash:type"
                },
                {
                  "kind": "Content",
                  "text": "> | "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "LogObject",
                  "canonicalReference": "eth-connect!LogObject:type"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getFilterLogs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 14
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getLogs:member",
              "docComment": "/**\n * Returns an array of all logs matching a given filter object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getLogs: "
                },
                {
                  "kind": "Content",
                  "text": "(options: "
                },
                {
                  "kind": "Reference",
                  "text": "FilterOptions",
                  "canonicalReference": "eth-connect!FilterOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TxHash",
                  "canonicalReference": "eth-connect!TxHash:type"
                },
                {
                  "kind": "Content",
                  "text": "> | "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "LogObject",
                  "canonicalReference": "eth-connect!LogObject:type"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getLogs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 14
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getStorageAt:member",
              "docComment": "/**\n * Returns the value from a storage position at a given address.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getStorageAt: "
                },
                {
                  "kind": "Content",
                  "text": "(address: "
                },
                {
                  "kind": "Reference",
                  "text": "Address",
                  "canonicalReference": "eth-connect!Address:type"
                },
                {
                  "kind": "Content",
                  "text": ", position: "
                },
                {
                  "kind": "Reference",
                  "text": "Quantity",
                  "canonicalReference": "eth-connect!Quantity:type"
                },
                {
                  "kind": "Content",
                  "text": ", block: "
                },
                {
                  "kind": "Reference",
                  "text": "BlockIdentifier",
                  "canonicalReference": "eth-connect!BlockIdentifier:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getStorageAt",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getTransactionByBlockHashAndIndex:member",
              "docComment": "/**\n * Returns information about a transaction by block hash and transaction index position.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getTransactionByBlockHashAndIndex: "
                },
                {
                  "kind": "Content",
                  "text": "(blockHash: "
                },
                {
                  "kind": "Reference",
                  "text": "TxHash",
                  "canonicalReference": "eth-connect!TxHash:type"
                },
                {
                  "kind": "Content",
                  "text": ", txIndex: "
                },
                {
                  "kind": "Reference",
                  "text": "Quantity",
                  "canonicalReference": "eth-connect!Quantity:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TransactionObject",
                  "canonicalReference": "eth-connect!TransactionObject:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getTransactionByBlockHashAndIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getTransactionByBlockNumberAndIndex:member",
              "docComment": "/**\n * Returns information about a transaction by block number and transaction index position.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getTransactionByBlockNumberAndIndex: "
                },
                {
                  "kind": "Content",
                  "text": "(block: "
                },
                {
                  "kind": "Reference",
                  "text": "BlockIdentifier",
                  "canonicalReference": "eth-connect!BlockIdentifier:type"
                },
                {
                  "kind": "Content",
                  "text": ", txIndex: "
                },
                {
                  "kind": "Reference",
                  "text": "Quantity",
                  "canonicalReference": "eth-connect!Quantity:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TransactionObject",
                  "canonicalReference": "eth-connect!TransactionObject:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getTransactionByBlockNumberAndIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getTransactionByHash:member",
              "docComment": "/**\n * Returns the information about a transaction requested by transaction hash.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getTransactionByHash: "
                },
                {
                  "kind": "Content",
                  "text": "(hash: "
                },
                {
                  "kind": "Reference",
                  "text": "TxHash",
                  "canonicalReference": "eth-connect!TxHash:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TransactionObject",
                  "canonicalReference": "eth-connect!TransactionObject:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getTransactionByHash",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getTransactionCount:member",
              "docComment": "/**\n * Returns the number of transactions sent from an address.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getTransactionCount: "
                },
                {
                  "kind": "Content",
                  "text": "(address: "
                },
                {
                  "kind": "Reference",
                  "text": "Address",
                  "canonicalReference": "eth-connect!Address:type"
                },
                {
                  "kind": "Content",
                  "text": ", block: "
                },
                {
                  "kind": "Reference",
                  "text": "BlockIdentifier",
                  "canonicalReference": "eth-connect!BlockIdentifier:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getTransactionCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getTransactionReceipt:member",
              "docComment": "/**\n * Returns the receipt of a transaction by transaction hash. Note That the receipt is not available for pending transactions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getTransactionReceipt: "
                },
                {
                  "kind": "Content",
                  "text": "(hash: "
                },
                {
                  "kind": "Reference",
                  "text": "TxHash",
                  "canonicalReference": "eth-connect!TxHash:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TransactionReceipt",
                  "canonicalReference": "eth-connect!TransactionReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getTransactionReceipt",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getUncleByBlockHashAndIndex:member",
              "docComment": "/**\n * Returns information about a uncle of a block by hash and uncle index position.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getUncleByBlockHashAndIndex: "
                },
                {
                  "kind": "Content",
                  "text": "(blockHash: "
                },
                {
                  "kind": "Reference",
                  "text": "TxHash",
                  "canonicalReference": "eth-connect!TxHash:type"
                },
                {
                  "kind": "Content",
                  "text": ", index: "
                },
                {
                  "kind": "Reference",
                  "text": "Quantity",
                  "canonicalReference": "eth-connect!Quantity:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BlockObject",
                  "canonicalReference": "eth-connect!BlockObject:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getUncleByBlockHashAndIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getUncleByBlockNumberAndIndex:member",
              "docComment": "/**\n * Returns information about a uncle of a block by number and uncle index position.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getUncleByBlockNumberAndIndex: "
                },
                {
                  "kind": "Content",
                  "text": "(block: "
                },
                {
                  "kind": "Reference",
                  "text": "BlockIdentifier",
                  "canonicalReference": "eth-connect!BlockIdentifier:type"
                },
                {
                  "kind": "Content",
                  "text": ", index: "
                },
                {
                  "kind": "Reference",
                  "text": "Quantity",
                  "canonicalReference": "eth-connect!Quantity:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BlockObject",
                  "canonicalReference": "eth-connect!BlockObject:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getUncleByBlockNumberAndIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getUncleCountByBlockHash:member",
              "docComment": "/**\n * Returns the number of uncles in a block from a block matching the given block hash.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getUncleCountByBlockHash: "
                },
                {
                  "kind": "Content",
                  "text": "(blockHash: "
                },
                {
                  "kind": "Reference",
                  "text": "TxHash",
                  "canonicalReference": "eth-connect!TxHash:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getUncleCountByBlockHash",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_getUncleCountByBlockNumber:member",
              "docComment": "/**\n * Returns the number of uncles in a block from a block matching the given block number.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_getUncleCountByBlockNumber: "
                },
                {
                  "kind": "Content",
                  "text": "(block: "
                },
                {
                  "kind": "Reference",
                  "text": "BlockIdentifier",
                  "canonicalReference": "eth-connect!BlockIdentifier:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_getUncleCountByBlockNumber",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_hashrate:member",
              "docComment": "/**\n * Returns the number of hashes per second that the node is mining with.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_hashrate: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Quantity",
                  "canonicalReference": "eth-connect!Quantity:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_hashrate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_mining:member",
              "docComment": "/**\n * Returns true if client is actively mining new blocks.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_mining: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_mining",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_newBlockFilter:member",
              "docComment": "/**\n * Creates a filter in the node, to notify when a new block arrives. To check if the state has changed, call eth_getFilterChanges.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_newBlockFilter: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_newBlockFilter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_newFilter:member",
              "docComment": "/**\n * Creates a filter object, based on filter options, to notify when the state changes (logs). To check if the state has changed, call eth_getFilterChanges.\n *\n * A note on specifying topic filters: Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic filters:\n *\n * [] \"anything\" [A] \"A in first position (and anything after)\" [null, B] \"anything in first position AND B in second position (and anything after)\" [A, B] \"A in first position AND B in second position (and anything after)\" [[A, B], [A, B]] \"(A OR B) in first position AND (A OR B) in second position (and anything after)\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_newFilter: "
                },
                {
                  "kind": "Content",
                  "text": "(options: "
                },
                {
                  "kind": "Reference",
                  "text": "FilterOptions",
                  "canonicalReference": "eth-connect!FilterOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_newFilter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_newPendingTransactionFilter:member",
              "docComment": "/**\n * Creates a filter in the node, to notify when new pending transactions arrive. To check if the state has changed, call eth_getFilterChanges.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_newPendingTransactionFilter: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_newPendingTransactionFilter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_protocolVersion:member",
              "docComment": "/**\n * Returns the current ethereum protocol version.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_protocolVersion: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_protocolVersion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_sendRawTransaction:member",
              "docComment": "/**\n * Creates new message call transaction or a contract creation for signed transactions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_sendRawTransaction: "
                },
                {
                  "kind": "Content",
                  "text": "(rawTransaction: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TxHash",
                  "canonicalReference": "eth-connect!TxHash:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_sendRawTransaction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_sendTransaction:member",
              "docComment": "/**\n * Creates new message call transaction or a contract creation, if the data field contains code.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_sendTransaction: "
                },
                {
                  "kind": "Content",
                  "text": "(options: "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionOptions",
                  "canonicalReference": "eth-connect!TransactionOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TxHash",
                  "canonicalReference": "eth-connect!TxHash:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_sendTransaction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_sign:member",
              "docComment": "/**\n * The sign method calculates an Ethereum specific signature with:\n *\n * sign(keccak256(\"Ethereum Signed Message:\" + len(message) + message))).\n *\n * By adding a prefix to the message makes the calculated signature recognisable as an Ethereum specific signature. This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to impersonate the victim.\n *\n * Note the address to sign with must be unlocked.\n *\n * @deprecated\n *\n * see https://github.com/ethereum/go-ethereum/pull/2940\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_sign: "
                },
                {
                  "kind": "Content",
                  "text": "(address: "
                },
                {
                  "kind": "Reference",
                  "text": "Address",
                  "canonicalReference": "eth-connect!Address:type"
                },
                {
                  "kind": "Content",
                  "text": ", message: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_sign",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_submitHashrate:member",
              "docComment": "/**\n * Used for submitting mining hashrate.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_submitHashrate: "
                },
                {
                  "kind": "Content",
                  "text": "(hashRate: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ", id: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_submitHashrate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_submitWork:member",
              "docComment": "/**\n * Used for submitting a proof-of-work solution.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_submitWork: "
                },
                {
                  "kind": "Content",
                  "text": "(data: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ", powHash: "
                },
                {
                  "kind": "Reference",
                  "text": "TxHash",
                  "canonicalReference": "eth-connect!TxHash:type"
                },
                {
                  "kind": "Content",
                  "text": ", digest: "
                },
                {
                  "kind": "Reference",
                  "text": "TxHash",
                  "canonicalReference": "eth-connect!TxHash:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_submitWork",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_syncing:member",
              "docComment": "/**\n * Returns an object with data about the sync status or false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_syncing: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<false | "
                },
                {
                  "kind": "Reference",
                  "text": "Syncing",
                  "canonicalReference": "eth-connect!Syncing:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_syncing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#eth_uninstallFilter:member",
              "docComment": "/**\n * Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additonally Filters timeout when they aren't requested with eth_getFilterChanges for a period of time.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eth_uninstallFilter: "
                },
                {
                  "kind": "Content",
                  "text": "(filterId: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eth_uninstallFilter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!RequestManager#getConfirmedTransaction:member(1)",
              "docComment": "/**\n * Waits until the transaction finishes. Returns if it was successfull. Throws if the transaction fails or if it lacks any of the supplied events\n *\n * @param txId - Transaction id to watch\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getConfirmedTransaction(txId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "FinishedTransactionAndReceipt",
                  "canonicalReference": "eth-connect!FinishedTransactionAndReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "txId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getConfirmedTransaction"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!RequestManager#getTransaction:member(1)",
              "docComment": "/**\n * Returns a transaction in any of the possible states.\n *\n * @param txId - The transaction ID\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTransaction(txId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Transaction",
                  "canonicalReference": "eth-connect!Transaction:type"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "txId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getTransaction"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!RequestManager#getTransactionAndReceipt:member(1)",
              "docComment": "/**\n * Get the transaction status and receipt\n *\n * @param txId - Transaction id\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTransactionAndReceipt(txId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TransactionAndReceipt",
                  "canonicalReference": "eth-connect!TransactionAndReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "txId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getTransactionAndReceipt"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!RequestManager#isFailure:member(1)",
              "docComment": "/**\n * Expects the result of getTransactionRecepeit's geth command and returns true if the transaction failed. It'll also check for a failed status prop against TRANSACTION_STATUS\n *\n * @param tx - The transaction object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isFailure(tx: "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionAndReceipt",
                  "canonicalReference": "eth-connect!TransactionAndReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tx",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "isFailure"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!RequestManager#isPending:member(1)",
              "docComment": "/**\n * Expects the result of getTransaction's geth command and returns true if the transaction is still pending. It'll also check for a pending status prop against TRANSACTION_STATUS\n *\n * @param tx - The transaction object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isPending(tx: "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionAndReceipt",
                  "canonicalReference": "eth-connect!TransactionAndReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tx",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "isPending"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!RequestManager#isTxDropped:member(1)",
              "docComment": "/**\n * Wait retryAttemps * TRANSACTION_FETCH_DELAY for a transaction status to be in the mempool\n *\n * @param txId - Transaction id to watch\n *\n * @param retryAttemps - Number of retries when a transaction status returns empty\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isTxDropped(txId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", _retryAttemps?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "txId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "_retryAttemps",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "isTxDropped"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#net_listening:member",
              "docComment": "/**\n * Returns true if client is actively listening for network connections.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "net_listening: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "net_listening",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#net_peerCount:member",
              "docComment": "/**\n * Returns number of peers currently connected to the client.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "net_peerCount: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Quantity",
                  "canonicalReference": "eth-connect!Quantity:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "net_peerCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#net_version:member",
              "docComment": "/**\n * Returns the current network id.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "net_version: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "net_version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#personal_ecRecover:member",
              "docComment": "/**\n * ecRecover returns the address associated with the private key that was used to calculate the signature in personal_sign.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personal_ecRecover: "
                },
                {
                  "kind": "Content",
                  "text": "(message: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ", signature: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Address",
                  "canonicalReference": "eth-connect!Address:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "personal_ecRecover",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#personal_importRawKey:member",
              "docComment": "/**\n * Imports the given unencrypted private key (hex string) into the key store, encrypting it with the passphrase. Returns the address of the new account.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personal_importRawKey: "
                },
                {
                  "kind": "Content",
                  "text": "(keydata: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ", passPhrase: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Address",
                  "canonicalReference": "eth-connect!Address:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "personal_importRawKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#personal_listAccounts:member",
              "docComment": "/**\n * Returns all the Ethereum account addresses of all keys in the key store.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personal_listAccounts: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Address",
                  "canonicalReference": "eth-connect!Address:type"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "personal_listAccounts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#personal_lockAccount:member",
              "docComment": "/**\n * Removes the private key with given address from memory. The account can no longer be used to send transactions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personal_lockAccount: "
                },
                {
                  "kind": "Content",
                  "text": "(address: "
                },
                {
                  "kind": "Reference",
                  "text": "Address",
                  "canonicalReference": "eth-connect!Address:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "personal_lockAccount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#personal_newAccount:member",
              "docComment": "/**\n * Generates a new private key and stores it in the key store directory. The key file is encrypted with the given passphrase. Returns the address of the new account.\n *\n * At the geth console, newAccount will prompt for a passphrase when it is not supplied as the argument.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personal_newAccount: "
                },
                {
                  "kind": "Content",
                  "text": "(passPhrase: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Address",
                  "canonicalReference": "eth-connect!Address:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "personal_newAccount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#personal_sendTransaction:member",
              "docComment": "/**\n * Imports the given unencrypted private key (hex string) into the key store, encrypting it with the passphrase. Returns the address of the new account.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personal_sendTransaction: "
                },
                {
                  "kind": "Content",
                  "text": "(txObject: "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionOptions",
                  "canonicalReference": "eth-connect!TransactionOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ", passPhrase: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TxHash",
                  "canonicalReference": "eth-connect!TxHash:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "personal_sendTransaction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#personal_sign:member",
              "docComment": "/**\n * The sign method calculates an Ethereum specific signature with: sign(keccack256(\"Ethereum Signed Message:\" + len(message) + message))).\n *\n * By adding a prefix to the message makes the calculated signature recognisable as an Ethereum specific signature. This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to impersonate the victim.\n *\n * See ecRecover to verify the signature.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personal_sign: "
                },
                {
                  "kind": "Content",
                  "text": "(data: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ", signerAddress: "
                },
                {
                  "kind": "Reference",
                  "text": "Address",
                  "canonicalReference": "eth-connect!Address:type"
                },
                {
                  "kind": "Content",
                  "text": ", passPhrase: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "personal_sign",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#personal_unlockAccount:member",
              "docComment": "/**\n * Decrypts the key with the given address from the key store.\n *\n * Both passphrase and unlock duration are optional when using the JavaScript console. If the passphrase is not supplied as an argument, the console will prompt for the passphrase interactively.\n *\n * The unencrypted key will be held in memory until the unlock duration expires. If the unlock duration defaults to 300 seconds. An explicit duration of zero seconds unlocks the key until geth exits.\n *\n * The account can be used with eth_sign and eth_sendTransaction while it is unlocked.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personal_unlockAccount: "
                },
                {
                  "kind": "Content",
                  "text": "(account: "
                },
                {
                  "kind": "Reference",
                  "text": "Address",
                  "canonicalReference": "eth-connect!Address:type"
                },
                {
                  "kind": "Content",
                  "text": ", passPhrase?: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ", seconds?: "
                },
                {
                  "kind": "Reference",
                  "text": "Quantity",
                  "canonicalReference": "eth-connect!Quantity:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "personal_unlockAccount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#provider:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "provider: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "provider",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!RequestManager#sendAsync:member(1)",
              "docComment": "/**\n * Should be used to asynchronously send request\n *\n * @param data - The RPC message to be sent\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendAsync(data: "
                },
                {
                  "kind": "Reference",
                  "text": "RPCSendableMessage",
                  "canonicalReference": "eth-connect!RPCSendableMessage:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "sendAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!RequestManager#setProvider:member(1)",
              "docComment": "/**\n * Should be used to set provider of request manager\n *\n * @param p - The provider\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setProvider(p: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "p",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setProvider"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#shh_addToGroup:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_addToGroup: "
                },
                {
                  "kind": "Content",
                  "text": "(group: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shh_addToGroup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#shh_getFilterChanges:member",
              "docComment": "/**\n * Polling method for whisper filters. Returns new messages since the last call of this method.\n *\n * Note calling the shh_getMessages method, will reset the buffer for this method, so that you won't receive duplicate messages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_getFilterChanges: "
                },
                {
                  "kind": "Content",
                  "text": "(filterId: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SHHFilterMessage",
                  "canonicalReference": "eth-connect!SHHFilterMessage:type"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shh_getFilterChanges",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#shh_getMessages:member",
              "docComment": "/**\n * Get all messages matching a filter. Unlike shh_getFilterChanges this returns all messages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_getMessages: "
                },
                {
                  "kind": "Content",
                  "text": "(filterId: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SHHFilterMessage",
                  "canonicalReference": "eth-connect!SHHFilterMessage:type"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shh_getMessages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#shh_hasIdentity:member",
              "docComment": "/**\n * Checks if the client hold the private keys for a given identity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_hasIdentity: "
                },
                {
                  "kind": "Content",
                  "text": "(identity: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shh_hasIdentity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#shh_newFilter:member",
              "docComment": "/**\n * Creates filter to notify, when client receives whisper message matching the filter options.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_newFilter: "
                },
                {
                  "kind": "Content",
                  "text": "(options: "
                },
                {
                  "kind": "Reference",
                  "text": "SHHFilterOptions",
                  "canonicalReference": "eth-connect!SHHFilterOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shh_newFilter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#shh_newGroup:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_newGroup: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shh_newGroup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#shh_newIdentity:member",
              "docComment": "/**\n * Creates new whisper identity in the client.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_newIdentity: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shh_newIdentity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#shh_post:member",
              "docComment": "/**\n * Sends a whisper message.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_post: "
                },
                {
                  "kind": "Content",
                  "text": "(data: "
                },
                {
                  "kind": "Reference",
                  "text": "SHHPost",
                  "canonicalReference": "eth-connect!SHHPost:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shh_post",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#shh_uninstallFilter:member",
              "docComment": "/**\n * Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additonally Filters timeout when they aren't requested with shh_getFilterChanges for a period of time.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_uninstallFilter: "
                },
                {
                  "kind": "Content",
                  "text": "(filterId: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shh_uninstallFilter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#shh_version:member",
              "docComment": "/**\n * Returns the current whisper protocol version.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shh_version: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shh_version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!RequestManager#waitForCompletion:member(1)",
              "docComment": "/**\n * Wait until a transaction finishes by either being mined or failing\n *\n * @param txId - Transaction id to watch\n *\n * @param retriesOnEmpty - Number of retries when a transaction status returns empty\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForCompletion(txId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", retriesOnEmpty?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "FinishedTransactionAndReceipt",
                  "canonicalReference": "eth-connect!FinishedTransactionAndReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "txId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "retriesOnEmpty",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "waitForCompletion"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#web3_clientVersion:member",
              "docComment": "/**\n * Returns the current client version.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "web3_clientVersion: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "web3_clientVersion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!RequestManager#web3_sha3:member",
              "docComment": "/**\n * Returns Keccak-256 (not the standardized SHA3-256) of the given data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "web3_sha3: "
                },
                {
                  "kind": "Content",
                  "text": "(data: "
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Data",
                  "canonicalReference": "eth-connect!Data:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "web3_sha3",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!RevertedTransaction:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RevertedTransaction = "
            },
            {
              "kind": "Reference",
              "text": "TransactionObject",
              "canonicalReference": "eth-connect!TransactionObject:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    type: "
            },
            {
              "kind": "Reference",
              "text": "TransactionType.reverted",
              "canonicalReference": "eth-connect!TransactionType.reverted:member"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "RevertedTransaction",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!RPCMessage:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RPCMessage = "
            },
            {
              "kind": "Content",
              "text": "{\n    jsonrpc: '2.0';\n    id: number;\n    method: string;\n    params: any[] | {\n        [key: string]: any;\n    };\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/providers/common.ts",
          "releaseTag": "Public",
          "name": "RPCMessage",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!RPCSendableMessage:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RPCSendableMessage = "
            },
            {
              "kind": "Content",
              "text": "{\n    method: string;\n    params: any[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/jsonrpc.ts",
          "releaseTag": "Public",
          "name": "RPCSendableMessage",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!sha3:function(1)",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function sha3(value: "
            },
            {
              "kind": "Content",
              "text": "string | number[] | "
            },
            {
              "kind": "Reference",
              "text": "ArrayBuffer",
              "canonicalReference": "!ArrayBuffer:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Content",
              "text": "{\n    encoding?: 'hex';\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "name": "sha3"
        },
        {
          "kind": "Class",
          "canonicalReference": "eth-connect!SHHFilter:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SHHFilter extends "
            },
            {
              "kind": "Reference",
              "text": "AbstractFilter",
              "canonicalReference": "eth-connect!AbstractFilter:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SHHFilterMessage",
              "canonicalReference": "eth-connect!SHHFilterMessage:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "../src/Filter.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SHHFilter",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "eth-connect!SHHFilter:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SHHFilter` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "eth-connect!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "SHHFilterOptions",
                  "canonicalReference": "eth-connect!SHHFilterOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "requestManager",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SHHFilter#getChanges:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getChanges(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SHHFilterMessage",
                  "canonicalReference": "eth-connect!SHHFilterMessage:type"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getChanges"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SHHFilter#getMessages:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMessages(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SHHFilterMessage",
                  "canonicalReference": "eth-connect!SHHFilterMessage:type"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getMessages"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SHHFilter#getNewFilter:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getNewFilter(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getNewFilter"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!SHHFilter#options:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "options: "
                },
                {
                  "kind": "Reference",
                  "text": "SHHFilterOptions",
                  "canonicalReference": "eth-connect!SHHFilterOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!SHHFilter#requestManager:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "eth-connect!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestManager",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SHHFilter#uninstall:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected uninstall(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "uninstall"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!SHHFilterMessage:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SHHFilterMessage = "
            },
            {
              "kind": "Content",
              "text": "{\n    hash: "
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ";\n    from: "
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ";\n    to: "
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ";\n    expiry: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    ttl: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    sent: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    topics: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    payload: "
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ";\n    workProved: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "SHHFilterMessage",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 22
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!SHHFilterOptions:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SHHFilterOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    to?: "
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ";\n    topics: "
            },
            {
              "kind": "Reference",
              "text": "TopicFilter",
              "canonicalReference": "eth-connect!TopicFilter:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "SHHFilterOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!SHHPost:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SHHPost = "
            },
            {
              "kind": "Content",
              "text": "{\n    from: "
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ";\n    to: "
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ";\n    topics: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    payload: "
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ";\n    priority: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    ttl: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "SHHPost",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 16
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!signedIsNegative:function(1)",
          "docComment": "/**\n * Check if input value is negative in twos complement\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function signedIsNegative(value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "eth-connect!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ", bits: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "bits",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "signedIsNegative"
        },
        {
          "kind": "Class",
          "canonicalReference": "eth-connect!SolidityEvent:class",
          "docComment": "/**\n * This prototype should be used to create event filters\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SolidityEvent "
            }
          ],
          "fileUrlPath": "../src/SolidityEvent.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SolidityEvent",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!SolidityEvent#_anonymous:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_anonymous: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_anonymous",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!SolidityEvent#_name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!SolidityEvent#_params:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_params: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiInput",
                  "canonicalReference": "eth-connect!AbiInput:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_params",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Constructor",
              "canonicalReference": "eth-connect!SolidityEvent:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SolidityEvent` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "eth-connect!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ", json: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiEvent",
                  "canonicalReference": "eth-connect!AbiEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ", address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "requestManager",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "json",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!SolidityEvent#address:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "address",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SolidityEvent#attachToContract:member(1)",
              "docComment": "/**\n * Should be used to attach event to contract object\n *\n * @param  - {Contract}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "attachToContract(contract: "
                },
                {
                  "kind": "Reference",
                  "text": "Contract",
                  "canonicalReference": "eth-connect!Contract:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "contract",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "attachToContract"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SolidityEvent#decode:member(1)",
              "docComment": "/**\n * Should be used to decode indexed params and options\n *\n * @param data - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decode(data: "
                },
                {
                  "kind": "Reference",
                  "text": "LogObject",
                  "canonicalReference": "eth-connect!LogObject:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "LogObject",
                  "canonicalReference": "eth-connect!LogObject:type"
                },
                {
                  "kind": "Content",
                  "text": " & {\n        event: string;\n        address: string;\n        args: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, any>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "decode"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SolidityEvent#displayName:member(1)",
              "docComment": "/**\n * Should be used to get event display name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "displayName(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "displayName"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SolidityEvent#encode:member(1)",
              "docComment": "/**\n * Should be used to encode indexed params and options to one final object\n *\n * @param indexed - \n *\n * @param options - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encode(indexed?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, any>"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "FilterOptions",
                  "canonicalReference": "eth-connect!FilterOptions:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "FilterOptions",
                  "canonicalReference": "eth-connect!FilterOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "indexed",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "encode"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SolidityEvent#execute:member(1)",
              "docComment": "/**\n * Should be used to create new filter object from event\n *\n * @param indexed - \n *\n * @param options - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "execute(indexed: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, any>"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "FilterOptions",
                  "canonicalReference": "eth-connect!FilterOptions:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "EthFilter",
                  "canonicalReference": "eth-connect!EthFilter:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "LogObject",
                  "canonicalReference": "eth-connect!LogObject:type"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "indexed",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "execute"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!SolidityEvent#requestManager:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "eth-connect!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestManager",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SolidityEvent#signature:member(1)",
              "docComment": "/**\n * Should be used to get event signature\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "signature(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "signature"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SolidityEvent#typeName:member(1)",
              "docComment": "/**\n * Should be used to get event type name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "typeName(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "typeName"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SolidityEvent#types:member(1)",
              "docComment": "/**\n * Should be used to get filtered param types\n *\n * @param decide - True if returned typed should be indexed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "types(indexed: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AbiInput",
                  "canonicalReference": "eth-connect!AbiInput:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "indexed",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "types"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "eth-connect!SolidityFunction:class",
          "docComment": "/**\n * This prototype should be used to call/sendTransaction to solidity functions\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SolidityFunction "
            }
          ],
          "fileUrlPath": "../src/SolidityFunction.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SolidityFunction",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!SolidityFunction#_constant:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_constant: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_constant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!SolidityFunction#_inputTypes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_inputTypes: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiInput",
                  "canonicalReference": "eth-connect!AbiInput:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_inputTypes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!SolidityFunction#_name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!SolidityFunction#_outputTypes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_outputTypes: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiOutput",
                  "canonicalReference": "eth-connect!AbiOutput:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_outputTypes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!SolidityFunction#_payable:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_payable: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_payable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Constructor",
              "canonicalReference": "eth-connect!SolidityFunction:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SolidityFunction` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(json: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiFunction",
                  "canonicalReference": "eth-connect!AbiFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "json",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SolidityFunction#attachToContract:member(1)",
              "docComment": "/**\n * Should be called to attach function to contract\n *\n * @param contract - The contract instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "attachToContract(contract: "
                },
                {
                  "kind": "Reference",
                  "text": "Contract",
                  "canonicalReference": "eth-connect!Contract:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "contract",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "attachToContract"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SolidityFunction#displayName:member(1)",
              "docComment": "/**\n * Should be used to get function display name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "displayName(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "displayName"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SolidityFunction#estimateGas:member(1)",
              "docComment": "/**\n * Should be used to estimateGas of solidity function\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "estimateGas(requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "eth-connect!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ", address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Quantity",
                  "canonicalReference": "eth-connect!Quantity:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "requestManager",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "estimateGas"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SolidityFunction#execute:member(1)",
              "docComment": "/**\n * Calls a contract function or to sendTransaction to solidity function\n *\n * @param requestManager - The RequestManager instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "execute(requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "eth-connect!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ", address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "requestManager",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "execute"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SolidityFunction#extractDefaultBlock:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extractDefaultBlock(args: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "extractDefaultBlock"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!SolidityFunction#json:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "json: "
                },
                {
                  "kind": "Reference",
                  "text": "AbiFunction",
                  "canonicalReference": "eth-connect!AbiFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "json",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!SolidityFunction#needsToBeTransaction:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "needsToBeTransaction: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "needsToBeTransaction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SolidityFunction#signature:member(1)",
              "docComment": "/**\n * Should be used to get function signature\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "signature(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "signature"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SolidityFunction#toPayload:member(1)",
              "docComment": "/**\n * Should be used to create payload from arguments\n *\n * @param solidity - function params\n *\n * @param optional - payload options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toPayload(args: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "toPayload"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SolidityFunction#typeName:member(1)",
              "docComment": "/**\n * Should be used to get function type name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "typeName(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "typeName"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SolidityFunction#unpackOutput:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unpackOutput(output: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "output",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "unpackOutput"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!SolidityFunction#validateArgs:member(1)",
              "docComment": "/**\n * Should be called to check if the number of arguments is correct\n *\n * @param arguments - An array of arguments\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "validateArgs(args: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "validateArgs"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!StateMutabilityType:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StateMutabilityType = "
            },
            {
              "kind": "Content",
              "text": "'pure' | 'view' | 'nonpayable' | 'payable'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "StateMutabilityType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!stringToUtf8Bytes:function(1)",
          "docComment": "/**\n * Converts a string into a Uint8Array encoded with UTF-8\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function stringToUtf8Bytes(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utf8.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "stringToUtf8Bytes"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!Syncing:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Syncing = "
            },
            {
              "kind": "Content",
              "text": "{\n    startingBlock: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    currentBlock: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    highestBlock: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "Syncing",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!Tag:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Tag = "
            },
            {
              "kind": "Content",
              "text": "'latest' | 'earliest' | 'pending'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "Tag",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!toAddress:function(1)",
          "docComment": "/**\n * Transforms given string to valid 20 bytes-length addres with 0x prefix\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toAddress(address: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "address",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "toAddress"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!toArray:function(1)",
          "docComment": "/**\n * Ensures the result will be an array\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toArray(value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "toArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!toAscii:function(1)",
          "docComment": "/**\n * Should be called to get ascii from it's hex representation\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toAscii(hex: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "hex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "toAscii"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!toBatchPayload:function(1)",
          "docComment": "/**\n * Should be called to create batch payload object\n *\n * @param messages - An array of objects with method (required) and params (optional) fields\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toBatchPayload(messages: "
            },
            {
              "kind": "Reference",
              "text": "RPCSendableMessage",
              "canonicalReference": "eth-connect!RPCSendableMessage:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    jsonrpc: string;\n    id: number;\n    method: string;\n    params: any[];\n}[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/jsonrpc.ts",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "messages",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "toBatchPayload"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!toBigNumber:function(1)",
          "docComment": "/**\n * Takes an input and transforms it into an bignumber\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toBigNumber(_num: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "eth-connect!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "_num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "toBigNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!toBoolean:function(1)",
          "docComment": "/**\n * Converts value to it's boolean representation (x != 0)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toBoolean(value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": " | boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "toBoolean"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!toChecksumAddress:function(1)",
          "docComment": "/**\n * Makes a checksum address\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toChecksumAddress(_address: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "_address",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "toChecksumAddress"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!toData:function(1)",
          "docComment": "/**\n * Converts value to it's hex representation in string\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toData(val: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "val",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "toData"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!toDecimal:function(1)",
          "docComment": "/**\n * Converts value to it's decimal representation in string\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toDecimal(value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "toDecimal"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!toHex:function(1)",
          "docComment": "/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toHex(val: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": " | boolean | "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "val",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "toHex"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!toJsonRpcRequest:function(1)",
          "docComment": "/**\n * Should be called to valid json create payload object\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toJsonRpcRequest(method: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", params: "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    jsonrpc: string;\n    id: number;\n    method: string;\n    params: any[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/jsonrpc.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "method",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "toJsonRpcRequest"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!toNullDecimal:function(1)",
          "docComment": "/**\n * Converts value to it's decimal representation in string\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toNullDecimal(value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "toNullDecimal"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!TopicFilter:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TopicFilter = "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": " | null | "
            },
            {
              "kind": "Reference",
              "text": "TopicFilter",
              "canonicalReference": "eth-connect!TopicFilter:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "TopicFilter",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!toString_2:function(1)",
          "docComment": "/**\n * Converts value to string\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toString(value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "toString_2"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!toStringData:function(1)",
          "docComment": "/**\n * Converts a UTF8 string to it's hex representation as a 0x string. If the argument is already a 0xHEX prefixed string, the conversion is skipped.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toStringData(val: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "val",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "toStringData"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!toTwosComplement:function(1)",
          "docComment": "/**\n * Takes and input transforms it into bignumber and if it is negative value, into two's complement\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toTwosComplement(num: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": ", bits?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "eth-connect!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "bits",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "toTwosComplement"
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!toWei:function(1)",
          "docComment": "/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are: SI Short SI Full Effigy Other - kwei femtoether babbage - mwei picoether lovelace - gwei nanoether shannon nano - -- microether szabo micro - -- milliether finney milli - ether -- -- - kether -- grand - mether - gether - tether\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toWei(num: "
            },
            {
              "kind": "Content",
              "text": "number | string"
            },
            {
              "kind": "Content",
              "text": ", unit: "
            },
            {
              "kind": "Reference",
              "text": "Unit",
              "canonicalReference": "eth-connect!Unit:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "eth-connect!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "unit",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "toWei"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!Transaction:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Transaction = "
            },
            {
              "kind": "Reference",
              "text": "DroppedTransaction",
              "canonicalReference": "eth-connect!DroppedTransaction:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ReplacedTransaction",
              "canonicalReference": "eth-connect!ReplacedTransaction:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "QueuedTransaction",
              "canonicalReference": "eth-connect!QueuedTransaction:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "PendingTransaction",
              "canonicalReference": "eth-connect!PendingTransaction:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ConfirmedTransaction",
              "canonicalReference": "eth-connect!ConfirmedTransaction:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RevertedTransaction",
              "canonicalReference": "eth-connect!RevertedTransaction:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "Transaction",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!TransactionAndReceipt:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TransactionAndReceipt = "
            },
            {
              "kind": "Reference",
              "text": "TransactionObject",
              "canonicalReference": "eth-connect!TransactionObject:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    receipt: "
            },
            {
              "kind": "Reference",
              "text": "TransactionReceipt",
              "canonicalReference": "eth-connect!TransactionReceipt:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "TransactionAndReceipt",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!TransactionCallOptions:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TransactionCallOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    from?: "
            },
            {
              "kind": "Reference",
              "text": "Address",
              "canonicalReference": "eth-connect!Address:type"
            },
            {
              "kind": "Content",
              "text": ";\n    to: "
            },
            {
              "kind": "Reference",
              "text": "Address",
              "canonicalReference": "eth-connect!Address:type"
            },
            {
              "kind": "Content",
              "text": ";\n    gas?: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": ";\n    gasPrice?: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": ";\n    value?: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": ";\n    data?: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "TransactionCallOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!TransactionObject:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TransactionObject = "
            },
            {
              "kind": "Content",
              "text": "{\n    hash: "
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ";\n    nonce: number;\n    blockHash: "
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ";\n    blockNumber: number;\n    transactionIndex: number;\n    from: "
            },
            {
              "kind": "Reference",
              "text": "Address",
              "canonicalReference": "eth-connect!Address:type"
            },
            {
              "kind": "Content",
              "text": ";\n    to: "
            },
            {
              "kind": "Reference",
              "text": "Address",
              "canonicalReference": "eth-connect!Address:type"
            },
            {
              "kind": "Content",
              "text": " | null;\n    value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "eth-connect!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ";\n    gasPrice: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "eth-connect!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ";\n    gas: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    input: "
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ";\n    v?: "
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ";\n    r?: "
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ";\n    s?: "
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "TransactionObject",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 24
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!TransactionOptions:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TransactionOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    from: "
            },
            {
              "kind": "Reference",
              "text": "Address",
              "canonicalReference": "eth-connect!Address:type"
            },
            {
              "kind": "Content",
              "text": ";\n    to: "
            },
            {
              "kind": "Reference",
              "text": "Address",
              "canonicalReference": "eth-connect!Address:type"
            },
            {
              "kind": "Content",
              "text": ";\n    gas?: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": ";\n    gasPrice?: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": ";\n    value?: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": ";\n    data: string;\n    nonce?: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber.Value",
              "canonicalReference": "eth-connect!BigNumber.Value:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "TransactionOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!TransactionReceipt:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TransactionReceipt = "
            },
            {
              "kind": "Content",
              "text": "{\n    transactionHash: "
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ";\n    transactionIndex: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    blockHash: "
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ";\n    blockNumber: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    cumulativeGasUsed: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    gasUsed: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n    contractAddress: "
            },
            {
              "kind": "Reference",
              "text": "Address",
              "canonicalReference": "eth-connect!Address:type"
            },
            {
              "kind": "Content",
              "text": ";\n    logs: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "LogObject",
              "canonicalReference": "eth-connect!LogObject:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    logsBloom: "
            },
            {
              "kind": "Reference",
              "text": "Data",
              "canonicalReference": "eth-connect!Data:type"
            },
            {
              "kind": "Content",
              "text": ";\n    root?: "
            },
            {
              "kind": "Reference",
              "text": "TxHash",
              "canonicalReference": "eth-connect!TxHash:type"
            },
            {
              "kind": "Content",
              "text": ";\n    status?: "
            },
            {
              "kind": "Reference",
              "text": "Quantity",
              "canonicalReference": "eth-connect!Quantity:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "TransactionReceipt",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 26
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "eth-connect!TransactionStatus:enum",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum TransactionStatus "
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "TransactionStatus",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "eth-connect!TransactionStatus.confirmed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "confirmed = "
                },
                {
                  "kind": "Content",
                  "text": "\"confirmed\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "confirmed"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "eth-connect!TransactionStatus.failed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "failed = "
                },
                {
                  "kind": "Content",
                  "text": "\"failed\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "failed"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "eth-connect!TransactionStatus.pending:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pending = "
                },
                {
                  "kind": "Content",
                  "text": "\"pending\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "pending"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "eth-connect!TransactionType:enum",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum TransactionType "
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "TransactionType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "eth-connect!TransactionType.confirmed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "confirmed = "
                },
                {
                  "kind": "Content",
                  "text": "\"confirmed\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "confirmed"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "eth-connect!TransactionType.dropped:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dropped = "
                },
                {
                  "kind": "Content",
                  "text": "\"dropped\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "dropped"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "eth-connect!TransactionType.pending:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pending = "
                },
                {
                  "kind": "Content",
                  "text": "\"pending\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "pending"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "eth-connect!TransactionType.queued:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "queued = "
                },
                {
                  "kind": "Content",
                  "text": "\"queued\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "queued"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "eth-connect!TransactionType.replaced:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "replaced = "
                },
                {
                  "kind": "Content",
                  "text": "\"replaced\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "replaced"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "eth-connect!TransactionType.reverted:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reverted = "
                },
                {
                  "kind": "Content",
                  "text": "\"reverted\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "reverted"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "eth-connect!transformToFullName:function(1)",
          "docComment": "/**\n * Should be used to create full function/event name from json abi\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function transformToFullName(json: "
            },
            {
              "kind": "Reference",
              "text": "AbiItem",
              "canonicalReference": "eth-connect!AbiItem:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "json",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "transformToFullName"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!TxHash:type",
          "docComment": "/**\n * Hex string of 32 bytes\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TxHash = "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/Schema.ts",
          "releaseTag": "Public",
          "name": "TxHash",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!Unit:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Unit = "
            },
            {
              "kind": "Content",
              "text": "keyof typeof "
            },
            {
              "kind": "Reference",
              "text": "unitMap",
              "canonicalReference": "eth-connect!~unitMap:var"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/utils/utils.ts",
          "releaseTag": "Public",
          "name": "Unit",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "eth-connect!WebSocketProvider:class",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class WebSocketProvider<T extends "
            },
            {
              "kind": "Reference",
              "text": "IWebSocket",
              "canonicalReference": "eth-connect!IWebSocket:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "../src/providers/WebSocketProvider.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": false,
          "name": "WebSocketProvider",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "eth-connect!WebSocketProvider:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `WebSocketProvider` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "WebSocketProviderOptions",
                  "canonicalReference": "eth-connect!WebSocketProviderOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!WebSocketProvider#connection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connection: "
                },
                {
                  "kind": "Reference",
                  "text": "IFuture",
                  "canonicalReference": "eth-connect!IFuture:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "connection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!WebSocketProvider#debug:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debug: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "debug",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!WebSocketProvider#dispose:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "dispose"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!WebSocketProvider#isDisposed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isDisposed: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isDisposed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!WebSocketProvider#options:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "options: "
                },
                {
                  "kind": "Reference",
                  "text": "WebSocketProviderOptions",
                  "canonicalReference": "eth-connect!WebSocketProviderOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!WebSocketProvider#send:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "send(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "send"
            },
            {
              "kind": "Method",
              "canonicalReference": "eth-connect!WebSocketProvider#sendAsync:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendAsync(payload: "
                },
                {
                  "kind": "Reference",
                  "text": "RPCMessage",
                  "canonicalReference": "eth-connect!RPCMessage:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "RPCMessage",
                  "canonicalReference": "eth-connect!RPCMessage:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Reference",
                  "text": "Callback",
                  "canonicalReference": "eth-connect!Callback:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "payload",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "sendAsync"
            },
            {
              "kind": "Property",
              "canonicalReference": "eth-connect!WebSocketProvider#url:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "eth-connect!WebSocketProviderOptions:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type WebSocketProviderOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    WebSocketConstructor?: any;\n    timeout?: number;\n    protocol?: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "../src/providers/WebSocketProvider.ts",
          "releaseTag": "Public",
          "name": "WebSocketProviderOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        }
      ]
    }
  ]
}
