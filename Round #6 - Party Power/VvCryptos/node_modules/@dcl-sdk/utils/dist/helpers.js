import { engine, Transform, AudioSource } from '@dcl/sdk/ecs';
import { Vector3 } from '@dcl/sdk/math';
import { InterpolationType } from './math';
export function getEntitiesWithParent(parent) {
    const entitiesWithParent = [];
    for (const [entity, transform] of engine.getEntitiesWith(Transform)) {
        if (transform.parent === parent) {
            entitiesWithParent.push(entity);
        }
    }
    return entitiesWithParent;
}
export function getEntityParent(child) {
    const transform = Transform.getOrNull(child);
    if (transform) {
        return transform.parent;
    }
    else {
        return engine.RootEntity;
    }
}
export function getPlayerPosition() {
    return Transform.getOrNull(engine.PlayerEntity)?.position || Vector3.create();
}
export function playSound(file, loop = false, position) {
    const entity = engine.addEntity();
    AudioSource.create(entity, {
        audioClipUrl: file,
        loop,
        playing: true
    });
    Transform.create(entity, {
        position: position ? position : getPlayerPosition()
    });
    return entity;
}
export function getEasingFunctionFromInterpolation(type) {
    switch (type) {
        case InterpolationType.LINEAR:
            return 0;
        case InterpolationType.EASEINQUAD:
            return 1;
        case InterpolationType.EASEOUTQUAD:
            return 2;
        case InterpolationType.EASEQUAD:
            return 3;
        case InterpolationType.EASEINSINE:
            return 4;
        case InterpolationType.EASEOUTSINE:
            return 5;
        case InterpolationType.EASESINE:
            return 6;
        case InterpolationType.EASEINEXPO:
            return 7;
        case InterpolationType.EASEOUTEXPO:
            return 8;
        case InterpolationType.EASEEXPO:
            return 9;
        case InterpolationType.EASEINELASTIC:
            return 10;
        case InterpolationType.EASEOUTELASTIC:
            return 11;
        case InterpolationType.EASEELASTIC:
            return 12;
        case InterpolationType.EASEINBOUNCE:
            return 13;
        case InterpolationType.EASEOUTEBOUNCE:
            return 14;
        case InterpolationType.EASEBOUNCE:
            return 15;
        default:
            return 0;
    }
}
//# sourceMappingURL=data:application/json;base64,