import { priority } from './priority';
export var actions;
(function (actions) {
    class SequenceRunner {
        constructor(targetEngine, sequenceBuilt, onFinishCallback) {
            this.beginSequenceNode = null;
            this.currentSequenceNode = null;
            this.running = false;
            this.started = false;
            this.engine = targetEngine;
            this.systemFn = (dt) => { this.update(dt); };
            this.engine.addSystem(this.systemFn, priority.ActionSystemPriority);
            if (sequenceBuilt) {
                this.startSequence(sequenceBuilt);
            }
            if (onFinishCallback)
                this.setOnFinishCallback(onFinishCallback);
        }
        startSequence(sequenceBuilt) {
            this.beginSequenceNode = sequenceBuilt.beginSequenceNode;
            this.currentSequenceNode = this.beginSequenceNode;
            this.running = true;
            this.started = false;
        }
        destroy() {
            this.engine.removeSystem(this.systemFn);
        }
        setOnFinishCallback(onFinishCallback) {
            this.onFinishCallback = onFinishCallback;
        }
        isRunning() {
            return this.running;
        }
        stop() {
            this.running = false;
        }
        resume() {
            if (this.beginSequenceNode != null)
                this.running = true;
        }
        reset() {
            this.currentSequenceNode = this.beginSequenceNode;
            this.running = true;
            this.started = false;
        }
        getRunningAction() {
            let currentNode = this.currentSequenceNode;
            if (this.currentSequenceNode instanceof SubSequenceNode) {
                do {
                    currentNode = currentNode.currentInnerSequence;
                } while (currentNode instanceof SubSequenceNode);
            }
            return currentNode.action;
        }
        update(dt) {
            if (!this.running)
                return;
            if (!this.started) {
                this.currentSequenceNode.onStart();
                this.started = true;
                return;
            }
            if (!this.currentSequenceNode.hasFinish()) {
                this.currentSequenceNode.update(dt);
                return;
            }
            this.currentSequenceNode.onFinish();
            this.currentSequenceNode = this.currentSequenceNode.next;
            if (this.currentSequenceNode) {
                this.currentSequenceNode.onStart();
            }
            else {
                this.running = false;
                if (this.onFinishCallback)
                    this.onFinishCallback();
            }
        }
    }
    actions.SequenceRunner = SequenceRunner;
    class SequenceBuilder {
        constructor() {
            this.currentSequenceNode = null;
            this.beginSequenceNode = null;
            this.whileNodeStack = [];
        }
        then(action) {
            if (this.currentSequenceNode == null) {
                this.currentSequenceNode = new SequenceNode();
                this.currentSequenceNode.action = action;
                this.beginSequenceNode = this.currentSequenceNode;
            }
            else {
                let next = new SequenceNode();
                next.action = action;
                this.currentSequenceNode = this.currentSequenceNode.then(next);
            }
            return this;
        }
        if(condition) {
            let ifSeq = new IfSequenceNode(condition);
            if (this.currentSequenceNode == null) {
                this.currentSequenceNode = ifSeq;
                this.beginSequenceNode = ifSeq;
            }
            else {
                this.currentSequenceNode = this.currentSequenceNode.then(ifSeq);
            }
            return this;
        }
        else() {
            let seq = this.currentSequenceNode.getSequence();
            if (seq instanceof IfSequenceNode) {
                seq.closed = true;
                let elseSeq = new ElseSequenceNode(seq);
                this.currentSequenceNode = this
                    .currentSequenceNode.then(elseSeq);
            }
            else {
                throw new Error('IF statement is needed to be called before ELSE statement.');
            }
            return this;
        }
        endIf() {
            let seq = this.currentSequenceNode.getSequence();
            if (seq instanceof IfSequenceNode || seq instanceof ElseSequenceNode) {
                seq.closed = true;
            }
            else {
                throw new Error('IF statement is needed to be called before ENDIF statement.');
            }
            return this;
        }
        while(condition) {
            let whileSeq = new WhileSequenceNode(condition);
            if (this.currentSequenceNode == null) {
                this.currentSequenceNode = whileSeq;
                this.beginSequenceNode = whileSeq;
            }
            else {
                this.currentSequenceNode = this.currentSequenceNode.then(whileSeq);
            }
            this.whileNodeStack.push(whileSeq);
            return this;
        }
        endWhile() {
            let seq = this.currentSequenceNode.getSequence();
            if (seq instanceof WhileSequenceNode) {
                seq.closed = true;
                if (this.whileNodeStack.length > 0) {
                    this.whileNodeStack.splice(this.whileNodeStack.length - 1, 1);
                }
            }
            else {
                throw new Error('WHILE statement is needed to be called before ENDWHILE statement.');
            }
            return this;
        }
        breakWhile() {
            if (this.whileNodeStack.length > 0) {
                this.currentSequenceNode = this
                    .currentSequenceNode.then(new BreakWhileSequenceNode(this.whileNodeStack[this.whileNodeStack.length - 1]));
            }
            else {
                throw new Error('WHILE statement is needed to be called before BREAKWHILE statement.');
            }
            return this;
        }
    }
    actions.SequenceBuilder = SequenceBuilder;
    class SequenceNode {
        constructor() {
            this.action = null;
            this.next = null;
        }
        then(next) {
            this.next = next;
            return next;
        }
        onStart() {
            if (this.action)
                this.action.onStart();
        }
        update(dt) {
            if (this.action)
                this.action.update(dt);
        }
        onFinish() {
            if (this.action)
                this.action.onFinish();
        }
        hasFinish() {
            if (this.action)
                return this.action.hasFinished;
            else
                return true;
        }
        getSequence() {
            return this;
        }
    }
    actions.SequenceNode = SequenceNode;
    class SubSequenceNode extends SequenceNode {
        constructor() {
            super(...arguments);
            this.currentInnerSequence = null;
            this.startingInnerSequence = null;
            this.closed = false;
        }
        then(next) {
            if (this.currentInnerSequence == null) {
                this.currentInnerSequence = next;
                this.startingInnerSequence = next;
            }
            else {
                if (this.closed) {
                    this.next = next;
                    return next;
                }
                else {
                    this.currentInnerSequence = this.currentInnerSequence.then(next);
                }
            }
            return this;
        }
        onStart() {
            this.currentInnerSequence = this.startingInnerSequence;
            if (this.currentInnerSequence)
                this.currentInnerSequence.onStart();
        }
        update(dt) {
            if (this.currentInnerSequence) {
                if (!this.currentInnerSequence.hasFinish()) {
                    this.currentInnerSequence.update(dt);
                }
                else {
                    this.currentInnerSequence.onFinish();
                    this.currentInnerSequence = this.currentInnerSequence.next;
                    if (this.currentInnerSequence)
                        this.currentInnerSequence.onStart();
                }
            }
        }
        onFinish() {
            if (this.currentInnerSequence)
                this.currentInnerSequence.onFinish();
        }
        hasFinish() {
            return this.currentInnerSequence == null;
        }
        getSequence() {
            if (this.currentInnerSequence) {
                let innerSeq = this.currentInnerSequence.getSequence();
                if (innerSeq instanceof SubSequenceNode) {
                    if (!innerSeq.closed) {
                        return innerSeq;
                    }
                }
            }
            return this;
        }
    }
    class IfSequenceNode extends SubSequenceNode {
        constructor(condition) {
            super();
            this.result = false;
            this.condition = condition;
        }
        onStart() {
            this.result = this.condition();
            if (this.result)
                super.onStart();
            else
                this.currentInnerSequence = null;
        }
    }
    class ElseSequenceNode extends SubSequenceNode {
        constructor(ifSequence) {
            super();
            this.ifSequence = null;
            this.ifSequence = ifSequence;
        }
        onStart() {
            if (this.ifSequence && !this.ifSequence.result)
                super.onStart();
            else
                this.currentInnerSequence = null;
        }
    }
    class WhileSequenceNode extends SubSequenceNode {
        constructor(condition) {
            super();
            this.breakWhile = false;
            this.condition = condition;
        }
        onStart() {
            this.breakWhile = false;
            if (this.condition())
                super.onStart();
            else
                this.currentInnerSequence = null;
        }
        update(dt) {
            if (this.currentInnerSequence) {
                if (!this.currentInnerSequence.hasFinish()) {
                    this.currentInnerSequence.update(dt);
                }
                else {
                    this.currentInnerSequence.onFinish();
                    this.currentInnerSequence = this.currentInnerSequence.next;
                    if (this.currentInnerSequence == null)
                        this.currentInnerSequence = this.startingInnerSequence;
                    if (this.currentInnerSequence)
                        this.currentInnerSequence.onStart();
                }
            }
        }
        hasFinish() {
            return this.breakWhile || !this.condition();
        }
    }
    class BreakWhileSequenceNode extends SequenceNode {
        constructor(whileNode) {
            super();
            this.whileNode = whileNode;
        }
        onStart() {
            this.whileNode.breakWhile = true;
        }
    }
})(actions || (actions = {}));
//# sourceMappingURL=data:application/json;base64,