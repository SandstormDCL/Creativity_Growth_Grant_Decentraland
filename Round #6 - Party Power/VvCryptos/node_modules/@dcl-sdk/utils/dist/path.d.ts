import { Entity, IEngine } from '@dcl/sdk/ecs';
import { Vector3 } from '@dcl/sdk/math';
export type Paths = ReturnType<typeof createPaths>;
export type OnFinishCallback = () => void;
export type OnPointReachedCallback = (pointIndex: number, point: Vector3, nextPoint: Vector3) => void;
declare function createPaths(targetEngine: IEngine): {
    startStraightPath(entity: Entity, points: Vector3[], duration: number, faceDirection?: boolean, onFinishCallback?: OnFinishCallback, onPointReachedCallback?: OnPointReachedCallback): void;
    startSmoothPath(entity: Entity, points: Vector3[], duration: number, segmentCount: number, faceDirection?: boolean, onFinishCallback?: OnFinishCallback, onPointReachedCallback?: OnPointReachedCallback): void;
    stopPath(entity: Entity): void;
    getOnFinishCallback(entity: Entity): OnFinishCallback | undefined;
};
export declare const paths: {
    startStraightPath(entity: Entity, points: Vector3[], duration: number, faceDirection?: boolean, onFinishCallback?: OnFinishCallback, onPointReachedCallback?: OnPointReachedCallback): void;
    startSmoothPath(entity: Entity, points: Vector3[], duration: number, segmentCount: number, faceDirection?: boolean, onFinishCallback?: OnFinishCallback, onPointReachedCallback?: OnPointReachedCallback): void;
    stopPath(entity: Entity): void;
    getOnFinishCallback(entity: Entity): OnFinishCallback | undefined;
};
export {};
