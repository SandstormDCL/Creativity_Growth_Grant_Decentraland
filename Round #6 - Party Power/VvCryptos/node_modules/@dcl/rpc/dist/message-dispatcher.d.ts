import { Transport } from "./types";
import { Reader } from "protobufjs/minimal";
import { StreamMessage } from "./protocol";
export type SubsetMessage = Pick<StreamMessage, "closed" | "ack">;
export type SendableMessage = {
    messageIdentifier: number;
};
type ReaderCallback = (reader: Reader, messageType: number, messageNumber: number, message: any) => void;
type OneTimeListener = {
    reader: Reader;
    messageType: number;
    messageNumber: number;
    message: any;
};
export type MessageDispatcher = {
    transport: Transport;
    sendStreamMessage(data: StreamMessage): Promise<SubsetMessage>;
    addListener(messageNumber: number, handler: ReaderCallback): void;
    addOneTimeListener(messageNumber: number): Promise<OneTimeListener>;
    removeListener(messageNumber: number): void;
    setGlobalHandler(globalHandler: GlobalHandlerFunction): void;
};
export type GlobalHandlerFunction = (messageType: number, parsedMessage: any, messageNumber: number) => void;
export declare function messageDispatcher(transport: Transport): MessageDispatcher;
export {};
//# sourceMappingURL=message-dispatcher.d.ts.map