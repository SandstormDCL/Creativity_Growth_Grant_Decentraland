{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.34.4",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@dcl/rpc!",
  "docComment": "",
  "name": "@dcl/rpc",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@dcl/rpc!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!AsyncProcedureResultClient:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AsyncProcedureResultClient = "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "AsyncGenerator",
              "canonicalReference": "!AsyncGenerator:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": "> | void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "AsyncProcedureResultClient",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!AsyncProcedureResultServer:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AsyncProcedureResultServer = "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": " | void> | "
            },
            {
              "kind": "Reference",
              "text": "AsyncGenerator",
              "canonicalReference": "!AsyncGenerator:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "AsyncProcedureResultServer",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!CallableProcedureClient:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CallableProcedureClient = "
            },
            {
              "kind": "Content",
              "text": "(payload: "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "AsyncIterable",
              "canonicalReference": "!AsyncIterable:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ">) => "
            },
            {
              "kind": "Reference",
              "text": "AsyncProcedureResultClient",
              "canonicalReference": "@dcl/rpc!AsyncProcedureResultClient:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "CallableProcedureClient",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!CallableProcedureServer:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CallableProcedureServer<Context> = "
            },
            {
              "kind": "Content",
              "text": "(payload: "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "AsyncIterable",
              "canonicalReference": "!AsyncIterable:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ">, context: Context) => "
            },
            {
              "kind": "Reference",
              "text": "AsyncProcedureResultServer",
              "canonicalReference": "@dcl/rpc!AsyncProcedureResultServer:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "CallableProcedureServer",
          "typeParameters": [
            {
              "typeParameterName": "Context",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!ClientModuleDefinition:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ClientModuleDefinition = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "CallableProcedureClient",
              "canonicalReference": "@dcl/rpc!CallableProcedureClient:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "ClientModuleDefinition",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@dcl/rpc!createRpcClient:function(1)",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createRpcClient(transport: "
            },
            {
              "kind": "Reference",
              "text": "Transport",
              "canonicalReference": "@dcl/rpc!Transport:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RpcClient",
              "canonicalReference": "@dcl/rpc!RpcClient:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/client.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "transport",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "createRpcClient"
        },
        {
          "kind": "Function",
          "canonicalReference": "@dcl/rpc!createRpcServer:function(1)",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createRpcServer<Context = "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": ">(options: "
            },
            {
              "kind": "Reference",
              "text": "CreateRpcServerOptions",
              "canonicalReference": "@dcl/rpc!CreateRpcServerOptions:type"
            },
            {
              "kind": "Content",
              "text": "<Context>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "RpcServer",
              "canonicalReference": "@dcl/rpc!RpcServer:type"
            },
            {
              "kind": "Content",
              "text": "<Context>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/server.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Context",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "createRpcServer"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!CreateRpcServerOptions:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CreateRpcServerOptions<Context> = "
            },
            {
              "kind": "Content",
              "text": "{\n    logger?: "
            },
            {
              "kind": "Reference",
              "text": "ILogger",
              "canonicalReference": "@dcl/rpc!ILogger:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/server.ts",
          "releaseTag": "Public",
          "name": "CreateRpcServerOptions",
          "typeParameters": [
            {
              "typeParameterName": "Context",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!ILogger:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ILogger = "
            },
            {
              "kind": "Content",
              "text": "{\n    log(message: string, extra?: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, string | number>): void;\n    error(error: string | "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ", extra?: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, string | number>): void;\n    debug(message: string, extra?: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, string | number>): void;\n    info(message: string, extra?: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, string | number>): void;\n    warn(message: string, extra?: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, string | number>): void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/server.ts",
          "releaseTag": "Public",
          "name": "ILogger",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!ModuleGeneratorFunction:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ModuleGeneratorFunction<Context> = "
            },
            {
              "kind": "Content",
              "text": "(port: "
            },
            {
              "kind": "Reference",
              "text": "RpcServerPort",
              "canonicalReference": "@dcl/rpc!RpcServerPort:type"
            },
            {
              "kind": "Content",
              "text": "<Context>, context: Context) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ServerModuleDefinition",
              "canonicalReference": "@dcl/rpc!ServerModuleDefinition:type"
            },
            {
              "kind": "Content",
              "text": "<Context>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "ModuleGeneratorFunction",
          "typeParameters": [
            {
              "typeParameterName": "Context",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!RpcClient:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RpcClient = "
            },
            {
              "kind": "Content",
              "text": "{\n    createPort(portName: string): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RpcClientPort",
              "canonicalReference": "@dcl/rpc!RpcClientPort:type"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "RpcClient",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!RpcClientPort:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RpcClientPort = "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Emitter",
              "canonicalReference": "mitt!Emitter:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RpcPortEvents",
              "canonicalReference": "@dcl/rpc!RpcPortEvents:type"
            },
            {
              "kind": "Content",
              "text": ">, \"on\" | \"all\"> & {\n    readonly portId: number;\n    readonly portName: string;\n    loadModule(moduleName: string): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<unknown>;\n    close(): void;\n    readonly state: \"open\" | \"closed\";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "RpcClientPort",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!RpcPortEvents:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RpcPortEvents = "
            },
            {
              "kind": "Content",
              "text": "{\n    close: {};\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "RpcPortEvents",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!RpcServer:type",
          "docComment": "/**\n * Once a transport is created and ready to be used, it must be attached to the server to wire the business logic that creates the modules. Servers are only helper functions that maps ports to their implementation of functions.\n *\n * Once transports are closed, all the ports belonging to the transport are closed.\n *\n * The RpcServer also generates the portIds.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RpcServer<Context = "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Emitter",
              "canonicalReference": "mitt!Emitter:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RpcServerEvents",
              "canonicalReference": "@dcl/rpc!RpcServerEvents:type"
            },
            {
              "kind": "Content",
              "text": ">, \"on\" | \"emit\"> & {\n    attachTransport(transport: "
            },
            {
              "kind": "Reference",
              "text": "Transport",
              "canonicalReference": "@dcl/rpc!Transport:type"
            },
            {
              "kind": "Content",
              "text": ", context: Context): void;\n    setHandler(handler: "
            },
            {
              "kind": "Reference",
              "text": "RpcServerHandler",
              "canonicalReference": "@dcl/rpc!RpcServerHandler:type"
            },
            {
              "kind": "Content",
              "text": "<Context>): void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "RpcServer",
          "typeParameters": [
            {
              "typeParameterName": "Context",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 13
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!RpcServerEvents:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RpcServerEvents = "
            },
            {
              "kind": "Content",
              "text": "{\n    portCreated: {\n        port: "
            },
            {
              "kind": "Reference",
              "text": "RpcServerPort",
              "canonicalReference": "@dcl/rpc!RpcServerPort:type"
            },
            {
              "kind": "Content",
              "text": "<any>;\n    };\n    portClosed: {\n        port: "
            },
            {
              "kind": "Reference",
              "text": "RpcServerPort",
              "canonicalReference": "@dcl/rpc!RpcServerPort:type"
            },
            {
              "kind": "Content",
              "text": "<any>;\n        transport: "
            },
            {
              "kind": "Reference",
              "text": "Transport",
              "canonicalReference": "@dcl/rpc!Transport:type"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    transportClosed: {\n        transport: "
            },
            {
              "kind": "Reference",
              "text": "Transport",
              "canonicalReference": "@dcl/rpc!Transport:type"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    transportError: {\n        transport: "
            },
            {
              "kind": "Reference",
              "text": "Transport",
              "canonicalReference": "@dcl/rpc!Transport:type"
            },
            {
              "kind": "Content",
              "text": ";\n        error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "RpcServerEvents",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!RpcServerHandler:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RpcServerHandler<Context> = "
            },
            {
              "kind": "Content",
              "text": "(serverPort: "
            },
            {
              "kind": "Reference",
              "text": "RpcServerPort",
              "canonicalReference": "@dcl/rpc!RpcServerPort:type"
            },
            {
              "kind": "Content",
              "text": "<Context>, transport: "
            },
            {
              "kind": "Reference",
              "text": "Transport",
              "canonicalReference": "@dcl/rpc!Transport:type"
            },
            {
              "kind": "Content",
              "text": ", context: Context) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "RpcServerHandler",
          "typeParameters": [
            {
              "typeParameterName": "Context",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!RpcServerPort:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RpcServerPort<Context> = "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Emitter",
              "canonicalReference": "mitt!Emitter:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RpcPortEvents",
              "canonicalReference": "@dcl/rpc!RpcPortEvents:type"
            },
            {
              "kind": "Content",
              "text": ">, \"on\" | \"emit\"> & {\n    readonly portId: number;\n    readonly portName: string;\n    registerModule(moduleName: string, moduleDefinition: "
            },
            {
              "kind": "Reference",
              "text": "ModuleGeneratorFunction",
              "canonicalReference": "@dcl/rpc!ModuleGeneratorFunction:type"
            },
            {
              "kind": "Content",
              "text": "<Context>): void;\n    loadModule(moduleName: string): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ServerModuleDeclaration",
              "canonicalReference": "@dcl/rpc!ServerModuleDeclaration:type"
            },
            {
              "kind": "Content",
              "text": "<any>>;\n    callProcedure(procedureId: number, argument: "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "AsyncIterable",
              "canonicalReference": "!AsyncIterable:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ">, context: Context): "
            },
            {
              "kind": "Reference",
              "text": "AsyncProcedureResultServer",
              "canonicalReference": "@dcl/rpc!AsyncProcedureResultServer:type"
            },
            {
              "kind": "Content",
              "text": ";\n    close(): void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "RpcServerPort",
          "typeParameters": [
            {
              "typeParameterName": "Context",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 21
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!SendableMessage:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SendableMessage = "
            },
            {
              "kind": "Content",
              "text": "{\n    setMessageId(number: number): void;\n    serializeBinary(): "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "SendableMessage",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!ServerModuleDeclaration:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ServerModuleDeclaration<Context> = "
            },
            {
              "kind": "Content",
              "text": "{\n    procedures: "
            },
            {
              "kind": "Reference",
              "text": "ServerModuleProcedure",
              "canonicalReference": "@dcl/rpc!ServerModuleProcedure:type"
            },
            {
              "kind": "Content",
              "text": "<Context>[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "ServerModuleDeclaration",
          "typeParameters": [
            {
              "typeParameterName": "Context",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!ServerModuleDefinition:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ServerModuleDefinition<Context> = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "CallableProcedureServer",
              "canonicalReference": "@dcl/rpc!CallableProcedureServer:type"
            },
            {
              "kind": "Content",
              "text": "<Context>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "ServerModuleDefinition",
          "typeParameters": [
            {
              "typeParameterName": "Context",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!ServerModuleProcedure:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ServerModuleProcedure<Context> = "
            },
            {
              "kind": "Content",
              "text": "{\n    procedureName: string;\n    procedureId: number;\n    callable: "
            },
            {
              "kind": "Reference",
              "text": "CallableProcedureServer",
              "canonicalReference": "@dcl/rpc!CallableProcedureServer:type"
            },
            {
              "kind": "Content",
              "text": "<Context>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "ServerModuleProcedure",
          "typeParameters": [
            {
              "typeParameterName": "Context",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!Transport:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Transport = "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Emitter",
              "canonicalReference": "mitt!Emitter:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TransportEvents",
              "canonicalReference": "@dcl/rpc!TransportEvents:type"
            },
            {
              "kind": "Content",
              "text": ">, \"on\" | \"emit\"> & {\n    sendMessage(message: "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": "): void;\n    close(): void;\n    readonly isConnected: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "Transport",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/rpc!TransportEvents:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type TransportEvents = "
            },
            {
              "kind": "Content",
              "text": "{\n    connect: {};\n    message: "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    close: {};\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "TransportEvents",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        }
      ]
    }
  ]
}
