"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketTransport = exports.defer = void 0;
const mitt_1 = __importDefault(require("mitt"));
exports.defer = Promise.prototype.then.bind(Promise.resolve());
function WebSocketTransport(socket) {
    const queue = [];
    socket.binaryType = "arraybuffer";
    socket.addEventListener("open", function () {
        flush();
    });
    function flush() {
        if (socket.readyState === socket.OPEN) {
            for (let $ of queue) {
                send($);
            }
            queue.length = 0;
        }
    }
    function send(msg) {
        if (msg instanceof Uint8Array || msg instanceof ArrayBuffer || msg instanceof SharedArrayBuffer) {
            socket.send(msg, { binary: true });
        }
        else
            throw new Error(`WebSocketTransport only accepts Uint8Array`);
    }
    const events = (0, mitt_1.default)();
    socket.addEventListener("close", () => events.emit("close", {}), { once: true });
    if (socket.readyState == socket.OPEN) {
        (0, exports.defer)(() => events.emit("connect", {}));
    }
    else {
        socket.addEventListener("open", () => events.emit("connect", {}), { once: true });
    }
    socket.addEventListener("error", (err) => {
        if (err.error) {
            events.emit("error", err.error);
        }
        else if (err.message) {
            events.emit("error", Object.assign(new Error(err.message), {
                colno: err.colno,
                error: err.error,
                filename: err.filename,
                lineno: err.lineno,
                message: err.message,
            }));
        }
    });
    socket.addEventListener("message", (message) => {
        if (message.data instanceof ArrayBuffer) {
            events.emit("message", new Uint8Array(message.data));
        }
        else {
            throw new Error(`WebSocketTransport: Received unknown type of message, expecting Uint8Array`);
        }
    });
    const api = {
        ...events,
        get isConnected() {
            return socket.readyState === socket.OPEN;
        },
        sendMessage(message) {
            if (message instanceof Uint8Array) {
                if (socket.readyState === socket.OPEN) {
                    send(message);
                }
                else {
                    queue.push(message);
                }
            }
            else {
                throw new Error(`WebSocketTransport: Received unknown type of message, expecting Uint8Array`);
            }
        },
        close() {
            socket.close();
        },
    };
    return api;
}
exports.WebSocketTransport = WebSocketTransport;
//# sourceMappingURL=WebSocket.js.map