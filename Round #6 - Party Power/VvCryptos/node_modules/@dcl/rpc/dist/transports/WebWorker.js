"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebWorkerTransport = void 0;
const mitt_1 = __importDefault(require("mitt"));
function WebWorkerTransport(worker) {
    const events = (0, mitt_1.default)();
    let didConnect = false;
    events.on('connect', () => {
        didConnect = true;
    });
    worker.addEventListener("message", () => events.emit("connect", {}), { once: true });
    worker.addEventListener("error", (err) => {
        if (err.error) {
            events.emit("error", err.error);
        }
        else if (err.message) {
            events.emit("error", Object.assign(new Error(err.message), {
                colno: err.colno,
                error: err.error,
                filename: err.filename,
                lineno: err.lineno,
                message: err.message,
            }));
        }
    });
    worker.addEventListener("message", (message) => {
        if (message.data instanceof ArrayBuffer || message.data instanceof Uint8Array) {
            events.emit("message", message.data);
        }
        else {
            throw new Error(`WebWorkerTransport: Received unknown type of message, expecting Uint8Array`);
        }
    });
    const api = {
        ...events,
        get isConnected() {
            return true;
        },
        sendMessage(message) {
            if (message instanceof ArrayBuffer || message instanceof Uint8Array) {
                worker.postMessage(message);
            }
            else {
                throw new Error(`WebWorkerTransport: Received unknown type of message, expecting Uint8Array`);
            }
        },
        close() {
            if ("terminate" in worker) {
                // tslint:disable-next-line:semicolon
                ;
                worker.terminate();
            }
            else if ("close" in worker) {
                // tslint:disable-next-line:semicolon
                ;
                worker.close();
            }
            events.emit('close', {});
        },
    };
    return api;
}
exports.WebWorkerTransport = WebWorkerTransport;
//# sourceMappingURL=WebWorker.js.map