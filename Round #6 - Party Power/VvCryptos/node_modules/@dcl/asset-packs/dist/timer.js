import { getTriggerEvents } from './events';
import { TriggerType } from './enums';
export const tickSet = new Set();
const queueDelay = new Map();
const queueInterval = new Map();
export function createTimerSystem() {
    return function timerSystem(dt) {
        intervalSystem(dt);
        delaySystem(dt);
        tickSystem(dt);
    };
    function intervalSystem(dt) {
        for (const [entity, actions] of queueInterval.entries()) {
            const triggerEvents = getTriggerEvents(entity);
            for (const action of actions) {
                if (action.timeout === action.interval) {
                    action.callback();
                }
                action.timeout -= dt;
                if (action.timeout <= 0) {
                    action.timeout = action.interval;
                    triggerEvents.emit(TriggerType.ON_LOOP);
                }
            }
        }
    }
    function delaySystem(dt) {
        for (const [entity, actions] of queueDelay.entries()) {
            const triggerEvents = getTriggerEvents(entity);
            const completedActions = [];
            let idx = 0;
            for (const action of actions) {
                action.timeout -= dt;
                if (action.timeout <= 0) {
                    action.callback();
                    triggerEvents.emit(TriggerType.ON_DELAY);
                    completedActions.push(idx);
                }
                idx++;
            }
            for (const action of completedActions) {
                actions.splice(action, 1);
            }
        }
    }
    function tickSystem(_dt) {
        for (const entity of tickSet) {
            const triggerEvents = getTriggerEvents(entity);
            triggerEvents.emit(TriggerType.ON_TICK);
        }
    }
}
export function startTimeout(entity, action, timeout, callback) {
    const actionCallbacks = queueDelay.get(entity) ?? [];
    actionCallbacks.push({ timeout, action, callback });
    queueDelay.set(entity, actionCallbacks);
}
export function stopTimeout(entity, action) {
    const delays = queueDelay.get(entity) ?? [];
    queueDelay.set(entity, delays.filter(($) => $.action !== action));
}
export function stopAllTimeouts(entity) {
    queueDelay.delete(entity);
}
export function startInterval(entity, action, interval, callback) {
    const actionCallbacks = queueInterval.get(entity) ?? [];
    actionCallbacks.push({ timeout: interval, action, callback, interval });
    queueInterval.set(entity, actionCallbacks);
}
export function stopInterval(entity, action) {
    const intervals = queueInterval.get(entity) ?? [];
    queueInterval.set(entity, intervals.filter(($) => $.action !== action));
}
export function stopAllIntervals(entity) {
    queueInterval.delete(entity);
}
//# sourceMappingURL=data:application/json;base64,