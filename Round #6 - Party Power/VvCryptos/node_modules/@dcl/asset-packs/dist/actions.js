import { VideoPlayer, Material, AudioStream, pointerEventsSystem, MeshCollider, getComponentEntityTree, Tween, } from '@dcl/ecs';
import { Quaternion, Vector3 } from '@dcl/sdk/math';
import { requestTeleport } from '~system/UserActionModule';
import { movePlayerTo, triggerEmote, triggerSceneEmote, openExternalUrl, } from '~system/RestrictedActions';
import { getActiveVideoStreams } from '~system/CommsApi';
import { ActionType, ProximityLayer, TriggerType, TweenType, clone, getComponents, initVideoPlayerComponentMaterial, } from './definitions';
import { getDefaultValue, isValidState } from './states';
import { getActionEvents, getTriggerEvents } from './events';
import { startInterval, startTimeout, stopAllIntervals, stopAllTimeouts, stopInterval, stopTimeout, } from './timer';
import { getPayload } from './action-types';
import { getUIBackground, getUIText, getUITransform, mapAlignToScreenAlign, } from './ui';
import { getExplorerComponents } from './components';
import { initTriggers, damageTargets, healTargets } from './triggers';
import { getEntityParent, getPlayerPosition, getWorldPosition, } from '@dcl-sdk/utils';
import { followMap } from './transform';
import { getEasingFunctionFromInterpolation } from './tweens';
const initedEntities = new Set();
const uiStacks = new Map();
const lastUiEntityClicked = new Map();
let internalInitActions = null;
export function initActions(entity) {
    if (internalInitActions) {
        return internalInitActions(entity);
    }
    throw new Error(`Cannot call initActions while actionsSystem has not been created`);
}
export function createActionsSystem(engine, sdkHelpers) {
    const { Animator, Transform, AudioSource, AvatarAttach, VisibilityComponent, GltfContainer, UiTransform, UiText, UiBackground, Name, Tween: TweenComponent, TweenSequence, } = getExplorerComponents(engine);
    const { Actions, States, Counter, Triggers } = getComponents(engine);
    internalInitActions = initActions;
    return function actionsSystem(_dt) {
        const entitiesWithActions = engine.getEntitiesWith(Actions);
        for (const [entity] of entitiesWithActions) {
            initActions(entity);
        }
    };
    function initActions(entity) {
        if (!Actions.has(entity) || initedEntities.has(entity)) {
            return;
        }
        const actions = Actions.get(entity);
        const types = actions.value.reduce((types, action) => types.add(action.type), new Set());
        for (const type of types) {
            switch (type) {
                case ActionType.PLAY_ANIMATION: {
                    initPlayAnimation(entity);
                    break;
                }
                default:
                    break;
            }
        }
        const actionEvents = getActionEvents(entity);
        for (const action of actions.value) {
            actionEvents.on(action.name, () => {
                switch (action.type) {
                    case ActionType.PLAY_ANIMATION: {
                        handlePlayAnimation(entity, getPayload(action));
                        break;
                    }
                    case ActionType.STOP_ANIMATION: {
                        handleStopAnimation(entity, getPayload(action));
                        break;
                    }
                    case ActionType.SET_STATE: {
                        handleSetState(entity, getPayload(action));
                        break;
                    }
                    case ActionType.START_TWEEN: {
                        handleStartTween(entity, getPayload(action));
                        break;
                    }
                    case ActionType.SET_COUNTER: {
                        handleSetCounter(entity, getPayload(action));
                        break;
                    }
                    case ActionType.INCREMENT_COUNTER: {
                        handleIncrementCounter(entity, getPayload(action));
                        break;
                    }
                    case ActionType.DECREASE_COUNTER: {
                        handleDecreaseCounter(entity, getPayload(action));
                        break;
                    }
                    case ActionType.PLAY_SOUND: {
                        handlePlaySound(entity, getPayload(action));
                        break;
                    }
                    case ActionType.STOP_SOUND: {
                        handleStopSound(entity, getPayload(action));
                        break;
                    }
                    case ActionType.SET_VISIBILITY: {
                        handleSetVisibility(entity, getPayload(action));
                        break;
                    }
                    case ActionType.ATTACH_TO_PLAYER: {
                        handleAttachToPlayer(entity, getPayload(action));
                        break;
                    }
                    case ActionType.DETACH_FROM_PLAYER: {
                        handleDetachFromPlayer(entity, getPayload(action));
                        break;
                    }
                    case ActionType.PLAY_VIDEO_STREAM: {
                        handlePlayVideo(entity, getPayload(action));
                        break;
                    }
                    case ActionType.STOP_VIDEO_STREAM: {
                        handleStopVideo(entity, getPayload(action));
                        break;
                    }
                    case ActionType.PLAY_AUDIO_STREAM: {
                        handlePlayAudioStream(entity, getPayload(action));
                        break;
                    }
                    case ActionType.STOP_AUDIO_STREAM: {
                        handleStopAudioStream(entity, getPayload(action));
                        break;
                    }
                    case ActionType.TELEPORT_PLAYER: {
                        handleTeleportPlayer(entity, getPayload(action));
                        break;
                    }
                    case ActionType.MOVE_PLAYER: {
                        handleMovePlayer(entity, getPayload(action));
                        break;
                    }
                    case ActionType.PLAY_DEFAULT_EMOTE: {
                        handlePlayDefaultEmote(entity, getPayload(action));
                        break;
                    }
                    case ActionType.PLAY_CUSTOM_EMOTE: {
                        handlePlayCustomEmote(entity, getPayload(action));
                        break;
                    }
                    case ActionType.OPEN_LINK: {
                        handleOpenLink(entity, getPayload(action));
                        break;
                    }
                    case ActionType.SHOW_TEXT: {
                        handleShowText(entity, getPayload(action));
                        break;
                    }
                    case ActionType.HIDE_TEXT: {
                        handleHideText(entity, getPayload(action));
                        break;
                    }
                    case ActionType.START_DELAY: {
                        handleStartDelay(entity, getPayload(action));
                        break;
                    }
                    case ActionType.STOP_DELAY: {
                        handleStopDelay(entity, getPayload(action));
                        break;
                    }
                    case ActionType.START_LOOP: {
                        handleStartLoop(entity, getPayload(action));
                        break;
                    }
                    case ActionType.STOP_LOOP: {
                        handleStopLoop(entity, getPayload(action));
                        break;
                    }
                    case ActionType.CLONE_ENTITY: {
                        handleCloneEntity(entity, getPayload(action));
                        break;
                    }
                    case ActionType.REMOVE_ENTITY: {
                        handleRemoveEntity(entity, getPayload(action));
                        break;
                    }
                    case ActionType.SHOW_IMAGE: {
                        handleShowImage(entity, getPayload(action));
                        break;
                    }
                    case ActionType.HIDE_IMAGE: {
                        handleHideImage(entity, getPayload(action));
                        break;
                    }
                    case ActionType.DAMAGE: {
                        handleDamage(entity, getPayload(action));
                        break;
                    }
                    case ActionType.MOVE_PLAYER_HERE: {
                        handleMovePlayerHere(entity, getPayload(action));
                        break;
                    }
                    case ActionType.FOLLOW_PLAYER: {
                        handleFollowPlayer(entity, getPayload(action));
                        break;
                    }
                    case ActionType.STOP_FOLLOWING_PLAYER: {
                        handleStopFollowingPlayer(entity, getPayload(action));
                        break;
                    }
                    case ActionType.PLACE_ON_PLAYER: {
                        handlePlaceOnPlayer(entity, getPayload(action));
                        break;
                    }
                    case ActionType.ROTATE_AS_PLAYER: {
                        handleRotateAsPlayer(entity, getPayload(action));
                        break;
                    }
                    case ActionType.PLACE_ON_CAMERA: {
                        handlePlaceOnCamera(entity, getPayload(action));
                        break;
                    }
                    case ActionType.ROTATE_AS_CAMERA: {
                        handleRotateAsCamera(entity, getPayload(action));
                        break;
                    }
                    case ActionType.SET_POSITION: {
                        handleSetPosition(entity, getPayload(action));
                        break;
                    }
                    case ActionType.SET_ROTATION: {
                        handleSetRotation(entity, getPayload(action));
                        break;
                    }
                    case ActionType.SET_SCALE: {
                        handleSetScale(entity, getPayload(action));
                        break;
                    }
                    case ActionType.RANDOM: {
                        handleRandom(entity, getPayload(action));
                        break;
                    }
                    case ActionType.BATCH: {
                        handleBatch(entity, getPayload(action));
                        break;
                    }
                    case ActionType.HEAL_PLAYER: {
                        handleHealPlayer(entity, getPayload(action));
                        break;
                    }
                    default:
                        break;
                }
            });
        }
        initedEntities.add(entity);
    }
    function initPlayAnimation(entity) {
        if (!Animator.has(entity)) {
            Animator.create(entity, {
                states: [],
            });
            Animator.stopAllAnimations(entity);
        }
    }
    function handlePlayAnimation(entity, payload) {
        const { animation, loop } = payload;
        const animator = Animator.getMutable(entity);
        if (!animator.states.some(($) => $.clip === animation)) {
            animator.states = [
                ...animator.states,
                {
                    clip: animation,
                },
            ];
        }
        Animator.stopAllAnimations(entity);
        const clip = Animator.getClip(entity, animation);
        clip.playing = true;
        clip.loop = loop ?? false;
    }
    function handleStopAnimation(entity, _payload) {
        if (Animator.has(entity)) {
            Animator.stopAllAnimations(entity);
        }
    }
    function handleSetState(entity, payload) {
        const states = States.getMutableOrNull(entity);
        if (states) {
            const defaultValue = getDefaultValue(states);
            let nextState = payload.state;
            nextState = isValidState(states, nextState) ? nextState : defaultValue;
            const previousValue = states.currentValue ?? defaultValue ?? undefined;
            states.previousValue = previousValue;
            states.currentValue = nextState;
            const triggerEvents = getTriggerEvents(entity);
            triggerEvents.emit(TriggerType.ON_STATE_CHANGE);
        }
    }
    function handleStartTween(entity, payload) {
        if (payload) {
            const initialTween = TweenComponent.getMutableOrNull(entity);
            let tween;
            switch (payload.type) {
                case TweenType.MOVE_ITEM: {
                    tween = handleMoveItem(entity, payload);
                    break;
                }
                case TweenType.ROTATE_ITEM: {
                    tween = handleRotateItem(entity, payload);
                    break;
                }
                case TweenType.SCALE_ITEM: {
                    tween = handleScaleItem(entity, payload);
                    break;
                }
                default: {
                    throw new Error(`Unknown tween type: ${payload.type}`);
                }
            }
            revertTween(entity, initialTween, tween);
        }
    }
    function revertTween(entity, initialTween, tween) {
        const tweenSequence = TweenSequence.getMutableOrNull(entity);
        let _revertTween = {
            ...tween,
        };
        if (!initialTween || !tweenSequence || !tweenSequence.loop)
            return;
        switch (initialTween.mode?.$case) {
            case 'move': {
                _revertTween = {
                    ..._revertTween,
                    mode: Tween.Mode.Move({
                        start: tween.mode.move.end,
                        end: initialTween.mode.move.start,
                    }),
                };
                break;
            }
            case 'rotate': {
                _revertTween = {
                    ..._revertTween,
                    mode: Tween.Mode.Rotate({
                        start: tween.mode.rotate
                            .end,
                        end: initialTween.mode.rotate.start,
                    }),
                };
                break;
            }
            case 'scale': {
                _revertTween = {
                    ..._revertTween,
                    mode: Tween.Mode.Scale({
                        start: tween.mode.scale.end,
                        end: initialTween.mode.scale.start,
                    }),
                };
                break;
            }
            default: {
                throw new Error(`Unknown tween mode: ${initialTween.mode}`);
            }
        }
        initialTween.playing = true;
        tweenSequence.sequence = [_revertTween, initialTween];
    }
    function handleMoveItem(entity, tween) {
        const transform = Transform.get(entity);
        const { duration, interpolationType, relative } = tween;
        const end = Vector3.create(tween.end.x, tween.end.y, tween.end.z);
        const endPosition = relative ? Vector3.add(transform.position, end) : end;
        return TweenComponent.createOrReplace(entity, {
            mode: Tween.Mode.Move({
                start: transform.position,
                end: endPosition,
            }),
            duration: duration * 1000,
            easingFunction: getEasingFunctionFromInterpolation(interpolationType),
        });
    }
    function handleRotateItem(entity, tween) {
        const transform = Transform.get(entity);
        const { duration, interpolationType, relative } = tween;
        const end = Quaternion.fromEulerDegrees(tween.end.x, tween.end.y, tween.end.z);
        const endRotation = relative
            ? Quaternion.multiply(transform.rotation, end)
            : end;
        return TweenComponent.createOrReplace(entity, {
            mode: Tween.Mode.Rotate({
                start: transform.rotation,
                end: endRotation,
            }),
            duration: duration * 1000,
            easingFunction: getEasingFunctionFromInterpolation(interpolationType),
        });
    }
    function handleScaleItem(entity, tween) {
        const transform = Transform.get(entity);
        const { duration, interpolationType, relative } = tween;
        const end = Vector3.create(tween.end.x, tween.end.y, tween.end.z);
        const endScale = relative ? Vector3.add(transform.scale, end) : end;
        return TweenComponent.createOrReplace(entity, {
            mode: Tween.Mode.Scale({
                start: transform.scale,
                end: endScale,
            }),
            duration: duration * 1000,
            easingFunction: getEasingFunctionFromInterpolation(interpolationType),
        });
    }
    function handleSetCounter(entity, payload) {
        const counter = Counter.getMutableOrNull(entity);
        if (counter) {
            counter.value = payload.counter;
            const triggerEvents = getTriggerEvents(entity);
            triggerEvents.emit(TriggerType.ON_COUNTER_CHANGE);
        }
    }
    function handleIncrementCounter(entity, payload) {
        const counter = Counter.getMutableOrNull(entity);
        const amount = payload.amount ?? 1;
        if (counter) {
            counter.value += amount;
            const triggerEvents = getTriggerEvents(entity);
            triggerEvents.emit(TriggerType.ON_COUNTER_CHANGE);
        }
    }
    function handleDecreaseCounter(entity, payload) {
        const counter = Counter.getMutableOrNull(entity);
        const amount = payload.amount ?? 1;
        if (counter) {
            counter.value -= amount;
            const triggerEvents = getTriggerEvents(entity);
            triggerEvents.emit(TriggerType.ON_COUNTER_CHANGE);
        }
    }
    function handlePlaySound(entity, payload) {
        const { src, loop, volume } = payload;
        if (AudioSource.has(entity)) {
            AudioSource.playSound(entity, src);
            const audioSource = AudioSource.getMutable(entity);
            audioSource.loop = loop;
            audioSource.volume = volume ?? 1;
        }
        else {
            AudioSource.create(entity, {
                audioClipUrl: src,
                loop,
                playing: true,
                volume: volume ?? 1,
            });
        }
    }
    function handleStopSound(entity, _payload) {
        const audioSource = AudioSource.getMutableOrNull(entity);
        if (audioSource) {
            audioSource.playing = false;
        }
    }
    function handleSetVisibility(entity, payload) {
        const { visible, collider } = payload;
        VisibilityComponent.createOrReplace(entity, { visible });
        const gltf = GltfContainer.getMutableOrNull(entity);
        const meshCollider = MeshCollider.getMutableOrNull(entity);
        if (collider !== undefined) {
            if (gltf) {
                gltf.invisibleMeshesCollisionMask = collider;
            }
            else if (meshCollider) {
                meshCollider.collisionMask = collider;
            }
        }
    }
    function handleAttachToPlayer(entity, payload) {
        const { anchorPointId } = payload;
        AvatarAttach.createOrReplace(entity, { anchorPointId });
    }
    function handleDetachFromPlayer(entity, _payload) {
        if (AvatarAttach.has(entity)) {
            AvatarAttach.deleteFrom(entity);
        }
    }
    function handleTeleportPlayer(_entity, payload) {
        const { x, y } = payload;
        requestTeleport({
            destination: `${x},${y}`,
        });
    }
    function handleMovePlayer(_entity, payload) {
        const options = {
            newRelativePosition: payload.position,
            cameraTarget: payload.cameraTarget,
        };
        void movePlayerTo(options);
    }
    function handlePlayDefaultEmote(_entity, payload) {
        const { emote } = payload;
        void triggerEmote({ predefinedEmote: emote });
    }
    function handlePlayCustomEmote(_entity, payload) {
        const { src, loop } = payload;
        void triggerSceneEmote({ src, loop });
    }
    function handleOpenLink(_entity, payload) {
        const { url } = payload;
        void openExternalUrl({ url });
    }
    async function getVideoSrc({ src, dclCast, }) {
        if (dclCast) {
            const { streams } = await getActiveVideoStreams({});
            return streams.length > 0 ? streams[0].trackSid : '';
        }
        return src ?? '';
    }
    function handlePlayVideo(entity, payload) {
        const videoSource = VideoPlayer.getMutableOrNull(entity);
        if (videoSource && videoSource.src) {
            videoSource.playing = true;
        }
        else {
            getVideoSrc(payload).then((src) => {
                if (!src)
                    return;
                VideoPlayer.createOrReplace(entity, {
                    src,
                    volume: payload.volume ?? 1,
                    loop: payload.loop ?? false,
                    playing: true,
                });
                initVideoPlayerComponentMaterial(entity, { Material }, Material.getOrNull(entity));
            });
        }
    }
    function handleStopVideo(entity, _payload) {
        const videoSource = VideoPlayer.getMutableOrNull(entity);
        if (videoSource) {
            videoSource.playing = false;
        }
    }
    function handlePlayAudioStream(entity, payload) {
        const { url, volume } = payload;
        AudioStream.createOrReplace(entity, {
            url,
            playing: true,
            volume: volume ?? 1,
        });
    }
    function handleStopAudioStream(entity, _payload) {
        const audioSource = AudioStream.getMutableOrNull(entity);
        if (audioSource) {
            audioSource.playing = false;
        }
    }
    function handleShowText(entity, payload) {
        const { text, hideAfterSeconds, font, fontSize, textAlign } = payload;
        const uiTransformComponent = getUITransform(UiTransform, entity);
        if (uiTransformComponent) {
            UiText.createOrReplace(entity, {
                value: text,
                font: font,
                fontSize,
                textAlign: textAlign,
            });
            startTimeout(entity, ActionType.HIDE_TEXT, hideAfterSeconds, () => handleHideText(entity, {}));
        }
    }
    function handleHideText(entity, _payload) {
        const uiTextComponent = UiText.getOrNull(entity);
        if (uiTextComponent) {
            UiText.deleteFrom(entity);
        }
    }
    function findActionByName(entity, name) {
        const actions = Actions.getOrNull(entity);
        return actions?.value.find(($) => $.name === name);
    }
    function handleStartDelay(entity, payload) {
        const { actions, timeout } = payload;
        for (const actionName of actions) {
            const action = findActionByName(entity, actionName);
            if (action) {
                startTimeout(entity, actionName, timeout, () => {
                    const actionEvents = getActionEvents(entity);
                    actionEvents.emit(action.name, getPayload(action));
                });
            }
        }
    }
    function handleStopDelay(entity, payload) {
        const { action } = payload;
        stopTimeout(entity, action);
    }
    function handleStartLoop(entity, payload) {
        const { actions, interval } = payload;
        for (const actionName of actions) {
            const action = findActionByName(entity, actionName);
            if (action) {
                startInterval(entity, actionName, interval, () => {
                    const actionEvents = getActionEvents(entity);
                    actionEvents.emit(action.name, getPayload(action));
                });
            }
        }
    }
    function handleStopLoop(entity, payload) {
        const { action } = payload;
        stopInterval(entity, action);
    }
    function handleCloneEntity(entity, payload) {
        const { position } = payload;
        const { cloned, entities } = clone(entity, engine, Transform, Triggers, sdkHelpers);
        for (const cloned of entities.values()) {
            initActions(cloned);
            initTriggers(cloned);
            const triggerEvents = getTriggerEvents(cloned);
            triggerEvents.emit(TriggerType.ON_CLONE);
        }
        const transform = Transform.getOrCreateMutable(cloned);
        transform.position = position;
    }
    function handleRemoveEntity(entity, _payload) {
        stopAllTimeouts(entity);
        stopAllIntervals(entity);
        const tree = getComponentEntityTree(engine, entity, Transform);
        for (const entityToRemove of tree) {
            engine.removeEntity(entityToRemove);
        }
    }
    function getUiStack(align) {
        const key = `${align.alignItems},${align.justifyContent}`;
        if (!uiStacks.has(key)) {
            uiStacks.set(key, engine.addEntity());
        }
        return uiStacks.get(key);
    }
    function handleShowImage(entity, payload) {
        const { src, text, hideAfterSeconds, fontSize, align, height, width } = payload;
        getUITransform(UiTransform, engine.RootEntity);
        const screenAlign = mapAlignToScreenAlign(align);
        const uiStack = getUiStack(screenAlign);
        const uiStackTransformComponent = getUITransform(UiTransform, uiStack);
        uiStackTransformComponent.alignItems = screenAlign.alignItems;
        uiStackTransformComponent.justifyContent = screenAlign.justifyContent;
        uiStackTransformComponent.positionType = 1;
        const imageEntity = engine.addEntity();
        const imageTransformComponent = getUITransform(UiTransform, imageEntity, width, height, 1);
        imageTransformComponent.parent = uiStack;
        imageTransformComponent.pointerFilter = 1;
        getUIBackground(UiBackground, imageEntity, src);
        if (text) {
            getUIText(UiText, imageEntity, text, fontSize, width);
        }
        pointerEventsSystem.onPointerDown({
            entity: imageEntity,
            opts: {
                button: 0,
                hoverText: 'Click',
            },
        }, () => {
            lastUiEntityClicked.set(entity, imageEntity);
            const triggerEvents = getTriggerEvents(entity);
            triggerEvents.emit(TriggerType.ON_CLICK_IMAGE);
        });
        if (hideAfterSeconds) {
            startTimeout(entity, ActionType.HIDE_IMAGE, hideAfterSeconds, () => handleHideImage(entity, { imageEntity: imageEntity }));
        }
    }
    function handleHideImage(entity, payload) {
        const { imageEntity } = payload;
        if (imageEntity) {
            engine.removeEntity(imageEntity);
        }
        else {
            const clickedImage = lastUiEntityClicked.get(entity);
            if (clickedImage) {
                engine.removeEntity(clickedImage);
                lastUiEntityClicked.delete(entity);
            }
        }
    }
    function handleDamage(entity, payload) {
        const { radius, layer, hits } = payload;
        const entityPosition = AvatarAttach.has(entity)
            ? getPlayerPosition()
            : getWorldPosition(entity);
        const getRoot = (entity) => {
            const parent = getEntityParent(entity);
            return !parent ? entity : getRoot(parent);
        };
        for (const target of damageTargets) {
            const targetPosition = getWorldPosition(target);
            const distance = Vector3.distance(entityPosition, targetPosition);
            const entityTree = Array.from(getComponentEntityTree(engine, entity, Transform));
            const isPartOfEntityTree = entityTree.some(($) => $ === target);
            if (isPartOfEntityTree) {
                continue;
            }
            if (layer) {
                if (layer === ProximityLayer.PLAYER) {
                    const root = getRoot(target);
                    if (root !== engine.PlayerEntity && root !== engine.CameraEntity) {
                        continue;
                    }
                }
                else if (layer === ProximityLayer.NON_PLAYER) {
                    const root = getRoot(target);
                    if (root === engine.PlayerEntity || root === engine.CameraEntity) {
                        continue;
                    }
                }
            }
            if (distance <= radius) {
                const total = hits === undefined ? 1 : Math.max(hits, 1);
                for (let i = 0; i < total; i++) {
                    const triggerEvents = getTriggerEvents(target);
                    triggerEvents.emit(TriggerType.ON_DAMAGE);
                }
            }
        }
    }
    function handleMovePlayerHere(entity, _payload) {
        const here = getWorldPosition(entity);
        void movePlayerTo({ newRelativePosition: here });
        const triggerEvents = getTriggerEvents(entity);
        triggerEvents.emit(TriggerType.ON_PLAYER_SPAWN);
    }
    function handlePlaceOnPlayer(entity, _payload) {
        const transform = Transform.getMutableOrNull(entity);
        const player = Transform.getOrNull(engine.PlayerEntity);
        if (transform && player) {
            transform.position = player.position;
        }
    }
    function handleRotateAsPlayer(entity, _payload) {
        const transform = Transform.getMutableOrNull(entity);
        const player = Transform.getOrNull(engine.PlayerEntity);
        if (transform && player) {
            transform.rotation = player.rotation;
        }
    }
    function handlePlaceOnCamera(entity, _payload) {
        const transform = Transform.getMutableOrNull(entity);
        const camera = Transform.getOrNull(engine.CameraEntity);
        if (transform && camera) {
            transform.position = camera.position;
        }
    }
    function handleRotateAsCamera(entity, _payload) {
        const transform = Transform.getMutableOrNull(entity);
        const camera = Transform.getOrNull(engine.CameraEntity);
        if (transform && camera) {
            transform.rotation = camera.rotation;
        }
    }
    function handleSetPosition(entity, payload) {
        const transform = Transform.getMutableOrNull(entity);
        if (transform) {
            if (payload.relative) {
                transform.position = Vector3.add(transform.position, Vector3.create(payload.x, payload.y, payload.z));
            }
            else {
                transform.position = Vector3.create(payload.x, payload.y, payload.z);
            }
        }
    }
    function handleSetRotation(entity, payload) {
        const transform = Transform.getMutableOrNull(entity);
        if (transform) {
            if (payload.relative) {
                transform.rotation = Quaternion.multiply(transform.rotation, Quaternion.fromEulerDegrees(payload.x, payload.y, payload.z));
            }
            else {
                transform.rotation = Quaternion.fromEulerDegrees(payload.x, payload.y, payload.z);
            }
        }
    }
    function handleSetScale(entity, payload) {
        const transform = Transform.getMutableOrNull(entity);
        if (transform) {
            if (payload.relative) {
                transform.scale = Vector3.add(transform.scale, Vector3.create(payload.x, payload.y, payload.z));
            }
            else {
                transform.scale = Vector3.create(payload.x, payload.y, payload.z);
            }
        }
    }
    function handleFollowPlayer(entity, payload) {
        const { speed, x, y, z, minDistance } = payload;
        followMap.set(entity, {
            target: engine.PlayerEntity,
            speed,
            minDistance,
            axes: { x, y, z },
        });
    }
    function handleStopFollowingPlayer(entity, _payload) {
        followMap.delete(entity);
    }
    function handleRandom(entity, payload) {
        const { actions } = payload;
        const actionEvents = getActionEvents(entity);
        const actionName = actions[Math.floor(Math.random() * actions.length)];
        const action = findActionByName(entity, actionName);
        if (action) {
            actionEvents.emit(action.name, getPayload(action));
        }
    }
    function handleBatch(entity, payload) {
        const { actions } = payload;
        const actionEvents = getActionEvents(entity);
        for (const actionName of actions) {
            const action = findActionByName(entity, actionName);
            if (action) {
                actionEvents.emit(action.name, getPayload(action));
            }
        }
    }
    function handleHealPlayer(entity, payload) {
        const { multiplier } = payload;
        const getRoot = (entity) => {
            const parent = getEntityParent(entity);
            return !parent ? entity : getRoot(parent);
        };
        for (const target of healTargets) {
            const root = getRoot(target);
            if (root === engine.PlayerEntity) {
                const triggerEvents = getTriggerEvents(target);
                const total = Math.max(multiplier ?? 1, 1);
                for (let i = 0; i < total; i++) {
                    triggerEvents.emit(TriggerType.ON_HEAL_PLAYER);
                }
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,