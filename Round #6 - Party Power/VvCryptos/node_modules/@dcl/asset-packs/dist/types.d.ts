import { Entity } from '@dcl/ecs';
export type AssetPackData = {
    id: string;
    name: string;
};
export declare function isAssetPackData(value: any): value is AssetPackData;
export type LegacyAssetData = {
    id: string;
    name: string;
    category: string;
    tags: string[];
    components: Record<string, any>;
};
export type AssetData = {
    id: string;
    name: string;
    category: string;
    tags: string[];
    composite: {
        version: number;
        components: Array<{
            name: string;
            data: {
                [key: string]: {
                    json: any;
                };
            };
        }>;
    };
};
export interface TriggerData {
    value: {
        type: string;
        actions: {
            id: string;
            name: string;
        }[];
    }[];
}
export declare function isAssetData(value: any): value is AssetData;
export declare function isLegacyAssetData(value: any): value is LegacyAssetData;
export declare function getTriggerComponent(value: AssetData): TriggerData | undefined;
export declare function assertValidTriggerComponent(assetName: string, trigger: TriggerData): void;
export type Asset = AssetData & {
    contents: Record<string, string>;
};
export type AssetPack = AssetPackData & {
    thumbnail: string;
    assets: Asset[];
};
export type Catalog = {
    assetPacks: AssetPack[];
};
export type Component = {
    name: string;
    data: {
        [key: string]: {
            json: any;
        };
    };
};
export type ISDKHelpers = {
    syncEntity?: SyncEntitySDK;
};
export type SyncEntitySDK = (entityId: Entity, componentIds: number[], entityEnumId?: number | undefined) => void;
