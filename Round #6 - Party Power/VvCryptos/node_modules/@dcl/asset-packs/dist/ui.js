import { AlignMode, Font } from './enums';
function getAlignMode(align, isColumn) {
    switch (align) {
        case AlignMode.TAM_TOP_LEFT: {
            return {
                alignItems: 1,
                justifyContent: 0,
            };
        }
        case AlignMode.TAM_TOP_CENTER: {
            return isColumn
                ? {
                    alignItems: 2,
                    justifyContent: 0,
                }
                : {
                    alignItems: 1,
                    justifyContent: 1,
                };
        }
        case AlignMode.TAM_TOP_RIGHT: {
            return isColumn
                ? {
                    alignItems: 3,
                    justifyContent: 0,
                }
                : {
                    alignItems: 1,
                    justifyContent: 2,
                };
        }
        case AlignMode.TAM_MIDDLE_LEFT: {
            return isColumn
                ? {
                    alignItems: 1,
                    justifyContent: 1,
                }
                : {
                    alignItems: 2,
                    justifyContent: 0,
                };
        }
        case AlignMode.TAM_MIDDLE_CENTER: {
            return {
                alignItems: 2,
                justifyContent: 1,
            };
        }
        case AlignMode.TAM_MIDDLE_RIGHT: {
            return isColumn
                ? {
                    alignItems: 3,
                    justifyContent: 1,
                }
                : {
                    alignItems: 2,
                    justifyContent: 2,
                };
        }
        case AlignMode.TAM_BOTTOM_LEFT: {
            return isColumn
                ? {
                    alignItems: 1,
                    justifyContent: 2,
                }
                : {
                    alignItems: 2,
                    justifyContent: 1,
                };
        }
        case AlignMode.TAM_BOTTOM_CENTER: {
            return isColumn
                ? {
                    alignItems: 2,
                    justifyContent: 2,
                }
                : {
                    alignItems: 3,
                    justifyContent: 1,
                };
        }
        case AlignMode.TAM_BOTTOM_RIGHT: {
            return {
                alignItems: 3,
                justifyContent: 2,
            };
        }
    }
}
export function mapAlignToScreenAlign(align, flexDirection = 0) {
    const isColumn = flexDirection === 1;
    switch (align) {
        case AlignMode.TAM_TOP_LEFT:
            return getAlignMode(align, isColumn);
        case AlignMode.TAM_TOP_CENTER:
            return getAlignMode(align, isColumn);
        case AlignMode.TAM_TOP_RIGHT:
            return getAlignMode(align, isColumn);
        case AlignMode.TAM_MIDDLE_LEFT:
            return getAlignMode(align, isColumn);
        case AlignMode.TAM_MIDDLE_CENTER:
            return getAlignMode(align, isColumn);
        case AlignMode.TAM_MIDDLE_RIGHT:
            return getAlignMode(align, isColumn);
        case AlignMode.TAM_BOTTOM_LEFT:
            return getAlignMode(align, isColumn);
        case AlignMode.TAM_BOTTOM_CENTER:
            return getAlignMode(align, isColumn);
        case AlignMode.TAM_BOTTOM_RIGHT:
            return getAlignMode(align, isColumn);
        default:
            throw new Error(`Unsupported AlignMode: ${align}`);
    }
}
export function getUITransform(component, entiy, height = 100, width = 100, unit = 2) {
    let uiTransformComponent = component.getMutableOrNull(entiy);
    if (!uiTransformComponent) {
        uiTransformComponent = component.create(entiy);
        uiTransformComponent.heightUnit = unit;
        uiTransformComponent.widthUnit = unit;
        uiTransformComponent.height = height;
        uiTransformComponent.width = width;
        uiTransformComponent.maxHeightUnit = unit;
        uiTransformComponent.maxWidthUnit = unit;
        uiTransformComponent.maxHeight = height;
        uiTransformComponent.maxWidth = width;
    }
    if (entiy === 0) {
        uiTransformComponent.positionType = 1;
    }
    return uiTransformComponent;
}
export function getUIBackground(component, entity, src, textureMode = 0, wrapMode = 1) {
    return component.createOrReplace(entity, {
        textureMode,
        texture: {
            tex: {
                $case: 'texture',
                texture: {
                    src,
                    wrapMode,
                },
            },
        },
        uvs: [],
    });
}
function breakLines(text, linelength) {
    const lineBreak = '\n';
    let counter = 0;
    let line = '';
    let returnText = '';
    let bMatchFound = false;
    const lineLen = linelength ? linelength : 50;
    if (!text)
        return '';
    if (text.length < lineLen + 1) {
        return text;
    }
    while (counter < text.length) {
        line = text.substring(counter, counter + lineLen);
        bMatchFound = false;
        if (line.length == lineLen) {
            for (let i = line.length; i > -1; i--) {
                if (line.substring(i, i + 1) == ' ') {
                    counter += line.substring(0, i).length;
                    line = line.substring(0, i) + lineBreak;
                    returnText += line;
                    bMatchFound = true;
                    break;
                }
            }
            if (!bMatchFound) {
                counter += line.length;
                line = line + lineBreak;
                returnText += line;
            }
        }
        else {
            returnText += line;
            break;
        }
    }
    return returnText;
}
export function getUIText(component, entity, text, fontSize = 10, containerWidth, align = AlignMode.TAM_MIDDLE_CENTER, color = { r: 0, g: 0, b: 0, a: 1 }) {
    const lineLength = Math.floor(containerWidth / (fontSize / 1.7));
    return component.createOrReplace(entity, {
        value: breakLines(text, lineLength),
        fontSize,
        font: Font.F_MONOSPACE,
        textAlign: align,
        color,
    });
}
//# sourceMappingURL=data:application/json;base64,