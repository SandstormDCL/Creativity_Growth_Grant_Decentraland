import { ComponentName } from './enums';
export function isAssetPackData(value) {
    return (typeof value === 'object' &&
        value !== null &&
        typeof value.id === 'string' &&
        typeof value.name === 'string');
}
export function isAssetData(value) {
    return (value &&
        typeof value === 'object' &&
        'composite' in value &&
        typeof value.composite === 'object' &&
        'version' in value.composite &&
        'components' in value.composite &&
        Array.isArray(value.composite.components));
}
export function isLegacyAssetData(value) {
    return (typeof value === 'object' &&
        value !== null &&
        typeof value.id === 'string' &&
        typeof value.name === 'string' &&
        typeof value.category === 'string' &&
        typeof value.components === 'object' &&
        value.components !== null);
}
export function getTriggerComponent(value) {
    return value.composite.components.find((c) => c.name === ComponentName.TRIGGERS)?.data[0]?.json;
}
export function assertValidTriggerComponent(assetName, trigger) {
    trigger.value.forEach(({ type, actions }) => {
        actions.forEach(({ id, name }) => {
            if (!id || !name) {
                throw new Error(`Invalid actions found on "${assetName}" for trigger with type "${type}"`);
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFNBQVMsQ0FBQTtBQU92QyxNQUFNLFVBQVUsZUFBZSxDQUFDLEtBQVU7SUFDeEMsT0FBTyxDQUNMLE9BQU8sS0FBSyxLQUFLLFFBQVE7UUFDekIsS0FBSyxLQUFLLElBQUk7UUFDZCxPQUFPLEtBQUssQ0FBQyxFQUFFLEtBQUssUUFBUTtRQUM1QixPQUFPLEtBQUssQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUMvQixDQUFBO0FBQ0gsQ0FBQztBQXNDRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEtBQVU7SUFDcEMsT0FBTyxDQUNMLEtBQUs7UUFDTCxPQUFPLEtBQUssS0FBSyxRQUFRO1FBQ3pCLFdBQVcsSUFBSSxLQUFLO1FBQ3BCLE9BQU8sS0FBSyxDQUFDLFNBQVMsS0FBSyxRQUFRO1FBQ25DLFNBQVMsSUFBSSxLQUFLLENBQUMsU0FBUztRQUM1QixZQUFZLElBQUksS0FBSyxDQUFDLFNBQVM7UUFDL0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUMxQyxDQUFBO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxLQUFVO0lBQzFDLE9BQU8sQ0FDTCxPQUFPLEtBQUssS0FBSyxRQUFRO1FBQ3pCLEtBQUssS0FBSyxJQUFJO1FBQ2QsT0FBTyxLQUFLLENBQUMsRUFBRSxLQUFLLFFBQVE7UUFDNUIsT0FBTyxLQUFLLENBQUMsSUFBSSxLQUFLLFFBQVE7UUFDOUIsT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFFBQVE7UUFDbEMsT0FBTyxLQUFLLENBQUMsVUFBVSxLQUFLLFFBQVE7UUFDcEMsS0FBSyxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQzFCLENBQUE7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUFDLEtBQWdCO0lBQ2xELE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUNwQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxhQUFhLENBQUMsUUFBUSxDQUN6QyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUErQixDQUFBO0FBQzdDLENBQUM7QUFFRCxNQUFNLFVBQVUsMkJBQTJCLENBQ3pDLFNBQWlCLEVBQ2pCLE9BQW9CO0lBRXBCLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRTtRQUMxQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRTtZQUMvQixJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQ2IsNkJBQTZCLFNBQVMsNEJBQTRCLElBQUksR0FBRyxDQUMxRSxDQUFBO1lBQ0gsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnQGRjbC9lY3MnXG5pbXBvcnQgeyBDb21wb25lbnROYW1lIH0gZnJvbSAnLi9lbnVtcydcblxuZXhwb3J0IHR5cGUgQXNzZXRQYWNrRGF0YSA9IHtcbiAgaWQ6IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQXNzZXRQYWNrRGF0YSh2YWx1ZTogYW55KTogdmFsdWUgaXMgQXNzZXRQYWNrRGF0YSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgIHZhbHVlICE9PSBudWxsICYmXG4gICAgdHlwZW9mIHZhbHVlLmlkID09PSAnc3RyaW5nJyAmJlxuICAgIHR5cGVvZiB2YWx1ZS5uYW1lID09PSAnc3RyaW5nJ1xuICApXG59XG5cbmV4cG9ydCB0eXBlIExlZ2FjeUFzc2V0RGF0YSA9IHtcbiAgaWQ6IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbiAgY2F0ZWdvcnk6IHN0cmluZ1xuICB0YWdzOiBzdHJpbmdbXVxuICBjb21wb25lbnRzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG59XG5cbmV4cG9ydCB0eXBlIEFzc2V0RGF0YSA9IHtcbiAgaWQ6IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbiAgY2F0ZWdvcnk6IHN0cmluZ1xuICB0YWdzOiBzdHJpbmdbXVxuICBjb21wb3NpdGU6IHtcbiAgICB2ZXJzaW9uOiBudW1iZXJcbiAgICBjb21wb25lbnRzOiBBcnJheTx7XG4gICAgICBuYW1lOiBzdHJpbmdcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgW2tleTogc3RyaW5nXToge1xuICAgICAgICAgIGpzb246IGFueVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfT5cbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyaWdnZXJEYXRhIHtcbiAgdmFsdWU6IHtcbiAgICB0eXBlOiBzdHJpbmdcbiAgICBhY3Rpb25zOiB7XG4gICAgICBpZDogc3RyaW5nXG4gICAgICBuYW1lOiBzdHJpbmdcbiAgICB9W11cbiAgfVtdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Fzc2V0RGF0YSh2YWx1ZTogYW55KTogdmFsdWUgaXMgQXNzZXREYXRhIHtcbiAgcmV0dXJuIChcbiAgICB2YWx1ZSAmJlxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICAnY29tcG9zaXRlJyBpbiB2YWx1ZSAmJlxuICAgIHR5cGVvZiB2YWx1ZS5jb21wb3NpdGUgPT09ICdvYmplY3QnICYmXG4gICAgJ3ZlcnNpb24nIGluIHZhbHVlLmNvbXBvc2l0ZSAmJlxuICAgICdjb21wb25lbnRzJyBpbiB2YWx1ZS5jb21wb3NpdGUgJiZcbiAgICBBcnJheS5pc0FycmF5KHZhbHVlLmNvbXBvc2l0ZS5jb21wb25lbnRzKVxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xlZ2FjeUFzc2V0RGF0YSh2YWx1ZTogYW55KTogdmFsdWUgaXMgTGVnYWN5QXNzZXREYXRhIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgdmFsdWUgIT09IG51bGwgJiZcbiAgICB0eXBlb2YgdmFsdWUuaWQgPT09ICdzdHJpbmcnICYmXG4gICAgdHlwZW9mIHZhbHVlLm5hbWUgPT09ICdzdHJpbmcnICYmXG4gICAgdHlwZW9mIHZhbHVlLmNhdGVnb3J5ID09PSAnc3RyaW5nJyAmJlxuICAgIHR5cGVvZiB2YWx1ZS5jb21wb25lbnRzID09PSAnb2JqZWN0JyAmJlxuICAgIHZhbHVlLmNvbXBvbmVudHMgIT09IG51bGxcbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJpZ2dlckNvbXBvbmVudCh2YWx1ZTogQXNzZXREYXRhKTogVHJpZ2dlckRhdGEgfCB1bmRlZmluZWQge1xuICByZXR1cm4gdmFsdWUuY29tcG9zaXRlLmNvbXBvbmVudHMuZmluZChcbiAgICAoYykgPT4gYy5uYW1lID09PSBDb21wb25lbnROYW1lLlRSSUdHRVJTLFxuICApPy5kYXRhWzBdPy5qc29uIGFzIFRyaWdnZXJEYXRhIHwgdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRWYWxpZFRyaWdnZXJDb21wb25lbnQoXG4gIGFzc2V0TmFtZTogc3RyaW5nLFxuICB0cmlnZ2VyOiBUcmlnZ2VyRGF0YSxcbikge1xuICB0cmlnZ2VyLnZhbHVlLmZvckVhY2goKHsgdHlwZSwgYWN0aW9ucyB9KSA9PiB7XG4gICAgYWN0aW9ucy5mb3JFYWNoKCh7IGlkLCBuYW1lIH0pID0+IHtcbiAgICAgIGlmICghaWQgfHwgIW5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBJbnZhbGlkIGFjdGlvbnMgZm91bmQgb24gXCIke2Fzc2V0TmFtZX1cIiBmb3IgdHJpZ2dlciB3aXRoIHR5cGUgXCIke3R5cGV9XCJgLFxuICAgICAgICApXG4gICAgICB9XG4gICAgfSlcbiAgfSlcbn1cblxuZXhwb3J0IHR5cGUgQXNzZXQgPSBBc3NldERhdGEgJiB7IGNvbnRlbnRzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IH1cbmV4cG9ydCB0eXBlIEFzc2V0UGFjayA9IEFzc2V0UGFja0RhdGEgJiB7IHRodW1ibmFpbDogc3RyaW5nOyBhc3NldHM6IEFzc2V0W10gfVxuZXhwb3J0IHR5cGUgQ2F0YWxvZyA9IHsgYXNzZXRQYWNrczogQXNzZXRQYWNrW10gfVxuXG5leHBvcnQgdHlwZSBDb21wb25lbnQgPSB7XG4gIG5hbWU6IHN0cmluZ1xuICBkYXRhOiB7XG4gICAgW2tleTogc3RyaW5nXToge1xuICAgICAganNvbjogYW55XG4gICAgfVxuICB9XG59XG5cblxuZXhwb3J0IHR5cGUgSVNES0hlbHBlcnMgPSB7XG4gIC8vIFN5bmNFbnRpdHkgaGVscGVyIHRvIGNyZWF0ZSBuZXR3b3JrIGVudGl0aWVzIGF0IHJ1bnRpbWUuXG4gIHN5bmNFbnRpdHk/OiBTeW5jRW50aXR5U0RLXG59XG5leHBvcnQgdHlwZSBTeW5jRW50aXR5U0RLID0gIChlbnRpdHlJZDogRW50aXR5LCBjb21wb25lbnRJZHM6IG51bWJlcltdLCBlbnRpdHlFbnVtSWQ/OiBudW1iZXIgfCB1bmRlZmluZWQpID0+IHZvaWRcbiJdfQ==