import { TweenState, } from '@dcl/ecs';
import { Vector3 } from '@dcl/sdk/math';
import { triggers, LAYER_1, NO_LAYERS, getPlayerPosition, getWorldPosition, } from '@dcl-sdk/utils';
import { ComponentName, TriggerConditionOperation, TriggerConditionType, TriggerType, getConditionTypesByComponentName, getComponents, } from './definitions';
import { getCurrentValue, getPreviousValue } from './states';
import { getActionEvents, getTriggerEvents } from './events';
import { getPayload } from './action-types';
import { globalInputActions } from './input-actions';
import { tickSet } from './timer';
const initedEntities = new Set();
const actionQueue = [];
export const damageTargets = new Set();
export const healTargets = new Set();
let internalInitTriggers = null;
export function initTriggers(entity) {
    if (internalInitTriggers) {
        return internalInitTriggers(entity);
    }
    throw new Error(`Cannot call initTriggers while triggersSystem has not been created`);
}
export function createTriggersSystem(engine, components, pointerEventsSystem, tweenSystem) {
    const { Transform, Tween: TweenComponent, PointerEvents } = components;
    const { Actions, States, Counter, Triggers } = getComponents(engine);
    internalInitTriggers = initEntityTriggers;
    return function triggersSystem(_dt) {
        while (actionQueue.length > 0) {
            const { entity, action } = actionQueue.shift();
            const actionEvents = getActionEvents(entity);
            actionEvents.emit(action.name, getPayload(action));
        }
        const entitiesWithTriggers = engine.getEntitiesWith(Triggers);
        for (const [entity] of entitiesWithTriggers) {
            initEntityTriggers(entity);
            handleOnTweenEnd(entity);
        }
    };
    function initEntityTriggers(entity) {
        if (!Triggers.has(entity) || initedEntities.has(entity)) {
            return;
        }
        const triggers = Triggers.get(entity);
        const types = triggers.value.reduce((types, trigger) => types.add(trigger.type), new Set());
        for (const type of types) {
            switch (type) {
                case TriggerType.ON_CLICK: {
                    initOnClickTrigger(entity);
                    break;
                }
                case TriggerType.ON_INPUT_ACTION: {
                    initOnInputActionTrigger(entity);
                    break;
                }
                case TriggerType.ON_PLAYER_ENTERS_AREA:
                case TriggerType.ON_PLAYER_LEAVES_AREA: {
                    initOnPlayerTriggerArea(entity);
                    break;
                }
                case TriggerType.ON_DAMAGE: {
                    initOnDamage(entity);
                    break;
                }
                case TriggerType.ON_HEAL_PLAYER: {
                    initOnHealPlayer(entity);
                }
                case TriggerType.ON_GLOBAL_CLICK: {
                    initOnGlobalCick(entity);
                    break;
                }
                case TriggerType.ON_GLOBAL_PRIMARY: {
                    initOnGlobalPrimary(entity);
                    break;
                }
                case TriggerType.ON_GLOBAL_SECONDARY: {
                    initOnGlobalSecondary(entity);
                    break;
                }
                case TriggerType.ON_TICK: {
                    initOnTick(entity);
                    break;
                }
            }
        }
        const triggerEvents = getTriggerEvents(entity);
        for (const trigger of triggers.value) {
            triggerEvents.on(trigger.type, () => {
                if (checkConditions(trigger)) {
                    for (const triggerAction of trigger.actions) {
                        if (isValidAction(triggerAction)) {
                            const entity = getEntityByAction(triggerAction);
                            if (entity) {
                                const actions = Actions.getOrNull(entity);
                                if (actions) {
                                    const action = actions.value.find(($) => $.name === triggerAction.name);
                                    if (action) {
                                        actionQueue.push({ entity, action });
                                    }
                                }
                            }
                        }
                    }
                }
            });
        }
        triggerEvents.emit(TriggerType.ON_SPAWN);
        initedEntities.add(entity);
    }
    function isValidAction(action) {
        const { id, name } = action;
        return !!id && !!name;
    }
    function checkConditions(trigger) {
        if (trigger.conditions && trigger.conditions.length > 0) {
            const conditions = trigger.conditions.map(checkCondition);
            const isTrue = (result) => !!result;
            const operation = trigger.operation || TriggerConditionOperation.AND;
            switch (operation) {
                case TriggerConditionOperation.AND: {
                    return conditions.every(isTrue);
                }
                case TriggerConditionOperation.OR: {
                    return conditions.some(isTrue);
                }
            }
        }
        return true;
    }
    function checkCondition(condition) {
        const entity = getEntityByCondition(condition);
        if (entity) {
            try {
                switch (condition.type) {
                    case TriggerConditionType.WHEN_STATE_IS: {
                        const states = States.getOrNull(entity);
                        if (states !== null) {
                            const currentValue = getCurrentValue(states);
                            return currentValue === condition.value;
                        }
                        break;
                    }
                    case TriggerConditionType.WHEN_STATE_IS_NOT: {
                        const states = States.getOrNull(entity);
                        if (states !== null) {
                            const currentValue = getCurrentValue(states);
                            return currentValue !== condition.value;
                        }
                        break;
                    }
                    case TriggerConditionType.WHEN_PREVIOUS_STATE_IS: {
                        const states = States.getOrNull(entity);
                        if (states !== null) {
                            const previousValue = getPreviousValue(states);
                            return previousValue === condition.value;
                        }
                        break;
                    }
                    case TriggerConditionType.WHEN_PREVIOUS_STATE_IS_NOT: {
                        const states = States.getOrNull(entity);
                        if (states !== null) {
                            const previousValue = getPreviousValue(states);
                            return previousValue !== condition.value;
                        }
                        break;
                    }
                    case TriggerConditionType.WHEN_COUNTER_EQUALS: {
                        const counter = Counter.getOrNull(entity);
                        if (counter !== null) {
                            const numeric = Number(condition.value);
                            if (!isNaN(numeric)) {
                                return counter.value === numeric;
                            }
                        }
                        break;
                    }
                    case TriggerConditionType.WHEN_COUNTER_IS_GREATER_THAN: {
                        const counter = Counter.getOrNull(entity);
                        if (counter !== null) {
                            const numeric = Number(condition.value);
                            if (!isNaN(numeric)) {
                                return counter.value > numeric;
                            }
                        }
                        break;
                    }
                    case TriggerConditionType.WHEN_COUNTER_IS_LESS_THAN: {
                        const counter = Counter.getOrNull(entity);
                        if (counter !== null) {
                            const numeric = Number(condition.value);
                            if (!isNaN(numeric)) {
                                return counter.value < numeric;
                            }
                        }
                        break;
                    }
                    case TriggerConditionType.WHEN_DISTANCE_TO_PLAYER_LESS_THAN: {
                        const position = getWorldPosition(entity);
                        const numeric = Number(condition.value);
                        if (!isNaN(numeric)) {
                            return Vector3.distance(position, getPlayerPosition()) < numeric;
                        }
                        break;
                    }
                    case TriggerConditionType.WHEN_DISTANCE_TO_PLAYER_GREATER_THAN: {
                        const position = getWorldPosition(entity);
                        const numeric = Number(condition.value);
                        if (!isNaN(numeric)) {
                            return Vector3.distance(position, getPlayerPosition()) > numeric;
                        }
                        break;
                    }
                }
            }
            catch (error) {
                console.error('Error in condition', condition);
            }
        }
        return false;
    }
    function getEntityById(componentName, id) {
        const Component = engine.getComponent(componentName);
        const entities = Array.from(engine.getEntitiesWith(Component));
        const result = entities.find(([_entity, value]) => value.id === id);
        return Array.isArray(result) && result.length > 0 ? result[0] : null;
    }
    function getEntityByAction(action) {
        if (action.id) {
            const entity = getEntityById(ComponentName.ACTIONS, action.id);
            if (entity) {
                return entity;
            }
        }
        return null;
    }
    function getEntityByCondition(condition) {
        const componentName = Object.values(ComponentName)
            .map((componentName) => ({
            componentName,
            conditionTypes: getConditionTypesByComponentName(componentName),
        }))
            .reduce((result, { componentName, conditionTypes }) => conditionTypes.includes(condition.type) ? componentName : result, null);
        if (componentName && condition.id) {
            const entity = getEntityById(componentName, condition.id);
            if (entity) {
                return entity;
            }
        }
        return null;
    }
    function initOnClickTrigger(entity) {
        const pointerEvent = PointerEvents.getMutableOrNull(entity);
        const opts = { button: 0, hoverText: 'Click' };
        if (pointerEvent) {
            pointerEvent.pointerEvents = pointerEvent.pointerEvents.filter($ => !($.eventInfo?.button === opts.button && $.eventInfo.hoverText === opts.hoverText));
        }
        pointerEventsSystem.onPointerDown({
            entity,
            opts
        }, () => {
            const triggerEvents = getTriggerEvents(entity);
            triggerEvents.emit(TriggerType.ON_CLICK);
        });
    }
    function initOnInputActionTrigger(entity) {
        const pointerEvent = PointerEvents.getMutableOrNull(entity);
        const opts = {
            button: 1,
            hoverText: 'Press'
        };
        if (pointerEvent) {
            pointerEvent.pointerEvents = pointerEvent.pointerEvents.filter($ => !($.eventInfo?.button === opts.button && $.eventInfo.hoverText === opts.hoverText));
        }
        pointerEventsSystem.onPointerDown({
            entity,
            opts,
        }, () => {
            const triggerEvents = getTriggerEvents(entity);
            triggerEvents.emit(TriggerType.ON_INPUT_ACTION);
        });
    }
    function initOnPlayerTriggerArea(entity) {
        const transform = Transform.getOrNull(entity);
        triggers.addTrigger(entity, NO_LAYERS, LAYER_1, [
            {
                type: 'box',
                scale: transform ? transform.scale : { x: 1, y: 1, z: 1 },
            },
        ], () => {
            const triggerEvents = getTriggerEvents(entity);
            triggerEvents.emit(TriggerType.ON_PLAYER_ENTERS_AREA);
        }, () => {
            const triggerEvents = getTriggerEvents(entity);
            triggerEvents.emit(TriggerType.ON_PLAYER_LEAVES_AREA);
        });
    }
    function initOnDamage(entity) {
        damageTargets.add(entity);
    }
    function initOnHealPlayer(entity) {
        healTargets.add(entity);
    }
    function initOnGlobalCick(entity) {
        globalInputActions.on(0, () => {
            const triggerEvents = getTriggerEvents(entity);
            triggerEvents.emit(TriggerType.ON_GLOBAL_CLICK);
        });
    }
    function initOnGlobalPrimary(entity) {
        globalInputActions.on(1, () => {
            const triggerEvents = getTriggerEvents(entity);
            triggerEvents.emit(TriggerType.ON_GLOBAL_PRIMARY);
        });
    }
    function initOnGlobalSecondary(entity) {
        globalInputActions.on(2, () => {
            const triggerEvents = getTriggerEvents(entity);
            triggerEvents.emit(TriggerType.ON_GLOBAL_SECONDARY);
        });
    }
    function initOnTick(entity) {
        tickSet.add(entity);
    }
    function handleOnTweenEnd(entity) {
        if (TweenComponent.getOrNull(entity) &&
            TweenState.getOrNull(entity)?.state === 1 &&
            tweenSystem.tweenCompleted(entity)) {
            const triggerEvents = getTriggerEvents(entity);
            triggerEvents.emit(TriggerType.ON_TWEEN_END);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,