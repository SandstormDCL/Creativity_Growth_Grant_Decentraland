import { getComponentEntityTree } from '@dcl/ecs';
import { getNextId, requiresId } from './id';
import { isLastWriteWinComponent } from './lww';
import { getExplorerComponents } from './components';
export function clone(entity, engine, Transform, Triggers, sdkHelpers) {
    const ids = new Map();
    const entities = new Map();
    const tree = getComponentEntityTree(engine, entity, Transform);
    const { NetworkEntity, SyncComponents } = getExplorerComponents(engine);
    for (const original of tree) {
        const cloned = engine.addEntity();
        for (const component of engine.componentsIter()) {
            if (component.has(original)) {
                let newValue = JSON.parse(JSON.stringify(component.get(original)));
                if (requiresId(component)) {
                    const oldId = newValue.id;
                    const newId = getNextId(engine);
                    ids.set(oldId, newId);
                    newValue = {
                        ...newValue,
                        id: newId,
                    };
                }
                if (isLastWriteWinComponent(component)) {
                    component.createOrReplace(cloned, newValue);
                }
            }
        }
        entities.set(original, cloned);
    }
    const clones = Array.from(entities.values()).reverse();
    for (const cloned of clones) {
        if (Triggers.has(cloned)) {
            const triggers = Triggers.getMutable(cloned);
            for (const trigger of triggers.value) {
                for (const action of trigger.actions) {
                    if (action.id) {
                        const newId = ids.get(action.id);
                        if (newId) {
                            action.id = newId;
                        }
                    }
                }
                if (trigger.conditions) {
                    for (const condition of trigger.conditions) {
                        if (condition.id) {
                            const newId = ids.get(condition.id);
                            if (newId) {
                                condition.id = newId;
                            }
                        }
                    }
                }
            }
        }
        if (NetworkEntity.has(cloned)) {
            const syncComponent = SyncComponents.getOrNull(cloned);
            if (syncComponent && sdkHelpers?.syncEntity) {
                sdkHelpers?.syncEntity(cloned, syncComponent.componentIds);
            }
        }
        const transform = Transform.getMutableOrNull(cloned);
        if (transform && transform.parent) {
            const newParent = entities.get(transform.parent);
            if (newParent) {
                transform.parent = newParent;
            }
        }
    }
    const cloned = clones[0];
    return { ids, entities, cloned };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY2xvbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUlMLHNCQUFzQixFQUN2QixNQUFNLFVBQVUsQ0FBQTtBQUNqQixPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQTtBQUM1QyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxPQUFPLENBQUE7QUFFL0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sY0FBYyxDQUFBO0FBRXBELE1BQU0sVUFBVSxLQUFLLENBQ25CLE1BQWMsRUFDZCxNQUFlLEVBQ2YsU0FBcUMsRUFDckMsUUFBMkIsRUFDM0IsVUFBd0I7SUFFeEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUE7SUFDckMsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUE7SUFDMUMsTUFBTSxJQUFJLEdBQUcsc0JBQXNCLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQTtJQUM5RCxNQUFNLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxHQUFHLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3ZFLEtBQUssTUFBTSxRQUFRLElBQUksSUFBSSxFQUFFLENBQUM7UUFDNUIsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFBO1FBRWpDLEtBQUssTUFBTSxTQUFTLElBQUksTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUM7WUFDaEQsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7Z0JBQzVCLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDbEUsSUFBSSxVQUFVLENBQUMs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QU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUV4QixPQUFPLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQTtBQUNsQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRW50aXR5LFxuICBJRW5naW5lLFxuICBUcmFuc2Zvcm1Db21wb25lbnRFeHRlbmRlZCxcbiAgZ2V0Q29tcG9uZW50RW50aXR5VHJlZVxufSBmcm9tICdAZGNsL2VjcydcbmltcG9ydCB7IGdldE5leHRJZCwgcmVxdWlyZXNJZCB9IGZyb20gJy4vaWQnXG5pbXBvcnQgeyBpc0xhc3RXcml0ZVdpbkNvbXBvbmVudCB9IGZyb20gJy4vbHd3J1xuaW1wb3J0IHsgSVNES0hlbHBlcnMsIFRyaWdnZXJzQ29tcG9uZW50IH0gZnJvbSAnLi9kZWZpbml0aW9ucydcbmltcG9ydCB7IGdldEV4cGxvcmVyQ29tcG9uZW50cyB9IGZyb20gJy4vY29tcG9uZW50cydcblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKFxuICBlbnRpdHk6IEVudGl0eSxcbiAgZW5naW5lOiBJRW5naW5lLFxuICBUcmFuc2Zvcm06IFRyYW5zZm9ybUNvbXBvbmVudEV4dGVuZGVkLFxuICBUcmlnZ2VyczogVHJpZ2dlcnNDb21wb25lbnQsXG4gIHNka0hlbHBlcnM/OiBJU0RLSGVscGVyc1xuKSB7XG4gIGNvbnN0IGlkcyA9IG5ldyBNYXA8bnVtYmVyLCBudW1iZXI+KClcbiAgY29uc3QgZW50aXRpZXMgPSBuZXcgTWFwPEVudGl0eSwgRW50aXR5PigpXG4gIGNvbnN0IHRyZWUgPSBnZXRDb21wb25lbnRFbnRpdHlUcmVlKGVuZ2luZSwgZW50aXR5LCBUcmFuc2Zvcm0pXG4gIGNvbnN0IHsgTmV0d29ya0VudGl0eSwgU3luY0NvbXBvbmVudHMgfSA9IGdldEV4cGxvcmVyQ29tcG9uZW50cyhlbmdpbmUpXG4gIGZvciAoY29uc3Qgb3JpZ2luYWwgb2YgdHJlZSkge1xuICAgIGNvbnN0IGNsb25lZCA9IGVuZ2luZS5hZGRFbnRpdHkoKVxuXG4gICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgZW5naW5lLmNvbXBvbmVudHNJdGVyKCkpIHtcbiAgICAgIGlmIChjb21wb25lbnQuaGFzKG9yaWdpbmFsKSkge1xuICAgICAgICBsZXQgbmV3VmFsdWUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNvbXBvbmVudC5nZXQob3JpZ2luYWwpKSlcbiAgICAgICAgaWYgKHJlcXVpcmVzSWQoY29tcG9uZW50KSkge1xuICAgICAgICAgIGNvbnN0IG9sZElkID0gbmV3VmFsdWUuaWRcbiAgICAgICAgICBjb25zdCBuZXdJZCA9IGdldE5leHRJZChlbmdpbmUpXG4gICAgICAgICAgaWRzLnNldChvbGRJZCwgbmV3SWQpXG4gICAgICAgICAgbmV3VmFsdWUgPSB7XG4gICAgICAgICAgICAuLi5uZXdWYWx1ZSxcbiAgICAgICAgICAgIGlkOiBuZXdJZCxcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNMYXN0V3JpdGVXaW5Db21wb25lbnQoY29tcG9uZW50KSkge1xuICAgICAgICAgIGNvbXBvbmVudC5jcmVhdGVPclJlcGxhY2UoY2xvbmVkLCBuZXdWYWx1ZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBlbnRpdGllcy5zZXQob3JpZ2luYWwsIGNsb25lZClcbiAgfVxuXG4gIGNvbnN0IGNsb25lcyA9IEFycmF5LmZyb20oZW50aXRpZXMudmFsdWVzKCkpLnJldmVyc2UoKVxuXG4gIGZvciAoY29uc3QgY2xvbmVkIG9mIGNsb25lcykge1xuICAgIC8vIGlmIHRoZSBlbnRpdHkgaGFzIHRyaWdnZXJzLCByZW1hcCB0aGUgb2xkIGlkcyBpbiB0aGUgYWN0aW9ucyBhbmQgY29uZGl0aW9ucyB0byB0aGUgbmV3IG9uZXNcblxuICAgIGlmIChUcmlnZ2Vycy5oYXMoY2xvbmVkKSkge1xuICAgICAgY29uc3QgdHJpZ2dlcnMgPSBUcmlnZ2Vycy5nZXRNdXRhYmxlKGNsb25lZClcbiAgICAgIGZvciAoY29uc3QgdHJpZ2dlciBvZiB0cmlnZ2Vycy52YWx1ZSkge1xuICAgICAgICBmb3IgKGNvbnN0IGFjdGlvbiBvZiB0cmlnZ2VyLmFjdGlvbnMpIHtcbiAgICAgICAgICBpZiAoYWN0aW9uLmlkKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdJZCA9IGlkcy5nZXQoYWN0aW9uLmlkKVxuICAgICAgICAgICAgaWYgKG5ld0lkKSB7XG4gICAgICAgICAgICAgIGFjdGlvbi5pZCA9IG5ld0lkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0cmlnZ2VyLmNvbmRpdGlvbnMpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IGNvbmRpdGlvbiBvZiB0cmlnZ2VyLmNvbmRpdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChjb25kaXRpb24uaWQpIHtcbiAgICAgICAgICAgICAgY29uc3QgbmV3SWQgPSBpZHMuZ2V0KGNvbmRpdGlvbi5pZClcbiAgICAgICAgICAgICAgaWYgKG5ld0lkKSB7XG4gICAgICAgICAgICAgICAgY29uZGl0aW9uLmlkID0gbmV3SWRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpeCB0aGUgTmV0d29ya0VudGl0eSBjb21wb25lbnQgZm9yIHRoZSBuZXcgZW50aXR5LlxuICAgIGlmIChOZXR3b3JrRW50aXR5LmhhcyhjbG9uZWQpKSB7XG4gICAgICBjb25zdCBzeW5jQ29tcG9uZW50ID0gU3luY0NvbXBvbmVudHMuZ2V0T3JOdWxsKGNsb25lZClcblxuICAgICAgaWYgKHN5bmNDb21wb25lbnQgJiYgc2RrSGVscGVycz8uc3luY0VudGl0eSkge1xuICAgICAgICBzZGtIZWxwZXJzPy5zeW5jRW50aXR5KGNsb25lZCwgc3luY0NvbXBvbmVudC5jb21wb25lbnRJZHMpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVE9ETzogc2hvdWxkIHdlIGZpeCB0aGUgcGFyZW50IG5ldHdvcmsgZW50aXR5IGFsc28gP1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IFRyYW5zZm9ybS5nZXRNdXRhYmxlT3JOdWxsKGNsb25lZClcbiAgICBpZiAodHJhbnNmb3JtICYmIHRyYW5zZm9ybS5wYXJlbnQpIHtcbiAgICAgIGNvbnN0IG5ld1BhcmVudCA9IGVudGl0aWVzLmdldCh0cmFuc2Zvcm0ucGFyZW50KVxuICAgICAgaWYgKG5ld1BhcmVudCkge1xuICAgICAgICB0cmFuc2Zvcm0ucGFyZW50ID0gbmV3UGFyZW50XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3QgY2xvbmVkID0gY2xvbmVzWzBdXG5cbiAgcmV0dXJuIHsgaWRzLCBlbnRpdGllcywgY2xvbmVkIH1cbn1cbiJdfQ==