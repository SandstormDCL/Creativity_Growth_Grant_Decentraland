import { Vector3 } from './Vector3';
import { Matrix } from './Matrix';
/**
 * @public
 * Quaternion is a type and a namespace.
 * - The namespace contains all types and functions to operates with Quaternion
 * - The type Quaternion is an alias to Quaternion.ReadonlyQuaternion
 * ```
 *
 * // Namespace usage example
 * const next = Quaternion.add(pointA, velocityA)
 *
 * // Type usage example
 * const readonlyRotation: Quaternion = Quaternion.Zero()
 * readonlyRotation.x = 0.1 // this FAILS
 *
 * // For mutable usage, use `Quaternion.Mutable`
 * const rotation: Quaternion.Mutable = Quaternion.Identity()
 * rotation.x = 3.0 // this WORKS
 * ```
 */
export declare type Quaternion = Quaternion.ReadonlyQuaternion;
/**
 * @public
 * Quaternion is a type and a namespace.
 * ```
 * // The namespace contains all types and functions to operates with Quaternion
 * const next = Quaternion.add(pointA, velocityA)
 * // The type Quaternion is an alias to Quaternion.ReadonlyQuaternion
 * const readonlyRotation: Quaternion = Quaternion.Zero()
 * readonlyRotation.x = 0.1 // this FAILS
 *
 * // For mutable usage, use `Quaternion.Mutable`
 * const rotation: Quaternion.Mutable = Quaternion.Identity()
 * rotation.x = 3.0 // this WORKS
 * ```
 */
export declare namespace Quaternion {
    /**
     * @public
     * For external use, type with `Quaternion`, e.g. `const zeroRotation: Quaternion = Quaternion.Zero()`.
     * For mutable typing, use `Quaternion.Mutable`, e.g. `const identityQuaternion: Quaternion.Mutable = Quaternion.Identity()`.
     */
    type ReadonlyQuaternion = {
        readonly x: number;
        readonly y: number;
        readonly z: number;
        readonly w: number;
    };
    /**
     * @public
     * For external usage, type with `Quaternion`, e.g. `const zeroRotation: Quaternion = Quaternion.Zero()`.
     * For mutable typing, use `Quaternion.Mutable`, e.g. `const identityQuaternion: Quaternion.Mutable = Quaternion.Identity()`.
     */
    type MutableQuaternion = {
        x: number;
        y: number;
        z: number;
        w: number;
    };
    /**
     * @public
     * Type with `Quaternion` for readonly usage, e.g. `const zeroRotation: Quaternion = Quaternion.Zero()`.
     * For mutable, use `Quaternion.Mutable`, e.g. `const identityQuaternion: Quaternion.Mutable = Quaternion.Identity()`.
     */
    type Mutable = MutableQuaternion;
    /**
     * Creates a new Quaternion from the given floats
     * @param x - defines the first component (0 by default)
     * @param y - defines the second component (0 by default)
     * @param z - defines the third component (0 by default)
     * @param w - defines the fourth component (1.0 by default)
     */
    function create(
    /** defines the first component (0 by default) */
    x?: number, 
    /** defines the second component (0 by default) */
    y?: number, 
    /** defines the third component (0 by default) */
    z?: number, 
    /** defines the fourth component (1.0 by default) */
    w?: number): MutableQuaternion;
    /**
     * Returns a new Quaternion as the result of the addition of the two given quaternions.
     * @param q1 - the first quaternion
     * @param q2 - the second quaternion
     * @returns the resulting quaternion
     */
    function add(q1: ReadonlyQuaternion, q2: ReadonlyQuaternion): MutableQuaternion;
    /**
     * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion
     * @param yaw - defines the rotation around Y axis (radians)
     * @param pitch - defines the rotation around X axis (radians)
     * @param roll - defines the rotation around Z axis (radians)
     * @returns result quaternion
     */
    function fromRotationYawPitchRoll(yaw: number, pitch: number, roll: number): MutableQuaternion;
    /**
     * Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.
     * @param x - the rotation on the x axis in euler degrees
     * @param y - the rotation on the y axis in euler degrees
     * @param z - the rotation on the z axis in euler degrees
     */
    function fromEulerDegrees(x: number, y: number, z: number): MutableQuaternion;
    /**
     * Gets length of current quaternion
     * @returns the quaternion length (float)
     */
    function length(q: ReadonlyQuaternion): number;
    /**
     * Gets length of current quaternion
     * @returns the quaternion length (float)
     */
    function lengthSquared(q: ReadonlyQuaternion): number;
    /**
     * Returns the dot product (float) between the quaternions "left" and "right"
     * @param left - defines the left operand
     * @param right - defines the right operand
     * @returns the dot product
     */
    function dot(left: ReadonlyQuaternion, right: ReadonlyQuaternion): number;
    /**
     * Returns the angle in degrees between two rotations a and b.
     * @param quat1 - defines the first quaternion
     * @param quat2 - defines the second quaternion
     * @returns the degrees angle
     */
    function angle(quat1: ReadonlyQuaternion, quat2: ReadonlyQuaternion): number;
    /**
     * The from quaternion is rotated towards to by an angular step of maxDegreesDelta.
     * @param from - defines the first quaternion
     * @param to - defines the second quaternion
     * @param maxDegreesDelta - the interval step
     */
    function rotateTowards(from: ReadonlyQuaternion, to: ReadonlyQuaternion, maxDegreesDelta: number): MutableQuaternion;
    /**
     * Creates a rotation with the specified forward and upwards directions.
     * @param forward - the direction to look in
     * @param up - the vector that defines in which direction up is
     */
    function lookRotation(forward: Vector3.ReadonlyVector3, up?: Vector3.ReadonlyVector3): MutableQuaternion;
    /**
     * Normalize in place the current quaternion
     * @returns the current updated quaternion
     */
    function normalize(q: ReadonlyQuaternion): MutableQuaternion;
    /**
     * Creates a rotation which rotates from fromDirection to toDirection.
     * @param from - defines the first direction Vector
     * @param to - defines the target direction Vector
     */
    function fromToRotation(from: Vector3.ReadonlyVector3, to: Vector3.ReadonlyVector3, up?: Vector3.ReadonlyVector3): MutableQuaternion;
    /**
     * Creates an identity quaternion
     * @returns - the identity quaternion
     */
    function Identity(): MutableQuaternion;
    /**
     * Gets or sets the euler angle representation of the rotation.
     * Implemented unity-based calculations from: https://stackoverflow.com/a/56055813
     * @public
     * @returns a new Vector3 with euler angles degrees
     */
    function toEulerAngles(q: MutableQuaternion): Vector3.Mutable;
    /**
     * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion
     * @param yaw - defines the rotation around Y axis (radians)
     * @param pitch - defines the rotation around X axis (radians)
     * @param roll - defines the rotation around Z axis (radians)
     * @param result - defines the target quaternion
     */
    function fromRotationYawPitchRollToRef(yaw: number, pitch: number, roll: number, result: Quaternion.MutableQuaternion): void;
    /**
     * Updates the given quaternion with the given rotation matrix values
     * @param matrix - defines the source matrix
     * @param result - defines the target quaternion
     */
    function fromRotationMatrixToRef(matrix: Matrix.ReadonlyMatrix, result: Quaternion.MutableQuaternion): void;
    /**
     * Interpolates between two quaternions
     * @param left - defines first quaternion
     * @param right - defines second quaternion
     * @param amount - defines the gradient to use
     * @returns the new interpolated quaternion
     */
    function slerp(left: ReadonlyQuaternion, right: ReadonlyQuaternion, amount: number): MutableQuaternion;
    /**
     * Interpolates between two quaternions and stores it into a target quaternion
     * @param left - defines first quaternion
     * @param right - defines second quaternion
     * @param amount - defines the gradient to use
     * @param result - defines the target quaternion
     */
    function slerpToRef(left: ReadonlyQuaternion, right: ReadonlyQuaternion, amount: number, result: MutableQuaternion): void;
    /**
     * Multiplies two quaternions
     * @param self - defines the first operand
     * @param q1 - defines the second operand
     * @returns a new quaternion set as the multiplication result of the self one with the given one "q1"
     */
    function multiply(self: ReadonlyQuaternion, q1: ReadonlyQuaternion): MutableQuaternion;
    /**
     * Sets the given "result" as the the multiplication result of the self one with the given one "q1"
     * @param self - defines the first operand
     * @param q1 - defines the second operand
     * @param result - defines the target quaternion
     * @returns the current quaternion
     */
    function multiplyToRef(self: ReadonlyQuaternion, q1: ReadonlyQuaternion, result: MutableQuaternion): void;
    /**
     *
     * @param degrees - the angle degrees
     * @param axis - vector3
     * @returns a new Quaternion
     */
    function fromAngleAxis(degrees: number, axis: Vector3.ReadonlyVector3): MutableQuaternion;
    /**
     * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)
     * @param axis1 - defines the first axis
     * @param axis2 - defines the second axis
     * @param axis3 - defines the third axis
     * @returns the new quaternion
     */
    function fromAxisToRotationQuaternion(axis1: Vector3.ReadonlyVector3, axis2: Vector3.ReadonlyVector3, axis3: Vector3.ReadonlyVector3): MutableQuaternion;
    /**
     * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion
     * @param axis1 - defines the first axis
     * @param axis2 - defines the second axis
     * @param axis3 - defines the third axis
     * @param ref - defines the target quaternion
     */
    function fromAxisToRotationQuaternionToRef(axis1: Vector3.ReadonlyVector3, axis2: Vector3.ReadonlyVector3, axis3: Vector3.ReadonlyVector3, ref: MutableQuaternion): void;
    /**
     * Returns a zero filled quaternion
     */
    function Zero(): MutableQuaternion;
    /**
     * @public
     * Rotates the transform so the forward vector points at target's current position.
     */
    function fromLookAt(position: Vector3.ReadonlyVector3, target: Vector3.ReadonlyVector3, worldUp?: Vector3.ReadonlyVector3): MutableQuaternion;
    /**
     * @public
     * Rotates the transform so the forward vector points at target's current position.
     */
    function fromLookAtToRef(position: Vector3.ReadonlyVector3, target: Vector3.ReadonlyVector3, worldUp: Vector3.ReadonlyVector3 | undefined, result: MutableQuaternion): void;
}
