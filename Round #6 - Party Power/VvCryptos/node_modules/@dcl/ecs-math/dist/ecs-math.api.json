{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.18.19",
    "schemaVersion": 1004,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      }
    }
  },
  "kind": "Package",
  "canonicalReference": "@dcl/ecs-math!",
  "docComment": "",
  "name": "@dcl/ecs-math",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@dcl/ecs-math!",
      "name": "",
      "members": [
        {
          "kind": "Namespace",
          "canonicalReference": "@dcl/ecs-math!Color3:namespace",
          "docComment": "/**\n * Color3 is a type and a namespace.\n * ```\n * // The namespace contains all types and functions to operates with Color3\n * Color3.add(blue, red) // sum component by component resulting pink\n * // The type Color3 is an alias to Color3.ReadonlyColor3\n * const readonlyBlue: Color3 = Color3.Blue()\n * readonlyBlue.r = 0.1 // this FAILS\n *\n * // For mutable usage, use `Color3.Mutable`\n * const blue: Color3.Mutable = Color3.Blue()\n * blue.r = 0.1 // this WORKS\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace Color3 "
            }
          ],
          "releaseTag": "Public",
          "name": "Color3",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.add:function(1)",
              "docComment": "/**\n * Creates Color3 set with the added values of the current Color3 and of the given one\n *\n * @param otherColor - defines the second operand\n *\n * @returns the create\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function add(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "add"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.addToRef:function(1)",
              "docComment": "/**\n * Stores the result of the addition of the current Color3 and given one rgb values into \"result\"\n *\n * @param otherColor - defines the second operand\n *\n * @param result - defines Color3 object to store the result into\n *\n * @returns the unmodified current Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function addToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "addToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.asArray:function(1)",
              "docComment": "/**\n * Returns a new array populated with 3 numeric elements : red, green and blue values\n *\n * @returns the new array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function asArray(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "asArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.Black:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a black color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Black(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Black"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.Blue:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a blue color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Blue(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Blue"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.clamp:function(1)",
              "docComment": "/**\n * Clamps the rgb values by the min and max values and returns the result\n *\n * @param min - defines minimum clamping value (default is 0)\n *\n * @param max - defines maximum clamping value (default is 1)\n *\n * @returns result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clamp(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", min?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "clamp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.clampToRef:function(1)",
              "docComment": "/**\n * Clamps the rgb values by the min and max values and stores the result into \"result\"\n *\n * @param min - defines minimum clamping value (default is 0)\n *\n * @param max - defines maximum clamping value (default is 1)\n *\n * @param result - defines color to store the result into\n *\n * @returns the original Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clampToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "clampToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.clone:function(1)",
              "docComment": "/**\n * Copy the current object\n *\n * @returns Color3 copied the current one\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clone(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "clone"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.copyFrom:function(1)",
              "docComment": "/**\n * Copies the rgb values from the source in the current Color3\n *\n * @param source - defines the source Color3 object\n *\n * @returns the updated Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function copyFrom(source: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", dest: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "dest",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "copyFrom"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.create:function(1)",
              "docComment": "/**\n * Creates Color3 object from red, green, blue values, all between 0 and 1\n *\n * @param r - defines the red component (between 0 and 1, default is 0)\n *\n * @param g - defines the green component (between 0 and 1, default is 0)\n *\n * @param b - defines the blue component (between 0 and 1, default is 0)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function create(\n    r?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    g?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    b?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        r: number;\n        g: number;\n        b: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "create"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.equals:function(1)",
              "docComment": "/**\n * Determines equality between Color3 objects\n *\n * @param otherColor - defines the second operand\n *\n * @returns true if the rgb values are equal to the given ones\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function equals(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.equalsFloats:function(1)",
              "docComment": "/**\n * Determines equality between the current Color3 object and a set of r,b,g values\n *\n * @param r - defines the red component to check\n *\n * @param g - defines the green component to check\n *\n * @param b - defines the blue component to check\n *\n * @returns true if the rgb values are equal to the given ones\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function equalsFloats(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "equalsFloats"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.fromArray:function(1)",
              "docComment": "/**\n * Creates a new Vector3 from the starting index of the given array\n *\n * @param array - defines the source array\n *\n * @param offset - defines an offset in the source array\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayLike",
                  "canonicalReference": "!ArrayLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "fromArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.fromHexString:function(1)",
              "docComment": "/**\n * Creates a Vector3 from the string containing valid hexadecimal values\n *\n * @param hex - defines a string containing valid hexadecimal values\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromHexString(hex: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hex",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromHexString"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.fromInts:function(1)",
              "docComment": "/**\n * Creates a Vector3 from integer values (less than 256)\n *\n * @param r - defines the red component to read from (value between 0 and 255)\n *\n * @param g - defines the green component to read from (value between 0 and 255)\n *\n * @param b - defines the blue component to read from (value between 0 and 255)\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromInts(r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "fromInts"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.getHashCode:function(1)",
              "docComment": "/**\n * Compute the Color3 hash code\n *\n * @returns an unique number that can be used to hash Color3 objects\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getHashCode(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getHashCode"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.Gray:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a gray color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Gray(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Gray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.Green:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a green color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Green(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Green"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.lerp:function(1)",
              "docComment": "/**\n * Creates a Vector3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\n *\n * @param start - defines the start Color3 value\n *\n * @param end - defines the end Color3 value\n *\n * @param amount - defines the gradient value between start and end\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lerp(start: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "lerp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.lerpToRef:function(1)",
              "docComment": "/**\n * Creates a Vector3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\n *\n * @param left - defines the start value\n *\n * @param right - defines the end value\n *\n * @param amount - defines the gradient factor\n *\n * @param result - defines the Color3 object where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lerpToRef(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "lerpToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.Magenta:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a magenta color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Magenta(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Magenta"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.multiply:function(1)",
              "docComment": "/**\n * Multiply each Color3 rgb values by the given Color3 rgb values in Color3 object\n *\n * @param otherColor - defines the second operand\n *\n * @returns the create object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiply(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "multiply"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.multiplyToRef:function(1)",
              "docComment": "/**\n * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object \"result\"\n *\n * @param otherColor - defines the second operand\n *\n * @param result - defines the Color3 object where to store the result\n *\n * @returns the current Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiplyToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "multiplyToRef"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/ecs-math!Color3.Mutable:type",
              "docComment": "/**\n * Type with `Color3` for readonly usage, e.g. `const blackColor: Color3 = Color3.Black()`. For mutable, use `Color3.Mutable`, e.g. `const redColor: Color3.Mutable = Color3.Red()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Mutable = "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Mutable",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type",
              "docComment": "/**\n * For external usage, type with `Color3`, e.g. `const blackColor: Color3 = Color3.Black()`. For mutable typing, use `Color3.Mutable`, e.g. `const redColor: Color3.Mutable = Color3.Red()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type MutableColor3 = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        r: number;\n        g: number;\n        b: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "MutableColor3",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.Purple:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a purple color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Purple(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Purple"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.Random:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a random color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Random(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Random"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type",
              "docComment": "/**\n * For external use, type with `Color3`, e.g. `const blackColor: Color3 = Color3.Black()`. For mutable typing, use `Color3.Mutable`, e.g. `const redColor: Color3.Mutable = Color3.Red()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type ReadonlyColor3 = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readonly r: number;\n        readonly g: number;\n        readonly b: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ReadonlyColor3",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.Red:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a red color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Red(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Red"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.scale:function(1)",
              "docComment": "/**\n * Multiplies in place each rgb value by scale\n *\n * @param scale - defines the scaling factor\n *\n * @returns the updated Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scale(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "scale"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.scaleAndAddToRef:function(1)",
              "docComment": "/**\n * Scale the current Color3 values by a factor and add the result to a given Color3\n *\n * @param scale - defines the scale factor\n *\n * @param result - defines color to store the result into\n *\n * @returns the unmodified current Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scaleAndAddToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "scaleAndAddToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.scaleToRef:function(1)",
              "docComment": "/**\n * Multiplies the rgb values by scale and stores the result into \"result\"\n *\n * @param scale - defines the scaling factor\n *\n * @param result - defines the Color3 object where to store the result\n *\n * @returns the unmodified current Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scaleToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "scaleToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.set:function(1)",
              "docComment": "/**\n * Updates the Color3 rgb values from the given floats\n *\n * @param dest - \n *\n * @param r - defines the red component to read from\n *\n * @param g - defines the green component to read from\n *\n * @param b - defines the blue component to read from\n *\n * @returns \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function set(dest: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "set"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.subtract:function(1)",
              "docComment": "/**\n * Returns Color3 set with the subtracted values of the given one from the current Color3\n *\n * @param otherColor - defines the second operand\n *\n * @returns the create\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function subtract(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "subtract"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.subtractToRef:function(1)",
              "docComment": "/**\n * Stores the result of the subtraction of given one from the current Color3 rgb values into \"result\"\n *\n * @param otherColor - defines the second operand\n *\n * @param result - defines Color3 object to store the result into\n *\n * @returns the unmodified current Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function subtractToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "subtractToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.Teal:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a teal color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Teal(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Teal"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.toArray:function(1)",
              "docComment": "/**\n * Stores in the given array from the given starting index the red, green, blue values as successive elements\n *\n * @param array - defines the array where to store the r,g,b components\n *\n * @param index - defines an optional index in the target array to define where to start storing values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toArray(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", array: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", index?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "toArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.toColor4:function(1)",
              "docComment": "/**\n * Returns a new Color4 object from the current Color3 and the given alpha\n *\n * @param alpha - defines the alpha component on the new Color4 object (default is 1)\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toColor4(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", alpha?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4.MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "alpha",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "toColor4"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.toGammaSpace:function(1)",
              "docComment": "/**\n * Computes Color3 converted from the current one to gamma space\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toGammaSpace(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toGammaSpace"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.toGammaSpaceToRef:function(1)",
              "docComment": "/**\n * Converts the Color3 values to gamma space and stores the result in \"convertedColor\"\n *\n * @param convertedColor - defines the Color3 object where to store the gamma space version\n *\n * @returns the unmodified Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toGammaSpaceToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", convertedColor: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "convertedColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "toGammaSpaceToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.toHexString:function(1)",
              "docComment": "/**\n * Compute the Color3 hexadecimal code as a string\n *\n * @returns a string containing the hexadecimal representation of the Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toHexString(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toHexString"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.toLinearSpace:function(1)",
              "docComment": "/**\n * Computes Color3 converted from the current one to linear space\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toLinearSpace(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toLinearSpace"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.toLinearSpaceToRef:function(1)",
              "docComment": "/**\n * Converts the Color3 values to linear space and stores the result in \"convertedColor\"\n *\n * @param convertedColor - defines the Color3 object where to store the linear space version\n *\n * @returns the unmodified Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toLinearSpaceToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", convertedColor: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "convertedColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "toLinearSpaceToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.toLuminance:function(1)",
              "docComment": "/**\n * Returns the luminance value\n *\n * @returns a float value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toLuminance(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toLuminance"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.toString:function(1)",
              "docComment": "/**\n * Creates a string with the Color3 current values\n *\n * @returns the string representation of the Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toString(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toString"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.White:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a white color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function White(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "White"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color3.Yellow:function(1)",
              "docComment": "/**\n * Returns a Color3 value containing a yellow color\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Yellow(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.MutableColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Yellow"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/ecs-math!Color3:type",
          "docComment": "/**\n * Color3 is a type and a namespace. - The namespace contains all types and functions to operates with Color3 - The type Color3 is an alias to Color3.ReadonlyColor3\n * ```\n *\n * // Namespace usage example\n * Color3.add(blue, red) // sum component by component resulting pink\n *\n * // Type usage example\n * const readonlyBlue: Color3 = Color3.Blue()\n * readonlyBlue.r = 0.1 // this FAILS\n *\n * // For mutable usage, use `Color3.Mutable`\n * const blue: Color3.Mutable = Color3.Blue()\n * blue.r = 0.1 // this WORKS\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Color3 = "
            },
            {
              "kind": "Reference",
              "text": "Color3.ReadonlyColor3",
              "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Color3",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@dcl/ecs-math!Color4:namespace",
          "docComment": "/**\n * Color4 is a type and a namespace.\n * ```\n * // The namespace contains all types and functions to operates with Color4\n * Color4.add(blue, red) // sum component by component resulting pink\n * // The type Color4 is an alias to Color4.ReadonlyColor4\n * const readonlyBlue: Color4 = Color4.Blue()\n * readonlyBlue.a = 0.1 // this FAILS\n *\n * // For mutable usage, use `Color4.Mutable`\n * const blue: Color4.Mutable = Color4.Blue()\n * blue.a = 0.1 // this WORKS\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace Color4 "
            }
          ],
          "releaseTag": "Public",
          "name": "Color4",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.add:function(1)",
              "docComment": "/**\n * Creates a Color4 set with the added values of the current Color4 and of the given one\n *\n * @param right - defines the second operand\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function add(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "add"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.addToRef:function(1)",
              "docComment": "/**\n * Adds the given Color4 values to the ref Color4 object\n *\n * @param a - defines the first operand\n *\n * @param b - defines the second operand\n *\n * @param ref - defines the result rference\n *\n * @returns \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function addToRef(a: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", ref: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "ref",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "addToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.Black:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a black color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Black(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Black"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.Blue:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a blue color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Blue(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Blue"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.checkColors4:function(1)",
              "docComment": "/**\n * Check the content of a given array and convert it to an array containing RGBA data If the original array was already containing count * 4 values then it is returned directly\n *\n * @param colors - defines the array to check\n *\n * @param count - defines the number of RGBA data to expect\n *\n * @returns an array containing count * 4 values (RGBA)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function checkColors4(colors: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ", count: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "colors",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "count",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "checkColors4"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.clampToRef:function(1)",
              "docComment": "/**\n * Clamps the rgb values by the min and max values and stores the result into \"result\"\n *\n * @param min - defines minimum clamping value (default is 0)\n *\n * @param max - defines maximum clamping value (default is 1)\n *\n * @param result - defines color to store the result into.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clampToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "clampToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.Clear:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a transparent color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Clear(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Clear"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.clone:function(1)",
              "docComment": "/**\n * Creates a Color4 copied from the current one\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clone(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "clone"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.copyFrom:function(1)",
              "docComment": "/**\n * Copies the given Color4 values into the destination\n *\n * @param source - defines the source Color4 object\n *\n * @param dest - defines the destination Color4 object\n *\n * @returns \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function copyFrom(source: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", dest: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "dest",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "copyFrom"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.copyFromFloats:function(1)",
              "docComment": "/**\n * Copies the given float values into the current one\n *\n * @param r - defines the red component to read from\n *\n * @param g - defines the green component to read from\n *\n * @param b - defines the blue component to read from\n *\n * @param a - defines the alpha component to read from\n *\n * @returns the current updated Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function copyFromFloats(r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", dest: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "dest",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "copyFromFloats"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.create:function(1)",
              "docComment": "/**\n * Creates create mutable Color4 from red, green, blue values, all between 0 and 1\n *\n * @param r - defines the red component (between 0 and 1, default is 0)\n *\n * @param g - defines the green component (between 0 and 1, default is 0)\n *\n * @param b - defines the blue component (between 0 and 1, default is 0)\n *\n * @param a - defines the alpha component (between 0 and 1, default is 1)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function create(\n    r?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    g?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    b?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    a?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "create"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.fromArray:function(1)",
              "docComment": "/**\n * Creates a Color4 from the starting index element of the given array\n *\n * @param array - defines the source array to read from\n *\n * @param offset - defines the offset in the source array\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayLike",
                  "canonicalReference": "!ArrayLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "fromArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.fromColor3:function(1)",
              "docComment": "/**\n * Creates a Color4 from a Color3 and an alpha value\n *\n * @param color3 - defines the source Color3 to read from\n *\n * @param alpha - defines the alpha component (1.0 by default)\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromColor3(color3: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3.ReadonlyColor3",
                  "canonicalReference": "@dcl/ecs-math!Color3.ReadonlyColor3:type"
                },
                {
                  "kind": "Content",
                  "text": ", alpha?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "color3",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "alpha",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "fromColor3"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.fromHexString:function(1)",
              "docComment": "/**\n * Creates a Color4 from the string containing valid hexadecimal values\n *\n * @param hex - defines a string containing valid hexadecimal values\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromHexString(hex: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hex",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromHexString"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.fromInts:function(1)",
              "docComment": "/**\n * Creates a new Color3 from integer values (less than 256)\n *\n * @param r - defines the red component to read from (value between 0 and 255)\n *\n * @param g - defines the green component to read from (value between 0 and 255)\n *\n * @param b - defines the blue component to read from (value between 0 and 255)\n *\n * @param a - defines the alpha component to read from (value between 0 and 255)\n *\n * @returns a new Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromInts(r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "fromInts"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.getHashCode:function(1)",
              "docComment": "/**\n * Compute the Color4 hash code\n *\n * @returns an unique number that can be used to hash Color4 objects\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getHashCode(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getHashCode"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.Gray:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a gray color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Gray(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Gray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.Green:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a green color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Green(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Green"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.lerp:function(1)",
              "docComment": "/**\n * Creates create mutable Color4 set with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\n *\n * @param left - defines the start value\n *\n * @param right - defines the end value\n *\n * @param amount - defines the gradient factor\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lerp(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "lerp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.lerpToRef:function(1)",
              "docComment": "/**\n * Set the given \"result\" with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\n *\n * @param left - defines the start value\n *\n * @param right - defines the end value\n *\n * @param amount - defines the gradient factor\n *\n * @param result - defines the Color4 object where to store data\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lerpToRef(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "lerpToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.Magenta:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a magenta color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Magenta(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Magenta"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.multiply:function(1)",
              "docComment": "/**\n * Multipy an Color4 value by another and return create mutable Color4\n *\n * @param color - defines the Color4 value to multiply by\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiply(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", color: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "color",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "multiply"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.multiplyToRef:function(1)",
              "docComment": "/**\n * Multipy a Color4 value by another and push the result in a reference value\n *\n * @param color - defines the Color4 value to multiply by\n *\n * @param result - defines the Color4 to fill the result in\n *\n * @returns the result Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiplyToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", color: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "color",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "multiplyToRef"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/ecs-math!Color4.Mutable:type",
              "docComment": "/**\n * Type with `Color4` for readonly usage, e.g. `const blackColor: Color4 = Color4.Black()`. For mutable, use `Color4.Mutable`, e.g. `const redColor: Color4.Mutable = Color4.Red()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Mutable = "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Mutable",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type",
              "docComment": "/**\n * For external usage, type with `Color4`, e.g. `const blackColor: Color4 = Color4.Black()`. For mutable typing, use `Color4.Mutable`, e.g. `const redColor: Color4.Mutable = Color4.Red()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type MutableColor4 = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        r: number;\n        g: number;\n        b: number;\n        a: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "MutableColor4",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.Purple:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a purple color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Purple(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Purple"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type",
              "docComment": "/**\n * For external use, type with `Color4`, e.g. `const blackColor: Color4 = Color4.Black()`. For mutable typing, use `Color4.Mutable`, e.g. `const redColor: Color4.Mutable = Color4.Red()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type ReadonlyColor4 = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readonly r: number;\n        readonly g: number;\n        readonly b: number;\n        readonly a: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ReadonlyColor4",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.Red:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a red color\n *\n * @returns a new Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Red(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Red"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.scale:function(1)",
              "docComment": "/**\n * Creates a Color4 with the current Color4 values multiplied by scale\n *\n * @param scale - defines the scaling factor to apply\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scale(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "scale"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.scaleAndAddToRef:function(1)",
              "docComment": "/**\n * Scale the current Color4 values by a factor and add the result to a given Color4\n *\n * @param scale - defines the scale factor\n *\n * @param result - defines the Color4 object where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scaleAndAddToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "scaleAndAddToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.scaleToRef:function(1)",
              "docComment": "/**\n * Multiplies the current Color4 values by scale and stores the result in \"result\"\n *\n * @param scale - defines the scaling factor to apply\n *\n * @param result - defines the Color4 object where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scaleToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "scaleToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.set:function(1)",
              "docComment": "/**\n * Copies the given float values into the current one\n *\n * @param r - defines the red component to read from\n *\n * @param g - defines the green component to read from\n *\n * @param b - defines the blue component to read from\n *\n * @param a - defines the alpha component to read from\n *\n * @returns the current updated Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function set(r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", dest: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "dest",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "set"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.subtract:function(1)",
              "docComment": "/**\n * Creates a Color4 set with the subtracted values of the given one from the current Color4\n *\n * @param right - defines the second operand\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function subtract(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "subtract"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.subtractToRef:function(1)",
              "docComment": "/**\n * Subtracts the given ones from the current Color4 values and stores the results in \"result\"\n *\n * @param right - defines the second operand\n *\n * @param result - defines the Color4 object where to store the result\n *\n * @returns the current Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function subtractToRef(a: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "subtractToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.Teal:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a teal color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Teal(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Teal"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.toArray:function(1)",
              "docComment": "/**\n * Stores from the starting index in the given array the Color4 successive values\n *\n * @param array - defines the array where to store the r,g,b components\n *\n * @param index - defines an optional index in the target array to define where to start storing values\n *\n * @returns the current Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toArray(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", array: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ", index?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "toArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.toGammaSpace:function(1)",
              "docComment": "/**\n * Computes a Color4 converted from the current one to gamma space\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toGammaSpace(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toGammaSpace"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.toGammaSpaceToRef:function(1)",
              "docComment": "/**\n * Converts the Color4 values to gamma space and stores the result in \"convertedColor\"\n *\n * @param convertedColor - defines the Color4 object where to store the gamma space version\n *\n * @returns the unmodified Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toGammaSpaceToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", convertedColor: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "convertedColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "toGammaSpaceToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.toHexString:function(1)",
              "docComment": "/**\n * Compute the Color4 hexadecimal code as a string\n *\n * @returns a string containing the hexadecimal representation of the Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toHexString(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toHexString"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.toLinearSpace:function(1)",
              "docComment": "/**\n * Computes a Color4 converted from the current one to linear space\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toLinearSpace(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toLinearSpace"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.toLinearSpaceToRef:function(1)",
              "docComment": "/**\n * Converts the Color4 values to linear space and stores the result in \"convertedColor\"\n *\n * @param convertedColor - defines the Color4 object where to store the linear space version\n *\n * @returns the unmodified Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toLinearSpaceToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ", ref: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "ref",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "toLinearSpaceToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.toString:function(1)",
              "docComment": "/**\n * Creates a string with the Color4 current values\n *\n * @returns the string representation of the Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toString(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toString"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.White:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a white color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function White(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "White"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Color4.Yellow:function(1)",
              "docComment": "/**\n * Returns a Color4 value containing a yellow color\n *\n * @returns create mutable Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Yellow(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableColor4",
                  "canonicalReference": "@dcl/ecs-math!Color4.MutableColor4:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Yellow"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/ecs-math!Color4:type",
          "docComment": "/**\n * Color4 is a type and a namespace. - The namespace contains all types and functions to operates with Color4 - The type Color4 is an alias to Color4.ReadonlyColor4\n * ```\n *\n * // Namespace usage example\n * Color4.add(blue, red) // sum component by component resulting pink\n *\n * // Type usage example\n * const readonlyBlue: Color4 = Color4.Blue()\n * readonlyBlue.a = 0.1 // this FAILS\n *\n * // For mutable usage, use `Color4.Mutable`\n * const blue: Color4.Mutable = Color4.Blue()\n * blue.a = 0.1 // this WORKS\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Color4 = "
            },
            {
              "kind": "Reference",
              "text": "Color4.ReadonlyColor4",
              "canonicalReference": "@dcl/ecs-math!Color4.ReadonlyColor4:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Color4",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/ecs-math!DEG2RAD:var",
          "docComment": "/**\n * Constant used to convert from Euler degrees to radians\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEG2RAD: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "releaseTag": "Public",
          "name": "DEG2RAD",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/ecs-math!Epsilon:var",
          "docComment": "/**\n * Constant used to define the minimal number value in Babylon.js\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Epsilon = 0.000001"
            }
          ],
          "releaseTag": "Public",
          "name": "Epsilon",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/ecs-math!FloatArray:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type FloatArray = "
            },
            {
              "kind": "Content",
              "text": "number[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "FloatArray",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@dcl/ecs-math!Quaternion:namespace",
          "docComment": "/**\n * Quaternion is a type and a namespace.\n * ```\n * // The namespace contains all types and functions to operates with Quaternion\n * const next = Quaternion.add(pointA, velocityA)\n * // The type Quaternion is an alias to Quaternion.ReadonlyQuaternion\n * const readonlyRotation: Quaternion = Quaternion.Zero()\n * readonlyRotation.x = 0.1 // this FAILS\n *\n * // For mutable usage, use `Quaternion.Mutable`\n * const rotation: Quaternion.Mutable = Quaternion.Identity()\n * rotation.x = 3.0 // this WORKS\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace Quaternion "
            }
          ],
          "releaseTag": "Public",
          "name": "Quaternion",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.add:function(1)",
              "docComment": "/**\n * Returns a new Quaternion as the result of the addition of the two given quaternions.\n *\n * @param q1 - the first quaternion\n *\n * @param q2 - the second quaternion\n *\n * @returns the resulting quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function add(q1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", q2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "q1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "q2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "add"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.angle:function(1)",
              "docComment": "/**\n * Returns the angle in degrees between two rotations a and b.\n *\n * @param quat1 - defines the first quaternion\n *\n * @param quat2 - defines the second quaternion\n *\n * @returns the degrees angle\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function angle(quat1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", quat2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "quat1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "quat2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "angle"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.create:function(1)",
              "docComment": "/**\n * Creates a new Quaternion from the given floats\n *\n * @param x - defines the first component (0 by default)\n *\n * @param y - defines the second component (0 by default)\n *\n * @param z - defines the third component (0 by default)\n *\n * @param w - defines the fourth component (1.0 by default)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function create(\n    x?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    y?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    z?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    w?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "w",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "create"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.dot:function(1)",
              "docComment": "/**\n * Returns the dot product (float) between the quaternions \"left\" and \"right\"\n *\n * @param left - defines the left operand\n *\n * @param right - defines the right operand\n *\n * @returns the dot product\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function dot(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "dot"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.fromAngleAxis:function(1)",
              "docComment": "/**\n * @param degrees - the angle degrees\n *\n * @param axis - vector3\n *\n * @returns a new Quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromAngleAxis(degrees: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", axis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "degrees",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "axis",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "fromAngleAxis"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.fromAxisToRotationQuaternion:function(1)",
              "docComment": "/**\n * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)\n *\n * @param axis1 - defines the first axis\n *\n * @param axis2 - defines the second axis\n *\n * @param axis3 - defines the third axis\n *\n * @returns the new quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromAxisToRotationQuaternion(axis1: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis2: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis3: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "axis1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "axis2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "axis3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "fromAxisToRotationQuaternion"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.fromAxisToRotationQuaternionToRef:function(1)",
              "docComment": "/**\n * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion\n *\n * @param axis1 - defines the first axis\n *\n * @param axis2 - defines the second axis\n *\n * @param axis3 - defines the third axis\n *\n * @param ref - defines the target quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromAxisToRotationQuaternionToRef(axis1: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis2: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis3: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", ref: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "axis1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "axis2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "axis3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "ref",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "fromAxisToRotationQuaternionToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.fromEulerDegrees:function(1)",
              "docComment": "/**\n * Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.\n *\n * @param x - the rotation on the x axis in euler degrees\n *\n * @param y - the rotation on the y axis in euler degrees\n *\n * @param z - the rotation on the z axis in euler degrees\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromEulerDegrees(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "fromEulerDegrees"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.fromLookAt:function(1)",
              "docComment": "/**\n * Rotates the transform so the forward vector points at target's current position.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromLookAt(position: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", worldUp?: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "position",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "worldUp",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "fromLookAt"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.fromLookAtToRef:function(1)",
              "docComment": "/**\n * Rotates the transform so the forward vector points at target's current position.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromLookAtToRef(position: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", worldUp: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "position",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "worldUp",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "fromLookAtToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.fromRotationMatrixToRef:function(1)",
              "docComment": "/**\n * Updates the given quaternion with the given rotation matrix values\n *\n * @param matrix - defines the source matrix\n *\n * @param result - defines the target quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromRotationMatrixToRef(matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion.MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "fromRotationMatrixToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.fromRotationYawPitchRoll:function(1)",
              "docComment": "/**\n * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n *\n * @param yaw - defines the rotation around Y axis (radians)\n *\n * @param pitch - defines the rotation around X axis (radians)\n *\n * @param roll - defines the rotation around Z axis (radians)\n *\n * @returns result quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromRotationYawPitchRoll(yaw: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", pitch: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roll: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "yaw",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "pitch",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "roll",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "fromRotationYawPitchRoll"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.fromRotationYawPitchRollToRef:function(1)",
              "docComment": "/**\n * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n *\n * @param yaw - defines the rotation around Y axis (radians)\n *\n * @param pitch - defines the rotation around X axis (radians)\n *\n * @param roll - defines the rotation around Z axis (radians)\n *\n * @param result - defines the target quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromRotationYawPitchRollToRef(yaw: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", pitch: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roll: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion.MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "yaw",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "pitch",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "roll",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "fromRotationYawPitchRollToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.fromToRotation:function(1)",
              "docComment": "/**\n * Creates a rotation which rotates from fromDirection to toDirection.\n *\n * @param from - defines the first direction Vector\n *\n * @param to - defines the target direction Vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromToRotation(from: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", to: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", up?: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "from",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "to",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "up",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "fromToRotation"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.Identity:function(1)",
              "docComment": "/**\n * Creates an identity quaternion\n *\n * @returns - the identity quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Identity(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Identity"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.length:function(1)",
              "docComment": "/**\n * Gets length of current quaternion\n *\n * @returns the quaternion length (float)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function length(q: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "q",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "length"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.lengthSquared:function(1)",
              "docComment": "/**\n * Gets length of current quaternion\n *\n * @returns the quaternion length (float)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lengthSquared(q: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "q",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "lengthSquared"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.lookRotation:function(1)",
              "docComment": "/**\n * Creates a rotation with the specified forward and upwards directions.\n *\n * @param forward - the direction to look in\n *\n * @param up - the vector that defines in which direction up is\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lookRotation(forward: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", up?: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "forward",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "up",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "lookRotation"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.multiply:function(1)",
              "docComment": "/**\n * Multiplies two quaternions\n *\n * @param self - defines the first operand\n *\n * @param q1 - defines the second operand\n *\n * @returns a new quaternion set as the multiplication result of the self one with the given one \"q1\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiply(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", q1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "q1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "multiply"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.multiplyToRef:function(1)",
              "docComment": "/**\n * Sets the given \"result\" as the the multiplication result of the self one with the given one \"q1\"\n *\n * @param self - defines the first operand\n *\n * @param q1 - defines the second operand\n *\n * @param result - defines the target quaternion\n *\n * @returns the current quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiplyToRef(self: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", q1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "self",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "q1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "multiplyToRef"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/ecs-math!Quaternion.Mutable:type",
              "docComment": "/**\n * Type with `Quaternion` for readonly usage, e.g. `const zeroRotation: Quaternion = Quaternion.Zero()`. For mutable, use `Quaternion.Mutable`, e.g. `const identityQuaternion: Quaternion.Mutable = Quaternion.Identity()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Mutable = "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Mutable",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type",
              "docComment": "/**\n * For external usage, type with `Quaternion`, e.g. `const zeroRotation: Quaternion = Quaternion.Zero()`. For mutable typing, use `Quaternion.Mutable`, e.g. `const identityQuaternion: Quaternion.Mutable = Quaternion.Identity()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type MutableQuaternion = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        x: number;\n        y: number;\n        z: number;\n        w: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "MutableQuaternion",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.normalize:function(1)",
              "docComment": "/**\n * Normalize in place the current quaternion\n *\n * @returns the current updated quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function normalize(q: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "q",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "normalize"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type",
              "docComment": "/**\n * For external use, type with `Quaternion`, e.g. `const zeroRotation: Quaternion = Quaternion.Zero()`. For mutable typing, use `Quaternion.Mutable`, e.g. `const identityQuaternion: Quaternion.Mutable = Quaternion.Identity()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type ReadonlyQuaternion = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readonly x: number;\n        readonly y: number;\n        readonly z: number;\n        readonly w: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ReadonlyQuaternion",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.rotateTowards:function(1)",
              "docComment": "/**\n * The from quaternion is rotated towards to by an angular step of maxDegreesDelta.\n *\n * @param from - defines the first quaternion\n *\n * @param to - defines the second quaternion\n *\n * @param maxDegreesDelta - the interval step\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotateTowards(from: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", to: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", maxDegreesDelta: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "from",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "to",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "maxDegreesDelta",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "rotateTowards"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.slerp:function(1)",
              "docComment": "/**\n * Interpolates between two quaternions\n *\n * @param left - defines first quaternion\n *\n * @param right - defines second quaternion\n *\n * @param amount - defines the gradient to use\n *\n * @returns the new interpolated quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function slerp(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "slerp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.slerpToRef:function(1)",
              "docComment": "/**\n * Interpolates between two quaternions and stores it into a target quaternion\n *\n * @param left - defines first quaternion\n *\n * @param right - defines second quaternion\n *\n * @param amount - defines the gradient to use\n *\n * @param result - defines the target quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function slerpToRef(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "slerpToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.toEulerAngles:function(1)",
              "docComment": "/**\n * Gets or sets the euler angle representation of the rotation. Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n *\n * @returns a new Vector3 with euler angles degrees\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toEulerAngles(q: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3.Mutable",
                  "canonicalReference": "@dcl/ecs-math!Vector3.Mutable:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "q",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toEulerAngles"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Quaternion.Zero:function(1)",
              "docComment": "/**\n * Returns a zero filled quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Zero(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.MutableQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Zero"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/ecs-math!Quaternion:type",
          "docComment": "/**\n * Quaternion is a type and a namespace. - The namespace contains all types and functions to operates with Quaternion - The type Quaternion is an alias to Quaternion.ReadonlyQuaternion\n * ```\n *\n * // Namespace usage example\n * const next = Quaternion.add(pointA, velocityA)\n *\n * // Type usage example\n * const readonlyRotation: Quaternion = Quaternion.Zero()\n * readonlyRotation.x = 0.1 // this FAILS\n *\n * // For mutable usage, use `Quaternion.Mutable`\n * const rotation: Quaternion.Mutable = Quaternion.Identity()\n * rotation.x = 3.0 // this WORKS\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Quaternion = "
            },
            {
              "kind": "Reference",
              "text": "Quaternion.ReadonlyQuaternion",
              "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Quaternion",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/ecs-math!RAD2DEG:var",
          "docComment": "/**\n * Constant used to convert from radians to Euler degrees\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "RAD2DEG: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "releaseTag": "Public",
          "name": "RAD2DEG",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@dcl/ecs-math!Scalar:namespace",
          "docComment": "/**\n * Scalar computation library\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace Scalar "
            }
          ],
          "releaseTag": "Public",
          "name": "Scalar",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.clamp:function(1)",
              "docComment": "/**\n * Returns the value itself if it's between min and max. Returns min if the value is lower than min. Returns max if the value is greater than max.\n *\n * @param value - the value to clmap\n *\n * @param min - the min value to clamp to (default: 0)\n *\n * @param max - the max value to clamp to (default: 1)\n *\n * @returns the clamped value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clamp(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", min?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "clamp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.deltaAngle:function(1)",
              "docComment": "/**\n * Calculates the shortest difference between two given angles given in degrees.\n *\n * @param current - current angle in degrees\n *\n * @param target - target angle in degrees\n *\n * @returns the delta\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function deltaAngle(current: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "current",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "deltaAngle"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.denormalize:function(1)",
              "docComment": "/**\n * Denormalize the value from 0.0 and 1.0 using min and max values\n *\n * @param normalized - value to denormalize\n *\n * @param min - max to denormalize between\n *\n * @param max - min to denormalize between\n *\n * @returns the denormalized value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function denormalize(normalized: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "normalized",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "denormalize"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.hermite:function(1)",
              "docComment": "/**\n * Returns a new scalar located for \"amount\" (float) on the Hermite spline defined by the scalars \"value1\", \"value3\", \"tangent1\", \"tangent2\". {@link http://mathworld.wolfram.com/HermitePolynomial.html}\n *\n * @param value1 - spline value\n *\n * @param tangent1 - spline value\n *\n * @param value2 - spline value\n *\n * @param tangent2 - spline value\n *\n * @param amount - input value\n *\n * @returns hermite result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function hermite(value1: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", tangent1: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", tangent2: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tangent1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "tangent2",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "hermite"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.inverseLerp:function(1)",
              "docComment": "/**\n * Calculates the linear parameter t that produces the interpolant value within the range [a, b].\n *\n * @param a - start value\n *\n * @param b - target value\n *\n * @param value - value between a and b\n *\n * @returns the inverseLerp value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function inverseLerp(a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "inverseLerp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.lerp:function(1)",
              "docComment": "/**\n * Creates a new scalar with values linearly interpolated of \"amount\" between the start scalar and the end scalar\n *\n * @param start - start value\n *\n * @param end - target value\n *\n * @param amount - amount to lerp between\n *\n * @returns the lerped value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lerp(start: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "lerp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.lerpAngle:function(1)",
              "docComment": "/**\n * Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees. The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees.\n *\n * @param start - start value\n *\n * @param end - target value\n *\n * @param amount - amount to lerp between\n *\n * @returns the lerped value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lerpAngle(start: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "lerpAngle"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.log2:function(1)",
              "docComment": "/**\n * the log2 of value.\n *\n * @param value - the value to compute log2 of\n *\n * @returns the log2 of value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function log2(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "log2"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.moveTowards:function(1)",
              "docComment": "/**\n * Moves a value current towards target.\n *\n * This is essentially the same as Mathf.Lerp but instead the export function will ensure that the speed never exceeds maxDelta. Negative values of maxDelta pushes the value away from target.\n *\n * @param current - current value\n *\n * @param target - target value\n *\n * @param maxDelta - max distance to move\n *\n * @returns resulting value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function moveTowards(current: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", maxDelta: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "current",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "maxDelta",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "moveTowards"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.moveTowardsAngle:function(1)",
              "docComment": "/**\n * Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.\n *\n * Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.\n *\n * @param current - current value\n *\n * @param target - target value\n *\n * @param maxDelta - max distance to move\n *\n * @returns resulting angle\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function moveTowardsAngle(current: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", maxDelta: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "current",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "maxDelta",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "moveTowardsAngle"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.normalize:function(1)",
              "docComment": "/**\n * Normalize the value between 0.0 and 1.0 using min and max values\n *\n * @param value - value to normalize\n *\n * @param min - max to normalize between\n *\n * @param max - min to normalize between\n *\n * @returns the normalized value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function normalize(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "normalize"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.normalizeRadians:function(1)",
              "docComment": "/**\n * Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.\n *\n * @param angle - The angle to normalize in radian.\n *\n * @returns The converted angle.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function normalizeRadians(angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "normalizeRadians"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.percentToRange:function(1)",
              "docComment": "/**\n * This export function returns number that corresponds to the percentage in a given range.\n *\n * PercentToRange(0.34,0,100) will return 34.\n *\n * @param percent - to convert to number\n *\n * @param min - min range\n *\n * @param max - max range\n *\n * @returns the number\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function percentToRange(percent: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "percent",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "percentToRange"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.pingPong:function(1)",
              "docComment": "/**\n * PingPongs the value t, so that it is never larger than length and never smaller than 0.\n *\n * @param tx - value\n *\n * @param length - length\n *\n * @returns The returned value will move back and forth between 0 and length\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function pingPong(tx: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", length: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tx",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "length",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "pingPong"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.randomRange:function(1)",
              "docComment": "/**\n * Returns a random float number between and min and max values\n *\n * @param min - min value of random\n *\n * @param max - max value of random\n *\n * @returns random value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function randomRange(min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "randomRange"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.rangeToPercent:function(1)",
              "docComment": "/**\n * This export function returns percentage of a number in a given range.\n *\n * RangeToPercent(40,20,60) will return 0.5 (50%) RangeToPercent(34,0,100) will return 0.34 (34%)\n *\n * @param num - to convert to percentage\n *\n * @param min - min range\n *\n * @param max - max range\n *\n * @returns the percentage\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rangeToPercent(num: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "num",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "rangeToPercent"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.repeat:function(1)",
              "docComment": "/**\n * Loops the value, so that it is never larger than length and never smaller than 0.\n *\n * This is similar to the modulo operator but it works with floating point numbers. For example, using 3.0 for t and 2.5 for length, the result would be 0.5. With t = 5 and length = 2.5, the result would be 0.0. Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator\n *\n * @param value - the value\n *\n * @param length - the length\n *\n * @returns the looped value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function repeat(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", length: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "length",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "repeat"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.sign:function(1)",
              "docComment": "/**\n * Returns -1 if value is negative and +1 is value is positive.\n *\n * @param _value - the value\n *\n * @returns the value itself if it's equal to zero.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function sign(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "sign"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.smoothStep:function(1)",
              "docComment": "/**\n * Interpolates between min and max with smoothing at the limits.\n *\n * This export function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.\n *\n * @param from - from\n *\n * @param to - to\n *\n * @param tx - value\n *\n * @returns the smooth stepped value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function smoothStep(from: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", to: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", tx: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "from",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "to",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "tx",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "smoothStep"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.toHex:function(1)",
              "docComment": "/**\n * Returns a string : the upper case translation of the number i to hexadecimal.\n *\n * @param i - number\n *\n * @returns the upper case translation of the number i to hexadecimal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toHex(i: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "i",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toHex"
            },
            {
              "kind": "Variable",
              "canonicalReference": "@dcl/ecs-math!Scalar.TwoPi:var",
              "docComment": "/**\n * Two pi constants convenient for computation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TwoPi: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                }
              ],
              "releaseTag": "Public",
              "name": "TwoPi",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Scalar.withinEpsilon:function(1)",
              "docComment": "/**\n * Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n *\n * @param a - number\n *\n * @param b - number\n *\n * @param epsilon - (default = 1.401298E-45)\n *\n * @returns true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function withinEpsilon(a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", epsilon?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "epsilon",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "withinEpsilon"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/ecs-math!ToGammaSpace:var",
          "docComment": "/**\n * Constant used to convert a value to gamma space\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ToGammaSpace: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "releaseTag": "Public",
          "name": "ToGammaSpace",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/ecs-math!ToLinearSpace:var",
          "docComment": "/**\n * Constant used to convert a value to linear space\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ToLinearSpace = 2.2"
            }
          ],
          "releaseTag": "Public",
          "name": "ToLinearSpace",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@dcl/ecs-math!Vector2:namespace",
          "docComment": "/**\n * Vector2 is a type and a namespace.\n * ```\n * // The namespace contains all types and functions to operates with Vector2\n * const next = Vector2.add(pointA, velocityA) // add function not implemented yet\n * // The type Vector2 is an alias to Vector2.ReadonlyVector2\n * const readonlyPosition: Vector2 = Vector2.Zero()\n * readonlyPosition.x = 0.1 // this FAILS\n *\n * // For mutable usage, use `Vector2.Mutable`\n * const position: Vector2.Mutable = Vector2.One()\n * position.x = 3.0 // this WORKS\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace Vector2 "
            }
          ],
          "releaseTag": "Public",
          "name": "Vector2",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector2.create:function(1)",
              "docComment": "/**\n * Creates a new Vector2 object from the given x, y (floats) coordinates.\n *\n * @param x - defines the first coordinates (on X axis)\n *\n * @param y - defines the second coordinates (on Y axis)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function create(\n    x?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    y?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2.MutableVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "create"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/ecs-math!Vector2.Mutable:type",
              "docComment": "/**\n * Type with `Vector2` for readonly usage, e.g. `const zeroPosition: Vector2 = Vector2.Zero()`. For mutable, use `Vector2.Mutable`, e.g. `const oneVector: Vector2.Mutable = Vector2.One()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Mutable = "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2.MutableVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Mutable",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/ecs-math!Vector2.MutableVector2:type",
              "docComment": "/**\n * For external usage, type with `Vector2`, e.g. `const zeroPosition: Vector2 = Vector2.Zero()`. For mutable typing, use `Vector2.Mutable`, e.g. `const oneVector: Vector2.Mutable = Vector2.One()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type MutableVector2 = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        x: number;\n        y: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "MutableVector2",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector2.One:function(1)",
              "docComment": "/**\n * Returns a new Vector2 set to (1.0, 1.0)\n *\n * @returns a new unit Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function One(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2.MutableVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "One"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/ecs-math!Vector2.ReadonlyVector2:type",
              "docComment": "/**\n * For external use, type with `Vector2`, e.g. `const zeroPosition: Vector2 = Vector2.Zero()`. For mutable typing, use `Vector2.Mutable`, e.g. `const oneVector: Vector2.Mutable = Vector2.One()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type ReadonlyVector2 = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readonly x: number;\n        readonly y: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ReadonlyVector2",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector2.Zero:function(1)",
              "docComment": "/**\n * Returns a new Vector2 set to (0.0, 0.0)\n *\n * @returns a new empty Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Zero(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2.MutableVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Zero"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/ecs-math!Vector2:type",
          "docComment": "/**\n * Vector2 is a type and a namespace. - The namespace contains all types and functions to operates with Vector2 - The type Vector2 is an alias to Vector2.ReadonlyVector2\n * ```\n *\n * // Namespace usage example\n * const next = Vector2.add(pointA, velocityA) // add function not implemented yet\n *\n * // Type usage example\n * const readonlyPosition: Vector2 = Vector2.Zero()\n * readonlyPosition.x = 0.1 // this FAILS\n *\n * // For mutable usage, use `Vector2.Mutable`\n * const position: Vector2.Mutable = Vector2.One()\n * position.x = 3.0 // this WORKS\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Vector2 = "
            },
            {
              "kind": "Reference",
              "text": "Vector2.ReadonlyVector2",
              "canonicalReference": "@dcl/ecs-math!Vector2.ReadonlyVector2:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Vector2",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@dcl/ecs-math!Vector3:namespace",
          "docComment": "/**\n * Vector3 is a type and a namespace.\n * ```\n * // The namespace contains all types and functions to operates with Vector3\n * const next = Vector3.add(pointA, velocityA)\n * // The type Vector3 is an alias to Vector3.ReadonlyVector3\n * const readonlyPosition: Vector3 = Vector3.Zero()\n * readonlyPosition.x = 0.1 // this FAILS\n *\n * // For mutable usage, use `Vector3.Mutable`\n * const position: Vector3.Mutable = Vector3.One()\n * position.x = 3.0 // this WORKS\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace Vector3 "
            }
          ],
          "releaseTag": "Public",
          "name": "Vector3",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.add:function(1)",
              "docComment": "/**\n * Returns a new Vector3 as the result of the addition of the two given vectors.\n *\n * @param vector1 - the first vector\n *\n * @param vector2 - the second vector\n *\n * @returns the resulting vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function add(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "add"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.addToRef:function(1)",
              "docComment": "/**\n * Performs addition between vectorA and vectorB and stores the result into result\n *\n * @param vectorA - the first vector for the addition operation\n *\n * @param vectorB - the second vector for the addition operation\n *\n * @param result - the vector where the result of the addition is stored\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function addToRef(vectorA: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vectorB: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vectorA",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "vectorB",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "addToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.applyMatrix4:function(1)",
              "docComment": "/**\n * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective\n *\n * @param matrix - The transformation matrix\n *\n * @returns result Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function applyMatrix4(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "applyMatrix4"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.applyMatrix4ToRef:function(1)",
              "docComment": "/**\n * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective and set the given vector \"result\" with this result\n *\n * @param matrix - The transformation matrix\n *\n * @param result - defines the Vector3 object where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function applyMatrix4ToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "applyMatrix4ToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.Backward:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (0.0, 0.0, -1.0)\n *\n * @returns a new forward Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Backward(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Backward"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.catmullRom:function(1)",
              "docComment": "/**\n * Returns a new Vector3 located for \"amount\" on the CatmullRom interpolation spline defined by the vectors \"value1\", \"value2\", \"value3\", \"value4\"\n *\n * @param value1 - defines the first control point\n *\n * @param value2 - defines the second control point\n *\n * @param value3 - defines the third control point\n *\n * @param value4 - defines the fourth control point\n *\n * @param amount - defines the amount on the spline to use\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function catmullRom(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value3: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value4: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "value3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "value4",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "catmullRom"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.center:function(1)",
              "docComment": "/**\n * Returns a new Vector3 located at the center between \"value1\" and \"value2\"\n *\n * @param value1 - defines the first operand\n *\n * @param value2 - defines the second operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function center(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "center"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.clamp:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\" If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n *\n * @param value - defines the current value\n *\n * @param min - defines the lower range value\n *\n * @param max - defines the upper range value\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clamp(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "clamp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.clampToRef:function(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\" If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n *\n * @param value - defines the current value\n *\n * @param min - defines the lower range value\n *\n * @param max - defines the upper range value\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clampToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "clampToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.clone:function(1)",
              "docComment": "/**\n * Returns a new Vector3 with the same value\n *\n * @returns the resulting vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function clone(source: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "clone"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.copyFrom:function(1)",
              "docComment": "/**\n * Copy source into dest\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function copyFrom(source: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", dest: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "dest",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "copyFrom"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.copyFromFloats:function(1)",
              "docComment": "/**\n * Sets the given vector \"dest\" with the given floats.\n *\n * @param x - defines the x coordinate of the source\n *\n * @param y - defines the y coordinate of the source\n *\n * @param z - defines the z coordinate of the source\n *\n * @param dest - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function copyFromFloats(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", dest: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "dest",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "copyFromFloats"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.create:function(1)",
              "docComment": "/**\n * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\n *\n * @param x - defines the first coordinates (on X axis)\n *\n * @param y - defines the second coordinates (on Y axis)\n *\n * @param z - defines the third coordinates (on Z axis)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function create(\n    x?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    y?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    z?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "create"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.cross:function(1)",
              "docComment": "/**\n * Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\" The cross product is then orthogonal to both \"left\" and \"right\"\n *\n * @param left - defines the left operand\n *\n * @param right - defines the right operand\n *\n * @returns the cross product\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function cross(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "cross"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.crossToRef:function(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the cross product of \"left\" and \"right\" The cross product is then orthogonal to both \"left\" and \"right\"\n *\n * @param left - defines the left operand\n *\n * @param right - defines the right operand\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function crossToRef(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "crossToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.distance:function(1)",
              "docComment": "/**\n * Returns the distance between the vectors \"value1\" and \"value2\"\n *\n * @param value1 - defines the first operand\n *\n * @param value2 - defines the second operand\n *\n * @returns the distance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function distance(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "distance"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.distanceSquared:function(1)",
              "docComment": "/**\n * Returns the squared distance between the vectors \"value1\" and \"value2\"\n *\n * @param value1 - defines the first operand\n *\n * @param value2 - defines the second operand\n *\n * @returns the squared distance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function distanceSquared(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "distanceSquared"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.divide:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones\n *\n * @param otherVector - defines the second operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function divide(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "divide"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.divideToRef:function(1)",
              "docComment": "/**\n * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector \"result\"\n *\n * @param otherVector - defines the second operand\n *\n * @param result - defines the Vector3 object where to store the result\n *\n * @returns the current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function divideToRef(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "divideToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.dot:function(1)",
              "docComment": "/**\n * Returns the dot product (float) between the vectors \"left\" and \"right\"\n *\n * @param left - defines the left operand\n *\n * @param right - defines the right operand\n *\n * @returns the dot product\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function dot(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "dot"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.Down:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (0.0, -1.0, 0.0)\n *\n * @returns a new down Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Down(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Down"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.equals:function(1)",
              "docComment": "/**\n * Returns true if the vector1 and the vector2 coordinates are strictly equal\n *\n * @param vector1 - defines the first operand\n *\n * @param vector2 - defines the second operand\n *\n * @returns true if both vectors are equals\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function equals(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.equalsToFloats:function(1)",
              "docComment": "/**\n * Returns true if the current Vector3 coordinates equals the given floats\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @returns true if both vectors are equals\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function equalsToFloats(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "equalsToFloats"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.equalsWithEpsilon:function(1)",
              "docComment": "/**\n * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon\n *\n * @param otherVector - defines the second operand\n *\n * @param epsilon - defines the minimal distance to define values as equals\n *\n * @returns true if both vectors are distant less than epsilon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function equalsWithEpsilon(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", epsilon?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "epsilon",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "equalsWithEpsilon"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.floor:function(1)",
              "docComment": "/**\n * Gets a new Vector3 from vector1 floored values\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function floor(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "floor"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.Forward:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (0.0, 0.0, 1.0)\n *\n * @returns a new forward Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Forward(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Forward"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.fract:function(1)",
              "docComment": "/**\n * Gets a new Vector3 from vector1 floored values\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fract(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fract"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.fromArray:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set from the index \"offset\" of the given array\n *\n * @param array - defines the source array\n *\n * @param offset - defines the offset in the source array\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "fromArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.fromArrayToRef:function(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the element values from the index \"offset\" of the given array\n *\n * @param array - defines the source array\n *\n * @param offset - defines the offset in the source array\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromArrayToRef(array: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ", offset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "fromArrayToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.fromFloatArray:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set from the index \"offset\" of the given FloatArray This function is deprecated. Use FromArray instead\n *\n * @param array - defines the source array\n *\n * @param offset - defines the offset in the source array\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromFloatArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "fromFloatArray"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.fromFloatArrayToRef:function(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the element values from the index \"offset\" of the given FloatArray This function is deprecated. Use FromArrayToRef instead.\n *\n * @param array - defines the source array\n *\n * @param offset - defines the offset in the source array\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function fromFloatArrayToRef(array: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", offset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "fromFloatArrayToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.getAngleBetweenVectors:function(1)",
              "docComment": "/**\n * Get angle between two vectors\n *\n * @param vector0 - angle between vector0 and vector1\n *\n * @param vector1 - angle between vector0 and vector1\n *\n * @param normal - direction of the normal\n *\n * @returns the angle between vector0 and vector1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getAngleBetweenVectors(vector0: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", normal: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector0",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "normal",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "getAngleBetweenVectors"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.getClipFactor:function(1)",
              "docComment": "/**\n * Get the clip factor between two vectors\n *\n * @param vector0 - defines the first operand\n *\n * @param vector1 - defines the second operand\n *\n * @param axis - defines the axis to use\n *\n * @param size - defines the size along the axis\n *\n * @returns the clip factor\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getClipFactor(vector0: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", size: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector0",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "axis",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "size",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "getClipFactor"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.getHashCode:function(1)",
              "docComment": "/**\n * Creates the Vector3 hash code\n *\n * @returns a number which tends to be unique between Vector3 instances\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getHashCode(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getHashCode"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.hermite:function(1)",
              "docComment": "/**\n * Returns a new Vector3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\n *\n * @param value1 - defines the first control point\n *\n * @param tangent1 - defines the first tangent vector\n *\n * @param value2 - defines the second control point\n *\n * @param tangent2 - defines the second tangent vector\n *\n * @param amount - defines the amount on the interpolation spline (between 0 and 1)\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function hermite(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", tangent1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", tangent2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tangent1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "tangent2",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "hermite"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.isNonUniform:function(1)",
              "docComment": "/**\n * Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same\n *\n * @param vector - vector to check\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function isNonUniform(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isNonUniform"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.Left:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\n *\n * @returns a new left Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Left(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Left"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.length:function(1)",
              "docComment": "/**\n * Gets the length of the Vector3\n *\n * @returns the length of the Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function length(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "length"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.lengthSquared:function(1)",
              "docComment": "/**\n * Gets the squared length of the Vector3\n *\n * @returns squared length of the Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lengthSquared(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "lengthSquared"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.lerp:function(1)",
              "docComment": "/**\n * Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\"\n *\n * @param start - defines the start value\n *\n * @param end - defines the end value\n *\n * @param amount - max defines amount between both (between 0 and 1)\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lerp(start: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "lerp"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.lerpToRef:function(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\"\n *\n * @param start - defines the start value\n *\n * @param end - defines the end value\n *\n * @param amount - max defines amount between both (between 0 and 1)\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function lerpToRef(start: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "lerpToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.maximize:function(1)",
              "docComment": "/**\n * Gets the maximal coordinate values between two Vector3\n *\n * @param left - defines the first operand\n *\n * @param right - defines the second operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function maximize(left: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "maximize"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.maximizeInPlaceFromFloatsToRef:function(1)",
              "docComment": "/**\n * Set result Vector3 with the maximal coordinate values between vector1 and the given coordinates\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @param result - the set Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function maximizeInPlaceFromFloatsToRef(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "maximizeInPlaceFromFloatsToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.minimize:function(1)",
              "docComment": "/**\n * Gets the minimal coordinate values between two Vector3\n *\n * @param left - defines the first operand\n *\n * @param right - defines the second operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function minimize(left: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "minimize"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.minimizeInPlaceFromFloatsToRef:function(1)",
              "docComment": "/**\n * Set result Vector3 with the minimal coordinate values between vector1 and the given coordinates\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @param result - the set Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function minimizeInPlaceFromFloatsToRef(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "minimizeInPlaceFromFloatsToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.multiply:function(1)",
              "docComment": "/**\n * Returns a new Vector3, result of the multiplication of vector1 by the vector2\n *\n * @param vector1 - defines the first operand\n *\n * @param vector2 - defines the second operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiply(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "multiply"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.multiplyByFloats:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiplyByFloats(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "multiplyByFloats"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.multiplyByFloatsToRef:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiplyByFloatsToRef(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "multiplyByFloatsToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.multiplyToRef:function(1)",
              "docComment": "/**\n * Multiplies the current Vector3 by the given one and stores the result in the given vector \"result\"\n *\n * @param otherVector - defines the second operand\n *\n * @param result - defines the Vector3 object where to store the result\n *\n * @returns the current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function multiplyToRef(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "multiplyToRef"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/ecs-math!Vector3.Mutable:type",
              "docComment": "/**\n * Type with `Vector3` for readonly usage, e.g. `const zeroPosition: Vector3 = Vector3.Zero()`. For mutable, use `Vector3.Mutable`, e.g. `const upVector: Vector3.Mutable = Vector3.Up()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Mutable = "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Mutable",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type",
              "docComment": "/**\n * For external usage, type with `Vector3`, e.g. `const zeroPosition: Vector3 = Vector3.Zero()`. For mutable typing, use `Vector3.Mutable`, e.g. `const upVector: Vector3.Mutable = Vector3.Up()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type MutableVector3 = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        x: number;\n        y: number;\n        z: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "MutableVector3",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.negate:function(1)",
              "docComment": "/**\n * Returns a new Vector3 with the other sign\n *\n * @returns the resulting vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function negate(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "negate"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.normalize:function(1)",
              "docComment": "/**\n * Normalize the current Vector3. Please note that this is an in place operation.\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function normalize(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "normalize"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.normalizeFromLength:function(1)",
              "docComment": "/**\n * Normalize the current Vector3 with the given input length. Please note that this is an in place operation.\n *\n * @param len - the length of the vector\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function normalizeFromLength(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", len: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "len",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "normalizeFromLength"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.normalizeFromLengthToRef:function(1)",
              "docComment": "/**\n * Normalize the current Vector3 with the given input length. Please note that this is an in place operation.\n *\n * @param len - the length of the vector\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function normalizeFromLengthToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", len: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "len",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "normalizeFromLengthToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.normalizeToRef:function(1)",
              "docComment": "/**\n * Normalize the current Vector3. Please note that this is an in place operation.\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function normalizeToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "normalizeToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.One:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (1.0, 1.0, 1.0)\n *\n * @returns a new unit Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function One(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "One"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.Random:function(1)",
              "docComment": "/**\n * Returns a new random Vector3\n *\n * @returns a random Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Random(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Random"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type",
              "docComment": "/**\n * For external use, type with `Vector3`, e.g. `const zeroPosition: Vector3 = Vector3.Zero()`. For mutable typing, use `Vector3.Mutable`, e.g. `const upVector: Vector3.Mutable = Vector3.Up()`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type ReadonlyVector3 = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readonly x: number;\n        readonly y: number;\n        readonly z: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ReadonlyVector3",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.Right:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (1.0, 0.0, 0.0)\n *\n * @returns a new right Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Right(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Right"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.rotate:function(1)",
              "docComment": "/**\n * Rotates the current Vector3 based on the given quaternion\n *\n * @param q - defines the Quaternion\n *\n * @returns the current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotate(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", q: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion.ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "q",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "rotate"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.rotateToRef:function(1)",
              "docComment": "/**\n * Rotates current Vector3 based on the given quaternion, but applies the rotation to target Vector3.\n *\n * @param q - defines the Quaternion\n *\n * @param result - defines the target Vector3\n *\n * @returns the current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotateToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", q: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion.ReadonlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion.ReadonlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "q",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "rotateToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.rotationFromAxis:function(1)",
              "docComment": "/**\n * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system), RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply to something in order to rotate it from its local system to the given target system Note: axis1, axis2 and axis3 are normalized during this operation\n *\n * @param axis1 - defines the first axis\n *\n * @param axis2 - defines the second axis\n *\n * @param axis3 - defines the third axis\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotationFromAxis(axis1: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis2: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis3: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "axis1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "axis2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "axis3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "rotationFromAxis"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.rotationFromAxisToRef:function(1)",
              "docComment": "/**\n * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3\n *\n * @param axis1 - defines the first axis\n *\n * @param axis2 - defines the second axis\n *\n * @param axis3 - defines the third axis\n *\n * @param ref - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotationFromAxisToRef(axis1: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis2: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis3: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "axis1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "axis2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "axis3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "rotationFromAxisToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.scale:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\n *\n * @param scale - defines the multiplier factor\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scale(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "scale"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.scaleToRef:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\n *\n * @param scale - defines the multiplier factor\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function scaleToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "scaleToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.subtract:function(1)",
              "docComment": "/**\n * Returns a new Vector3 as the result of the substraction of the two given vectors.\n *\n * @returns the resulting vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function subtract(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "subtract"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.subtractFromFloatsToRef:function(1)",
              "docComment": "/**\n * Subtracts the given floats from the current Vector3 coordinates and set the given vector \"result\" with this result\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @param result - defines the Vector3 object where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function subtractFromFloatsToRef(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "subtractFromFloatsToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.subtractToRef:function(1)",
              "docComment": "/**\n * Performs substraction between vectorA and vectorB and stores the result into result\n *\n * @param vectorA - the first vector for the substraction operation\n *\n * @param vectorB - the second vector for the substraction operation\n *\n * @param result - the vector where the result of the substraction is stored\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function subtractToRef(vectorA: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vectorB: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vectorA",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "vectorB",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "subtractToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.toString:function(1)",
              "docComment": "/**\n * Creates a string representation of the Vector3\n *\n * @returns a string with the Vector3 coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function toString(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toString"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.transformCoordinates:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector. This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n *\n * @param vector - defines the Vector3 to transform\n *\n * @param transformation - defines the transformation matrix\n *\n * @returns the transformed Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function transformCoordinates(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "transformCoordinates"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.transformCoordinatesFromFloatsToRef:function(1)",
              "docComment": "/**\n * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z) This method computes tranformed coordinates only, not transformed direction vectors\n *\n * @param x - define the x coordinate of the source vector\n *\n * @param y - define the y coordinate of the source vector\n *\n * @param z - define the z coordinate of the source vector\n *\n * @param transformation - defines the transformation matrix\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function transformCoordinatesFromFloatsToRef(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "transformCoordinatesFromFloatsToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.transformCoordinatesToRef:function(1)",
              "docComment": "/**\n * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n *\n * @param vector - defines the Vector3 to transform\n *\n * @param transformation - defines the transformation matrix\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function transformCoordinatesToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "transformCoordinatesToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.transformNormal:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n *\n * @param vector - defines the Vector3 to transform\n *\n * @param transformation - defines the transformation matrix\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function transformNormal(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "transformNormal"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.transformNormalFromFloatsToRef:function(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z) This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n *\n * @param x - define the x coordinate of the source vector\n *\n * @param y - define the y coordinate of the source vector\n *\n * @param z - define the z coordinate of the source vector\n *\n * @param transformation - defines the transformation matrix\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function transformNormalFromFloatsToRef(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "transformNormalFromFloatsToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.transformNormalToRef:function(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n *\n * @param vector - defines the Vector3 to transform\n *\n * @param transformation - defines the transformation matrix\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function transformNormalToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix.ReadonlyMatrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix.ReadonlyMatrix:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "transformNormalToRef"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.Up:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set tolengthSquared (0.0, 1.0, 0.0)\n *\n * @returns a new up Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Up(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Up"
            },
            {
              "kind": "Function",
              "canonicalReference": "@dcl/ecs-math!Vector3.Zero:function(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (0.0, 0.0, 0.0)\n *\n * @returns a new empty Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Zero(): "
                },
                {
                  "kind": "Reference",
                  "text": "MutableVector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3.MutableVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Zero"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/ecs-math!Vector3:type",
          "docComment": "/**\n * Vector3 is a type and a namespace. - The namespace contains all types and functions to operates with Vector3 - The type Vector3 is an alias to Vector3.ReadonlyVector3\n * ```\n *\n * // Namespace usage example\n * const next = Vector3.add(pointA, velocityA)\n *\n * // Type usage example\n * const readonlyPosition: Vector3 = Vector3.Zero()\n * readonlyPosition.x = 0.1 // this FAILS\n *\n * // For mutable usage, use `Vector3.Mutable`\n * const position: Vector3.Mutable = Vector3.One()\n * position.x = 3.0 // this WORKS\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Vector3 = "
            },
            {
              "kind": "Reference",
              "text": "Vector3.ReadonlyVector3",
              "canonicalReference": "@dcl/ecs-math!Vector3.ReadonlyVector3:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Vector3",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        }
      ]
    }
  ]
}
