{"version":3,"file":"component---src-pages-design-create-tsx-cec95898f04b4e198f90.js","mappings":"8MAOaA,EAAe,SAAHC,GAYlB,IAXLC,EAAYD,EAAZC,aACAC,EAAYF,EAAZE,aAAYC,EAAAH,EACZI,KAAAA,OAAI,IAAAD,EAAG,MAAKA,EACZE,EAAOL,EAAPK,QACAC,EAAKN,EAALM,MAQOC,EAAiBC,KAAc,kBAAM,0FAA8B,IAAtD,GACpB,OACEC,EAAAA,cAAA,OAAKC,MAAO,CAAEC,OAAQ,QAASC,MAAO,UACnCL,GACCE,EAAAA,cAACF,EAAcM,eAAc,CAC3BC,iBACW,QAATV,GAAkBC,EACd,CACEU,QACU,OAARX,EACI,aACQ,SAARA,EACA,eACA,eACNC,QAASA,EACTW,SAAkB,aAARZ,QAEZa,EAENC,WAAY,kBAAOZ,EAAQA,KAAUa,EAAAA,EAAAA,OAAM,EAC3ClB,aAAcA,EACdC,aAAcA,IAKxB,C,2FCzCakB,EAAkB,SAAHpB,GAAA,IAC1BqB,EAAUrB,EAAVqB,WACAC,EAAatB,EAAbsB,cAAa,OAKbb,EAAAA,cAACc,EAAAA,MAAK,CAACC,MAAM,EAAMC,KAAK,OAAOC,UAAU,gBACvCjB,EAAAA,cAACc,EAAAA,MAAMI,OAAM,KAAC,kCACdlB,EAAAA,cAACc,EAAAA,MAAMK,QAAO,MACdnB,EAAAA,cAACc,EAAAA,MAAMM,QAAO,KACZpB,EAAAA,cAACqB,EAAAA,OAAM,CAACC,SAAO,EAAC1B,QAASgB,EAAYI,KAAK,UAAS,YAGnDhB,EAAAA,cAACqB,EAAAA,OAAM,CACLE,UAAQ,EACR3B,QAASiB,EACTG,KAAK,SACLf,MAAO,CAAEuB,gBAAiB,gBAC3B,iBAIG,C,+GCkCV,UAnDe,WACb,IAAAC,GAAgCC,EAAAA,EAAAA,kBAAzBC,EAAOF,EAAA,GAAEG,EAAYH,EAAA,GAC5BI,GAA8CC,EAAAA,EAAAA,WAAS,GAAhDC,EAAeF,EAAA,GAAEG,EAAkBH,EAAA,GAC1CI,GAAwCH,EAAAA,EAAAA,UAAwB,MAAzDI,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAEpC,OAAKN,GAAWC,EAAaQ,QAEzBpC,EAAAA,cAACqC,EAAAA,OAAM,CACLC,UAAW,kBAAMV,EAAaW,QAAQ,EACtCC,aAAcZ,EAAaQ,UAM/BpC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACV,EAAAA,EAAY,CACXM,QAAS,SAAC6C,EAAOC,EAAOC,GACtB,IAAMC,GAAKC,EAAAA,EAAAA,IAAgB,CACzBF,WAAAA,EACAG,SAAU,CACRC,cAAeN,EAAMO,QAAO,SAACC,EAAKC,GAMhC,OALIA,EAAKC,KAAKP,GACZK,EAAIC,EAAKC,KAAKP,IAAMM,EAAKE,SAEzBH,EAAIC,EAAKN,IAAMM,EAAKE,SAEfH,CACT,GAAG,CAAC,GACJR,MAAAA,EACAC,MAAAA,KAGJP,EAAgBS,GAChBZ,GAAmB,EACrB,IAEDD,GACC/B,EAAAA,cAACW,EAAAA,EAAe,CACdC,WAAY,YACVyC,EAAAA,EAAAA,UAASC,EAAAA,GAAUC,eAAerB,GACpC,EACArB,cAAe,WACbmB,GAAmB,EACrB,IAKV,C","sources":["webpack://@dcl/quests-manager/./src/components/DesignerView.tsx","webpack://@dcl/quests-manager/./src/components/QuestStepsDraftSaved.tsx","webpack://@dcl/quests-manager/./src/pages/design/create.tsx"],"sourcesContent":["import React from \"react\"\n\nimport { QuestDefinition } from \"@dcl/quests-client/dist/protocol/decentraland/quests/definitions.gen\"\nimport { Edge, Node } from \"@dcl/quests-designer/dist/types\"\nimport useAsyncState from \"decentraland-gatsby/dist/hooks/useAsyncState\"\nimport { back } from \"decentraland-gatsby/dist/plugins/intl\"\n\nexport const DesignerView = ({\n  initialNodes,\n  initialEdges,\n  type = \"new\",\n  onClick,\n  close,\n}: {\n  initialNodes?: Node[]\n  initialEdges?: Edge[]\n  type?: \"new\" | \"draft\" | \"published\" | \"old\"\n  onClick?: (nodes: Node[], edges: Edge[], definition?: QuestDefinition) => void\n  close?: () => void\n}) => {\n  const [QuestDesigner] = useAsyncState(() => import(\"@dcl/quests-designer\"))\n  return (\n    <div style={{ height: \"100vh\", width: \"100vw\" }}>\n      {QuestDesigner && (\n        <QuestDesigner.QuestsDesigner\n          saveDesignButton={\n            type !== \"old\" && onClick\n              ? {\n                  content:\n                    type == \"new\"\n                      ? \"Save Draft\"\n                      : type == \"draft\"\n                      ? \"Update Draft\"\n                      : \"Update Quest\",\n                  onClick: onClick,\n                  validate: type == \"published\",\n                }\n              : undefined\n          }\n          backButton={() => (close ? close() : back())}\n          initialNodes={initialNodes}\n          initialEdges={initialEdges}\n        />\n      )}\n    </div>\n  )\n}\n","import React from \"react\"\n\nimport { Button } from \"decentraland-ui/dist/components/Button/Button\"\nimport { Modal } from \"decentraland-ui/dist/components/Modal/Modal\"\n\nexport const QuestDraftSaved = ({\n  onContinue,\n  onKeepEditing,\n}: {\n  onContinue: () => void\n  onKeepEditing: () => void\n}) => (\n  <Modal open={true} size=\"tiny\" className=\"quests-modal\">\n    <Modal.Header>Quest Draft saved successfully</Modal.Header>\n    <Modal.Content></Modal.Content>\n    <Modal.Actions>\n      <Button primary onClick={onContinue} size=\"medium\">\n        Continue\n      </Button>\n      <Button\n        inverted\n        onClick={onKeepEditing}\n        size=\"medium\"\n        style={{ backgroundColor: \"transparent\" }}\n      >\n        Keep Editing\n      </Button>\n    </Modal.Actions>\n  </Modal>\n)\n","import React, { useState } from \"react\"\n\nimport { navigate } from \"gatsby\"\n\nimport { useAuthContext } from \"decentraland-gatsby/dist/context/Auth\"\nimport { SignIn } from \"decentraland-ui/dist/components/SignIn/SignIn\"\n\nimport { DesignerView } from \"../../components/DesignerView\"\nimport { QuestDraftSaved } from \"../../components/QuestStepsDraftSaved\"\nimport { locations, storeQuestDraft } from \"../../utils\"\n\nconst Design = () => {\n  const [account, accountState] = useAuthContext()\n  const [draftSavedModal, setDraftSavedModal] = useState(false)\n  const [questDraftId, setQuestDraftId] = useState<number | null>(null)\n\n  if (!account || accountState.loading) {\n    return (\n      <SignIn\n        onConnect={() => accountState.select()}\n        isConnecting={accountState.loading}\n      />\n    )\n  }\n\n  return (\n    <>\n      <DesignerView\n        onClick={(nodes, edges, definition) => {\n          const id = storeQuestDraft({\n            definition,\n            metadata: {\n              stepPositions: nodes.reduce((acc, curr) => {\n                if (curr.data.id) {\n                  acc[curr.data.id] = curr.position\n                } else {\n                  acc[curr.id] = curr.position\n                }\n                return acc\n              }, {} as Record<string, { x: number; y: number }>),\n              nodes,\n              edges,\n            },\n          })\n          setQuestDraftId(id)\n          setDraftSavedModal(true)\n        }}\n      />\n      {draftSavedModal && (\n        <QuestDraftSaved\n          onContinue={() => {\n            navigate(locations.editDraftQuest(questDraftId!))\n          }}\n          onKeepEditing={() => {\n            setDraftSavedModal(false)\n          }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default Design\n"],"names":["DesignerView","_ref","initialNodes","initialEdges","_ref$type","type","onClick","close","QuestDesigner","useAsyncState","React","style","height","width","QuestsDesigner","saveDesignButton","content","validate","undefined","backButton","back","QuestDraftSaved","onContinue","onKeepEditing","Modal","open","size","className","Header","Content","Actions","Button","primary","inverted","backgroundColor","_useAuthContext","useAuthContext","account","accountState","_useState","useState","draftSavedModal","setDraftSavedModal","_useState2","questDraftId","setQuestDraftId","loading","SignIn","onConnect","select","isConnecting","nodes","edges","definition","id","storeQuestDraft","metadata","stepPositions","reduce","acc","curr","data","position","navigate","locations","editDraftQuest"],"sourceRoot":""}