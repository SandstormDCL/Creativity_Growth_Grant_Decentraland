"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initActionsTracker = void 0;
const ecs_1 = require("@dcl/sdk/ecs");
const observables_1 = require("@dcl/sdk/observables");
const mitt_1 = require("mitt");
function getPlayerParcel() {
    const playerPosition = ecs_1.Transform.getOrNull(ecs_1.engine.PlayerEntity);
    const { z } = playerPosition?.position ?? { z: 0 };
    let { x, y } = playerPosition?.position ?? { x: 0, y: 0, z };
    x = Math.floor(x / 16);
    y = Math.floor(z / 16);
    return { x: `${x}`, y: `${y}` };
}
function initActionsTracker(engine, onActionCallback, ...type) {
    let lastPosition = { x: '0', y: '0' };
    let jumping = false;
    const commonActionsEmitter = (0, mitt_1.default)();
    function checkUserPosition() {
        const position = getPlayerParcel();
        if (position.x === lastPosition.x && position.y === lastPosition.y)
            return;
        lastPosition = position;
        const action = {
            type: 'LOCATION',
            parameters: {
                x: position.x,
                y: position.y
            }
        };
        commonActionsEmitter.emit('action', action);
    }
    function checkUserJump() {
        if (ecs_1.inputSystem.isPressed(8)) {
            if (!jumping) {
                jumping = true;
                const position = getPlayerParcel();
                const action = {
                    type: 'JUMP',
                    parameters: {
                        x: position.x,
                        y: position.y
                    }
                };
                commonActionsEmitter.emit('action', action);
                jumping = false;
            }
        }
        else {
            jumping = false;
        }
    }
    function checkEmotes() {
        observables_1.onPlayerExpressionObservable.add(({ expressionId }) => {
            const position = getPlayerParcel();
            const action = {
                type: 'EMOTE',
                parameters: {
                    id: expressionId,
                    x: position.x,
                    y: position.y
                }
            };
            commonActionsEmitter.emit('action', action);
        });
    }
    if (type.includes('location')) {
        engine.addSystem(checkUserPosition);
    }
    if (type.includes('jump')) {
        engine.addSystem(checkUserJump);
    }
    if (type.includes('emote')) {
        checkEmotes();
    }
    commonActionsEmitter.on('action', (action) => {
        onActionCallback(action);
    });
}
exports.initActionsTracker = initActionsTracker;
//# sourceMappingURL=data:application/json;base64,