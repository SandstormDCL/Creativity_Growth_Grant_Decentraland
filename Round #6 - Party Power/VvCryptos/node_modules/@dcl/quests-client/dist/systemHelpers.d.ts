import { IEngine } from '@dcl/sdk/ecs';
type ActionType = 'location' | 'jump' | 'emote';
type LocationActionType = {
    type: 'LOCATION';
    parameters: {
        x: string;
        y: string;
    };
};
type JumpActionType = {
    type: 'JUMP';
    parameters: {
        x: string;
        y: string;
    };
};
type EmoteActionType = {
    type: 'EMOTE';
    parameters: {
        x: string;
        y: string;
        id: string;
    };
};
type All = LocationActionType | JumpActionType | EmoteActionType;
type InverseExclude<T, U> = T extends U ? T : U;
type ActionNarrowing<S extends ActionType> = S extends 'location' ? LocationActionType : S extends 'jump' ? JumpActionType : S extends 'emote' ? EmoteActionType : never;
export declare function initActionsTracker<T extends ActionType>(engine: IEngine, onActionCallback: (action: InverseExclude<All, ActionNarrowing<T>>) => void, ...type: T[]): void;
export {};
