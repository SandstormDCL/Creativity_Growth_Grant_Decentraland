import { Action, EventResponse, QuestInstance as QuestInstanceProto } from './protocol/decentraland/quests/definitions.gen';
type QuestsClient = {
    startQuest: () => Promise<boolean>;
    abortQuest: () => Promise<boolean>;
    sendEvent: (event: {
        action: Action;
    }) => Promise<EventResponse | undefined>;
    onStarted: (callback: OnStartedCallback) => void;
    onUpdate: (callback: OnUpdateCallback) => void;
    isQuestStarted: () => boolean;
    getQuestInstance: () => QuestInstance | null;
    getInstances: () => QuestInstance[];
};
export declare function createQuestsClient(wsUrl: string, questId: string): Promise<QuestsClient>;
type Required<T> = T & {
    [P in keyof T]: NonNullable<T[P]>;
};
export type QuestInstance = Required<QuestInstanceProto>;
export type OnStartedCallback = (instance: QuestInstance) => void;
export type OnUpdateCallback = (instance: QuestInstance) => void;
export {};
