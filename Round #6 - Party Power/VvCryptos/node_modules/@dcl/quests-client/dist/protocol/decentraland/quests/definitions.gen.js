import _m0 from "protobufjs/minimal";
import { Empty } from "../../google/protobuf/empty.gen";
export const protobufPackage = "decentraland.quests";
function createBaseInvalidQuest() {
    return {};
}
export var InvalidQuest;
(function (InvalidQuest) {
    function encode(_, writer = _m0.Writer.create()) {
        return writer;
    }
    InvalidQuest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInvalidQuest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    InvalidQuest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    InvalidQuest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    InvalidQuest.toJSON = toJSON;
    function create(base) {
        return InvalidQuest.fromPartial(base ?? {});
    }
    InvalidQuest.create = create;
    function fromPartial(_) {
        const message = createBaseInvalidQuest();
        return message;
    }
    InvalidQuest.fromPartial = fromPartial;
})(InvalidQuest || (InvalidQuest = {}));
function createBaseNotUUID() {
    return {};
}
export var NotUUID;
(function (NotUUID) {
    function encode(_, writer = _m0.Writer.create()) {
        return writer;
    }
    NotUUID.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotUUID();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    NotUUID.decode = decode;
    function fromJSON(_) {
        return {};
    }
    NotUUID.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    NotUUID.toJSON = toJSON;
    function create(base) {
        return NotUUID.fromPartial(base ?? {});
    }
    NotUUID.create = create;
    function fromPartial(_) {
        const message = createBaseNotUUID();
        return message;
    }
    NotUUID.fromPartial = fromPartial;
})(NotUUID || (NotUUID = {}));
function createBaseInternalServerError() {
    return {};
}
export var InternalServerError;
(function (InternalServerError) {
    function encode(_, writer = _m0.Writer.create()) {
        return writer;
    }
    InternalServerError.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInternalServerError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    InternalServerError.decode = decode;
    function fromJSON(_) {
        return {};
    }
    InternalServerError.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    InternalServerError.toJSON = toJSON;
    function create(base) {
        return InternalServerError.fromPartial(base ?? {});
    }
    InternalServerError.create = create;
    function fromPartial(_) {
        const message = createBaseInternalServerError();
        return message;
    }
    InternalServerError.fromPartial = fromPartial;
})(InternalServerError || (InternalServerError = {}));
function createBaseNotFoundQuestInstance() {
    return {};
}
export var NotFoundQuestInstance;
(function (NotFoundQuestInstance) {
    function encode(_, writer = _m0.Writer.create()) {
        return writer;
    }
    NotFoundQuestInstance.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotFoundQuestInstance();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    NotFoundQuestInstance.decode = decode;
    function fromJSON(_) {
        return {};
    }
    NotFoundQuestInstance.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    NotFoundQuestInstance.toJSON = toJSON;
    function create(base) {
        return NotFoundQuestInstance.fromPartial(base ?? {});
    }
    NotFoundQuestInstance.create = create;
    function fromPartial(_) {
        const message = createBaseNotFoundQuestInstance();
        return message;
    }
    NotFoundQuestInstance.fromPartial = fromPartial;
})(NotFoundQuestInstance || (NotFoundQuestInstance = {}));
function createBaseQuestAlreadyStarted() {
    return {};
}
export var QuestAlreadyStarted;
(function (QuestAlreadyStarted) {
    function encode(_, writer = _m0.Writer.create()) {
        return writer;
    }
    QuestAlreadyStarted.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuestAlreadyStarted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    QuestAlreadyStarted.decode = decode;
    function fromJSON(_) {
        return {};
    }
    QuestAlreadyStarted.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    QuestAlreadyStarted.toJSON = toJSON;
    function create(base) {
        return QuestAlreadyStarted.fromPartial(base ?? {});
    }
    QuestAlreadyStarted.create = create;
    function fromPartial(_) {
        const message = createBaseQuestAlreadyStarted();
        return message;
    }
    QuestAlreadyStarted.fromPartial = fromPartial;
})(QuestAlreadyStarted || (QuestAlreadyStarted = {}));
function createBaseNotOwner() {
    return {};
}
export var NotOwner;
(function (NotOwner) {
    function encode(_, writer = _m0.Writer.create()) {
        return writer;
    }
    NotOwner.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotOwner();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    NotOwner.decode = decode;
    function fromJSON(_) {
        return {};
    }
    NotOwner.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    NotOwner.toJSON = toJSON;
    function create(base) {
        return NotOwner.fromPartial(base ?? {});
    }
    NotOwner.create = create;
    function fromPartial(_) {
        const message = createBaseNotOwner();
        return message;
    }
    NotOwner.fromPartial = fromPartial;
})(NotOwner || (NotOwner = {}));
function createBaseIgnoredEvent() {
    return {};
}
export var IgnoredEvent;
(function (IgnoredEvent) {
    function encode(_, writer = _m0.Writer.create()) {
        return writer;
    }
    IgnoredEvent.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIgnoredEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    IgnoredEvent.decode = decode;
    function fromJSON(_) {
        return {};
    }
    IgnoredEvent.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    IgnoredEvent.toJSON = toJSON;
    function create(base) {
        return IgnoredEvent.fromPartial(base ?? {});
    }
    IgnoredEvent.create = create;
    function fromPartial(_) {
        const message = createBaseIgnoredEvent();
        return message;
    }
    IgnoredEvent.fromPartial = fromPartial;
})(IgnoredEvent || (IgnoredEvent = {}));
function createBaseStartQuestRequest() {
    return { questId: "" };
}
export var StartQuestRequest;
(function (StartQuestRequest) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.questId !== "") {
            writer.uint32(10).string(message.questId);
        }
        return writer;
    }
    StartQuestRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStartQuestRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.questId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    StartQuestRequest.decode = decode;
    function fromJSON(object) {
        return { questId: isSet(object.questId) ? String(object.questId) : "" };
    }
    StartQuestRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.questId !== undefined && (obj.questId = message.questId);
        return obj;
    }
    StartQuestRequest.toJSON = toJSON;
    function create(base) {
        return StartQuestRequest.fromPartial(base ?? {});
    }
    StartQuestRequest.create = create;
    function fromPartial(object) {
        const message = createBaseStartQuestRequest();
        message.questId = object.questId ?? "";
        return message;
    }
    StartQuestRequest.fromPartial = fromPartial;
})(StartQuestRequest || (StartQuestRequest = {}));
function createBaseStartQuestResponse() {
    return {
        accepted: undefined,
        invalidQuest: undefined,
        notUuidError: undefined,
        internalServerError: undefined,
        questAlreadyStarted: undefined,
    };
}
export var StartQuestResponse;
(function (StartQuestResponse) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.accepted !== undefined) {
            StartQuestResponse_Accepted.encode(message.accepted, writer.uint32(10).fork()).ldelim();
        }
        if (message.invalidQuest !== undefined) {
            InvalidQuest.encode(message.invalidQuest, writer.uint32(18).fork()).ldelim();
        }
        if (message.notUuidError !== undefined) {
            NotUUID.encode(message.notUuidError, writer.uint32(26).fork()).ldelim();
        }
        if (message.internalServerError !== undefined) {
            InternalServerError.encode(message.internalServerError, writer.uint32(34).fork()).ldelim();
        }
        if (message.questAlreadyStarted !== undefined) {
            QuestAlreadyStarted.encode(message.questAlreadyStarted, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    }
    StartQuestResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStartQuestResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.accepted = StartQuestResponse_Accepted.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.invalidQuest = InvalidQuest.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.notUuidError = NotUUID.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.internalServerError = InternalServerError.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.questAlreadyStarted = QuestAlreadyStarted.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    StartQuestResponse.decode = decode;
    function fromJSON(object) {
        return {
            accepted: isSet(object.accepted) ? StartQuestResponse_Accepted.fromJSON(object.accepted) : undefined,
            invalidQuest: isSet(object.invalidQuest) ? InvalidQuest.fromJSON(object.invalidQuest) : undefined,
            notUuidError: isSet(object.notUuidError) ? NotUUID.fromJSON(object.notUuidError) : undefined,
            internalServerError: isSet(object.internalServerError)
                ? InternalServerError.fromJSON(object.internalServerError)
                : undefined,
            questAlreadyStarted: isSet(object.questAlreadyStarted)
                ? QuestAlreadyStarted.fromJSON(object.questAlreadyStarted)
                : undefined,
        };
    }
    StartQuestResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.accepted !== undefined &&
            (obj.accepted = message.accepted ? StartQuestResponse_Accepted.toJSON(message.accepted) : undefined);
        message.invalidQuest !== undefined &&
            (obj.invalidQuest = message.invalidQuest ? InvalidQuest.toJSON(message.invalidQuest) : undefined);
        message.notUuidError !== undefined &&
            (obj.notUuidError = message.notUuidError ? NotUUID.toJSON(message.notUuidError) : undefined);
        message.internalServerError !== undefined &&
            (obj.internalServerError = message.internalServerError
                ? InternalServerError.toJSON(message.internalServerError)
                : undefined);
        message.questAlreadyStarted !== undefined &&
            (obj.questAlreadyStarted = message.questAlreadyStarted
                ? QuestAlreadyStarted.toJSON(message.questAlreadyStarted)
                : undefined);
        return obj;
    }
    StartQuestResponse.toJSON = toJSON;
    function create(base) {
        return StartQuestResponse.fromPartial(base ?? {});
    }
    StartQuestResponse.create = create;
    function fromPartial(object) {
        const message = createBaseStartQuestResponse();
        message.accepted = (object.accepted !== undefined && object.accepted !== null)
            ? StartQuestResponse_Accepted.fromPartial(object.accepted)
            : undefined;
        message.invalidQuest = (object.invalidQuest !== undefined && object.invalidQuest !== null)
            ? InvalidQuest.fromPartial(object.invalidQuest)
            : undefined;
        message.notUuidError = (object.notUuidError !== undefined && object.notUuidError !== null)
            ? NotUUID.fromPartial(object.notUuidError)
            : undefined;
        message.internalServerError = (object.internalServerError !== undefined && object.internalServerError !== null)
            ? InternalServerError.fromPartial(object.internalServerError)
            : undefined;
        message.questAlreadyStarted = (object.questAlreadyStarted !== undefined && object.questAlreadyStarted !== null)
            ? QuestAlreadyStarted.fromPartial(object.questAlreadyStarted)
            : undefined;
        return message;
    }
    StartQuestResponse.fromPartial = fromPartial;
})(StartQuestResponse || (StartQuestResponse = {}));
function createBaseStartQuestResponse_Accepted() {
    return {};
}
export var StartQuestResponse_Accepted;
(function (StartQuestResponse_Accepted) {
    function encode(_, writer = _m0.Writer.create()) {
        return writer;
    }
    StartQuestResponse_Accepted.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStartQuestResponse_Accepted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    StartQuestResponse_Accepted.decode = decode;
    function fromJSON(_) {
        return {};
    }
    StartQuestResponse_Accepted.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    StartQuestResponse_Accepted.toJSON = toJSON;
    function create(base) {
        return StartQuestResponse_Accepted.fromPartial(base ?? {});
    }
    StartQuestResponse_Accepted.create = create;
    function fromPartial(_) {
        const message = createBaseStartQuestResponse_Accepted();
        return message;
    }
    StartQuestResponse_Accepted.fromPartial = fromPartial;
})(StartQuestResponse_Accepted || (StartQuestResponse_Accepted = {}));
function createBaseAbortQuestRequest() {
    return { questInstanceId: "" };
}
export var AbortQuestRequest;
(function (AbortQuestRequest) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.questInstanceId !== "") {
            writer.uint32(10).string(message.questInstanceId);
        }
        return writer;
    }
    AbortQuestRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAbortQuestRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.questInstanceId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AbortQuestRequest.decode = decode;
    function fromJSON(object) {
        return { questInstanceId: isSet(object.questInstanceId) ? String(object.questInstanceId) : "" };
    }
    AbortQuestRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.questInstanceId !== undefined && (obj.questInstanceId = message.questInstanceId);
        return obj;
    }
    AbortQuestRequest.toJSON = toJSON;
    function create(base) {
        return AbortQuestRequest.fromPartial(base ?? {});
    }
    AbortQuestRequest.create = create;
    function fromPartial(object) {
        const message = createBaseAbortQuestRequest();
        message.questInstanceId = object.questInstanceId ?? "";
        return message;
    }
    AbortQuestRequest.fromPartial = fromPartial;
})(AbortQuestRequest || (AbortQuestRequest = {}));
function createBaseAbortQuestResponse() {
    return {
        accepted: undefined,
        notFoundQuestInstance: undefined,
        notUuidError: undefined,
        notOwner: undefined,
        internalServerError: undefined,
    };
}
export var AbortQuestResponse;
(function (AbortQuestResponse) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.accepted !== undefined) {
            AbortQuestResponse_Accepted.encode(message.accepted, writer.uint32(10).fork()).ldelim();
        }
        if (message.notFoundQuestInstance !== undefined) {
            NotFoundQuestInstance.encode(message.notFoundQuestInstance, writer.uint32(18).fork()).ldelim();
        }
        if (message.notUuidError !== undefined) {
            NotUUID.encode(message.notUuidError, writer.uint32(26).fork()).ldelim();
        }
        if (message.notOwner !== undefined) {
            NotOwner.encode(message.notOwner, writer.uint32(34).fork()).ldelim();
        }
        if (message.internalServerError !== undefined) {
            InternalServerError.encode(message.internalServerError, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    }
    AbortQuestResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAbortQuestResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.accepted = AbortQuestResponse_Accepted.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.notFoundQuestInstance = NotFoundQuestInstance.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.notUuidError = NotUUID.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.notOwner = NotOwner.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.internalServerError = InternalServerError.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AbortQuestResponse.decode = decode;
    function fromJSON(object) {
        return {
            accepted: isSet(object.accepted) ? AbortQuestResponse_Accepted.fromJSON(object.accepted) : undefined,
            notFoundQuestInstance: isSet(object.notFoundQuestInstance)
                ? NotFoundQuestInstance.fromJSON(object.notFoundQuestInstance)
                : undefined,
            notUuidError: isSet(object.notUuidError) ? NotUUID.fromJSON(object.notUuidError) : undefined,
            notOwner: isSet(object.notOwner) ? NotOwner.fromJSON(object.notOwner) : undefined,
            internalServerError: isSet(object.internalServerError)
                ? InternalServerError.fromJSON(object.internalServerError)
                : undefined,
        };
    }
    AbortQuestResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.accepted !== undefined &&
            (obj.accepted = message.accepted ? AbortQuestResponse_Accepted.toJSON(message.accepted) : undefined);
        message.notFoundQuestInstance !== undefined &&
            (obj.notFoundQuestInstance = message.notFoundQuestInstance
                ? NotFoundQuestInstance.toJSON(message.notFoundQuestInstance)
                : undefined);
        message.notUuidError !== undefined &&
            (obj.notUuidError = message.notUuidError ? NotUUID.toJSON(message.notUuidError) : undefined);
        message.notOwner !== undefined && (obj.notOwner = message.notOwner ? NotOwner.toJSON(message.notOwner) : undefined);
        message.internalServerError !== undefined &&
            (obj.internalServerError = message.internalServerError
                ? InternalServerError.toJSON(message.internalServerError)
                : undefined);
        return obj;
    }
    AbortQuestResponse.toJSON = toJSON;
    function create(base) {
        return AbortQuestResponse.fromPartial(base ?? {});
    }
    AbortQuestResponse.create = create;
    function fromPartial(object) {
        const message = createBaseAbortQuestResponse();
        message.accepted = (object.accepted !== undefined && object.accepted !== null)
            ? AbortQuestResponse_Accepted.fromPartial(object.accepted)
            : undefined;
        message.notFoundQuestInstance =
            (object.notFoundQuestInstance !== undefined && object.notFoundQuestInstance !== null)
                ? NotFoundQuestInstance.fromPartial(object.notFoundQuestInstance)
                : undefined;
        message.notUuidError = (object.notUuidError !== undefined && object.notUuidError !== null)
            ? NotUUID.fromPartial(object.notUuidError)
            : undefined;
        message.notOwner = (object.notOwner !== undefined && object.notOwner !== null)
            ? NotOwner.fromPartial(object.notOwner)
            : undefined;
        message.internalServerError = (object.internalServerError !== undefined && object.internalServerError !== null)
            ? InternalServerError.fromPartial(object.internalServerError)
            : undefined;
        return message;
    }
    AbortQuestResponse.fromPartial = fromPartial;
})(AbortQuestResponse || (AbortQuestResponse = {}));
function createBaseAbortQuestResponse_Accepted() {
    return {};
}
export var AbortQuestResponse_Accepted;
(function (AbortQuestResponse_Accepted) {
    function encode(_, writer = _m0.Writer.create()) {
        return writer;
    }
    AbortQuestResponse_Accepted.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAbortQuestResponse_Accepted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AbortQuestResponse_Accepted.decode = decode;
    function fromJSON(_) {
        return {};
    }
    AbortQuestResponse_Accepted.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    AbortQuestResponse_Accepted.toJSON = toJSON;
    function create(base) {
        return AbortQuestResponse_Accepted.fromPartial(base ?? {});
    }
    AbortQuestResponse_Accepted.create = create;
    function fromPartial(_) {
        const message = createBaseAbortQuestResponse_Accepted();
        return message;
    }
    AbortQuestResponse_Accepted.fromPartial = fromPartial;
})(AbortQuestResponse_Accepted || (AbortQuestResponse_Accepted = {}));
function createBaseEvent() {
    return { id: "", address: "", action: undefined };
}
export var Event;
(function (Event) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        if (message.action !== undefined) {
            Action.encode(message.action, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    }
    Event.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.action = Action.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Event.decode = decode;
    function fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            address: isSet(object.address) ? String(object.address) : "",
            action: isSet(object.action) ? Action.fromJSON(object.action) : undefined,
        };
    }
    Event.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.address !== undefined && (obj.address = message.address);
        message.action !== undefined && (obj.action = message.action ? Action.toJSON(message.action) : undefined);
        return obj;
    }
    Event.toJSON = toJSON;
    function create(base) {
        return Event.fromPartial(base ?? {});
    }
    Event.create = create;
    function fromPartial(object) {
        const message = createBaseEvent();
        message.id = object.id ?? "";
        message.address = object.address ?? "";
        message.action = (object.action !== undefined && object.action !== null)
            ? Action.fromPartial(object.action)
            : undefined;
        return message;
    }
    Event.fromPartial = fromPartial;
})(Event || (Event = {}));
function createBaseEventRequest() {
    return { action: undefined };
}
export var EventRequest;
(function (EventRequest) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.action !== undefined) {
            Action.encode(message.action, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    EventRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.action = Action.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    EventRequest.decode = decode;
    function fromJSON(object) {
        return { action: isSet(object.action) ? Action.fromJSON(object.action) : undefined };
    }
    EventRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.action !== undefined && (obj.action = message.action ? Action.toJSON(message.action) : undefined);
        return obj;
    }
    EventRequest.toJSON = toJSON;
    function create(base) {
        return EventRequest.fromPartial(base ?? {});
    }
    EventRequest.create = create;
    function fromPartial(object) {
        const message = createBaseEventRequest();
        message.action = (object.action !== undefined && object.action !== null)
            ? Action.fromPartial(object.action)
            : undefined;
        return message;
    }
    EventRequest.fromPartial = fromPartial;
})(EventRequest || (EventRequest = {}));
function createBaseEventResponse() {
    return { acceptedEventId: undefined, ignoredEvent: undefined, internalServerError: undefined };
}
export var EventResponse;
(function (EventResponse) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.acceptedEventId !== undefined) {
            writer.uint32(10).string(message.acceptedEventId);
        }
        if (message.ignoredEvent !== undefined) {
            IgnoredEvent.encode(message.ignoredEvent, writer.uint32(18).fork()).ldelim();
        }
        if (message.internalServerError !== undefined) {
            InternalServerError.encode(message.internalServerError, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    }
    EventResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.acceptedEventId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.ignoredEvent = IgnoredEvent.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.internalServerError = InternalServerError.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    EventResponse.decode = decode;
    function fromJSON(object) {
        return {
            acceptedEventId: isSet(object.acceptedEventId) ? String(object.acceptedEventId) : undefined,
            ignoredEvent: isSet(object.ignoredEvent) ? IgnoredEvent.fromJSON(object.ignoredEvent) : undefined,
            internalServerError: isSet(object.internalServerError)
                ? InternalServerError.fromJSON(object.internalServerError)
                : undefined,
        };
    }
    EventResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.acceptedEventId !== undefined && (obj.acceptedEventId = message.acceptedEventId);
        message.ignoredEvent !== undefined &&
            (obj.ignoredEvent = message.ignoredEvent ? IgnoredEvent.toJSON(message.ignoredEvent) : undefined);
        message.internalServerError !== undefined &&
            (obj.internalServerError = message.internalServerError
                ? InternalServerError.toJSON(message.internalServerError)
                : undefined);
        return obj;
    }
    EventResponse.toJSON = toJSON;
    function create(base) {
        return EventResponse.fromPartial(base ?? {});
    }
    EventResponse.create = create;
    function fromPartial(object) {
        const message = createBaseEventResponse();
        message.acceptedEventId = object.acceptedEventId ?? undefined;
        message.ignoredEvent = (object.ignoredEvent !== undefined && object.ignoredEvent !== null)
            ? IgnoredEvent.fromPartial(object.ignoredEvent)
            : undefined;
        message.internalServerError = (object.internalServerError !== undefined && object.internalServerError !== null)
            ? InternalServerError.fromPartial(object.internalServerError)
            : undefined;
        return message;
    }
    EventResponse.fromPartial = fromPartial;
})(EventResponse || (EventResponse = {}));
function createBaseQuestDefinition() {
    return { steps: [], connections: [] };
}
export var QuestDefinition;
(function (QuestDefinition) {
    function encode(message, writer = _m0.Writer.create()) {
        for (const v of message.steps) {
            Step.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.connections) {
            Connection.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    QuestDefinition.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuestDefinition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.steps.push(Step.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.connections.push(Connection.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    QuestDefinition.decode = decode;
    function fromJSON(object) {
        return {
            steps: Array.isArray(object?.steps) ? object.steps.map((e) => Step.fromJSON(e)) : [],
            connections: Array.isArray(object?.connections) ? object.connections.map((e) => Connection.fromJSON(e)) : [],
        };
    }
    QuestDefinition.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.steps) {
            obj.steps = message.steps.map((e) => e ? Step.toJSON(e) : undefined);
        }
        else {
            obj.steps = [];
        }
        if (message.connections) {
            obj.connections = message.connections.map((e) => e ? Connection.toJSON(e) : undefined);
        }
        else {
            obj.connections = [];
        }
        return obj;
    }
    QuestDefinition.toJSON = toJSON;
    function create(base) {
        return QuestDefinition.fromPartial(base ?? {});
    }
    QuestDefinition.create = create;
    function fromPartial(object) {
        const message = createBaseQuestDefinition();
        message.steps = object.steps?.map((e) => Step.fromPartial(e)) || [];
        message.connections = object.connections?.map((e) => Connection.fromPartial(e)) || [];
        return message;
    }
    QuestDefinition.fromPartial = fromPartial;
})(QuestDefinition || (QuestDefinition = {}));
function createBaseConnection() {
    return { stepFrom: "", stepTo: "" };
}
export var Connection;
(function (Connection) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.stepFrom !== "") {
            writer.uint32(10).string(message.stepFrom);
        }
        if (message.stepTo !== "") {
            writer.uint32(18).string(message.stepTo);
        }
        return writer;
    }
    Connection.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConnection();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.stepFrom = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.stepTo = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Connection.decode = decode;
    function fromJSON(object) {
        return {
            stepFrom: isSet(object.stepFrom) ? String(object.stepFrom) : "",
            stepTo: isSet(object.stepTo) ? String(object.stepTo) : "",
        };
    }
    Connection.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.stepFrom !== undefined && (obj.stepFrom = message.stepFrom);
        message.stepTo !== undefined && (obj.stepTo = message.stepTo);
        return obj;
    }
    Connection.toJSON = toJSON;
    function create(base) {
        return Connection.fromPartial(base ?? {});
    }
    Connection.create = create;
    function fromPartial(object) {
        const message = createBaseConnection();
        message.stepFrom = object.stepFrom ?? "";
        message.stepTo = object.stepTo ?? "";
        return message;
    }
    Connection.fromPartial = fromPartial;
})(Connection || (Connection = {}));
function createBaseStep() {
    return { id: "", description: "", tasks: [] };
}
export var Step;
(function (Step) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        for (const v of message.tasks) {
            Task.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    }
    Step.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStep();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.tasks.push(Task.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Step.decode = decode;
    function fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            description: isSet(object.description) ? String(object.description) : "",
            tasks: Array.isArray(object?.tasks) ? object.tasks.map((e) => Task.fromJSON(e)) : [],
        };
    }
    Step.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.description !== undefined && (obj.description = message.description);
        if (message.tasks) {
            obj.tasks = message.tasks.map((e) => e ? Task.toJSON(e) : undefined);
        }
        else {
            obj.tasks = [];
        }
        return obj;
    }
    Step.toJSON = toJSON;
    function create(base) {
        return Step.fromPartial(base ?? {});
    }
    Step.create = create;
    function fromPartial(object) {
        const message = createBaseStep();
        message.id = object.id ?? "";
        message.description = object.description ?? "";
        message.tasks = object.tasks?.map((e) => Task.fromPartial(e)) || [];
        return message;
    }
    Step.fromPartial = fromPartial;
})(Step || (Step = {}));
function createBaseAction() {
    return { type: "", parameters: {} };
}
export var Action;
(function (Action) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        Object.entries(message.parameters).forEach(([key, value]) => {
            Action_ParametersEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        return writer;
    }
    Action.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = Action_ParametersEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.parameters[entry2.key] = entry2.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Action.decode = decode;
    function fromJSON(object) {
        return {
            type: isSet(object.type) ? String(object.type) : "",
            parameters: isObject(object.parameters)
                ? Object.entries(object.parameters).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    }
    Action.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.type !== undefined && (obj.type = message.type);
        obj.parameters = {};
        if (message.parameters) {
            Object.entries(message.parameters).forEach(([k, v]) => {
                obj.parameters[k] = v;
            });
        }
        return obj;
    }
    Action.toJSON = toJSON;
    function create(base) {
        return Action.fromPartial(base ?? {});
    }
    Action.create = create;
    function fromPartial(object) {
        const message = createBaseAction();
        message.type = object.type ?? "";
        message.parameters = Object.entries(object.parameters ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    }
    Action.fromPartial = fromPartial;
})(Action || (Action = {}));
function createBaseAction_ParametersEntry() {
    return { key: "", value: "" };
}
export var Action_ParametersEntry;
(function (Action_ParametersEntry) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    }
    Action_ParametersEntry.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAction_ParametersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Action_ParametersEntry.decode = decode;
    function fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
    }
    Action_ParametersEntry.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    }
    Action_ParametersEntry.toJSON = toJSON;
    function create(base) {
        return Action_ParametersEntry.fromPartial(base ?? {});
    }
    Action_ParametersEntry.create = create;
    function fromPartial(object) {
        const message = createBaseAction_ParametersEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    }
    Action_ParametersEntry.fromPartial = fromPartial;
})(Action_ParametersEntry || (Action_ParametersEntry = {}));
function createBaseTask() {
    return { id: "", description: "", actionItems: [] };
}
export var Task;
(function (Task) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        for (const v of message.actionItems) {
            Action.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    }
    Task.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTask();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.actionItems.push(Action.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Task.decode = decode;
    function fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            description: isSet(object.description) ? String(object.description) : "",
            actionItems: Array.isArray(object?.actionItems) ? object.actionItems.map((e) => Action.fromJSON(e)) : [],
        };
    }
    Task.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.description !== undefined && (obj.description = message.description);
        if (message.actionItems) {
            obj.actionItems = message.actionItems.map((e) => e ? Action.toJSON(e) : undefined);
        }
        else {
            obj.actionItems = [];
        }
        return obj;
    }
    Task.toJSON = toJSON;
    function create(base) {
        return Task.fromPartial(base ?? {});
    }
    Task.create = create;
    function fromPartial(object) {
        const message = createBaseTask();
        message.id = object.id ?? "";
        message.description = object.description ?? "";
        message.actionItems = object.actionItems?.map((e) => Action.fromPartial(e)) || [];
        return message;
    }
    Task.fromPartial = fromPartial;
})(Task || (Task = {}));
function createBaseStepContent() {
    return { toDos: [], tasksCompleted: [] };
}
export var StepContent;
(function (StepContent) {
    function encode(message, writer = _m0.Writer.create()) {
        for (const v of message.toDos) {
            Task.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.tasksCompleted) {
            Task.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    StepContent.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStepContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.toDos.push(Task.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.tasksCompleted.push(Task.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    StepContent.decode = decode;
    function fromJSON(object) {
        return {
            toDos: Array.isArray(object?.toDos) ? object.toDos.map((e) => Task.fromJSON(e)) : [],
            tasksCompleted: Array.isArray(object?.tasksCompleted)
                ? object.tasksCompleted.map((e) => Task.fromJSON(e))
                : [],
        };
    }
    StepContent.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.toDos) {
            obj.toDos = message.toDos.map((e) => e ? Task.toJSON(e) : undefined);
        }
        else {
            obj.toDos = [];
        }
        if (message.tasksCompleted) {
            obj.tasksCompleted = message.tasksCompleted.map((e) => e ? Task.toJSON(e) : undefined);
        }
        else {
            obj.tasksCompleted = [];
        }
        return obj;
    }
    StepContent.toJSON = toJSON;
    function create(base) {
        return StepContent.fromPartial(base ?? {});
    }
    StepContent.create = create;
    function fromPartial(object) {
        const message = createBaseStepContent();
        message.toDos = object.toDos?.map((e) => Task.fromPartial(e)) || [];
        message.tasksCompleted = object.tasksCompleted?.map((e) => Task.fromPartial(e)) || [];
        return message;
    }
    StepContent.fromPartial = fromPartial;
})(StepContent || (StepContent = {}));
function createBaseQuestState() {
    return { currentSteps: {}, stepsLeft: 0, stepsCompleted: [], requiredSteps: [] };
}
export var QuestState;
(function (QuestState) {
    function encode(message, writer = _m0.Writer.create()) {
        Object.entries(message.currentSteps).forEach(([key, value]) => {
            QuestState_CurrentStepsEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.stepsLeft !== 0) {
            writer.uint32(29).fixed32(message.stepsLeft);
        }
        for (const v of message.stepsCompleted) {
            writer.uint32(34).string(v);
        }
        for (const v of message.requiredSteps) {
            writer.uint32(42).string(v);
        }
        return writer;
    }
    QuestState.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuestState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = QuestState_CurrentStepsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.currentSteps[entry2.key] = entry2.value;
                    }
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.stepsLeft = reader.fixed32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.stepsCompleted.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.requiredSteps.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    QuestState.decode = decode;
    function fromJSON(object) {
        return {
            currentSteps: isObject(object.currentSteps)
                ? Object.entries(object.currentSteps).reduce((acc, [key, value]) => {
                    acc[key] = StepContent.fromJSON(value);
                    return acc;
                }, {})
                : {},
            stepsLeft: isSet(object.stepsLeft) ? Number(object.stepsLeft) : 0,
            stepsCompleted: Array.isArray(object?.stepsCompleted) ? object.stepsCompleted.map((e) => String(e)) : [],
            requiredSteps: Array.isArray(object?.requiredSteps) ? object.requiredSteps.map((e) => String(e)) : [],
        };
    }
    QuestState.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        obj.currentSteps = {};
        if (message.currentSteps) {
            Object.entries(message.currentSteps).forEach(([k, v]) => {
                obj.currentSteps[k] = StepContent.toJSON(v);
            });
        }
        message.stepsLeft !== undefined && (obj.stepsLeft = Math.round(message.stepsLeft));
        if (message.stepsCompleted) {
            obj.stepsCompleted = message.stepsCompleted.map((e) => e);
        }
        else {
            obj.stepsCompleted = [];
        }
        if (message.requiredSteps) {
            obj.requiredSteps = message.requiredSteps.map((e) => e);
        }
        else {
            obj.requiredSteps = [];
        }
        return obj;
    }
    QuestState.toJSON = toJSON;
    function create(base) {
        return QuestState.fromPartial(base ?? {});
    }
    QuestState.create = create;
    function fromPartial(object) {
        const message = createBaseQuestState();
        message.currentSteps = Object.entries(object.currentSteps ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = StepContent.fromPartial(value);
            }
            return acc;
        }, {});
        message.stepsLeft = object.stepsLeft ?? 0;
        message.stepsCompleted = object.stepsCompleted?.map((e) => e) || [];
        message.requiredSteps = object.requiredSteps?.map((e) => e) || [];
        return message;
    }
    QuestState.fromPartial = fromPartial;
})(QuestState || (QuestState = {}));
function createBaseQuestState_CurrentStepsEntry() {
    return { key: "", value: undefined };
}
export var QuestState_CurrentStepsEntry;
(function (QuestState_CurrentStepsEntry) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            StepContent.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    QuestState_CurrentStepsEntry.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuestState_CurrentStepsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = StepContent.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    QuestState_CurrentStepsEntry.decode = decode;
    function fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? StepContent.fromJSON(object.value) : undefined,
        };
    }
    QuestState_CurrentStepsEntry.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value ? StepContent.toJSON(message.value) : undefined);
        return obj;
    }
    QuestState_CurrentStepsEntry.toJSON = toJSON;
    function create(base) {
        return QuestState_CurrentStepsEntry.fromPartial(base ?? {});
    }
    QuestState_CurrentStepsEntry.create = create;
    function fromPartial(object) {
        const message = createBaseQuestState_CurrentStepsEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? StepContent.fromPartial(object.value)
            : undefined;
        return message;
    }
    QuestState_CurrentStepsEntry.fromPartial = fromPartial;
})(QuestState_CurrentStepsEntry || (QuestState_CurrentStepsEntry = {}));
function createBaseQuest() {
    return {
        id: "",
        name: "",
        description: "",
        definition: undefined,
        creatorAddress: "",
        imageUrl: "",
        active: false,
        createdAt: 0,
    };
}
export var Quest;
(function (Quest) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.definition !== undefined) {
            QuestDefinition.encode(message.definition, writer.uint32(34).fork()).ldelim();
        }
        if (message.creatorAddress !== "") {
            writer.uint32(42).string(message.creatorAddress);
        }
        if (message.imageUrl !== "") {
            writer.uint32(50).string(message.imageUrl);
        }
        if (message.active === true) {
            writer.uint32(56).bool(message.active);
        }
        if (message.createdAt !== 0) {
            writer.uint32(69).fixed32(message.createdAt);
        }
        return writer;
    }
    Quest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.definition = QuestDefinition.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.creatorAddress = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.imageUrl = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.active = reader.bool();
                    continue;
                case 8:
                    if (tag !== 69) {
                        break;
                    }
                    message.createdAt = reader.fixed32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Quest.decode = decode;
    function fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            name: isSet(object.name) ? String(object.name) : "",
            description: isSet(object.description) ? String(object.description) : "",
            definition: isSet(object.definition) ? QuestDefinition.fromJSON(object.definition) : undefined,
            creatorAddress: isSet(object.creatorAddress) ? String(object.creatorAddress) : "",
            imageUrl: isSet(object.imageUrl) ? String(object.imageUrl) : "",
            active: isSet(object.active) ? Boolean(object.active) : false,
            createdAt: isSet(object.createdAt) ? Number(object.createdAt) : 0,
        };
    }
    Quest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.name !== undefined && (obj.name = message.name);
        message.description !== undefined && (obj.description = message.description);
        message.definition !== undefined &&
            (obj.definition = message.definition ? QuestDefinition.toJSON(message.definition) : undefined);
        message.creatorAddress !== undefined && (obj.creatorAddress = message.creatorAddress);
        message.imageUrl !== undefined && (obj.imageUrl = message.imageUrl);
        message.active !== undefined && (obj.active = message.active);
        message.createdAt !== undefined && (obj.createdAt = Math.round(message.createdAt));
        return obj;
    }
    Quest.toJSON = toJSON;
    function create(base) {
        return Quest.fromPartial(base ?? {});
    }
    Quest.create = create;
    function fromPartial(object) {
        const message = createBaseQuest();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        message.definition = (object.definition !== undefined && object.definition !== null)
            ? QuestDefinition.fromPartial(object.definition)
            : undefined;
        message.creatorAddress = object.creatorAddress ?? "";
        message.imageUrl = object.imageUrl ?? "";
        message.active = object.active ?? false;
        message.createdAt = object.createdAt ?? 0;
        return message;
    }
    Quest.fromPartial = fromPartial;
})(Quest || (Quest = {}));
function createBaseQuestInstance() {
    return { id: "", quest: undefined, state: undefined };
}
export var QuestInstance;
(function (QuestInstance) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.quest !== undefined) {
            Quest.encode(message.quest, writer.uint32(18).fork()).ldelim();
        }
        if (message.state !== undefined) {
            QuestState.encode(message.state, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    }
    QuestInstance.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuestInstance();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.quest = Quest.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.state = QuestState.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    QuestInstance.decode = decode;
    function fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            quest: isSet(object.quest) ? Quest.fromJSON(object.quest) : undefined,
            state: isSet(object.state) ? QuestState.fromJSON(object.state) : undefined,
        };
    }
    QuestInstance.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.quest !== undefined && (obj.quest = message.quest ? Quest.toJSON(message.quest) : undefined);
        message.state !== undefined && (obj.state = message.state ? QuestState.toJSON(message.state) : undefined);
        return obj;
    }
    QuestInstance.toJSON = toJSON;
    function create(base) {
        return QuestInstance.fromPartial(base ?? {});
    }
    QuestInstance.create = create;
    function fromPartial(object) {
        const message = createBaseQuestInstance();
        message.id = object.id ?? "";
        message.quest = (object.quest !== undefined && object.quest !== null) ? Quest.fromPartial(object.quest) : undefined;
        message.state = (object.state !== undefined && object.state !== null)
            ? QuestState.fromPartial(object.state)
            : undefined;
        return message;
    }
    QuestInstance.fromPartial = fromPartial;
})(QuestInstance || (QuestInstance = {}));
function createBaseQuestStateUpdate() {
    return { instanceId: "", questState: undefined, eventId: "" };
}
export var QuestStateUpdate;
(function (QuestStateUpdate) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.instanceId !== "") {
            writer.uint32(10).string(message.instanceId);
        }
        if (message.questState !== undefined) {
            QuestState.encode(message.questState, writer.uint32(18).fork()).ldelim();
        }
        if (message.eventId !== "") {
            writer.uint32(26).string(message.eventId);
        }
        return writer;
    }
    QuestStateUpdate.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuestStateUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.instanceId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.questState = QuestState.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.eventId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    QuestStateUpdate.decode = decode;
    function fromJSON(object) {
        return {
            instanceId: isSet(object.instanceId) ? String(object.instanceId) : "",
            questState: isSet(object.questState) ? QuestState.fromJSON(object.questState) : undefined,
            eventId: isSet(object.eventId) ? String(object.eventId) : "",
        };
    }
    QuestStateUpdate.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.instanceId !== undefined && (obj.instanceId = message.instanceId);
        message.questState !== undefined &&
            (obj.questState = message.questState ? QuestState.toJSON(message.questState) : undefined);
        message.eventId !== undefined && (obj.eventId = message.eventId);
        return obj;
    }
    QuestStateUpdate.toJSON = toJSON;
    function create(base) {
        return QuestStateUpdate.fromPartial(base ?? {});
    }
    QuestStateUpdate.create = create;
    function fromPartial(object) {
        const message = createBaseQuestStateUpdate();
        message.instanceId = object.instanceId ?? "";
        message.questState = (object.questState !== undefined && object.questState !== null)
            ? QuestState.fromPartial(object.questState)
            : undefined;
        message.eventId = object.eventId ?? "";
        return message;
    }
    QuestStateUpdate.fromPartial = fromPartial;
})(QuestStateUpdate || (QuestStateUpdate = {}));
function createBaseUserUpdate() {
    return {
        subscribed: undefined,
        questStateUpdate: undefined,
        newQuestStarted: undefined,
        eventIgnored: undefined,
        userAddress: "",
    };
}
export var UserUpdate;
(function (UserUpdate) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.subscribed !== undefined) {
            writer.uint32(8).bool(message.subscribed);
        }
        if (message.questStateUpdate !== undefined) {
            QuestStateUpdate.encode(message.questStateUpdate, writer.uint32(18).fork()).ldelim();
        }
        if (message.newQuestStarted !== undefined) {
            QuestInstance.encode(message.newQuestStarted, writer.uint32(26).fork()).ldelim();
        }
        if (message.eventIgnored !== undefined) {
            writer.uint32(34).string(message.eventIgnored);
        }
        if (message.userAddress !== "") {
            writer.uint32(42).string(message.userAddress);
        }
        return writer;
    }
    UserUpdate.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.subscribed = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.questStateUpdate = QuestStateUpdate.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.newQuestStarted = QuestInstance.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.eventIgnored = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.userAddress = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    UserUpdate.decode = decode;
    function fromJSON(object) {
        return {
            subscribed: isSet(object.subscribed) ? Boolean(object.subscribed) : undefined,
            questStateUpdate: isSet(object.questStateUpdate) ? QuestStateUpdate.fromJSON(object.questStateUpdate) : undefined,
            newQuestStarted: isSet(object.newQuestStarted) ? QuestInstance.fromJSON(object.newQuestStarted) : undefined,
            eventIgnored: isSet(object.eventIgnored) ? String(object.eventIgnored) : undefined,
            userAddress: isSet(object.userAddress) ? String(object.userAddress) : "",
        };
    }
    UserUpdate.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.subscribed !== undefined && (obj.subscribed = message.subscribed);
        message.questStateUpdate !== undefined &&
            (obj.questStateUpdate = message.questStateUpdate ? QuestStateUpdate.toJSON(message.questStateUpdate) : undefined);
        message.newQuestStarted !== undefined &&
            (obj.newQuestStarted = message.newQuestStarted ? QuestInstance.toJSON(message.newQuestStarted) : undefined);
        message.eventIgnored !== undefined && (obj.eventIgnored = message.eventIgnored);
        message.userAddress !== undefined && (obj.userAddress = message.userAddress);
        return obj;
    }
    UserUpdate.toJSON = toJSON;
    function create(base) {
        return UserUpdate.fromPartial(base ?? {});
    }
    UserUpdate.create = create;
    function fromPartial(object) {
        const message = createBaseUserUpdate();
        message.subscribed = object.subscribed ?? undefined;
        message.questStateUpdate = (object.questStateUpdate !== undefined && object.questStateUpdate !== null)
            ? QuestStateUpdate.fromPartial(object.questStateUpdate)
            : undefined;
        message.newQuestStarted = (object.newQuestStarted !== undefined && object.newQuestStarted !== null)
            ? QuestInstance.fromPartial(object.newQuestStarted)
            : undefined;
        message.eventIgnored = object.eventIgnored ?? undefined;
        message.userAddress = object.userAddress ?? "";
        return message;
    }
    UserUpdate.fromPartial = fromPartial;
})(UserUpdate || (UserUpdate = {}));
function createBaseQuests() {
    return { instances: [] };
}
export var Quests;
(function (Quests) {
    function encode(message, writer = _m0.Writer.create()) {
        for (const v of message.instances) {
            QuestInstance.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    Quests.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuests();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.instances.push(QuestInstance.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Quests.decode = decode;
    function fromJSON(object) {
        return {
            instances: Array.isArray(object?.instances) ? object.instances.map((e) => QuestInstance.fromJSON(e)) : [],
        };
    }
    Quests.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.instances) {
            obj.instances = message.instances.map((e) => e ? QuestInstance.toJSON(e) : undefined);
        }
        else {
            obj.instances = [];
        }
        return obj;
    }
    Quests.toJSON = toJSON;
    function create(base) {
        return Quests.fromPartial(base ?? {});
    }
    Quests.create = create;
    function fromPartial(object) {
        const message = createBaseQuests();
        message.instances = object.instances?.map((e) => QuestInstance.fromPartial(e)) || [];
        return message;
    }
    Quests.fromPartial = fromPartial;
})(Quests || (Quests = {}));
function createBaseGetAllQuestsResponse() {
    return { quests: undefined, internalServerError: undefined };
}
export var GetAllQuestsResponse;
(function (GetAllQuestsResponse) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.quests !== undefined) {
            Quests.encode(message.quests, writer.uint32(10).fork()).ldelim();
        }
        if (message.internalServerError !== undefined) {
            InternalServerError.encode(message.internalServerError, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    GetAllQuestsResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAllQuestsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.quests = Quests.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.internalServerError = InternalServerError.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetAllQuestsResponse.decode = decode;
    function fromJSON(object) {
        return {
            quests: isSet(object.quests) ? Quests.fromJSON(object.quests) : undefined,
            internalServerError: isSet(object.internalServerError)
                ? InternalServerError.fromJSON(object.internalServerError)
                : undefined,
        };
    }
    GetAllQuestsResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.quests !== undefined && (obj.quests = message.quests ? Quests.toJSON(message.quests) : undefined);
        message.internalServerError !== undefined &&
            (obj.internalServerError = message.internalServerError
                ? InternalServerError.toJSON(message.internalServerError)
                : undefined);
        return obj;
    }
    GetAllQuestsResponse.toJSON = toJSON;
    function create(base) {
        return GetAllQuestsResponse.fromPartial(base ?? {});
    }
    GetAllQuestsResponse.create = create;
    function fromPartial(object) {
        const message = createBaseGetAllQuestsResponse();
        message.quests = (object.quests !== undefined && object.quests !== null)
            ? Quests.fromPartial(object.quests)
            : undefined;
        message.internalServerError = (object.internalServerError !== undefined && object.internalServerError !== null)
            ? InternalServerError.fromPartial(object.internalServerError)
            : undefined;
        return message;
    }
    GetAllQuestsResponse.fromPartial = fromPartial;
})(GetAllQuestsResponse || (GetAllQuestsResponse = {}));
function createBaseGetQuestDefinitionRequest() {
    return { questId: "" };
}
export var GetQuestDefinitionRequest;
(function (GetQuestDefinitionRequest) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.questId !== "") {
            writer.uint32(10).string(message.questId);
        }
        return writer;
    }
    GetQuestDefinitionRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetQuestDefinitionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.questId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetQuestDefinitionRequest.decode = decode;
    function fromJSON(object) {
        return { questId: isSet(object.questId) ? String(object.questId) : "" };
    }
    GetQuestDefinitionRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.questId !== undefined && (obj.questId = message.questId);
        return obj;
    }
    GetQuestDefinitionRequest.toJSON = toJSON;
    function create(base) {
        return GetQuestDefinitionRequest.fromPartial(base ?? {});
    }
    GetQuestDefinitionRequest.create = create;
    function fromPartial(object) {
        const message = createBaseGetQuestDefinitionRequest();
        message.questId = object.questId ?? "";
        return message;
    }
    GetQuestDefinitionRequest.fromPartial = fromPartial;
})(GetQuestDefinitionRequest || (GetQuestDefinitionRequest = {}));
function createBaseGetQuestDefinitionResponse() {
    return { quest: undefined, internalServerError: undefined };
}
export var GetQuestDefinitionResponse;
(function (GetQuestDefinitionResponse) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.quest !== undefined) {
            Quest.encode(message.quest, writer.uint32(10).fork()).ldelim();
        }
        if (message.internalServerError !== undefined) {
            InternalServerError.encode(message.internalServerError, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    GetQuestDefinitionResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetQuestDefinitionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.quest = Quest.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.internalServerError = InternalServerError.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetQuestDefinitionResponse.decode = decode;
    function fromJSON(object) {
        return {
            quest: isSet(object.quest) ? Quest.fromJSON(object.quest) : undefined,
            internalServerError: isSet(object.internalServerError)
                ? InternalServerError.fromJSON(object.internalServerError)
                : undefined,
        };
    }
    GetQuestDefinitionResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.quest !== undefined && (obj.quest = message.quest ? Quest.toJSON(message.quest) : undefined);
        message.internalServerError !== undefined &&
            (obj.internalServerError = message.internalServerError
                ? InternalServerError.toJSON(message.internalServerError)
                : undefined);
        return obj;
    }
    GetQuestDefinitionResponse.toJSON = toJSON;
    function create(base) {
        return GetQuestDefinitionResponse.fromPartial(base ?? {});
    }
    GetQuestDefinitionResponse.create = create;
    function fromPartial(object) {
        const message = createBaseGetQuestDefinitionResponse();
        message.quest = (object.quest !== undefined && object.quest !== null) ? Quest.fromPartial(object.quest) : undefined;
        message.internalServerError = (object.internalServerError !== undefined && object.internalServerError !== null)
            ? InternalServerError.fromPartial(object.internalServerError)
            : undefined;
        return message;
    }
    GetQuestDefinitionResponse.fromPartial = fromPartial;
})(GetQuestDefinitionResponse || (GetQuestDefinitionResponse = {}));
export const QuestsServiceDefinition = {
    name: "QuestsService",
    fullName: "decentraland.quests.QuestsService",
    methods: {
        startQuest: {
            name: "StartQuest",
            requestType: StartQuestRequest,
            requestStream: false,
            responseType: StartQuestResponse,
            responseStream: false,
            options: {},
        },
        abortQuest: {
            name: "AbortQuest",
            requestType: AbortQuestRequest,
            requestStream: false,
            responseType: AbortQuestResponse,
            responseStream: false,
            options: {},
        },
        sendEvent: {
            name: "SendEvent",
            requestType: EventRequest,
            requestStream: false,
            responseType: EventResponse,
            responseStream: false,
            options: {},
        },
        subscribe: {
            name: "Subscribe",
            requestType: Empty,
            requestStream: false,
            responseType: UserUpdate,
            responseStream: true,
            options: {},
        },
        getAllQuests: {
            name: "GetAllQuests",
            requestType: Empty,
            requestStream: false,
            responseType: GetAllQuestsResponse,
            responseStream: false,
            options: {},
        },
        getQuestDefinition: {
            name: "GetQuestDefinition",
            requestType: GetQuestDefinitionRequest,
            requestStream: false,
            responseType: GetQuestDefinitionResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=data:application/json;base64,