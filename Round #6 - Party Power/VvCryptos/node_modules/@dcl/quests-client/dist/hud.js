import { engine, Schemas } from '@dcl/sdk/ecs';
import { Color4 } from '@dcl/sdk/math';
import ReactEcs, { Button, Label, ReactEcsRenderer, UiEntity } from '@dcl/sdk/react-ecs';
const QuestComponent = engine.defineComponent('dcl:quests:QuestComponent', {
    name: Schemas.String,
    steps: Schemas.Array(Schemas.Map({
        id: Schemas.String,
        description: Schemas.String,
        tasks: Schemas.Array(Schemas.Map({
            done: Schemas.Boolean,
            description: Schemas.String
        }))
    })),
    nextSteps: Schemas.Array(Schemas.String),
    done: Schemas.Boolean
});
export function createQuestHUD(opts) {
    let state = {
        hideHUD: false,
        selectedStepId: null,
        rawEntity: null,
        quest: null
    };
    function getState() {
        return { ...state };
    }
    function setState(newState) {
        state = {
            ...state,
            ...newState
        };
    }
    if (opts?.autoRender) {
        ReactEcsRenderer.setUiRenderer(() => HUDPanel([getState, setState], opts));
    }
    function getQuest() {
        return [...engine.getEntitiesWith(QuestComponent)][0][1];
    }
    return {
        upsert: (instance) => {
            const questUIData = generateQuestUI(instance);
            if (state.rawEntity) {
                QuestComponent.createOrReplace(state.rawEntity, {
                    ...questUIData
                });
                state.quest = getQuest();
            }
            else {
                const questEntity = engine.addEntity();
                QuestComponent.create(questEntity, { ...questUIData });
                state.rawEntity = questEntity;
                state.quest = getQuest();
            }
        },
        getHUDComponent: () => () => HUDPanel([getState, setState], opts),
        render: () => ReactEcsRenderer.setUiRenderer(() => HUDPanel([getState, setState], opts)),
        updateOptions: (newOptions) => ReactEcsRenderer.setUiRenderer(() => HUDPanel([getState, setState], { ...opts, ...newOptions })),
        getHUDComponentWithUpdatedOptions: (newOptions) => () => HUDPanel([getState, setState], { ...opts, ...newOptions })
    };
}
const defaultHudBox = {
    flexDirection: 'column',
    justifyContent: 'flex-start',
    margin: { left: 10 },
    positionType: 'absolute',
    position: { top: '28%' }
};
export const HUDPanel = (handlers, props) => {
    const [getState, setState] = handlers;
    const { selectedStepId: showTask, hideHUD, quest } = getState();
    return (ReactEcs.createElement(UiEntity, { uiTransform: {
            ...defaultHudBox,
            ...(props?.leftSidePanel || {})
        } },
        !showTask && quest ? QuestProgress(quest, handlers, props) : StepTasks(handlers, props),
        quest ? (ReactEcs.createElement(UiEntity, { uiTransform: { display: 'flex' } }, !showTask ? (ReactEcs.createElement(Button, { value: hideHUD ? 'Show Quest Progress' : 'Hide', variant: "primary", uiTransform: {
                width: !hideHUD ? 80 : 120,
                height: !hideHUD ? 20 : 30,
                margin: {
                    top: 5
                }
            }, onMouseDown: () => setState({ ...getState(), hideHUD: !hideHUD }), ...props?.showHideToggleButton })) : (ReactEcs.createElement(Button, { value: "Close", variant: "primary", uiTransform: {
                width: 80,
                height: 20,
                margin: {
                    top: 5
                }
            }, onMouseDown: () => setState({ ...getState(), selectedStepId: null }), ...props?.closeTasksBoxButton })))) : null));
};
const QuestProgress = (quest, handlers, stylingOpts) => {
    const [getState] = handlers;
    return (ReactEcs.createElement(UiEntity, { uiTransform: {
            display: getState().hideHUD ? 'none' : 'flex',
            flexDirection: 'column',
            padding: 10,
            minWidth: 180,
            maxWidth: 400,
            width: 180,
            ...stylingOpts?.questBox?.uiTransform
        }, uiBackground: {
            color: Color4.create(0, 0, 0, 0.9),
            ...stylingOpts?.questBox?.uiBackground
        } },
        ReactEcs.createElement(UiEntity, { uiTransform: { margin: { bottom: 10 }, ...stylingOpts?.questNameContainer?.uiTransform } },
            ReactEcs.createElement(Label, { textAlign: "middle-left", fontSize: 13, value: `Quest: ${quest.name}`, ...stylingOpts?.questNameContainer?.label })),
        !quest.done ? (ReactEcs.createElement(UiEntity, { uiTransform: {
                flexDirection: 'column',
                padding: { top: 10, bottom: 10 },
                ...stylingOpts?.stepsContainer?.uiTransform
            } }, [...quest.steps].map((s) => CurrentStep(s, handlers, stylingOpts)))) : (ReactEcs.createElement(UiEntity, { uiTransform: {
                flexDirection: 'column',
                padding: { top: 10, bottom: 10 },
                ...stylingOpts?.questCompletionLabel?.uiTransform
            } },
            ReactEcs.createElement(Label, { uiTransform: {
                    margin: { bottom: 10 }
                }, textAlign: "middle-center", fontSize: 12, value: "Quest is completed!", ...stylingOpts?.questCompletionLabel?.label }))),
        quest.nextSteps.length > 0 && !quest.done ? (ReactEcs.createElement(UiEntity, { uiTransform: {
                display: 'flex',
                flexDirection: 'column',
                margin: { bottom: 10 },
                ...stylingOpts?.nextSteps?.nextTitleUiEntity
            } },
            ReactEcs.createElement(Label, { uiTransform: {
                    padding: { bottom: 10 },
                    margin: { bottom: 10 },
                    ...stylingOpts?.nextSteps?.nextTitleProps?.uiTransform
                }, textAlign: "middle-left", fontSize: 12, value: "Next: ", ...stylingOpts?.nextSteps?.nextTitleProps }),
            [...quest.nextSteps].map((next) => (ReactEcs.createElement(UiEntity, { uiTransform: { margin: { bottom: 5 }, ...stylingOpts?.nextSteps?.labels?.labelUiEntity } },
                ReactEcs.createElement(Label, { textAlign: "middle-left", fontSize: 11, value: next, ...stylingOpts?.nextSteps?.labels?.props })))))) : null));
};
const CurrentStep = (step, handlers, stylingOpts) => {
    return (ReactEcs.createElement(UiEntity, { uiTransform: { flexDirection: 'column', ...stylingOpts?.stepsContainer?.labels?.labelUiEntity } },
        ReactEcs.createElement(Label, { uiTransform: {
                overflow: 'hidden',
                padding: { top: 10, bottom: 10 },
                ...stylingOpts?.stepsContainer?.labels?.props?.uiTransform
            }, textAlign: "middle-left", fontSize: 12, value: `Step: ${step.description}`, ...stylingOpts?.stepsContainer?.labels?.props }),
        ReactEcs.createElement(ShowTasksButton, { stepId: step.id, handlers: handlers, stylingOpts: stylingOpts })));
};
const ShowTasksButton = ({ stepId, handlers, stylingOpts }) => {
    const [getState, setState] = handlers;
    return (ReactEcs.createElement(UiEntity, { uiTransform: { display: 'flex', ...stylingOpts?.stepsContainer?.showTasksButton?.buttonUiEntity } },
        ReactEcs.createElement(Button, { value: "Show Tasks", variant: "primary", uiTransform: { width: 80, height: 20, margin: 4 }, onMouseDown: () => {
                setState({ ...getState(), selectedStepId: stepId });
            }, ...stylingOpts?.stepsContainer?.showTasksButton?.buttonProps })));
};
const StepTasks = ([getState], stylingOpts) => {
    const { selectedStepId, quest } = getState();
    return (ReactEcs.createElement(UiEntity, { uiTransform: {
            flexDirection: 'column',
            padding: 10,
            minWidth: 180,
            maxWidth: 400,
            width: 180,
            ...stylingOpts?.tasksBox?.uiTransform
        }, uiBackground: {
            color: Color4.create(0, 0, 0, 0.9),
            ...stylingOpts?.tasksBox?.uiBackground
        } }, selectedStepId != null && quest != null
        ? quest.steps
            .find((s) => s.id === selectedStepId)
            ?.tasks.map((t) => Task(t, stylingOpts))
        : null));
};
const Task = (task, stylingOpts) => (ReactEcs.createElement(UiEntity, { uiTransform: {
        flexDirection: 'column',
        margin: { bottom: 10 },
        ...stylingOpts?.tasksBox?.labels?.labelUiEntity
    } },
    ReactEcs.createElement(Label, { textAlign: "middle-left", fontSize: 12, value: `${task.done ? 'DONE: ' : 'TODO: '} ${task.description}`, ...stylingOpts?.tasksBox?.labels?.props })));
function generateQuestUI(questInstance) {
    const steps = [];
    const nextSteps = [];
    if (questInstance.quest.definition?.steps) {
        for (const step of questInstance.quest.definition?.steps) {
            if (questInstance.state.currentSteps[step.id]) {
                const content = questInstance.state.currentSteps[step.id];
                steps.push({
                    id: step.id,
                    description: step.description,
                    tasks: step.tasks.map((task) => {
                        return {
                            description: task.description,
                            done: !!content.tasksCompleted.find((t) => t.id == task.id)
                        };
                    })
                });
                nextSteps.push(...questInstance.quest.definition?.connections
                    .filter((conn) => conn.stepFrom === step.id)
                    .map((conn) => questInstance.quest.definition?.steps.find((step) => step.id === conn.stepTo)?.description ||
                    '(Step without description)'));
            }
        }
    }
    return { name: questInstance.quest.name, steps, nextSteps, done: questInstance.state.stepsLeft == 0 };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2h1ZC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBVSxPQUFPLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDdEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUN0QyxPQUFPLFFBQVEsRUFBRSxFQUNmLE1BQU0sRUFDTixLQUFLLEVBQ0wsZ0JBQWdCLEVBR2hCLFFBQVEsRUFJVCxNQUFNLG9CQUFvQixDQUFBO0FBcUczQixNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLDJCQUEyQixFQUFFO0lBQ3pFLElBQUksRUFBRSxPQUFPLENBQUMsTUFBTTtJQUNwQixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUNWLEVBQUUsRUFBRSxPQUFPLENBQUMsTUFBTTtRQUNsQixXQUFXLEVBQUUsT0FBTyxDQUFDLE1BQU07UUFDM0IsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDVixJQUFJLEVBQUUsT0FBTyxDQUFDLE9BQU87WUFDckIsV0FBVyxFQUFFLE9BQU8sQ0FBQyxNQUFNO1NBQzVCLENBQUMsQ0FDSDtLQUNGLENBQUMsQ0FDSDtJQUNELFNBQVMsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDeEMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxPQUFPO0NBQ3RCLENBQUMsQ0FBQTtBQW1CRixNQUFNLFVBQVUsY0FBYyxDQUFDLElBQXNCO0lBQ25ELElBQUksS0FBSyxHQUFhO1FBQ3BCLE9BQU8sRUFBRSxLQUFLO1FBQ2QsY0FBYyxFQUFFLElBQUk7UUFDcEIsU0FBUyxFQUFFLElBQUk7UUFDZixLQUFLLEVBQUUsSUFBSTtLQUNaLENBQUE7SUFFRCxTQUFTLFFBQVE7UUFDZixPQUFPLEVB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LENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQzt5QkFDNUQsQ0FBQTtvQkFDSCxDQUFDLENBQUM7aUJBQ0gsQ0FBQyxDQUFBO2dCQUVGLFNBQVMsQ0FBQyxJQUFJLENBQ1osR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxXQUFXO3FCQUMzQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQztxQkFDM0MsR0FBRyxDQUNGLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FDUCxhQUFhLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxXQUFXO29CQUMxRiw0QkFBNEIsQ0FDL0IsQ0FDSixDQUFBO2FBQ0Y7U0FDRjtLQUNGO0lBRUQsT0FBTyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsS0FBSyxDQUFDLFNBQVMsSUFBSSxDQUFDLEVBQUUsQ0FBQTtBQUN2RyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZW5naW5lLCBFbnRpdHksIFNjaGVtYXMgfSBmcm9tICdAZGNsL3Nkay9lY3MnXG5pbXBvcnQgeyBDb2xvcjQgfSBmcm9tICdAZGNsL3Nkay9tYXRoJ1xuaW1wb3J0IFJlYWN0RWNzLCB7XG4gIEJ1dHRvbixcbiAgTGFiZWwsXG4gIFJlYWN0RWNzUmVuZGVyZXIsXG4gIFVpQmFja2dyb3VuZFByb3BzLFxuICBVaUJ1dHRvblByb3BzLFxuICBVaUVudGl0eSxcbiAgVWlMYWJlbFByb3BzLFxuICBVaVRyYW5zZm9ybVByb3BzLFxuICBFbnRpdHlQcm9wVHlwZXNcbn0gZnJvbSAnQGRjbC9zZGsvcmVhY3QtZWNzJ1xuaW1wb3J0IHsgUXVlc3RJbnN0YW5jZSB9IGZyb20gJy4vY2xpZW50J1xuXG5leHBvcnQgdHlwZSBRdWVzdFVJID0ge1xuICBuYW1lOiBzdHJpbmdcbiAgc3RlcHM6IHtcbiAgICBpZDogc3RyaW5nXG4gICAgZGVzY3JpcHRpb246IHN0cmluZ1xuICAgIHRhc2tzOiB7XG4gICAgICBkb25lOiBib29sZWFuXG4gICAgICBkZXNjcmlwdGlvbjogc3RyaW5nXG4gICAgfVtdXG4gIH1bXVxuICBuZXh0U3RlcHM6IHN0cmluZ1tdXG4gIGRvbmU6IGJvb2xlYW5cbn1cblxudHlwZSBMYWJlbFByb3BzID0gRW50aXR5UHJvcFR5cGVzICYgVWlMYWJlbFByb3BzXG5cbmV4cG9ydCB0eXBlIFF1ZXN0SHVkT3B0aW9ucyA9IHtcbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgVUkgQXV0b21hdGljYWxseVxuICAgKi9cbiAgYXV0b1JlbmRlcj86IGJvb2xlYW5cbiAgLyoqXG4gICAqIFN0eWxlcyBmb3IgdGhlIHdob2xlIGxlZnQgc2lkZSBwYW5lbFxuICAgKi9cbiAgbGVmdFNpZGVQYW5lbD86IFVpVHJhbnNmb3JtUHJvcHNcbiAgLyoqXG4gICAqIFF1ZXN0IEJveCBTdHlsZS5cbiAgICovXG4gIHF1ZXN0Qm94Pzoge1xuICAgIHVpQmFja2dyb3VuZD86IFVpQmFja2dyb3VuZFByb3BzXG4gICAgdWlUcmFuc2Zvcm0/OiBVaVRyYW5zZm9ybVByb3BzXG4gIH1cbiAgLyoqXG4gICAqIFF1ZXN0IE5hbWUgQ29udGFpbmVyXG4gICAqXG4gICAqIFRoZSBsYWJlbCBpbnNpZGUgaXMgYWxzbyBtb2RpZmlhYmxlIHdpdGggYGxhYmVsYFxuICAgKlxuICAgKi9cbiAgcXVlc3ROYW1lQ29udGFpbmVyPzoge1xuICAgIHVpVHJhbnNmb3JtPzogVWlUcmFuc2Zvcm1Qcm9wc1xuICAgIGxhYmVsPzogTGFiZWxQcm9wc1xuICB9XG4gIC8qKlxuICAgKiBDdXJyZW50IFN0ZXBzIENvbnRhaW5lclxuICAgKlxuICAgKiB0aGUgbGFiZWxzIGFyZSBtb2RpZmlhYmxlIHdpdGggYGxhYmVsc2BcbiAgICpcbiAgICovXG4gIHN0ZXBzQ29udGFpbmVyPzoge1xuICAgIHVpVHJhbnNmb3JtOiBVaVRyYW5zZm9ybVByb3BzXG4gICAgbGFiZWxzPzoge1xuICAgICAgbGFiZWxVaUVudGl0eT86IFVpVHJhbnNmb3JtUHJvcHNcbiAgICAgIHByb3BzPzogTGFiZWxQcm9wc1xuICAgIH1cbiAgICBzaG93VGFza3NCdXR0b24/OiB7XG4gICAgICBidXR0b25VaUVudGl0eTogVWlUcmFuc2Zvcm1Qcm9wc1xuICAgICAgYnV0dG9uUHJvcHM/OiBVaUJ1dHRvblByb3BzXG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTdGVwIFRhc2tzIEJveFxuICAgKi9cbiAgdGFza3NCb3g/OiB7XG4gICAgdWlUcmFuc2Zvcm0/OiBVaVRyYW5zZm9ybVByb3BzXG4gICAgdWlCYWNrZ3JvdW5kPzogVWlCYWNrZ3JvdW5kUHJvcHNcbiAgICBsYWJlbHM/OiB7XG4gICAgICBsYWJlbFVpRW50aXR5PzogVWlUcmFuc2Zvcm1Qcm9wc1xuICAgICAgcHJvcHM/OiBMYWJlbFByb3BzXG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBOZXh0IHN0ZXBzIHN0eWxpbmdcbiAgICovXG4gIG5leHRTdGVwcz86IHtcbiAgICBuZXh0VGl0bGVVaUVudGl0eT86IFVpVHJhbnNmb3JtUHJvcHNcbiAgICBuZXh0VGl0bGVQcm9wcz86IExhYmVsUHJvcHNcbiAgICBsYWJlbHM/OiB7XG4gICAgICBsYWJlbFVpRW50aXR5PzogVWlUcmFuc2Zvcm1Qcm9wc1xuICAgICAgcHJvcHM/OiBMYWJlbFByb3BzXG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBRdWVzdCBDb21wbGV0aW9uIGxhYmVsXG4gICAqL1xuICBxdWVzdENvbXBsZXRpb25MYWJlbD86IHtcbiAgICB1aVRyYW5zZm9ybT86IFVpVHJhbnNmb3JtUHJvcHNcbiAgICBsYWJlbD86IExhYmVsUHJvcHNcbiAgfVxuICAvKipcbiAgICogXCJTaG93IFF1ZXN0IFByb2dyZXNzXCIgYW5kIFwiSGlkZVwiIHRvZ2dsZSBidXR0b25cbiAgICovXG4gIHNob3dIaWRlVG9nZ2xlQnV0dG9uPzogVWlCdXR0b25Qcm9wc1xuICAvKipcbiAgICogXCJDbG9zZVwiIGJ1dHRvbiB3aGVuIHlvdSBjbGljayBvbiBcIlNob3cgVGFza3NcIlxuICAgKi9cbiAgY2xvc2VUYXNrc0JveEJ1dHRvbj86IFVpQnV0dG9uUHJvcHNcbn1cblxuY29uc3QgUXVlc3RDb21wb25lbnQgPSBlbmdpbmUuZGVmaW5lQ29tcG9uZW50KCdkY2w6cXVlc3RzOlF1ZXN0Q29tcG9uZW50Jywge1xuICBuYW1lOiBTY2hlbWFzLlN0cmluZyxcbiAgc3RlcHM6IFNjaGVtYXMuQXJyYXkoXG4gICAgU2NoZW1hcy5NYXAoe1xuICAgICAgaWQ6IFNjaGVtYXMuU3RyaW5nLFxuICAgICAgZGVzY3JpcHRpb246IFNjaGVtYXMuU3RyaW5nLFxuICAgICAgdGFza3M6IFNjaGVtYXMuQXJyYXkoXG4gICAgICAgIFNjaGVtYXMuTWFwKHtcbiAgICAgICAgICBkb25lOiBTY2hlbWFzLkJvb2xlYW4sXG4gICAgICAgICAgZGVzY3JpcHRpb246IFNjaGVtYXMuU3RyaW5nXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgfSlcbiAgKSxcbiAgbmV4dFN0ZXBzOiBTY2hlbWFzLkFycmF5KFNjaGVtYXMuU3RyaW5nKSxcbiAgZG9uZTogU2NoZW1hcy5Cb29sZWFuXG59KVxuXG50eXBlIEhVRFN0YXRlID0ge1xuICBoaWRlSFVEOiBib29sZWFuXG4gIHNlbGVjdGVkU3RlcElkOiBzdHJpbmcgfCBudWxsXG4gIHF1ZXN0OiBRdWVzdFVJIHwgbnVsbFxuICByYXdFbnRpdHk6IEVudGl0eSB8IG51bGxcbn1cblxudHlwZSBIVURTdGF0ZUhhbmRsZXJzID0gWygpID0+IEhVRFN0YXRlLCAobmV3U3RhdGU6IFBhcnRpYWw8SFVEU3RhdGU+KSA9PiB2b2lkXVxuXG50eXBlIFF1ZXN0SFVEID0ge1xuICB1cHNlcnQ6IChpbnN0YW5jZTogUXVlc3RJbnN0YW5jZSkgPT4gdm9pZFxuICBnZXRIVURDb21wb25lbnQ6ICgpID0+ICgpID0+IFJlYWN0RWNzLkpTWC5FbGVtZW50XG4gIHJlbmRlcjogKCkgPT4gdm9pZFxuICB1cGRhdGVPcHRpb25zOiAob3B0czogUXVlc3RIdWRPcHRpb25zKSA9PiB2b2lkXG4gIGdldEhVRENvbXBvbmVudFdpdGhVcGRhdGVkT3B0aW9uczogKG5ld09wdHM6IFF1ZXN0SHVkT3B0aW9ucykgPT4gKCkgPT4gUmVhY3RFY3MuSlNYLkVsZW1lbnRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVF1ZXN0SFVEKG9wdHM/OiBRdWVzdEh1ZE9wdGlvbnMpOiBRdWVzdEhVRCB7XG4gIGxldCBzdGF0ZTogSFVEU3RhdGUgPSB7XG4gICAgaGlkZUhVRDogZmFsc2UsXG4gICAgc2VsZWN0ZWRTdGVwSWQ6IG51bGwsXG4gICAgcmF3RW50aXR5OiBudWxsLFxuICAgIHF1ZXN0OiBudWxsXG4gIH1cblxuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICByZXR1cm4geyAuLi5zdGF0ZSB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXdTdGF0ZTogUGFydGlhbDxIVURTdGF0ZT4pIHtcbiAgICBzdGF0ZSA9IHtcbiAgICAgIC4uLnN0YXRlLFxuICAgICAgLi4ubmV3U3RhdGVcbiAgICB9XG4gIH1cblxuICBpZiAob3B0cz8uYXV0b1JlbmRlcikge1xuICAgIFJlYWN0RWNzUmVuZGVyZXIuc2V0VWlSZW5kZXJlcigoKSA9PiBIVURQYW5lbChbZ2V0U3RhdGUsIHNldFN0YXRlXSwgb3B0cykpXG4gIH1cblxuICBmdW5jdGlvbiBnZXRRdWVzdCgpIHtcbiAgICByZXR1cm4gWy4uLmVuZ2luZS5nZXRFbnRpdGllc1dpdGgoUXVlc3RDb21wb25lbnQpXVswXVsxXVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB1cHNlcnQ6IChpbnN0YW5jZSkgPT4ge1xuICAgICAgY29uc3QgcXVlc3RVSURhdGEgPSBnZW5lcmF0ZVF1ZXN0VUkoaW5zdGFuY2UpXG4gICAgICBpZiAoc3RhdGUucmF3RW50aXR5KSB7XG4gICAgICAgIFF1ZXN0Q29tcG9uZW50LmNyZWF0ZU9yUmVwbGFjZShzdGF0ZS5yYXdFbnRpdHksIHtcbiAgICAgICAgICAuLi5xdWVzdFVJRGF0YVxuICAgICAgICB9KVxuICAgICAgICBzdGF0ZS5xdWVzdCA9IGdldFF1ZXN0KCkgYXMgdW5rbm93biBhcyBRdWVzdFVJXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBxdWVzdEVudGl0eSA9IGVuZ2luZS5hZGRFbnRpdHkoKVxuICAgICAgICBRdWVzdENvbXBvbmVudC5jcmVhdGUocXVlc3RFbnRpdHksIHsgLi4ucXVlc3RVSURhdGEgfSlcbiAgICAgICAgc3RhdGUucmF3RW50aXR5ID0gcXVlc3RFbnRpdHlcbiAgICAgICAgc3RhdGUucXVlc3QgPSBnZXRRdWVzdCgpIGFzIHVua25vd24gYXMgUXVlc3RVSVxuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0SFVEQ29tcG9uZW50OiAoKSA9PiAoKSA9PiBIVURQYW5lbChbZ2V0U3RhdGUsIHNldFN0YXRlXSwgb3B0cyksXG4gICAgcmVuZGVyOiAoKSA9PiBSZWFjdEVjc1JlbmRlcmVyLnNldFVpUmVuZGVyZXIoKCkgPT4gSFVEUGFuZWwoW2dldFN0YXRlLCBzZXRTdGF0ZV0sIG9wdHMpKSxcbiAgICB1cGRhdGVPcHRpb25zOiAobmV3T3B0aW9ucykgPT5cbiAgICAgIFJlYWN0RWNzUmVuZGVyZXIuc2V0VWlSZW5kZXJlcigoKSA9PiBIVURQYW5lbChbZ2V0U3RhdGUsIHNldFN0YXRlXSwgeyAuLi5vcHRzLCAuLi5uZXdPcHRpb25zIH0pKSxcbiAgICBnZXRIVURDb21wb25lbnRXaXRoVXBkYXRlZE9wdGlvbnM6IChuZXdPcHRpb25zKSA9PiAoKSA9PiBIVURQYW5lbChbZ2V0U3RhdGUsIHNldFN0YXRlXSwgeyAuLi5vcHRzLCAuLi5uZXdPcHRpb25zIH0pXG4gIH1cbn1cblxuY29uc3QgZGVmYXVsdEh1ZEJveDogVWlUcmFuc2Zvcm1Qcm9wcyA9IHtcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gIG1hcmdpbjogeyBsZWZ0OiAxMCB9LFxuICBwb3NpdGlvblR5cGU6ICdhYnNvbHV0ZScsXG4gIHBvc2l0aW9uOiB7IHRvcDogJzI4JScgfVxufVxuXG5leHBvcnQgY29uc3QgSFVEUGFuZWwgPSAoaGFuZGxlcnM6IEhVRFN0YXRlSGFuZGxlcnMsIHByb3BzPzogUXVlc3RIdWRPcHRpb25zKSA9PiB7XG4gIGNvbnN0IFtnZXRTdGF0ZSwgc2V0U3RhdGVdID0gaGFuZGxlcnNcblxuICBjb25zdCB7IHNlbGVjdGVkU3RlcElkOiBzaG93VGFzaywgaGlkZUhVRCwgcXVlc3QgfSA9IGdldFN0YXRlKClcblxuICByZXR1cm4gKFxuICAgIDxVaUVudGl0eVxuICAgICAgdWlUcmFuc2Zvcm09e3tcbiAgICAgICAgLi4uZGVmYXVsdEh1ZEJveCxcbiAgICAgICAgLi4uKHByb3BzPy5sZWZ0U2lkZVBhbmVsIHx8IHt9KVxuICAgICAgfX1cbiAgICA+XG4gICAgICB7IXNob3dUYXNrICYmIHF1ZXN0ID8gUXVlc3RQcm9ncmVzcyhxdWVzdCwgaGFuZGxlcnMsIHByb3BzKSA6IFN0ZXBUYXNrcyhoYW5kbGVycywgcHJvcHMpfVxuICAgICAge3F1ZXN0ID8gKFxuICAgICAgICA8VWlFbnRpdHkgdWlUcmFuc2Zvcm09e3sgZGlzcGxheTogJ2ZsZXgnIH19PlxuICAgICAgICAgIHshc2hvd1Rhc2sgPyAoXG4gICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgIHZhbHVlPXtoaWRlSFVEID8gJ1Nob3cgUXVlc3QgUHJvZ3Jlc3MnIDogJ0hpZGUnfVxuICAgICAgICAgICAgICB2YXJpYW50PVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgIHVpVHJhbnNmb3JtPXt7XG4gICAgICAgICAgICAgICAgd2lkdGg6ICFoaWRlSFVEID8gODAgOiAxMjAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAhaGlkZUhVRCA/IDIwIDogMzAsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiB7XG4gICAgICAgICAgICAgICAgICB0b3A6IDVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIG9uTW91c2VEb3duPXsoKSA9PiBzZXRTdGF0ZSh7IC4uLmdldFN0YXRlKCksIGhpZGVIVUQ6ICFoaWRlSFVEIH0pfVxuICAgICAgICAgICAgICB7Li4ucHJvcHM/LnNob3dIaWRlVG9nZ2xlQnV0dG9ufVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICB2YWx1ZT1cIkNsb3NlXCJcbiAgICAgICAgICAgICAgdmFyaWFudD1cInByaW1hcnlcIlxuICAgICAgICAgICAgICB1aVRyYW5zZm9ybT17e1xuICAgICAgICAgICAgICAgIHdpZHRoOiA4MCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDIwLFxuICAgICAgICAgICAgICAgIG1hcmdpbjoge1xuICAgICAgICAgICAgICAgICAgdG9wOiA1XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBvbk1vdXNlRG93bj17KCkgPT4gc2V0U3RhdGUoeyAuLi5nZXRTdGF0ZSgpLCBzZWxlY3RlZFN0ZXBJZDogbnVsbCB9KX1cbiAgICAgICAgICAgICAgey4uLnByb3BzPy5jbG9zZVRhc2tzQm94QnV0dG9ufVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1VpRW50aXR5PlxuICAgICAgKSA6IG51bGx9XG4gICAgPC9VaUVudGl0eT5cbiAgKVxufVxuXG5jb25zdCBRdWVzdFByb2dyZXNzID0gKHF1ZXN0OiBRdWVzdFVJLCBoYW5kbGVyczogSFVEU3RhdGVIYW5kbGVycywgc3R5bGluZ09wdHM/OiBRdWVzdEh1ZE9wdGlvbnMpID0+IHtcbiAgY29uc3QgW2dldFN0YXRlXSA9IGhhbmRsZXJzXG5cbiAgcmV0dXJuIChcbiAgICA8VWlFbnRpdHlcbiAgICAgIHVpVHJhbnNmb3JtPXt7XG4gICAgICAgIGRpc3BsYXk6IGdldFN0YXRlKCkuaGlkZUhVRCA/ICdub25lJyA6ICdmbGV4JyxcbiAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgICBtaW5XaWR0aDogMTgwLFxuICAgICAgICBtYXhXaWR0aDogNDAwLFxuICAgICAgICB3aWR0aDogMTgwLFxuICAgICAgICAuLi5zdHlsaW5nT3B0cz8ucXVlc3RCb3g/LnVpVHJhbnNmb3JtXG4gICAgICB9fVxuICAgICAgdWlCYWNrZ3JvdW5kPXt7XG4gICAgICAgIGNvbG9yOiBDb2xvcjQuY3JlYXRlKDAsIDAsIDAsIDAuOSksXG4gICAgICAgIC4uLnN0eWxpbmdPcHRzPy5xdWVzdEJveD8udWlCYWNrZ3JvdW5kXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxVaUVudGl0eSB1aVRyYW5zZm9ybT17eyBtYXJnaW46IHsgYm90dG9tOiAxMCB9LCAuLi5zdHlsaW5nT3B0cz8ucXVlc3ROYW1lQ29udGFpbmVyPy51aVRyYW5zZm9ybSB9fT5cbiAgICAgICAgPExhYmVsXG4gICAgICAgICAgdGV4dEFsaWduPVwibWlkZGxlLWxlZnRcIlxuICAgICAgICAgIGZvbnRTaXplPXsxM31cbiAgICAgICAgICB2YWx1ZT17YFF1ZXN0OiAke3F1ZXN0Lm5hbWV9YH1cbiAgICAgICAgICB7Li4uc3R5bGluZ09wdHM/LnF1ZXN0TmFtZUNvbnRhaW5lcj8ubGFiZWx9XG4gICAgICAgIC8+XG4gICAgICA8L1VpRW50aXR5PlxuICAgICAgeyFxdWVzdC5kb25lID8gKFxuICAgICAgICA8VWlFbnRpdHlcbiAgICAgICAgICB1aVRyYW5zZm9ybT17e1xuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICBwYWRkaW5nOiB7IHRvcDogMTAsIGJvdHRvbTogMTAgfSxcbiAgICAgICAgICAgIC4uLnN0eWxpbmdPcHRzPy5zdGVwc0NvbnRhaW5lcj8udWlUcmFuc2Zvcm1cbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge1suLi5xdWVzdC5zdGVwc10ubWFwKChzKSA9PiBDdXJyZW50U3RlcChzLCBoYW5kbGVycywgc3R5bGluZ09wdHMpKX1cbiAgICAgICAgPC9VaUVudGl0eT5cbiAgICAgICkgOiAoXG4gICAgICAgIDxVaUVudGl0eVxuICAgICAgICAgIHVpVHJhbnNmb3JtPXt7XG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgIHBhZGRpbmc6IHsgdG9wOiAxMCwgYm90dG9tOiAxMCB9LFxuICAgICAgICAgICAgLi4uc3R5bGluZ09wdHM/LnF1ZXN0Q29tcGxldGlvbkxhYmVsPy51aVRyYW5zZm9ybVxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8TGFiZWxcbiAgICAgICAgICAgIHVpVHJhbnNmb3JtPXt7XG4gICAgICAgICAgICAgIG1hcmdpbjogeyBib3R0b206IDEwIH1cbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICB0ZXh0QWxpZ249XCJtaWRkbGUtY2VudGVyXCJcbiAgICAgICAgICAgIGZvbnRTaXplPXsxMn1cbiAgICAgICAgICAgIHZhbHVlPVwiUXVlc3QgaXMgY29tcGxldGVkIVwiXG4gICAgICAgICAgICB7Li4uc3R5bGluZ09wdHM/LnF1ZXN0Q29tcGxldGlvbkxhYmVsPy5sYWJlbH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1VpRW50aXR5PlxuICAgICAgKX1cbiAgICAgIHtxdWVzdC5uZXh0U3RlcHMubGVuZ3RoID4gMCAmJiAhcXVlc3QuZG9uZSA/IChcbiAgICAgICAgPFVpRW50aXR5XG4gICAgICAgICAgdWlUcmFuc2Zvcm09e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgbWFyZ2luOiB7IGJvdHRvbTogMTAgfSxcbiAgICAgICAgICAgIC4uLnN0eWxpbmdPcHRzPy5uZXh0U3RlcHM/Lm5leHRUaXRsZVVpRW50aXR5XG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxMYWJlbFxuICAgICAgICAgICAgdWlUcmFuc2Zvcm09e3tcbiAgICAgICAgICAgICAgcGFkZGluZzogeyBib3R0b206IDEwIH0sXG4gICAgICAgICAgICAgIG1hcmdpbjogeyBib3R0b206IDEwIH0sXG4gICAgICAgICAgICAgIC4uLnN0eWxpbmdPcHRzPy5uZXh0U3RlcHM/Lm5leHRUaXRsZVByb3BzPy51aVRyYW5zZm9ybVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIHRleHRBbGlnbj1cIm1pZGRsZS1sZWZ0XCJcbiAgICAgICAgICAgIGZvbnRTaXplPXsxMn1cbiAgICAgICAgICAgIHZhbHVlPVwiTmV4dDogXCJcbiAgICAgICAgICAgIHsuLi5zdHlsaW5nT3B0cz8ubmV4dFN0ZXBzPy5uZXh0VGl0bGVQcm9wc31cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtbLi4ucXVlc3QubmV4dFN0ZXBzXS5tYXAoKG5leHQpID0+IChcbiAgICAgICAgICAgIDxVaUVudGl0eSB1aVRyYW5zZm9ybT17eyBtYXJnaW46IHsgYm90dG9tOiA1IH0sIC4uLnN0eWxpbmdPcHRzPy5uZXh0U3RlcHM/LmxhYmVscz8ubGFiZWxVaUVudGl0eSB9fT5cbiAgICAgICAgICAgICAgPExhYmVsIHRleHRBbGlnbj1cIm1pZGRsZS1sZWZ0XCIgZm9udFNpemU9ezExfSB2YWx1ZT17bmV4dH0gey4uLnN0eWxpbmdPcHRzPy5uZXh0U3RlcHM/LmxhYmVscz8ucHJvcHN9IC8+XG4gICAgICAgICAgICA8L1VpRW50aXR5PlxuICAgICAgICAgICkpfVxuICAgICAgICA8L1VpRW50aXR5PlxuICAgICAgKSA6IG51bGx9XG4gICAgPC9VaUVudGl0eT5cbiAgKVxufVxuXG5jb25zdCBDdXJyZW50U3RlcCA9IChzdGVwOiBRdWVzdFVJWydzdGVwcyddW251bWJlcl0sIGhhbmRsZXJzOiBIVURTdGF0ZUhhbmRsZXJzLCBzdHlsaW5nT3B0cz86IFF1ZXN0SHVkT3B0aW9ucykgPT4ge1xuICByZXR1cm4gKFxuICAgIDxVaUVudGl0eSB1aVRyYW5zZm9ybT17eyBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJywgLi4uc3R5bGluZ09wdHM/LnN0ZXBzQ29udGFpbmVyPy5sYWJlbHM/LmxhYmVsVWlFbnRpdHkgfX0+XG4gICAgICA8TGFiZWxcbiAgICAgICAgdWlUcmFuc2Zvcm09e3tcbiAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgICAgcGFkZGluZzogeyB0b3A6IDEwLCBib3R0b206IDEwIH0sXG4gICAgICAgICAgLi4uc3R5bGluZ09wdHM/LnN0ZXBzQ29udGFpbmVyPy5sYWJlbHM/LnByb3BzPy51aVRyYW5zZm9ybVxuICAgICAgICB9fVxuICAgICAgICB0ZXh0QWxpZ249XCJtaWRkbGUtbGVmdFwiXG4gICAgICAgIGZvbnRTaXplPXsxMn1cbiAgICAgICAgdmFsdWU9e2BTdGVwOiAke3N0ZXAuZGVzY3JpcHRpb259YH1cbiAgICAgICAgey4uLnN0eWxpbmdPcHRzPy5zdGVwc0NvbnRhaW5lcj8ubGFiZWxzPy5wcm9wc31cbiAgICAgIC8+XG4gICAgICA8U2hvd1Rhc2tzQnV0dG9uIHN0ZXBJZD17c3RlcC5pZH0gaGFuZGxlcnM9e2hhbmRsZXJzfSBzdHlsaW5nT3B0cz17c3R5bGluZ09wdHN9IC8+XG4gICAgPC9VaUVudGl0eT5cbiAgKVxufVxuXG5jb25zdCBTaG93VGFza3NCdXR0b24gPSAoe1xuICBzdGVwSWQsXG4gIGhhbmRsZXJzLFxuICBzdHlsaW5nT3B0c1xufToge1xuICBzdGVwSWQ6IHN0cmluZ1xuICBoYW5kbGVyczogSFVEU3RhdGVIYW5kbGVyc1xuICBzdHlsaW5nT3B0cz86IFF1ZXN0SHVkT3B0aW9uc1xufSkgPT4ge1xuICBjb25zdCBbZ2V0U3RhdGUsIHNldFN0YXRlXSA9IGhhbmRsZXJzXG4gIHJldHVybiAoXG4gICAgPFVpRW50aXR5IHVpVHJhbnNmb3JtPXt7IGRpc3BsYXk6ICdmbGV4JywgLi4uc3R5bGluZ09wdHM/LnN0ZXBzQ29udGFpbmVyPy5zaG93VGFza3NCdXR0b24/LmJ1dHRvblVpRW50aXR5IH19PlxuICAgICAgPEJ1dHRvblxuICAgICAgICB2YWx1ZT1cIlNob3cgVGFza3NcIlxuICAgICAgICB2YXJpYW50PVwicHJpbWFyeVwiXG4gICAgICAgIHVpVHJhbnNmb3JtPXt7IHdpZHRoOiA4MCwgaGVpZ2h0OiAyMCwgbWFyZ2luOiA0IH19XG4gICAgICAgIG9uTW91c2VEb3duPXsoKSA9PiB7XG4gICAgICAgICAgc2V0U3RhdGUoeyAuLi5nZXRTdGF0ZSgpLCBzZWxlY3RlZFN0ZXBJZDogc3RlcElkIH0pXG4gICAgICAgIH19XG4gICAgICAgIHsuLi5zdHlsaW5nT3B0cz8uc3RlcHNDb250YWluZXI/LnNob3dUYXNrc0J1dHRvbj8uYnV0dG9uUHJvcHN9XG4gICAgICAvPlxuICAgIDwvVWlFbnRpdHk+XG4gIClcbn1cblxuY29uc3QgU3RlcFRhc2tzID0gKFtnZXRTdGF0ZV06IEhVRFN0YXRlSGFuZGxlcnMsIHN0eWxpbmdPcHRzPzogUXVlc3RIdWRPcHRpb25zKSA9PiB7XG4gIGNvbnN0IHsgc2VsZWN0ZWRTdGVwSWQsIHF1ZXN0IH0gPSBnZXRTdGF0ZSgpXG4gIHJldHVybiAoXG4gICAgPFVpRW50aXR5XG4gICAgICB1aVRyYW5zZm9ybT17e1xuICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgIG1pbldpZHRoOiAxODAsXG4gICAgICAgIG1heFdpZHRoOiA0MDAsXG4gICAgICAgIHdpZHRoOiAxODAsXG4gICAgICAgIC4uLnN0eWxpbmdPcHRzPy50YXNrc0JveD8udWlUcmFuc2Zvcm1cbiAgICAgIH19XG4gICAgICB1aUJhY2tncm91bmQ9e3tcbiAgICAgICAgY29sb3I6IENvbG9yNC5jcmVhdGUoMCwgMCwgMCwgMC45KSxcbiAgICAgICAgLi4uc3R5bGluZ09wdHM/LnRhc2tzQm94Py51aUJhY2tncm91bmRcbiAgICAgIH19XG4gICAgPlxuICAgICAge3NlbGVjdGVkU3RlcElkICE9IG51bGwgJiYgcXVlc3QgIT0gbnVsbFxuICAgICAgICA/IHF1ZXN0LnN0ZXBzXG4gICAgICAgICAgICAuZmluZCgocykgPT4gcy5pZCA9PT0gc2VsZWN0ZWRTdGVwSWQpXG4gICAgICAgICAgICA/LnRhc2tzLm1hcCgodCkgPT4gVGFzayh0IGFzIHVua25vd24gYXMgUXVlc3RVSVsnc3RlcHMnXVtudW1iZXJdWyd0YXNrcyddW251bWJlcl0sIHN0eWxpbmdPcHRzKSlcbiAgICAgICAgOiBudWxsfVxuICAgIDwvVWlFbnRpdHk+XG4gIClcbn1cblxuY29uc3QgVGFzayA9ICh0YXNrOiBRdWVzdFVJWydzdGVwcyddW251bWJlcl1bJ3Rhc2tzJ11bbnVtYmVyXSwgc3R5bGluZ09wdHM/OiBRdWVzdEh1ZE9wdGlvbnMpID0+IChcbiAgPFVpRW50aXR5XG4gICAgdWlUcmFuc2Zvcm09e3tcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgbWFyZ2luOiB7IGJvdHRvbTogMTAgfSxcbiAgICAgIC4uLnN0eWxpbmdPcHRzPy50YXNrc0JveD8ubGFiZWxzPy5sYWJlbFVpRW50aXR5XG4gICAgfX1cbiAgPlxuICAgIDxMYWJlbFxuICAgICAgdGV4dEFsaWduPVwibWlkZGxlLWxlZnRcIlxuICAgICAgZm9udFNpemU9ezEyfVxuICAgICAgdmFsdWU9e2Ake3Rhc2suZG9uZSA/ICdET05FOiAnIDogJ1RPRE86ICd9ICR7dGFzay5kZXNjcmlwdGlvbn1gfVxuICAgICAgey4uLnN0eWxpbmdPcHRzPy50YXNrc0JveD8ubGFiZWxzPy5wcm9wc31cbiAgICAvPlxuICA8L1VpRW50aXR5PlxuKVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVF1ZXN0VUkocXVlc3RJbnN0YW5jZTogUXVlc3RJbnN0YW5jZSk6IFF1ZXN0VUkge1xuICBjb25zdCBzdGVwczogUXVlc3RVSVsnc3RlcHMnXSA9IFtdXG4gIGNvbnN0IG5leHRTdGVwcyA9IFtdXG4gIGlmIChxdWVzdEluc3RhbmNlLnF1ZXN0LmRlZmluaXRpb24/LnN0ZXBzKSB7XG4gICAgZm9yIChjb25zdCBzdGVwIG9mIHF1ZXN0SW5zdGFuY2UucXVlc3QuZGVmaW5pdGlvbj8uc3RlcHMpIHtcbiAgICAgIGlmIChxdWVzdEluc3RhbmNlLnN0YXRlLmN1cnJlbnRTdGVwc1tzdGVwLmlkXSkge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gcXVlc3RJbnN0YW5jZS5zdGF0ZS5jdXJyZW50U3RlcHNbc3RlcC5pZF1cblxuICAgICAgICBzdGVwcy5wdXNoKHtcbiAgICAgICAgICBpZDogc3RlcC5pZCxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogc3RlcC5kZXNjcmlwdGlvbixcbiAgICAgICAgICB0YXNrczogc3RlcC50YXNrcy5tYXAoKHRhc2spID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0YXNrLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICBkb25lOiAhIWNvbnRlbnQudGFza3NDb21wbGV0ZWQuZmluZCgodCkgPT4gdC5pZCA9PSB0YXNrLmlkKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG5cbiAgICAgICAgbmV4dFN0ZXBzLnB1c2goXG4gICAgICAgICAgLi4ucXVlc3RJbnN0YW5jZS5xdWVzdC5kZWZpbml0aW9uPy5jb25uZWN0aW9uc1xuICAgICAgICAgICAgLmZpbHRlcigoY29ubikgPT4gY29ubi5zdGVwRnJvbSA9PT0gc3RlcC5pZClcbiAgICAgICAgICAgIC5tYXAoXG4gICAgICAgICAgICAgIChjb25uKSA9PlxuICAgICAgICAgICAgICAgIHF1ZXN0SW5zdGFuY2UucXVlc3QuZGVmaW5pdGlvbj8uc3RlcHMuZmluZCgoc3RlcCkgPT4gc3RlcC5pZCA9PT0gY29ubi5zdGVwVG8pPy5kZXNjcmlwdGlvbiB8fFxuICAgICAgICAgICAgICAgICcoU3RlcCB3aXRob3V0IGRlc2NyaXB0aW9uKSdcbiAgICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7IG5hbWU6IHF1ZXN0SW5zdGFuY2UucXVlc3QubmFtZSwgc3RlcHMsIG5leHRTdGVwcywgZG9uZTogcXVlc3RJbnN0YW5jZS5zdGF0ZS5zdGVwc0xlZnQgPT0gMCB9XG59XG4iXX0=