import _m0 from "protobufjs/minimal";
/**
 * @public
 */
export declare const enum YGPositionType {
    YGPT_RELATIVE = 0,
    YGPT_ABSOLUTE = 1
}
/**
 * @public
 */
export declare const enum YGAlign {
    YGA_AUTO = 0,
    YGA_FLEX_START = 1,
    YGA_CENTER = 2,
    YGA_FLEX_END = 3,
    YGA_STRETCH = 4,
    YGA_BASELINE = 5,
    YGA_SPACE_BETWEEN = 6,
    YGA_SPACE_AROUND = 7
}
/**
 * @public
 */
export declare const enum YGUnit {
    YGU_UNDEFINED = 0,
    YGU_POINT = 1,
    YGU_PERCENT = 2,
    YGU_AUTO = 3
}
/**
 * @public
 */
export declare const enum YGFlexDirection {
    YGFD_ROW = 0,
    YGFD_COLUMN = 1,
    YGFD_COLUMN_REVERSE = 2,
    YGFD_ROW_REVERSE = 3
}
/**
 * @public
 */
export declare const enum YGWrap {
    YGW_NO_WRAP = 0,
    YGW_WRAP = 1,
    YGW_WRAP_REVERSE = 2
}
/**
 * @public
 */
export declare const enum YGJustify {
    YGJ_FLEX_START = 0,
    YGJ_CENTER = 1,
    YGJ_FLEX_END = 2,
    YGJ_SPACE_BETWEEN = 3,
    YGJ_SPACE_AROUND = 4,
    YGJ_SPACE_EVENLY = 5
}
/**
 * @public
 */
export declare const enum YGOverflow {
    YGO_VISIBLE = 0,
    YGO_HIDDEN = 1,
    YGO_SCROLL = 2
}
/**
 * @public
 */
export declare const enum YGDisplay {
    YGD_FLEX = 0,
    YGD_NONE = 1
}
/**
 * @public
 */
export declare const enum YGEdge {
    YGE_LEFT = 0,
    YGE_TOP = 1,
    YGE_RIGHT = 2,
    YGE_BOTTOM = 3,
    YGE_START = 4,
    YGE_END = 5,
    YGE_HORIZONTAL = 6,
    YGE_VERTICAL = 7,
    YGE_ALL = 8
}
/**
 * @public
 */
export declare const enum PointerFilterMode {
    PFM_NONE = 0,
    PFM_BLOCK = 1
}
/**
 * @public
 */
export interface PBUiTransform {
    parent: number;
    rightOf: number;
    /** default: YGAlign.YGA_FLEX_START */
    alignContent?: YGAlign | undefined;
    /** default: YGAlign.YGA_STRETCH */
    alignItems?: YGAlign | undefined;
    /** default: YGWrap.YGW_WRAP */
    flexWrap?: YGWrap | undefined;
    /** default: 1 */
    flexShrink?: number | undefined;
    /** YGPositionType.YGPT_RELATIVE */
    positionType: YGPositionType;
    /** YGAlign.YGA_AUTO */
    alignSelf: YGAlign;
    /** YGFlexDirection.YGFD_ROW */
    flexDirection: YGFlexDirection;
    /** YGJustify.YGJ_FLEX_START */
    justifyContent: YGJustify;
    /** YGOverflow.YGO_VISIBLE */
    overflow: YGOverflow;
    /** YGDisplay.YGD_FLEX */
    display: YGDisplay;
    /** YGUnit.YGU_UNDEFINED */
    flexBasisUnit: YGUnit;
    flexBasis: number;
    flexGrow: number;
    /** YGUnit.YGU_UNDEFINED */
    widthUnit: YGUnit;
    width: number;
    /** YGUnit.YGU_UNDEFINED */
    heightUnit: YGUnit;
    height: number;
    /** YGUnit.YGU_UNDEFINED */
    minWidthUnit: YGUnit;
    minWidth: number;
    /** YGUnit.YGU_UNDEFINED */
    minHeightUnit: YGUnit;
    minHeight: number;
    /** YGUnit.YGU_UNDEFINED */
    maxWidthUnit: YGUnit;
    maxWidth: number;
    /** YGUnit.YGU_UNDEFINED */
    maxHeightUnit: YGUnit;
    maxHeight: number;
    /** YGUnit.YGU_UNDEFINED */
    positionLeftUnit: YGUnit;
    positionLeft: number;
    /** YGUnit.YGU_UNDEFINED */
    positionTopUnit: YGUnit;
    positionTop: number;
    /** YGUnit.YGU_UNDEFINED */
    positionRightUnit: YGUnit;
    positionRight: number;
    /** YGUnit.YGU_UNDEFINED */
    positionBottomUnit: YGUnit;
    positionBottom: number;
    /** YGUnit.YGU_UNDEFINED */
    marginLeftUnit: YGUnit;
    marginLeft: number;
    /** YGUnit.YGU_UNDEFINED */
    marginTopUnit: YGUnit;
    marginTop: number;
    /** YGUnit.YGU_UNDEFINED */
    marginRightUnit: YGUnit;
    marginRight: number;
    /** YGUnit.YGU_UNDEFINED */
    marginBottomUnit: YGUnit;
    marginBottom: number;
    /** YGUnit.YGU_UNDEFINED */
    paddingLeftUnit: YGUnit;
    paddingLeft: number;
    /** YGUnit.YGU_UNDEFINED */
    paddingTopUnit: YGUnit;
    paddingTop: number;
    /** YGUnit.YGU_UNDEFINED */
    paddingRightUnit: YGUnit;
    paddingRight: number;
    /** YGUnit.YGU_UNDEFINED */
    paddingBottomUnit: YGUnit;
    paddingBottom: number;
    /** default: PointerFilterMode.PFM_NONE */
    pointerFilter?: PointerFilterMode | undefined;
}
/**
 * @public
 */
export declare namespace PBUiTransform {
    function encode(message: PBUiTransform, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBUiTransform;
}
