import _m0 from "protobufjs/minimal";
import { InputAction, PointerEventType } from "./common/input_action.gen";
/**
 * PointerEvents adds configurable pointer-based interactions to the attached Entity.
 *
 * Events that match the criteria defined in the PointerEvents structure are reported back to the
 * Entity via the PointerEventsResult component.
 *
 * Some examples of events that can be detected:
 * - Pointer hovering over the Entity.
 * - Held mouse button released over the Entity.
 * - Controller button pressed while targeting the Entity.
 * - Key pressed while targeting the Entity, but only in close range.
 *
 * It also supports simple visual feedback when interactions occur, by showing floating text.
 * More sophisticated feedback requires the use of other components.
 */
/**
 * @public
 */
export interface PBPointerEvents {
    /** the list of relevant events to detect */
    pointerEvents: PBPointerEvents_Entry[];
}
/**
 * @public
 */
export interface PBPointerEvents_Info {
    /** key/button in use (default IA_ANY) */
    button?: InputAction | undefined;
    /** feedback on hover (default 'Interact') */
    hoverText?: string | undefined;
    /** range of interaction (default 10) */
    maxDistance?: number | undefined;
    /** enable or disable hover text and highlight (default true) */
    showFeedback?: boolean | undefined;
    /** enable or disable hover highlight (default true) */
    showHighlight?: boolean | undefined;
}
/**
 * @public
 */
export interface PBPointerEvents_Entry {
    /** the kind of interaction to detect */
    eventType: PointerEventType;
    /** additional configuration for this detection */
    eventInfo: PBPointerEvents_Info | undefined;
}
/**
 * @public
 */
export declare namespace PBPointerEvents {
    function encode(message: PBPointerEvents, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBPointerEvents;
}
/**
 * @public
 */
export declare namespace PBPointerEvents_Info {
    function encode(message: PBPointerEvents_Info, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBPointerEvents_Info;
}
/**
 * @public
 */
export declare namespace PBPointerEvents_Entry {
    function encode(message: PBPointerEvents_Entry, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBPointerEvents_Entry;
}
