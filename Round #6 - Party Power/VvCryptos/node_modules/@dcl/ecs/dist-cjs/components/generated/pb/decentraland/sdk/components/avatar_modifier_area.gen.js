"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBAvatarModifierArea = exports.AvatarModifierType = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const vectors_gen_1 = require("../../common/vectors.gen");
const protobufPackageSarasa = "decentraland.sdk.components";
/** AvatarModifierType is an effect that should be applied to avatars inside the region. */
/**
 * @public
 */
var AvatarModifierType;
(function (AvatarModifierType) {
    /** AMT_HIDE_AVATARS - avatars are invisible */
    AvatarModifierType[AvatarModifierType["AMT_HIDE_AVATARS"] = 0] = "AMT_HIDE_AVATARS";
    /** AMT_DISABLE_PASSPORTS - selecting (e.g. clicking) an avatar will not bring up their profile. */
    AvatarModifierType[AvatarModifierType["AMT_DISABLE_PASSPORTS"] = 1] = "AMT_DISABLE_PASSPORTS";
})(AvatarModifierType = exports.AvatarModifierType || (exports.AvatarModifierType = {}));
function createBasePBAvatarModifierArea() {
    return { area: undefined, excludeIds: [], modifiers: [] };
}
/**
 * @public
 */
var PBAvatarModifierArea;
(function (PBAvatarModifierArea) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.area !== undefined) {
            vectors_gen_1.Vector3.encode(message.area, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.excludeIds) {
            writer.uint32(18).string(v);
        }
        writer.uint32(26).fork();
        for (const v of message.modifiers) {
            writer.int32(v);
        }
        writer.ldelim();
        return writer;
    }
    PBAvatarModifierArea.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBAvatarModifierArea();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.area = vectors_gen_1.Vector3.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.excludeIds.push(reader.string());
                    continue;
                case 3:
                    if (tag === 24) {
                        message.modifiers.push(reader.int32());
                        continue;
                    }
                    if (tag === 26) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.modifiers.push(reader.int32());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBAvatarModifierArea.decode = decode;
})(PBAvatarModifierArea = exports.PBAvatarModifierArea || (exports.PBAvatarModifierArea = {}));
