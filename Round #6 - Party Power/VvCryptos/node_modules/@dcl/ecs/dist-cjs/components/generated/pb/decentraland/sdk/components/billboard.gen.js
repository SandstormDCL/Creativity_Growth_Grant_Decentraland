"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBBillboard = exports.BillboardMode = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const protobufPackageSarasa = "decentraland.sdk.components";
/**
 * BillboardMode indicates one or more axis for automatic rotation, in OR-able bit flag form.
 * Only the values below and the (BM_X | BM_Y) combination are valid.
 */
/**
 * @public
 */
var BillboardMode;
(function (BillboardMode) {
    BillboardMode[BillboardMode["BM_NONE"] = 0] = "BM_NONE";
    BillboardMode[BillboardMode["BM_X"] = 1] = "BM_X";
    BillboardMode[BillboardMode["BM_Y"] = 2] = "BM_Y";
    BillboardMode[BillboardMode["BM_Z"] = 4] = "BM_Z";
    /** BM_ALL - bitwise combination BM_X | BM_Y | BM_Z */
    BillboardMode[BillboardMode["BM_ALL"] = 7] = "BM_ALL";
})(BillboardMode = exports.BillboardMode || (exports.BillboardMode = {}));
function createBasePBBillboard() {
    return { billboardMode: undefined };
}
/**
 * @public
 */
var PBBillboard;
(function (PBBillboard) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.billboardMode !== undefined) {
            writer.uint32(8).int32(message.billboardMode);
        }
        return writer;
    }
    PBBillboard.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBBillboard();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.billboardMode = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBBillboard.decode = decode;
})(PBBillboard = exports.PBBillboard || (exports.PBBillboard = {}));
