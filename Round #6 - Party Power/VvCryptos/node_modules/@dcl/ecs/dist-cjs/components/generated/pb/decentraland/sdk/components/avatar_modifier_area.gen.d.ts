import _m0 from "protobufjs/minimal";
import { Vector3 } from "../../common/vectors.gen";
/** AvatarModifierType is an effect that should be applied to avatars inside the region. */
/**
 * @public
 */
export declare const enum AvatarModifierType {
    /** AMT_HIDE_AVATARS - avatars are invisible */
    AMT_HIDE_AVATARS = 0,
    /** AMT_DISABLE_PASSPORTS - selecting (e.g. clicking) an avatar will not bring up their profile. */
    AMT_DISABLE_PASSPORTS = 1
}
/**
 * The AvatarModifierArea component can be attached to an Entity to define a region of space where
 * avatar behavior changes.
 *
 * The Entity's Transform position determines the center-point of the region, while its size is
 * given as a vector in the `area` property below. The Transform rotation is applied, but the scale
 * is ignored.
 *
 * The modifier effect is only applied to avatars inside the region. It does not affect how players
 * standing inside it see avatars on the other side of the boundary.
 *
 * Note that, while commonly used to delineate a 2D area in a scene (hence the name), the region
 * is actually a 3D volume.
 */
/**
 * @public
 */
export interface PBAvatarModifierArea {
    /** the 3D size of the region */
    area: Vector3 | undefined;
    /** user IDs that can enter and remain unaffected */
    excludeIds: string[];
    /** list of modifiers to apply */
    modifiers: AvatarModifierType[];
}
/**
 * @public
 */
export declare namespace PBAvatarModifierArea {
    function encode(message: PBAvatarModifierArea, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBAvatarModifierArea;
}
