/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Color3 } from "../../common/colors.gen";
const protobufPackageSarasa = "decentraland.sdk.components";
function createBasePBAvatarShape() {
    return {
        id: "",
        name: undefined,
        bodyShape: undefined,
        skinColor: undefined,
        hairColor: undefined,
        eyeColor: undefined,
        expressionTriggerId: undefined,
        expressionTriggerTimestamp: undefined,
        talking: undefined,
        wearables: [],
        emotes: [],
    };
}
/**
 * @public
 */
export var PBAvatarShape;
(function (PBAvatarShape) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== undefined) {
            writer.uint32(18).string(message.name);
        }
        if (message.bodyShape !== undefined) {
            writer.uint32(26).string(message.bodyShape);
        }
        if (message.skinColor !== undefined) {
            Color3.encode(message.skinColor, writer.uint32(34).fork()).ldelim();
        }
        if (message.hairColor !== undefined) {
            Color3.encode(message.hairColor, writer.uint32(42).fork()).ldelim();
        }
        if (message.eyeColor !== undefined) {
            Color3.encode(message.eyeColor, writer.uint32(50).fork()).ldelim();
        }
        if (message.expressionTriggerId !== undefined) {
            writer.uint32(58).string(message.expressionTriggerId);
        }
        if (message.expressionTriggerTimestamp !== undefined) {
            writer.uint32(64).int64(message.expressionTriggerTimestamp);
        }
        if (message.talking !== undefined) {
            writer.uint32(72).bool(message.talking);
        }
        for (const v of message.wearables) {
            writer.uint32(82).string(v);
        }
        for (const v of message.emotes) {
            writer.uint32(90).string(v);
        }
        return writer;
    }
    PBAvatarShape.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBAvatarShape();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.bodyShape = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.skinColor = Color3.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.hairColor = Color3.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.eyeColor = Color3.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.expressionTriggerId = reader.string();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.expressionTriggerTimestamp = longToNumber(reader.int64());
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.talking = reader.bool();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.wearables.push(reader.string());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.emotes.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBAvatarShape.decode = decode;
})(PBAvatarShape || (PBAvatarShape = {}));
const tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
