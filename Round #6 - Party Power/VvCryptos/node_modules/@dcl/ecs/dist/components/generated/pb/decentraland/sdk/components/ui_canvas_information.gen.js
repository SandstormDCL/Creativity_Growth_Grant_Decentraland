/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { BorderRect } from "../../common/border_rect.gen";
const protobufPackageSarasa = "decentraland.sdk.components";
function createBasePBUiCanvasInformation() {
    return { devicePixelRatio: 0, width: 0, height: 0, interactableArea: undefined };
}
/**
 * @public
 */
export var PBUiCanvasInformation;
(function (PBUiCanvasInformation) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.devicePixelRatio !== 0) {
            writer.uint32(13).float(message.devicePixelRatio);
        }
        if (message.width !== 0) {
            writer.uint32(16).int32(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(24).int32(message.height);
        }
        if (message.interactableArea !== undefined) {
            BorderRect.encode(message.interactableArea, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    }
    PBUiCanvasInformation.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBUiCanvasInformation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.devicePixelRatio = reader.float();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.width = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.height = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.interactableArea = BorderRect.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBUiCanvasInformation.decode = decode;
})(PBUiCanvasInformation || (PBUiCanvasInformation = {}));
