/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Quaternion, Vector3 } from "../../common/vectors.gen";
const protobufPackageSarasa = "decentraland.sdk.components";
/**
 * Implementation guidelines for these easing functions can be found
 * at https://github.com/ai/easings.net/blob/6fcd5f852a470bf1a7890e8178afa0f471d5f2ec/src/easings/easingsFunctions.ts
 */
/**
 * @public
 */
export var EasingFunction;
(function (EasingFunction) {
    /** EF_LINEAR - default */
    EasingFunction[EasingFunction["EF_LINEAR"] = 0] = "EF_LINEAR";
    EasingFunction[EasingFunction["EF_EASEINQUAD"] = 1] = "EF_EASEINQUAD";
    EasingFunction[EasingFunction["EF_EASEOUTQUAD"] = 2] = "EF_EASEOUTQUAD";
    EasingFunction[EasingFunction["EF_EASEQUAD"] = 3] = "EF_EASEQUAD";
    EasingFunction[EasingFunction["EF_EASEINSINE"] = 4] = "EF_EASEINSINE";
    EasingFunction[EasingFunction["EF_EASEOUTSINE"] = 5] = "EF_EASEOUTSINE";
    EasingFunction[EasingFunction["EF_EASESINE"] = 6] = "EF_EASESINE";
    EasingFunction[EasingFunction["EF_EASEINEXPO"] = 7] = "EF_EASEINEXPO";
    EasingFunction[EasingFunction["EF_EASEOUTEXPO"] = 8] = "EF_EASEOUTEXPO";
    EasingFunction[EasingFunction["EF_EASEEXPO"] = 9] = "EF_EASEEXPO";
    EasingFunction[EasingFunction["EF_EASEINELASTIC"] = 10] = "EF_EASEINELASTIC";
    EasingFunction[EasingFunction["EF_EASEOUTELASTIC"] = 11] = "EF_EASEOUTELASTIC";
    EasingFunction[EasingFunction["EF_EASEELASTIC"] = 12] = "EF_EASEELASTIC";
    EasingFunction[EasingFunction["EF_EASEINBOUNCE"] = 13] = "EF_EASEINBOUNCE";
    EasingFunction[EasingFunction["EF_EASEOUTBOUNCE"] = 14] = "EF_EASEOUTBOUNCE";
    EasingFunction[EasingFunction["EF_EASEBOUNCE"] = 15] = "EF_EASEBOUNCE";
    EasingFunction[EasingFunction["EF_EASEINCUBIC"] = 16] = "EF_EASEINCUBIC";
    EasingFunction[EasingFunction["EF_EASEOUTCUBIC"] = 17] = "EF_EASEOUTCUBIC";
    EasingFunction[EasingFunction["EF_EASECUBIC"] = 18] = "EF_EASECUBIC";
    EasingFunction[EasingFunction["EF_EASEINQUART"] = 19] = "EF_EASEINQUART";
    EasingFunction[EasingFunction["EF_EASEOUTQUART"] = 20] = "EF_EASEOUTQUART";
    EasingFunction[EasingFunction["EF_EASEQUART"] = 21] = "EF_EASEQUART";
    EasingFunction[EasingFunction["EF_EASEINQUINT"] = 22] = "EF_EASEINQUINT";
    EasingFunction[EasingFunction["EF_EASEOUTQUINT"] = 23] = "EF_EASEOUTQUINT";
    EasingFunction[EasingFunction["EF_EASEQUINT"] = 24] = "EF_EASEQUINT";
    EasingFunction[EasingFunction["EF_EASEINCIRC"] = 25] = "EF_EASEINCIRC";
    EasingFunction[EasingFunction["EF_EASEOUTCIRC"] = 26] = "EF_EASEOUTCIRC";
    EasingFunction[EasingFunction["EF_EASECIRC"] = 27] = "EF_EASECIRC";
    EasingFunction[EasingFunction["EF_EASEINBACK"] = 28] = "EF_EASEINBACK";
    EasingFunction[EasingFunction["EF_EASEOUTBACK"] = 29] = "EF_EASEOUTBACK";
    EasingFunction[EasingFunction["EF_EASEBACK"] = 30] = "EF_EASEBACK";
})(EasingFunction || (EasingFunction = {}));
function createBasePBTween() {
    return { duration: 0, easingFunction: 0, mode: undefined, playing: undefined, currentTime: undefined };
}
/**
 * @public
 */
export var PBTween;
(function (PBTween) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.duration !== 0) {
            writer.uint32(13).float(message.duration);
        }
        if (message.easingFunction !== 0) {
            writer.uint32(16).int32(message.easingFunction);
        }
        switch (message.mode?.$case) {
            case "move":
                Move.encode(message.mode.move, writer.uint32(26).fork()).ldelim();
                break;
            case "rotate":
                Rotate.encode(message.mode.rotate, writer.uint32(34).fork()).ldelim();
                break;
            case "scale":
                Scale.encode(message.mode.scale, writer.uint32(42).fork()).ldelim();
                break;
        }
        if (message.playing !== undefined) {
            writer.uint32(48).bool(message.playing);
        }
        if (message.currentTime !== undefined) {
            writer.uint32(61).float(message.currentTime);
        }
        return writer;
    }
    PBTween.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBTween();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.duration = reader.float();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.easingFunction = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.mode = { $case: "move", move: Move.decode(reader, reader.uint32()) };
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.mode = { $case: "rotate", rotate: Rotate.decode(reader, reader.uint32()) };
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.mode = { $case: "scale", scale: Scale.decode(reader, reader.uint32()) };
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.playing = reader.bool();
                    continue;
                case 7:
                    if (tag !== 61) {
                        break;
                    }
                    message.currentTime = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBTween.decode = decode;
})(PBTween || (PBTween = {}));
function createBaseMove() {
    return { start: undefined, end: undefined, faceDirection: undefined };
}
/**
 * @public
 */
export var Move;
(function (Move) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.start !== undefined) {
            Vector3.encode(message.start, writer.uint32(10).fork()).ldelim();
        }
        if (message.end !== undefined) {
            Vector3.encode(message.end, writer.uint32(18).fork()).ldelim();
        }
        if (message.faceDirection !== undefined) {
            writer.uint32(24).bool(message.faceDirection);
        }
        return writer;
    }
    Move.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMove();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.start = Vector3.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.end = Vector3.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.faceDirection = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Move.decode = decode;
})(Move || (Move = {}));
function createBaseRotate() {
    return { start: undefined, end: undefined };
}
/**
 * @public
 */
export var Rotate;
(function (Rotate) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.start !== undefined) {
            Quaternion.encode(message.start, writer.uint32(10).fork()).ldelim();
        }
        if (message.end !== undefined) {
            Quaternion.encode(message.end, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    Rotate.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRotate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.start = Quaternion.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.end = Quaternion.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Rotate.decode = decode;
})(Rotate || (Rotate = {}));
function createBaseScale() {
    return { start: undefined, end: undefined };
}
/**
 * @public
 */
export var Scale;
(function (Scale) {
    function encode(message, writer = _m0.Writer.create()) {
        if (message.start !== undefined) {
            Vector3.encode(message.start, writer.uint32(10).fork()).ldelim();
        }
        if (message.end !== undefined) {
            Vector3.encode(message.end, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    Scale.encode = encode;
    function decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseScale();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.start = Vector3.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.end = Vector3.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Scale.decode = decode;
})(Scale || (Scale = {}));
