/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Empty } from "../../google/protobuf/empty.gen";

export const protobufPackage = "decentraland.social_service_v2";

export interface InvalidFriendshipAction {
}

export interface InternalServerError {
}

export interface User {
  address: string;
}

export interface RequestResponse {
  user: User | undefined;
  createdAt: number;
  message?: string | undefined;
}

export interface RequestPayload {
  user: User | undefined;
  message?: string | undefined;
}

export interface Requests {
  requests: RequestResponse[];
}

export interface AcceptResponse {
  user: User | undefined;
}

export interface AcceptPayload {
  user: User | undefined;
}

export interface RejectResponse {
  user: User | undefined;
}

export interface RejectPayload {
  user: User | undefined;
}

export interface DeleteResponse {
  user: User | undefined;
}

export interface DeletePayload {
  user: User | undefined;
}

export interface CancelResponse {
  user: User | undefined;
}

export interface CancelPayload {
  user: User | undefined;
}

export interface UpsertFriendshipPayload {
  action?:
    | { $case: "request"; request: RequestPayload }
    | { $case: "accept"; accept: AcceptPayload }
    | { $case: "reject"; reject: RejectPayload }
    | { $case: "delete"; delete: DeletePayload }
    | { $case: "cancel"; cancel: CancelPayload }
    | undefined;
}

export interface MutualFriendsPayload {
  user: User | undefined;
}

export interface UsersResponse {
  users: User[];
}

export interface FriendshipRequestsResponse {
  response?: { $case: "requests"; requests: Requests } | {
    $case: "internalServerError";
    internalServerError: InternalServerError;
  } | undefined;
}

export interface UpsertFriendshipResponse {
  response?:
    | { $case: "accepted"; accepted: UpsertFriendshipResponse_Accepted }
    | { $case: "invalidFriendshipAction"; invalidFriendshipAction: InvalidFriendshipAction }
    | { $case: "internalServerError"; internalServerError: InternalServerError }
    | undefined;
}

export interface UpsertFriendshipResponse_Accepted {
}

export interface FriendshipUpdate {
  update?:
    | { $case: "request"; request: RequestResponse }
    | { $case: "accept"; accept: AcceptResponse }
    | { $case: "reject"; reject: RejectResponse }
    | { $case: "delete"; delete: DeleteResponse }
    | { $case: "cancel"; cancel: CancelResponse }
    | undefined;
}

function createBaseInvalidFriendshipAction(): InvalidFriendshipAction {
  return {};
}

export namespace InvalidFriendshipAction {
  export function encode(_: InvalidFriendshipAction, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): InvalidFriendshipAction {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvalidFriendshipAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): InvalidFriendshipAction {
    return {};
  }

  export function toJSON(_: InvalidFriendshipAction): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<InvalidFriendshipAction>, I>>(base?: I): InvalidFriendshipAction {
    return InvalidFriendshipAction.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<InvalidFriendshipAction>, I>>(_: I): InvalidFriendshipAction {
    const message = createBaseInvalidFriendshipAction();
    return message;
  }
}

function createBaseInternalServerError(): InternalServerError {
  return {};
}

export namespace InternalServerError {
  export function encode(_: InternalServerError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): InternalServerError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInternalServerError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): InternalServerError {
    return {};
  }

  export function toJSON(_: InternalServerError): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<InternalServerError>, I>>(base?: I): InternalServerError {
    return InternalServerError.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<InternalServerError>, I>>(_: I): InternalServerError {
    const message = createBaseInternalServerError();
    return message;
  }
}

function createBaseUser(): User {
  return { address: "" };
}

export namespace User {
  export function encode(message: User, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): User {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): User {
    return { address: isSet(object.address) ? String(object.address) : "" };
  }

  export function toJSON(message: User): unknown {
    const obj: any = {};
    message.address !== undefined && (obj.address = message.address);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.address = object.address ?? "";
    return message;
  }
}

function createBaseRequestResponse(): RequestResponse {
  return { user: undefined, createdAt: 0, message: undefined };
}

export namespace RequestResponse {
  export function encode(message: RequestResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    if (message.createdAt !== 0) {
      writer.uint32(16).int64(message.createdAt);
    }
    if (message.message !== undefined) {
      writer.uint32(26).string(message.message);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): RequestResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.createdAt = longToNumber(reader.int64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): RequestResponse {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      createdAt: isSet(object.createdAt) ? Number(object.createdAt) : 0,
      message: isSet(object.message) ? String(object.message) : undefined,
    };
  }

  export function toJSON(message: RequestResponse): unknown {
    const obj: any = {};
    message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
    message.createdAt !== undefined && (obj.createdAt = Math.round(message.createdAt));
    message.message !== undefined && (obj.message = message.message);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<RequestResponse>, I>>(base?: I): RequestResponse {
    return RequestResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<RequestResponse>, I>>(object: I): RequestResponse {
    const message = createBaseRequestResponse();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.createdAt = object.createdAt ?? 0;
    message.message = object.message ?? undefined;
    return message;
  }
}

function createBaseRequestPayload(): RequestPayload {
  return { user: undefined, message: undefined };
}

export namespace RequestPayload {
  export function encode(message: RequestPayload, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    if (message.message !== undefined) {
      writer.uint32(26).string(message.message);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): RequestPayload {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): RequestPayload {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      message: isSet(object.message) ? String(object.message) : undefined,
    };
  }

  export function toJSON(message: RequestPayload): unknown {
    const obj: any = {};
    message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
    message.message !== undefined && (obj.message = message.message);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<RequestPayload>, I>>(base?: I): RequestPayload {
    return RequestPayload.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<RequestPayload>, I>>(object: I): RequestPayload {
    const message = createBaseRequestPayload();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.message = object.message ?? undefined;
    return message;
  }
}

function createBaseRequests(): Requests {
  return { requests: [] };
}

export namespace Requests {
  export function encode(message: Requests, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.requests) {
      RequestResponse.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): Requests {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequests();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requests.push(RequestResponse.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): Requests {
    return {
      requests: Array.isArray(object?.requests) ? object.requests.map((e: any) => RequestResponse.fromJSON(e)) : [],
    };
  }

  export function toJSON(message: Requests): unknown {
    const obj: any = {};
    if (message.requests) {
      obj.requests = message.requests.map((e) => e ? RequestResponse.toJSON(e) : undefined);
    } else {
      obj.requests = [];
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<Requests>, I>>(base?: I): Requests {
    return Requests.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<Requests>, I>>(object: I): Requests {
    const message = createBaseRequests();
    message.requests = object.requests?.map((e) => RequestResponse.fromPartial(e)) || [];
    return message;
  }
}

function createBaseAcceptResponse(): AcceptResponse {
  return { user: undefined };
}

export namespace AcceptResponse {
  export function encode(message: AcceptResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): AcceptResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAcceptResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): AcceptResponse {
    return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
  }

  export function toJSON(message: AcceptResponse): unknown {
    const obj: any = {};
    message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<AcceptResponse>, I>>(base?: I): AcceptResponse {
    return AcceptResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<AcceptResponse>, I>>(object: I): AcceptResponse {
    const message = createBaseAcceptResponse();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  }
}

function createBaseAcceptPayload(): AcceptPayload {
  return { user: undefined };
}

export namespace AcceptPayload {
  export function encode(message: AcceptPayload, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): AcceptPayload {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAcceptPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): AcceptPayload {
    return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
  }

  export function toJSON(message: AcceptPayload): unknown {
    const obj: any = {};
    message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<AcceptPayload>, I>>(base?: I): AcceptPayload {
    return AcceptPayload.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<AcceptPayload>, I>>(object: I): AcceptPayload {
    const message = createBaseAcceptPayload();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  }
}

function createBaseRejectResponse(): RejectResponse {
  return { user: undefined };
}

export namespace RejectResponse {
  export function encode(message: RejectResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): RejectResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRejectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): RejectResponse {
    return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
  }

  export function toJSON(message: RejectResponse): unknown {
    const obj: any = {};
    message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<RejectResponse>, I>>(base?: I): RejectResponse {
    return RejectResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<RejectResponse>, I>>(object: I): RejectResponse {
    const message = createBaseRejectResponse();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  }
}

function createBaseRejectPayload(): RejectPayload {
  return { user: undefined };
}

export namespace RejectPayload {
  export function encode(message: RejectPayload, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): RejectPayload {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRejectPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): RejectPayload {
    return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
  }

  export function toJSON(message: RejectPayload): unknown {
    const obj: any = {};
    message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<RejectPayload>, I>>(base?: I): RejectPayload {
    return RejectPayload.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<RejectPayload>, I>>(object: I): RejectPayload {
    const message = createBaseRejectPayload();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  }
}

function createBaseDeleteResponse(): DeleteResponse {
  return { user: undefined };
}

export namespace DeleteResponse {
  export function encode(message: DeleteResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): DeleteResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): DeleteResponse {
    return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
  }

  export function toJSON(message: DeleteResponse): unknown {
    const obj: any = {};
    message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<DeleteResponse>, I>>(base?: I): DeleteResponse {
    return DeleteResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<DeleteResponse>, I>>(object: I): DeleteResponse {
    const message = createBaseDeleteResponse();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  }
}

function createBaseDeletePayload(): DeletePayload {
  return { user: undefined };
}

export namespace DeletePayload {
  export function encode(message: DeletePayload, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): DeletePayload {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): DeletePayload {
    return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
  }

  export function toJSON(message: DeletePayload): unknown {
    const obj: any = {};
    message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<DeletePayload>, I>>(base?: I): DeletePayload {
    return DeletePayload.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<DeletePayload>, I>>(object: I): DeletePayload {
    const message = createBaseDeletePayload();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  }
}

function createBaseCancelResponse(): CancelResponse {
  return { user: undefined };
}

export namespace CancelResponse {
  export function encode(message: CancelResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): CancelResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): CancelResponse {
    return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
  }

  export function toJSON(message: CancelResponse): unknown {
    const obj: any = {};
    message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<CancelResponse>, I>>(base?: I): CancelResponse {
    return CancelResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<CancelResponse>, I>>(object: I): CancelResponse {
    const message = createBaseCancelResponse();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  }
}

function createBaseCancelPayload(): CancelPayload {
  return { user: undefined };
}

export namespace CancelPayload {
  export function encode(message: CancelPayload, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): CancelPayload {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): CancelPayload {
    return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
  }

  export function toJSON(message: CancelPayload): unknown {
    const obj: any = {};
    message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<CancelPayload>, I>>(base?: I): CancelPayload {
    return CancelPayload.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<CancelPayload>, I>>(object: I): CancelPayload {
    const message = createBaseCancelPayload();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  }
}

function createBaseUpsertFriendshipPayload(): UpsertFriendshipPayload {
  return { action: undefined };
}

export namespace UpsertFriendshipPayload {
  export function encode(message: UpsertFriendshipPayload, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    switch (message.action?.$case) {
      case "request":
        RequestPayload.encode(message.action.request, writer.uint32(10).fork()).ldelim();
        break;
      case "accept":
        AcceptPayload.encode(message.action.accept, writer.uint32(18).fork()).ldelim();
        break;
      case "reject":
        RejectPayload.encode(message.action.reject, writer.uint32(34).fork()).ldelim();
        break;
      case "delete":
        DeletePayload.encode(message.action.delete, writer.uint32(42).fork()).ldelim();
        break;
      case "cancel":
        CancelPayload.encode(message.action.cancel, writer.uint32(50).fork()).ldelim();
        break;
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): UpsertFriendshipPayload {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpsertFriendshipPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.action = { $case: "request", request: RequestPayload.decode(reader, reader.uint32()) };
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.action = { $case: "accept", accept: AcceptPayload.decode(reader, reader.uint32()) };
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.action = { $case: "reject", reject: RejectPayload.decode(reader, reader.uint32()) };
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.action = { $case: "delete", delete: DeletePayload.decode(reader, reader.uint32()) };
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.action = { $case: "cancel", cancel: CancelPayload.decode(reader, reader.uint32()) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): UpsertFriendshipPayload {
    return {
      action: isSet(object.request)
        ? { $case: "request", request: RequestPayload.fromJSON(object.request) }
        : isSet(object.accept)
        ? { $case: "accept", accept: AcceptPayload.fromJSON(object.accept) }
        : isSet(object.reject)
        ? { $case: "reject", reject: RejectPayload.fromJSON(object.reject) }
        : isSet(object.delete)
        ? { $case: "delete", delete: DeletePayload.fromJSON(object.delete) }
        : isSet(object.cancel)
        ? { $case: "cancel", cancel: CancelPayload.fromJSON(object.cancel) }
        : undefined,
    };
  }

  export function toJSON(message: UpsertFriendshipPayload): unknown {
    const obj: any = {};
    message.action?.$case === "request" &&
      (obj.request = message.action?.request ? RequestPayload.toJSON(message.action?.request) : undefined);
    message.action?.$case === "accept" &&
      (obj.accept = message.action?.accept ? AcceptPayload.toJSON(message.action?.accept) : undefined);
    message.action?.$case === "reject" &&
      (obj.reject = message.action?.reject ? RejectPayload.toJSON(message.action?.reject) : undefined);
    message.action?.$case === "delete" &&
      (obj.delete = message.action?.delete ? DeletePayload.toJSON(message.action?.delete) : undefined);
    message.action?.$case === "cancel" &&
      (obj.cancel = message.action?.cancel ? CancelPayload.toJSON(message.action?.cancel) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<UpsertFriendshipPayload>, I>>(base?: I): UpsertFriendshipPayload {
    return UpsertFriendshipPayload.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<UpsertFriendshipPayload>, I>>(
    object: I,
  ): UpsertFriendshipPayload {
    const message = createBaseUpsertFriendshipPayload();
    if (object.action?.$case === "request" && object.action?.request !== undefined && object.action?.request !== null) {
      message.action = { $case: "request", request: RequestPayload.fromPartial(object.action.request) };
    }
    if (object.action?.$case === "accept" && object.action?.accept !== undefined && object.action?.accept !== null) {
      message.action = { $case: "accept", accept: AcceptPayload.fromPartial(object.action.accept) };
    }
    if (object.action?.$case === "reject" && object.action?.reject !== undefined && object.action?.reject !== null) {
      message.action = { $case: "reject", reject: RejectPayload.fromPartial(object.action.reject) };
    }
    if (object.action?.$case === "delete" && object.action?.delete !== undefined && object.action?.delete !== null) {
      message.action = { $case: "delete", delete: DeletePayload.fromPartial(object.action.delete) };
    }
    if (object.action?.$case === "cancel" && object.action?.cancel !== undefined && object.action?.cancel !== null) {
      message.action = { $case: "cancel", cancel: CancelPayload.fromPartial(object.action.cancel) };
    }
    return message;
  }
}

function createBaseMutualFriendsPayload(): MutualFriendsPayload {
  return { user: undefined };
}

export namespace MutualFriendsPayload {
  export function encode(message: MutualFriendsPayload, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): MutualFriendsPayload {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutualFriendsPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): MutualFriendsPayload {
    return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
  }

  export function toJSON(message: MutualFriendsPayload): unknown {
    const obj: any = {};
    message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<MutualFriendsPayload>, I>>(base?: I): MutualFriendsPayload {
    return MutualFriendsPayload.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<MutualFriendsPayload>, I>>(object: I): MutualFriendsPayload {
    const message = createBaseMutualFriendsPayload();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  }
}

function createBaseUsersResponse(): UsersResponse {
  return { users: [] };
}

export namespace UsersResponse {
  export function encode(message: UsersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.users) {
      User.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): UsersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.users.push(User.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): UsersResponse {
    return { users: Array.isArray(object?.users) ? object.users.map((e: any) => User.fromJSON(e)) : [] };
  }

  export function toJSON(message: UsersResponse): unknown {
    const obj: any = {};
    if (message.users) {
      obj.users = message.users.map((e) => e ? User.toJSON(e) : undefined);
    } else {
      obj.users = [];
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<UsersResponse>, I>>(base?: I): UsersResponse {
    return UsersResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<UsersResponse>, I>>(object: I): UsersResponse {
    const message = createBaseUsersResponse();
    message.users = object.users?.map((e) => User.fromPartial(e)) || [];
    return message;
  }
}

function createBaseFriendshipRequestsResponse(): FriendshipRequestsResponse {
  return { response: undefined };
}

export namespace FriendshipRequestsResponse {
  export function encode(message: FriendshipRequestsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    switch (message.response?.$case) {
      case "requests":
        Requests.encode(message.response.requests, writer.uint32(10).fork()).ldelim();
        break;
      case "internalServerError":
        InternalServerError.encode(message.response.internalServerError, writer.uint32(18).fork()).ldelim();
        break;
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): FriendshipRequestsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFriendshipRequestsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.response = { $case: "requests", requests: Requests.decode(reader, reader.uint32()) };
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.response = {
            $case: "internalServerError",
            internalServerError: InternalServerError.decode(reader, reader.uint32()),
          };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): FriendshipRequestsResponse {
    return {
      response: isSet(object.requests)
        ? { $case: "requests", requests: Requests.fromJSON(object.requests) }
        : isSet(object.internalServerError)
        ? {
          $case: "internalServerError",
          internalServerError: InternalServerError.fromJSON(object.internalServerError),
        }
        : undefined,
    };
  }

  export function toJSON(message: FriendshipRequestsResponse): unknown {
    const obj: any = {};
    message.response?.$case === "requests" &&
      (obj.requests = message.response?.requests ? Requests.toJSON(message.response?.requests) : undefined);
    message.response?.$case === "internalServerError" &&
      (obj.internalServerError = message.response?.internalServerError
        ? InternalServerError.toJSON(message.response?.internalServerError)
        : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<FriendshipRequestsResponse>, I>>(
    base?: I,
  ): FriendshipRequestsResponse {
    return FriendshipRequestsResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<FriendshipRequestsResponse>, I>>(
    object: I,
  ): FriendshipRequestsResponse {
    const message = createBaseFriendshipRequestsResponse();
    if (
      object.response?.$case === "requests" &&
      object.response?.requests !== undefined &&
      object.response?.requests !== null
    ) {
      message.response = { $case: "requests", requests: Requests.fromPartial(object.response.requests) };
    }
    if (
      object.response?.$case === "internalServerError" &&
      object.response?.internalServerError !== undefined &&
      object.response?.internalServerError !== null
    ) {
      message.response = {
        $case: "internalServerError",
        internalServerError: InternalServerError.fromPartial(object.response.internalServerError),
      };
    }
    return message;
  }
}

function createBaseUpsertFriendshipResponse(): UpsertFriendshipResponse {
  return { response: undefined };
}

export namespace UpsertFriendshipResponse {
  export function encode(message: UpsertFriendshipResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    switch (message.response?.$case) {
      case "accepted":
        UpsertFriendshipResponse_Accepted.encode(message.response.accepted, writer.uint32(10).fork()).ldelim();
        break;
      case "invalidFriendshipAction":
        InvalidFriendshipAction.encode(message.response.invalidFriendshipAction, writer.uint32(18).fork()).ldelim();
        break;
      case "internalServerError":
        InternalServerError.encode(message.response.internalServerError, writer.uint32(26).fork()).ldelim();
        break;
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): UpsertFriendshipResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpsertFriendshipResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.response = {
            $case: "accepted",
            accepted: UpsertFriendshipResponse_Accepted.decode(reader, reader.uint32()),
          };
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.response = {
            $case: "invalidFriendshipAction",
            invalidFriendshipAction: InvalidFriendshipAction.decode(reader, reader.uint32()),
          };
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.response = {
            $case: "internalServerError",
            internalServerError: InternalServerError.decode(reader, reader.uint32()),
          };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): UpsertFriendshipResponse {
    return {
      response: isSet(object.accepted)
        ? { $case: "accepted", accepted: UpsertFriendshipResponse_Accepted.fromJSON(object.accepted) }
        : isSet(object.invalidFriendshipAction)
        ? {
          $case: "invalidFriendshipAction",
          invalidFriendshipAction: InvalidFriendshipAction.fromJSON(object.invalidFriendshipAction),
        }
        : isSet(object.internalServerError)
        ? {
          $case: "internalServerError",
          internalServerError: InternalServerError.fromJSON(object.internalServerError),
        }
        : undefined,
    };
  }

  export function toJSON(message: UpsertFriendshipResponse): unknown {
    const obj: any = {};
    message.response?.$case === "accepted" &&
      (obj.accepted = message.response?.accepted
        ? UpsertFriendshipResponse_Accepted.toJSON(message.response?.accepted)
        : undefined);
    message.response?.$case === "invalidFriendshipAction" &&
      (obj.invalidFriendshipAction = message.response?.invalidFriendshipAction
        ? InvalidFriendshipAction.toJSON(message.response?.invalidFriendshipAction)
        : undefined);
    message.response?.$case === "internalServerError" &&
      (obj.internalServerError = message.response?.internalServerError
        ? InternalServerError.toJSON(message.response?.internalServerError)
        : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<UpsertFriendshipResponse>, I>>(
    base?: I,
  ): UpsertFriendshipResponse {
    return UpsertFriendshipResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<UpsertFriendshipResponse>, I>>(
    object: I,
  ): UpsertFriendshipResponse {
    const message = createBaseUpsertFriendshipResponse();
    if (
      object.response?.$case === "accepted" &&
      object.response?.accepted !== undefined &&
      object.response?.accepted !== null
    ) {
      message.response = {
        $case: "accepted",
        accepted: UpsertFriendshipResponse_Accepted.fromPartial(object.response.accepted),
      };
    }
    if (
      object.response?.$case === "invalidFriendshipAction" &&
      object.response?.invalidFriendshipAction !== undefined &&
      object.response?.invalidFriendshipAction !== null
    ) {
      message.response = {
        $case: "invalidFriendshipAction",
        invalidFriendshipAction: InvalidFriendshipAction.fromPartial(object.response.invalidFriendshipAction),
      };
    }
    if (
      object.response?.$case === "internalServerError" &&
      object.response?.internalServerError !== undefined &&
      object.response?.internalServerError !== null
    ) {
      message.response = {
        $case: "internalServerError",
        internalServerError: InternalServerError.fromPartial(object.response.internalServerError),
      };
    }
    return message;
  }
}

function createBaseUpsertFriendshipResponse_Accepted(): UpsertFriendshipResponse_Accepted {
  return {};
}

export namespace UpsertFriendshipResponse_Accepted {
  export function encode(_: UpsertFriendshipResponse_Accepted, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): UpsertFriendshipResponse_Accepted {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpsertFriendshipResponse_Accepted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): UpsertFriendshipResponse_Accepted {
    return {};
  }

  export function toJSON(_: UpsertFriendshipResponse_Accepted): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<UpsertFriendshipResponse_Accepted>, I>>(
    base?: I,
  ): UpsertFriendshipResponse_Accepted {
    return UpsertFriendshipResponse_Accepted.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<UpsertFriendshipResponse_Accepted>, I>>(
    _: I,
  ): UpsertFriendshipResponse_Accepted {
    const message = createBaseUpsertFriendshipResponse_Accepted();
    return message;
  }
}

function createBaseFriendshipUpdate(): FriendshipUpdate {
  return { update: undefined };
}

export namespace FriendshipUpdate {
  export function encode(message: FriendshipUpdate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    switch (message.update?.$case) {
      case "request":
        RequestResponse.encode(message.update.request, writer.uint32(10).fork()).ldelim();
        break;
      case "accept":
        AcceptResponse.encode(message.update.accept, writer.uint32(18).fork()).ldelim();
        break;
      case "reject":
        RejectResponse.encode(message.update.reject, writer.uint32(34).fork()).ldelim();
        break;
      case "delete":
        DeleteResponse.encode(message.update.delete, writer.uint32(42).fork()).ldelim();
        break;
      case "cancel":
        CancelResponse.encode(message.update.cancel, writer.uint32(50).fork()).ldelim();
        break;
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): FriendshipUpdate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFriendshipUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.update = { $case: "request", request: RequestResponse.decode(reader, reader.uint32()) };
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.update = { $case: "accept", accept: AcceptResponse.decode(reader, reader.uint32()) };
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.update = { $case: "reject", reject: RejectResponse.decode(reader, reader.uint32()) };
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.update = { $case: "delete", delete: DeleteResponse.decode(reader, reader.uint32()) };
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.update = { $case: "cancel", cancel: CancelResponse.decode(reader, reader.uint32()) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): FriendshipUpdate {
    return {
      update: isSet(object.request)
        ? { $case: "request", request: RequestResponse.fromJSON(object.request) }
        : isSet(object.accept)
        ? { $case: "accept", accept: AcceptResponse.fromJSON(object.accept) }
        : isSet(object.reject)
        ? { $case: "reject", reject: RejectResponse.fromJSON(object.reject) }
        : isSet(object.delete)
        ? { $case: "delete", delete: DeleteResponse.fromJSON(object.delete) }
        : isSet(object.cancel)
        ? { $case: "cancel", cancel: CancelResponse.fromJSON(object.cancel) }
        : undefined,
    };
  }

  export function toJSON(message: FriendshipUpdate): unknown {
    const obj: any = {};
    message.update?.$case === "request" &&
      (obj.request = message.update?.request ? RequestResponse.toJSON(message.update?.request) : undefined);
    message.update?.$case === "accept" &&
      (obj.accept = message.update?.accept ? AcceptResponse.toJSON(message.update?.accept) : undefined);
    message.update?.$case === "reject" &&
      (obj.reject = message.update?.reject ? RejectResponse.toJSON(message.update?.reject) : undefined);
    message.update?.$case === "delete" &&
      (obj.delete = message.update?.delete ? DeleteResponse.toJSON(message.update?.delete) : undefined);
    message.update?.$case === "cancel" &&
      (obj.cancel = message.update?.cancel ? CancelResponse.toJSON(message.update?.cancel) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<FriendshipUpdate>, I>>(base?: I): FriendshipUpdate {
    return FriendshipUpdate.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<FriendshipUpdate>, I>>(object: I): FriendshipUpdate {
    const message = createBaseFriendshipUpdate();
    if (object.update?.$case === "request" && object.update?.request !== undefined && object.update?.request !== null) {
      message.update = { $case: "request", request: RequestResponse.fromPartial(object.update.request) };
    }
    if (object.update?.$case === "accept" && object.update?.accept !== undefined && object.update?.accept !== null) {
      message.update = { $case: "accept", accept: AcceptResponse.fromPartial(object.update.accept) };
    }
    if (object.update?.$case === "reject" && object.update?.reject !== undefined && object.update?.reject !== null) {
      message.update = { $case: "reject", reject: RejectResponse.fromPartial(object.update.reject) };
    }
    if (object.update?.$case === "delete" && object.update?.delete !== undefined && object.update?.delete !== null) {
      message.update = { $case: "delete", delete: DeleteResponse.fromPartial(object.update.delete) };
    }
    if (object.update?.$case === "cancel" && object.update?.cancel !== undefined && object.update?.cancel !== null) {
      message.update = { $case: "cancel", cancel: CancelResponse.fromPartial(object.update.cancel) };
    }
    return message;
  }
}

export type SocialServiceDefinition = typeof SocialServiceDefinition;
export const SocialServiceDefinition = {
  name: "SocialService",
  fullName: "decentraland.social_service_v2.SocialService",
  methods: {
    /** Get the list of friends for the authenticated user */
    getFriends: {
      name: "GetFriends",
      requestType: Empty,
      requestStream: false,
      responseType: UsersResponse,
      responseStream: true,
      options: {},
    },
    /** Get the list of mutual friends between the authenticated user and the one in the parameter */
    getMutualFriends: {
      name: "GetMutualFriends",
      requestType: MutualFriendsPayload,
      requestStream: false,
      responseType: UsersResponse,
      responseStream: true,
      options: {},
    },
    /** Get the pending friendship requests for the authenticated user */
    getPendingFriendshipRequests: {
      name: "GetPendingFriendshipRequests",
      requestType: Empty,
      requestStream: false,
      responseType: FriendshipRequestsResponse,
      responseStream: false,
      options: {},
    },
    /** Get the sent friendship requests for the authenticated user */
    getSentFriendshipRequests: {
      name: "GetSentFriendshipRequests",
      requestType: Empty,
      requestStream: false,
      responseType: FriendshipRequestsResponse,
      responseStream: false,
      options: {},
    },
    /** Create or update friendship status: REQUEST, ACCEPT, REJECT, CANCEL, DELETE */
    upsertFriendship: {
      name: "UpsertFriendship",
      requestType: UpsertFriendshipPayload,
      requestStream: false,
      responseType: UpsertFriendshipResponse,
      responseStream: false,
      options: {},
    },
    /** Subscribe to updates of friendship status: REQUEST, ACCEPT, REJECT, CANCEL, DELETE */
    subscribeToFriendshipUpdates: {
      name: "SubscribeToFriendshipUpdates",
      requestType: Empty,
      requestStream: false,
      responseType: FriendshipUpdate,
      responseStream: true,
      options: {},
    },
  },
} as const;

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
