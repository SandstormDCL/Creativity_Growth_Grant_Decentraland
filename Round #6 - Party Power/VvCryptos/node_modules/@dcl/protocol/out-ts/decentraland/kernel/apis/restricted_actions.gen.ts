/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Vector2, Vector3 } from "../../common/vectors.gen";

export const protobufPackage = "decentraland.kernel.apis";

export interface MovePlayerToRequest {
  newRelativePosition: Vector3 | undefined;
  cameraTarget?: Vector3 | undefined;
}

export interface TeleportToRequest {
  worldCoordinates: Vector2 | undefined;
}

export interface TriggerEmoteRequest {
  predefinedEmote: string;
}

export interface ChangeRealmRequest {
  realm: string;
  message?: string | undefined;
}

export interface OpenExternalUrlRequest {
  url: string;
}

export interface OpenNftDialogRequest {
  urn: string;
}

export interface UnblockPointerRequest {
}

export interface CommsAdapterRequest {
  connectionString: string;
}

export interface TriggerSceneEmoteRequest {
  src: string;
  loop?: boolean | undefined;
}

export interface SuccessResponse {
  success: boolean;
}

export interface TriggerEmoteResponse {
}

export interface MovePlayerToResponse {
}

export interface TeleportToResponse {
}

function createBaseMovePlayerToRequest(): MovePlayerToRequest {
  return { newRelativePosition: undefined, cameraTarget: undefined };
}

export namespace MovePlayerToRequest {
  export function encode(message: MovePlayerToRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.newRelativePosition !== undefined) {
      Vector3.encode(message.newRelativePosition, writer.uint32(10).fork()).ldelim();
    }
    if (message.cameraTarget !== undefined) {
      Vector3.encode(message.cameraTarget, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): MovePlayerToRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMovePlayerToRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.newRelativePosition = Vector3.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cameraTarget = Vector3.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): MovePlayerToRequest {
    return {
      newRelativePosition: isSet(object.newRelativePosition) ? Vector3.fromJSON(object.newRelativePosition) : undefined,
      cameraTarget: isSet(object.cameraTarget) ? Vector3.fromJSON(object.cameraTarget) : undefined,
    };
  }

  export function toJSON(message: MovePlayerToRequest): unknown {
    const obj: any = {};
    message.newRelativePosition !== undefined &&
      (obj.newRelativePosition = message.newRelativePosition ? Vector3.toJSON(message.newRelativePosition) : undefined);
    message.cameraTarget !== undefined &&
      (obj.cameraTarget = message.cameraTarget ? Vector3.toJSON(message.cameraTarget) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<MovePlayerToRequest>, I>>(base?: I): MovePlayerToRequest {
    return MovePlayerToRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<MovePlayerToRequest>, I>>(object: I): MovePlayerToRequest {
    const message = createBaseMovePlayerToRequest();
    message.newRelativePosition = (object.newRelativePosition !== undefined && object.newRelativePosition !== null)
      ? Vector3.fromPartial(object.newRelativePosition)
      : undefined;
    message.cameraTarget = (object.cameraTarget !== undefined && object.cameraTarget !== null)
      ? Vector3.fromPartial(object.cameraTarget)
      : undefined;
    return message;
  }
}

function createBaseTeleportToRequest(): TeleportToRequest {
  return { worldCoordinates: undefined };
}

export namespace TeleportToRequest {
  export function encode(message: TeleportToRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.worldCoordinates !== undefined) {
      Vector2.encode(message.worldCoordinates, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): TeleportToRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTeleportToRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.worldCoordinates = Vector2.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): TeleportToRequest {
    return { worldCoordinates: isSet(object.worldCoordinates) ? Vector2.fromJSON(object.worldCoordinates) : undefined };
  }

  export function toJSON(message: TeleportToRequest): unknown {
    const obj: any = {};
    message.worldCoordinates !== undefined &&
      (obj.worldCoordinates = message.worldCoordinates ? Vector2.toJSON(message.worldCoordinates) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<TeleportToRequest>, I>>(base?: I): TeleportToRequest {
    return TeleportToRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<TeleportToRequest>, I>>(object: I): TeleportToRequest {
    const message = createBaseTeleportToRequest();
    message.worldCoordinates = (object.worldCoordinates !== undefined && object.worldCoordinates !== null)
      ? Vector2.fromPartial(object.worldCoordinates)
      : undefined;
    return message;
  }
}

function createBaseTriggerEmoteRequest(): TriggerEmoteRequest {
  return { predefinedEmote: "" };
}

export namespace TriggerEmoteRequest {
  export function encode(message: TriggerEmoteRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.predefinedEmote !== "") {
      writer.uint32(10).string(message.predefinedEmote);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): TriggerEmoteRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerEmoteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.predefinedEmote = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): TriggerEmoteRequest {
    return { predefinedEmote: isSet(object.predefinedEmote) ? String(object.predefinedEmote) : "" };
  }

  export function toJSON(message: TriggerEmoteRequest): unknown {
    const obj: any = {};
    message.predefinedEmote !== undefined && (obj.predefinedEmote = message.predefinedEmote);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<TriggerEmoteRequest>, I>>(base?: I): TriggerEmoteRequest {
    return TriggerEmoteRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<TriggerEmoteRequest>, I>>(object: I): TriggerEmoteRequest {
    const message = createBaseTriggerEmoteRequest();
    message.predefinedEmote = object.predefinedEmote ?? "";
    return message;
  }
}

function createBaseChangeRealmRequest(): ChangeRealmRequest {
  return { realm: "", message: undefined };
}

export namespace ChangeRealmRequest {
  export function encode(message: ChangeRealmRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.realm !== "") {
      writer.uint32(10).string(message.realm);
    }
    if (message.message !== undefined) {
      writer.uint32(18).string(message.message);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ChangeRealmRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangeRealmRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.realm = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ChangeRealmRequest {
    return {
      realm: isSet(object.realm) ? String(object.realm) : "",
      message: isSet(object.message) ? String(object.message) : undefined,
    };
  }

  export function toJSON(message: ChangeRealmRequest): unknown {
    const obj: any = {};
    message.realm !== undefined && (obj.realm = message.realm);
    message.message !== undefined && (obj.message = message.message);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ChangeRealmRequest>, I>>(base?: I): ChangeRealmRequest {
    return ChangeRealmRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ChangeRealmRequest>, I>>(object: I): ChangeRealmRequest {
    const message = createBaseChangeRealmRequest();
    message.realm = object.realm ?? "";
    message.message = object.message ?? undefined;
    return message;
  }
}

function createBaseOpenExternalUrlRequest(): OpenExternalUrlRequest {
  return { url: "" };
}

export namespace OpenExternalUrlRequest {
  export function encode(message: OpenExternalUrlRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): OpenExternalUrlRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenExternalUrlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): OpenExternalUrlRequest {
    return { url: isSet(object.url) ? String(object.url) : "" };
  }

  export function toJSON(message: OpenExternalUrlRequest): unknown {
    const obj: any = {};
    message.url !== undefined && (obj.url = message.url);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<OpenExternalUrlRequest>, I>>(base?: I): OpenExternalUrlRequest {
    return OpenExternalUrlRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<OpenExternalUrlRequest>, I>>(
    object: I,
  ): OpenExternalUrlRequest {
    const message = createBaseOpenExternalUrlRequest();
    message.url = object.url ?? "";
    return message;
  }
}

function createBaseOpenNftDialogRequest(): OpenNftDialogRequest {
  return { urn: "" };
}

export namespace OpenNftDialogRequest {
  export function encode(message: OpenNftDialogRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.urn !== "") {
      writer.uint32(10).string(message.urn);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): OpenNftDialogRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenNftDialogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.urn = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): OpenNftDialogRequest {
    return { urn: isSet(object.urn) ? String(object.urn) : "" };
  }

  export function toJSON(message: OpenNftDialogRequest): unknown {
    const obj: any = {};
    message.urn !== undefined && (obj.urn = message.urn);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<OpenNftDialogRequest>, I>>(base?: I): OpenNftDialogRequest {
    return OpenNftDialogRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<OpenNftDialogRequest>, I>>(object: I): OpenNftDialogRequest {
    const message = createBaseOpenNftDialogRequest();
    message.urn = object.urn ?? "";
    return message;
  }
}

function createBaseUnblockPointerRequest(): UnblockPointerRequest {
  return {};
}

export namespace UnblockPointerRequest {
  export function encode(_: UnblockPointerRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): UnblockPointerRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnblockPointerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): UnblockPointerRequest {
    return {};
  }

  export function toJSON(_: UnblockPointerRequest): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<UnblockPointerRequest>, I>>(base?: I): UnblockPointerRequest {
    return UnblockPointerRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<UnblockPointerRequest>, I>>(_: I): UnblockPointerRequest {
    const message = createBaseUnblockPointerRequest();
    return message;
  }
}

function createBaseCommsAdapterRequest(): CommsAdapterRequest {
  return { connectionString: "" };
}

export namespace CommsAdapterRequest {
  export function encode(message: CommsAdapterRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.connectionString !== "") {
      writer.uint32(10).string(message.connectionString);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): CommsAdapterRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommsAdapterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.connectionString = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): CommsAdapterRequest {
    return { connectionString: isSet(object.connectionString) ? String(object.connectionString) : "" };
  }

  export function toJSON(message: CommsAdapterRequest): unknown {
    const obj: any = {};
    message.connectionString !== undefined && (obj.connectionString = message.connectionString);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<CommsAdapterRequest>, I>>(base?: I): CommsAdapterRequest {
    return CommsAdapterRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<CommsAdapterRequest>, I>>(object: I): CommsAdapterRequest {
    const message = createBaseCommsAdapterRequest();
    message.connectionString = object.connectionString ?? "";
    return message;
  }
}

function createBaseTriggerSceneEmoteRequest(): TriggerSceneEmoteRequest {
  return { src: "", loop: undefined };
}

export namespace TriggerSceneEmoteRequest {
  export function encode(message: TriggerSceneEmoteRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.src !== "") {
      writer.uint32(10).string(message.src);
    }
    if (message.loop !== undefined) {
      writer.uint32(16).bool(message.loop);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): TriggerSceneEmoteRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerSceneEmoteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.src = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.loop = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): TriggerSceneEmoteRequest {
    return {
      src: isSet(object.src) ? String(object.src) : "",
      loop: isSet(object.loop) ? Boolean(object.loop) : undefined,
    };
  }

  export function toJSON(message: TriggerSceneEmoteRequest): unknown {
    const obj: any = {};
    message.src !== undefined && (obj.src = message.src);
    message.loop !== undefined && (obj.loop = message.loop);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<TriggerSceneEmoteRequest>, I>>(
    base?: I,
  ): TriggerSceneEmoteRequest {
    return TriggerSceneEmoteRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<TriggerSceneEmoteRequest>, I>>(
    object: I,
  ): TriggerSceneEmoteRequest {
    const message = createBaseTriggerSceneEmoteRequest();
    message.src = object.src ?? "";
    message.loop = object.loop ?? undefined;
    return message;
  }
}

function createBaseSuccessResponse(): SuccessResponse {
  return { success: false };
}

export namespace SuccessResponse {
  export function encode(message: SuccessResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success === true) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): SuccessResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuccessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): SuccessResponse {
    return { success: isSet(object.success) ? Boolean(object.success) : false };
  }

  export function toJSON(message: SuccessResponse): unknown {
    const obj: any = {};
    message.success !== undefined && (obj.success = message.success);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<SuccessResponse>, I>>(base?: I): SuccessResponse {
    return SuccessResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<SuccessResponse>, I>>(object: I): SuccessResponse {
    const message = createBaseSuccessResponse();
    message.success = object.success ?? false;
    return message;
  }
}

function createBaseTriggerEmoteResponse(): TriggerEmoteResponse {
  return {};
}

export namespace TriggerEmoteResponse {
  export function encode(_: TriggerEmoteResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): TriggerEmoteResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerEmoteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): TriggerEmoteResponse {
    return {};
  }

  export function toJSON(_: TriggerEmoteResponse): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<TriggerEmoteResponse>, I>>(base?: I): TriggerEmoteResponse {
    return TriggerEmoteResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<TriggerEmoteResponse>, I>>(_: I): TriggerEmoteResponse {
    const message = createBaseTriggerEmoteResponse();
    return message;
  }
}

function createBaseMovePlayerToResponse(): MovePlayerToResponse {
  return {};
}

export namespace MovePlayerToResponse {
  export function encode(_: MovePlayerToResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): MovePlayerToResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMovePlayerToResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): MovePlayerToResponse {
    return {};
  }

  export function toJSON(_: MovePlayerToResponse): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<MovePlayerToResponse>, I>>(base?: I): MovePlayerToResponse {
    return MovePlayerToResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<MovePlayerToResponse>, I>>(_: I): MovePlayerToResponse {
    const message = createBaseMovePlayerToResponse();
    return message;
  }
}

function createBaseTeleportToResponse(): TeleportToResponse {
  return {};
}

export namespace TeleportToResponse {
  export function encode(_: TeleportToResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): TeleportToResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTeleportToResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): TeleportToResponse {
    return {};
  }

  export function toJSON(_: TeleportToResponse): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<TeleportToResponse>, I>>(base?: I): TeleportToResponse {
    return TeleportToResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<TeleportToResponse>, I>>(_: I): TeleportToResponse {
    const message = createBaseTeleportToResponse();
    return message;
  }
}

export type RestrictedActionsServiceDefinition = typeof RestrictedActionsServiceDefinition;
export const RestrictedActionsServiceDefinition = {
  name: "RestrictedActionsService",
  fullName: "decentraland.kernel.apis.RestrictedActionsService",
  methods: {
    /** MovePlayerTo will move the player in a position relative to the current scene */
    movePlayerTo: {
      name: "MovePlayerTo",
      requestType: MovePlayerToRequest,
      requestStream: false,
      responseType: MovePlayerToResponse,
      responseStream: false,
      options: {},
    },
    /** TeleportTo will move the user to the specified world LAND parcel coordinates */
    teleportTo: {
      name: "TeleportTo",
      requestType: TeleportToRequest,
      requestStream: false,
      responseType: TeleportToResponse,
      responseStream: false,
      options: {},
    },
    /** TriggerEmote will trigger an emote in this current user */
    triggerEmote: {
      name: "TriggerEmote",
      requestType: TriggerEmoteRequest,
      requestStream: false,
      responseType: TriggerEmoteResponse,
      responseStream: false,
      options: {},
    },
    /** ChangeRealm prompts the user to change to a specific realm */
    changeRealm: {
      name: "ChangeRealm",
      requestType: ChangeRealmRequest,
      requestStream: false,
      responseType: SuccessResponse,
      responseStream: false,
      options: {},
    },
    /** OpenExternalUrl prompts the user to open an external link */
    openExternalUrl: {
      name: "OpenExternalUrl",
      requestType: OpenExternalUrlRequest,
      requestStream: false,
      responseType: SuccessResponse,
      responseStream: false,
      options: {},
    },
    /** OpenNftDialog opens an NFT dialog. */
    openNftDialog: {
      name: "OpenNftDialog",
      requestType: OpenNftDialogRequest,
      requestStream: false,
      responseType: SuccessResponse,
      responseStream: false,
      options: {},
    },
    /**
     * Asks the explorer to connect to other communications adapter, this feature
     * can be used to join private game servers
     */
    setCommunicationsAdapter: {
      name: "SetCommunicationsAdapter",
      requestType: CommsAdapterRequest,
      requestStream: false,
      responseType: SuccessResponse,
      responseStream: false,
      options: {},
    },
    /** TriggerSceneEmote will trigger an scene emote file in this current user */
    triggerSceneEmote: {
      name: "TriggerSceneEmote",
      requestType: TriggerSceneEmoteRequest,
      requestStream: false,
      responseType: SuccessResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
