/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "decentraland.kernel.apis";

export enum VideoTrackSourceType {
  VTST_UNKNOWN = 0,
  VTST_CAMERA = 1,
  VTST_SCREEN_SHARE = 2,
  UNRECOGNIZED = -1,
}

export function videoTrackSourceTypeFromJSON(object: any): VideoTrackSourceType {
  switch (object) {
    case 0:
    case "VTST_UNKNOWN":
      return VideoTrackSourceType.VTST_UNKNOWN;
    case 1:
    case "VTST_CAMERA":
      return VideoTrackSourceType.VTST_CAMERA;
    case 2:
    case "VTST_SCREEN_SHARE":
      return VideoTrackSourceType.VTST_SCREEN_SHARE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VideoTrackSourceType.UNRECOGNIZED;
  }
}

export function videoTrackSourceTypeToJSON(object: VideoTrackSourceType): string {
  switch (object) {
    case VideoTrackSourceType.VTST_UNKNOWN:
      return "VTST_UNKNOWN";
    case VideoTrackSourceType.VTST_CAMERA:
      return "VTST_CAMERA";
    case VideoTrackSourceType.VTST_SCREEN_SHARE:
      return "VTST_SCREEN_SHARE";
    case VideoTrackSourceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface VideoTracksActiveStreamsRequest {
}

export interface VideoTracksActiveStreamsResponse {
  streams: VideoTracksActiveStreamsData[];
}

export interface VideoTracksActiveStreamsData {
  identity: string;
  trackSid: string;
  sourceType: VideoTrackSourceType;
}

function createBaseVideoTracksActiveStreamsRequest(): VideoTracksActiveStreamsRequest {
  return {};
}

export namespace VideoTracksActiveStreamsRequest {
  export function encode(_: VideoTracksActiveStreamsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): VideoTracksActiveStreamsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoTracksActiveStreamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): VideoTracksActiveStreamsRequest {
    return {};
  }

  export function toJSON(_: VideoTracksActiveStreamsRequest): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<VideoTracksActiveStreamsRequest>, I>>(
    base?: I,
  ): VideoTracksActiveStreamsRequest {
    return VideoTracksActiveStreamsRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<VideoTracksActiveStreamsRequest>, I>>(
    _: I,
  ): VideoTracksActiveStreamsRequest {
    const message = createBaseVideoTracksActiveStreamsRequest();
    return message;
  }
}

function createBaseVideoTracksActiveStreamsResponse(): VideoTracksActiveStreamsResponse {
  return { streams: [] };
}

export namespace VideoTracksActiveStreamsResponse {
  export function encode(
    message: VideoTracksActiveStreamsResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.streams) {
      VideoTracksActiveStreamsData.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): VideoTracksActiveStreamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoTracksActiveStreamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.streams.push(VideoTracksActiveStreamsData.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): VideoTracksActiveStreamsResponse {
    return {
      streams: Array.isArray(object?.streams)
        ? object.streams.map((e: any) => VideoTracksActiveStreamsData.fromJSON(e))
        : [],
    };
  }

  export function toJSON(message: VideoTracksActiveStreamsResponse): unknown {
    const obj: any = {};
    if (message.streams) {
      obj.streams = message.streams.map((e) => e ? VideoTracksActiveStreamsData.toJSON(e) : undefined);
    } else {
      obj.streams = [];
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<VideoTracksActiveStreamsResponse>, I>>(
    base?: I,
  ): VideoTracksActiveStreamsResponse {
    return VideoTracksActiveStreamsResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<VideoTracksActiveStreamsResponse>, I>>(
    object: I,
  ): VideoTracksActiveStreamsResponse {
    const message = createBaseVideoTracksActiveStreamsResponse();
    message.streams = object.streams?.map((e) => VideoTracksActiveStreamsData.fromPartial(e)) || [];
    return message;
  }
}

function createBaseVideoTracksActiveStreamsData(): VideoTracksActiveStreamsData {
  return { identity: "", trackSid: "", sourceType: 0 };
}

export namespace VideoTracksActiveStreamsData {
  export function encode(message: VideoTracksActiveStreamsData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.identity !== "") {
      writer.uint32(10).string(message.identity);
    }
    if (message.trackSid !== "") {
      writer.uint32(18).string(message.trackSid);
    }
    if (message.sourceType !== 0) {
      writer.uint32(24).int32(message.sourceType);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): VideoTracksActiveStreamsData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoTracksActiveStreamsData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.identity = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.trackSid = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.sourceType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): VideoTracksActiveStreamsData {
    return {
      identity: isSet(object.identity) ? String(object.identity) : "",
      trackSid: isSet(object.trackSid) ? String(object.trackSid) : "",
      sourceType: isSet(object.sourceType) ? videoTrackSourceTypeFromJSON(object.sourceType) : 0,
    };
  }

  export function toJSON(message: VideoTracksActiveStreamsData): unknown {
    const obj: any = {};
    message.identity !== undefined && (obj.identity = message.identity);
    message.trackSid !== undefined && (obj.trackSid = message.trackSid);
    message.sourceType !== undefined && (obj.sourceType = videoTrackSourceTypeToJSON(message.sourceType));
    return obj;
  }

  export function create<I extends Exact<DeepPartial<VideoTracksActiveStreamsData>, I>>(
    base?: I,
  ): VideoTracksActiveStreamsData {
    return VideoTracksActiveStreamsData.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<VideoTracksActiveStreamsData>, I>>(
    object: I,
  ): VideoTracksActiveStreamsData {
    const message = createBaseVideoTracksActiveStreamsData();
    message.identity = object.identity ?? "";
    message.trackSid = object.trackSid ?? "";
    message.sourceType = object.sourceType ?? 0;
    return message;
  }
}

export type CommsApiServiceDefinition = typeof CommsApiServiceDefinition;
export const CommsApiServiceDefinition = {
  name: "CommsApiService",
  fullName: "decentraland.kernel.apis.CommsApiService",
  methods: {
    getActiveVideoStreams: {
      name: "GetActiveVideoStreams",
      requestType: VideoTracksActiveStreamsRequest,
      requestStream: false,
      responseType: VideoTracksActiveStreamsResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
