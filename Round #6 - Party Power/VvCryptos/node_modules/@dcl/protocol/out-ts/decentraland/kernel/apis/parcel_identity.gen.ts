/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { ContentMapping } from "../../common/content_mapping.gen";

export const protobufPackage = "decentraland.kernel.apis";

export interface MappingsResponse {
  parcelId: string;
  rootCid: string;
  contents: ContentMapping[];
}

export interface Land {
  sceneId: string;
  sceneJsonData: string;
  baseUrl: string;
  baseUrlBundles: string;
  mappingsResponse: MappingsResponse | undefined;
}

export interface GetParcelRequest {
}

export interface GetParcelResponse {
  land: Land | undefined;
  cid: string;
}

export interface GetSceneIdRequest {
}

export interface GetSceneIdResponse {
  sceneId: string;
}

export interface GetIsEmptyRequest {
}

export interface GetIsEmptyResponse {
  isEmpty: boolean;
}

function createBaseMappingsResponse(): MappingsResponse {
  return { parcelId: "", rootCid: "", contents: [] };
}

export namespace MappingsResponse {
  export function encode(message: MappingsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.parcelId !== "") {
      writer.uint32(10).string(message.parcelId);
    }
    if (message.rootCid !== "") {
      writer.uint32(18).string(message.rootCid);
    }
    for (const v of message.contents) {
      ContentMapping.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): MappingsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMappingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parcelId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rootCid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.contents.push(ContentMapping.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): MappingsResponse {
    return {
      parcelId: isSet(object.parcelId) ? String(object.parcelId) : "",
      rootCid: isSet(object.rootCid) ? String(object.rootCid) : "",
      contents: Array.isArray(object?.contents) ? object.contents.map((e: any) => ContentMapping.fromJSON(e)) : [],
    };
  }

  export function toJSON(message: MappingsResponse): unknown {
    const obj: any = {};
    message.parcelId !== undefined && (obj.parcelId = message.parcelId);
    message.rootCid !== undefined && (obj.rootCid = message.rootCid);
    if (message.contents) {
      obj.contents = message.contents.map((e) => e ? ContentMapping.toJSON(e) : undefined);
    } else {
      obj.contents = [];
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<MappingsResponse>, I>>(base?: I): MappingsResponse {
    return MappingsResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<MappingsResponse>, I>>(object: I): MappingsResponse {
    const message = createBaseMappingsResponse();
    message.parcelId = object.parcelId ?? "";
    message.rootCid = object.rootCid ?? "";
    message.contents = object.contents?.map((e) => ContentMapping.fromPartial(e)) || [];
    return message;
  }
}

function createBaseLand(): Land {
  return { sceneId: "", sceneJsonData: "", baseUrl: "", baseUrlBundles: "", mappingsResponse: undefined };
}

export namespace Land {
  export function encode(message: Land, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sceneId !== "") {
      writer.uint32(10).string(message.sceneId);
    }
    if (message.sceneJsonData !== "") {
      writer.uint32(18).string(message.sceneJsonData);
    }
    if (message.baseUrl !== "") {
      writer.uint32(26).string(message.baseUrl);
    }
    if (message.baseUrlBundles !== "") {
      writer.uint32(34).string(message.baseUrlBundles);
    }
    if (message.mappingsResponse !== undefined) {
      MappingsResponse.encode(message.mappingsResponse, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): Land {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sceneId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sceneJsonData = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.baseUrl = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.baseUrlBundles = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.mappingsResponse = MappingsResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): Land {
    return {
      sceneId: isSet(object.sceneId) ? String(object.sceneId) : "",
      sceneJsonData: isSet(object.sceneJsonData) ? String(object.sceneJsonData) : "",
      baseUrl: isSet(object.baseUrl) ? String(object.baseUrl) : "",
      baseUrlBundles: isSet(object.baseUrlBundles) ? String(object.baseUrlBundles) : "",
      mappingsResponse: isSet(object.mappingsResponse) ? MappingsResponse.fromJSON(object.mappingsResponse) : undefined,
    };
  }

  export function toJSON(message: Land): unknown {
    const obj: any = {};
    message.sceneId !== undefined && (obj.sceneId = message.sceneId);
    message.sceneJsonData !== undefined && (obj.sceneJsonData = message.sceneJsonData);
    message.baseUrl !== undefined && (obj.baseUrl = message.baseUrl);
    message.baseUrlBundles !== undefined && (obj.baseUrlBundles = message.baseUrlBundles);
    message.mappingsResponse !== undefined &&
      (obj.mappingsResponse = message.mappingsResponse ? MappingsResponse.toJSON(message.mappingsResponse) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<Land>, I>>(base?: I): Land {
    return Land.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<Land>, I>>(object: I): Land {
    const message = createBaseLand();
    message.sceneId = object.sceneId ?? "";
    message.sceneJsonData = object.sceneJsonData ?? "";
    message.baseUrl = object.baseUrl ?? "";
    message.baseUrlBundles = object.baseUrlBundles ?? "";
    message.mappingsResponse = (object.mappingsResponse !== undefined && object.mappingsResponse !== null)
      ? MappingsResponse.fromPartial(object.mappingsResponse)
      : undefined;
    return message;
  }
}

function createBaseGetParcelRequest(): GetParcelRequest {
  return {};
}

export namespace GetParcelRequest {
  export function encode(_: GetParcelRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetParcelRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetParcelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): GetParcelRequest {
    return {};
  }

  export function toJSON(_: GetParcelRequest): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetParcelRequest>, I>>(base?: I): GetParcelRequest {
    return GetParcelRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetParcelRequest>, I>>(_: I): GetParcelRequest {
    const message = createBaseGetParcelRequest();
    return message;
  }
}

function createBaseGetParcelResponse(): GetParcelResponse {
  return { land: undefined, cid: "" };
}

export namespace GetParcelResponse {
  export function encode(message: GetParcelResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.land !== undefined) {
      Land.encode(message.land, writer.uint32(10).fork()).ldelim();
    }
    if (message.cid !== "") {
      writer.uint32(18).string(message.cid);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetParcelResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetParcelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.land = Land.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): GetParcelResponse {
    return {
      land: isSet(object.land) ? Land.fromJSON(object.land) : undefined,
      cid: isSet(object.cid) ? String(object.cid) : "",
    };
  }

  export function toJSON(message: GetParcelResponse): unknown {
    const obj: any = {};
    message.land !== undefined && (obj.land = message.land ? Land.toJSON(message.land) : undefined);
    message.cid !== undefined && (obj.cid = message.cid);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetParcelResponse>, I>>(base?: I): GetParcelResponse {
    return GetParcelResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetParcelResponse>, I>>(object: I): GetParcelResponse {
    const message = createBaseGetParcelResponse();
    message.land = (object.land !== undefined && object.land !== null) ? Land.fromPartial(object.land) : undefined;
    message.cid = object.cid ?? "";
    return message;
  }
}

function createBaseGetSceneIdRequest(): GetSceneIdRequest {
  return {};
}

export namespace GetSceneIdRequest {
  export function encode(_: GetSceneIdRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetSceneIdRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSceneIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): GetSceneIdRequest {
    return {};
  }

  export function toJSON(_: GetSceneIdRequest): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetSceneIdRequest>, I>>(base?: I): GetSceneIdRequest {
    return GetSceneIdRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetSceneIdRequest>, I>>(_: I): GetSceneIdRequest {
    const message = createBaseGetSceneIdRequest();
    return message;
  }
}

function createBaseGetSceneIdResponse(): GetSceneIdResponse {
  return { sceneId: "" };
}

export namespace GetSceneIdResponse {
  export function encode(message: GetSceneIdResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sceneId !== "") {
      writer.uint32(10).string(message.sceneId);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetSceneIdResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSceneIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sceneId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): GetSceneIdResponse {
    return { sceneId: isSet(object.sceneId) ? String(object.sceneId) : "" };
  }

  export function toJSON(message: GetSceneIdResponse): unknown {
    const obj: any = {};
    message.sceneId !== undefined && (obj.sceneId = message.sceneId);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetSceneIdResponse>, I>>(base?: I): GetSceneIdResponse {
    return GetSceneIdResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetSceneIdResponse>, I>>(object: I): GetSceneIdResponse {
    const message = createBaseGetSceneIdResponse();
    message.sceneId = object.sceneId ?? "";
    return message;
  }
}

function createBaseGetIsEmptyRequest(): GetIsEmptyRequest {
  return {};
}

export namespace GetIsEmptyRequest {
  export function encode(_: GetIsEmptyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetIsEmptyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIsEmptyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): GetIsEmptyRequest {
    return {};
  }

  export function toJSON(_: GetIsEmptyRequest): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetIsEmptyRequest>, I>>(base?: I): GetIsEmptyRequest {
    return GetIsEmptyRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetIsEmptyRequest>, I>>(_: I): GetIsEmptyRequest {
    const message = createBaseGetIsEmptyRequest();
    return message;
  }
}

function createBaseGetIsEmptyResponse(): GetIsEmptyResponse {
  return { isEmpty: false };
}

export namespace GetIsEmptyResponse {
  export function encode(message: GetIsEmptyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.isEmpty === true) {
      writer.uint32(8).bool(message.isEmpty);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetIsEmptyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIsEmptyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.isEmpty = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): GetIsEmptyResponse {
    return { isEmpty: isSet(object.isEmpty) ? Boolean(object.isEmpty) : false };
  }

  export function toJSON(message: GetIsEmptyResponse): unknown {
    const obj: any = {};
    message.isEmpty !== undefined && (obj.isEmpty = message.isEmpty);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetIsEmptyResponse>, I>>(base?: I): GetIsEmptyResponse {
    return GetIsEmptyResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetIsEmptyResponse>, I>>(object: I): GetIsEmptyResponse {
    const message = createBaseGetIsEmptyResponse();
    message.isEmpty = object.isEmpty ?? false;
    return message;
  }
}

export type ParcelIdentityServiceDefinition = typeof ParcelIdentityServiceDefinition;
export const ParcelIdentityServiceDefinition = {
  name: "ParcelIdentityService",
  fullName: "decentraland.kernel.apis.ParcelIdentityService",
  methods: {
    /** @deprecated, only available for SDK6 compatibility */
    getParcel: {
      name: "GetParcel",
      requestType: GetParcelRequest,
      requestStream: false,
      responseType: GetParcelResponse,
      responseStream: false,
      options: {},
    },
    /** @deprecated, only available for SDK6 compatibility */
    getSceneId: {
      name: "GetSceneId",
      requestType: GetSceneIdRequest,
      requestStream: false,
      responseType: GetSceneIdResponse,
      responseStream: false,
      options: {},
    },
    /** @deprecated, only available for SDK6 compatibility */
    getIsEmpty: {
      name: "GetIsEmpty",
      requestType: GetIsEmptyRequest,
      requestStream: false,
      responseType: GetIsEmptyResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
