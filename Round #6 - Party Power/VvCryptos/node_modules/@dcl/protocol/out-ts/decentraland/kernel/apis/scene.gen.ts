/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { ContentMapping } from "../../common/content_mapping.gen";

export const protobufPackage = "decentraland.kernel.apis";

export interface GetSceneRequest {
}

export interface GetSceneResponse {
  cid: string;
  metadata: string;
  baseUrl: string;
  contents: ContentMapping[];
}

function createBaseGetSceneRequest(): GetSceneRequest {
  return {};
}

export namespace GetSceneRequest {
  export function encode(_: GetSceneRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetSceneRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSceneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): GetSceneRequest {
    return {};
  }

  export function toJSON(_: GetSceneRequest): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetSceneRequest>, I>>(base?: I): GetSceneRequest {
    return GetSceneRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetSceneRequest>, I>>(_: I): GetSceneRequest {
    const message = createBaseGetSceneRequest();
    return message;
  }
}

function createBaseGetSceneResponse(): GetSceneResponse {
  return { cid: "", metadata: "", baseUrl: "", contents: [] };
}

export namespace GetSceneResponse {
  export function encode(message: GetSceneResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.cid !== "") {
      writer.uint32(10).string(message.cid);
    }
    if (message.metadata !== "") {
      writer.uint32(18).string(message.metadata);
    }
    if (message.baseUrl !== "") {
      writer.uint32(26).string(message.baseUrl);
    }
    for (const v of message.contents) {
      ContentMapping.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetSceneResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSceneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cid = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadata = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.baseUrl = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.contents.push(ContentMapping.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): GetSceneResponse {
    return {
      cid: isSet(object.cid) ? String(object.cid) : "",
      metadata: isSet(object.metadata) ? String(object.metadata) : "",
      baseUrl: isSet(object.baseUrl) ? String(object.baseUrl) : "",
      contents: Array.isArray(object?.contents) ? object.contents.map((e: any) => ContentMapping.fromJSON(e)) : [],
    };
  }

  export function toJSON(message: GetSceneResponse): unknown {
    const obj: any = {};
    message.cid !== undefined && (obj.cid = message.cid);
    message.metadata !== undefined && (obj.metadata = message.metadata);
    message.baseUrl !== undefined && (obj.baseUrl = message.baseUrl);
    if (message.contents) {
      obj.contents = message.contents.map((e) => e ? ContentMapping.toJSON(e) : undefined);
    } else {
      obj.contents = [];
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetSceneResponse>, I>>(base?: I): GetSceneResponse {
    return GetSceneResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetSceneResponse>, I>>(object: I): GetSceneResponse {
    const message = createBaseGetSceneResponse();
    message.cid = object.cid ?? "";
    message.metadata = object.metadata ?? "";
    message.baseUrl = object.baseUrl ?? "";
    message.contents = object.contents?.map((e) => ContentMapping.fromPartial(e)) || [];
    return message;
  }
}

export type SceneServiceDefinition = typeof SceneServiceDefinition;
export const SceneServiceDefinition = {
  name: "SceneService",
  fullName: "decentraland.kernel.apis.SceneService",
  methods: {
    getSceneInfo: {
      name: "GetSceneInfo",
      requestType: GetSceneRequest,
      requestStream: false,
      responseType: GetSceneResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
