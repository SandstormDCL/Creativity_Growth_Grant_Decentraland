/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { UserData } from "../../common/sdk/user_data.gen";

export const protobufPackage = "decentraland.kernel.apis";

export interface Player {
  userId: string;
}

export interface PlayersGetUserDataResponse {
  data?: UserData | undefined;
}

export interface PlayerListResponse {
  players: Player[];
}

export interface GetPlayerDataRequest {
  userId: string;
}

export interface GetPlayersInSceneRequest {
}

export interface GetConnectedPlayersRequest {
}

function createBasePlayer(): Player {
  return { userId: "" };
}

export namespace Player {
  export function encode(message: Player, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): Player {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): Player {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  }

  export function toJSON(message: Player): unknown {
    const obj: any = {};
    message.userId !== undefined && (obj.userId = message.userId);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<Player>, I>>(base?: I): Player {
    return Player.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<Player>, I>>(object: I): Player {
    const message = createBasePlayer();
    message.userId = object.userId ?? "";
    return message;
  }
}

function createBasePlayersGetUserDataResponse(): PlayersGetUserDataResponse {
  return { data: undefined };
}

export namespace PlayersGetUserDataResponse {
  export function encode(message: PlayersGetUserDataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== undefined) {
      UserData.encode(message.data, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PlayersGetUserDataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayersGetUserDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = UserData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PlayersGetUserDataResponse {
    return { data: isSet(object.data) ? UserData.fromJSON(object.data) : undefined };
  }

  export function toJSON(message: PlayersGetUserDataResponse): unknown {
    const obj: any = {};
    message.data !== undefined && (obj.data = message.data ? UserData.toJSON(message.data) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PlayersGetUserDataResponse>, I>>(
    base?: I,
  ): PlayersGetUserDataResponse {
    return PlayersGetUserDataResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PlayersGetUserDataResponse>, I>>(
    object: I,
  ): PlayersGetUserDataResponse {
    const message = createBasePlayersGetUserDataResponse();
    message.data = (object.data !== undefined && object.data !== null) ? UserData.fromPartial(object.data) : undefined;
    return message;
  }
}

function createBasePlayerListResponse(): PlayerListResponse {
  return { players: [] };
}

export namespace PlayerListResponse {
  export function encode(message: PlayerListResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.players) {
      Player.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PlayerListResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.players.push(Player.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PlayerListResponse {
    return { players: Array.isArray(object?.players) ? object.players.map((e: any) => Player.fromJSON(e)) : [] };
  }

  export function toJSON(message: PlayerListResponse): unknown {
    const obj: any = {};
    if (message.players) {
      obj.players = message.players.map((e) => e ? Player.toJSON(e) : undefined);
    } else {
      obj.players = [];
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PlayerListResponse>, I>>(base?: I): PlayerListResponse {
    return PlayerListResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PlayerListResponse>, I>>(object: I): PlayerListResponse {
    const message = createBasePlayerListResponse();
    message.players = object.players?.map((e) => Player.fromPartial(e)) || [];
    return message;
  }
}

function createBaseGetPlayerDataRequest(): GetPlayerDataRequest {
  return { userId: "" };
}

export namespace GetPlayerDataRequest {
  export function encode(message: GetPlayerDataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetPlayerDataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlayerDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): GetPlayerDataRequest {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  }

  export function toJSON(message: GetPlayerDataRequest): unknown {
    const obj: any = {};
    message.userId !== undefined && (obj.userId = message.userId);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetPlayerDataRequest>, I>>(base?: I): GetPlayerDataRequest {
    return GetPlayerDataRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetPlayerDataRequest>, I>>(object: I): GetPlayerDataRequest {
    const message = createBaseGetPlayerDataRequest();
    message.userId = object.userId ?? "";
    return message;
  }
}

function createBaseGetPlayersInSceneRequest(): GetPlayersInSceneRequest {
  return {};
}

export namespace GetPlayersInSceneRequest {
  export function encode(_: GetPlayersInSceneRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetPlayersInSceneRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlayersInSceneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): GetPlayersInSceneRequest {
    return {};
  }

  export function toJSON(_: GetPlayersInSceneRequest): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetPlayersInSceneRequest>, I>>(
    base?: I,
  ): GetPlayersInSceneRequest {
    return GetPlayersInSceneRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetPlayersInSceneRequest>, I>>(
    _: I,
  ): GetPlayersInSceneRequest {
    const message = createBaseGetPlayersInSceneRequest();
    return message;
  }
}

function createBaseGetConnectedPlayersRequest(): GetConnectedPlayersRequest {
  return {};
}

export namespace GetConnectedPlayersRequest {
  export function encode(_: GetConnectedPlayersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetConnectedPlayersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConnectedPlayersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): GetConnectedPlayersRequest {
    return {};
  }

  export function toJSON(_: GetConnectedPlayersRequest): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetConnectedPlayersRequest>, I>>(
    base?: I,
  ): GetConnectedPlayersRequest {
    return GetConnectedPlayersRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetConnectedPlayersRequest>, I>>(
    _: I,
  ): GetConnectedPlayersRequest {
    const message = createBaseGetConnectedPlayersRequest();
    return message;
  }
}

export type PlayersServiceDefinition = typeof PlayersServiceDefinition;
export const PlayersServiceDefinition = {
  name: "PlayersService",
  fullName: "decentraland.kernel.apis.PlayersService",
  methods: {
    /**
     * Returns data about a specific player, by id
     * NOTE: To be deprecated after implementing foreign-entities and once the avatar scene uses SDK7
     */
    getPlayerData: {
      name: "GetPlayerData",
      requestType: GetPlayerDataRequest,
      requestStream: false,
      responseType: PlayersGetUserDataResponse,
      responseStream: false,
      options: {},
    },
    /**
     * Returns a list of all the ids of players who are currently standing within the parcels of the scene
     * NOTE: To be deprecated after implementing foreign-entities and once the avatar scene uses SDK7
     */
    getPlayersInScene: {
      name: "GetPlayersInScene",
      requestType: GetPlayersInSceneRequest,
      requestStream: false,
      responseType: PlayerListResponse,
      responseStream: false,
      options: {},
    },
    /**
     * Returns a list of all the ids of players who are currently connected to the same server and grouped together
     * NOTE: To be deprecated after implementing foreign-entities and once the avatar scene uses SDK7
     */
    getConnectedPlayers: {
      name: "GetConnectedPlayers",
      requestType: GetConnectedPlayersRequest,
      requestStream: false,
      responseType: PlayerListResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
