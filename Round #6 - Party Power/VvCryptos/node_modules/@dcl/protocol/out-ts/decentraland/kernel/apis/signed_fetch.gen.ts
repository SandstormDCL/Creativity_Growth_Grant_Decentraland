/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "decentraland.kernel.apis";

export interface FlatFetchInit {
  method?: string | undefined;
  body?: string | undefined;
  headers: { [key: string]: string };
}

export interface FlatFetchInit_HeadersEntry {
  key: string;
  value: string;
}

export interface FlatFetchResponse {
  ok: boolean;
  status: number;
  statusText: string;
  headers: { [key: string]: string };
  body: string;
}

export interface FlatFetchResponse_HeadersEntry {
  key: string;
  value: string;
}

export interface SignedFetchRequest {
  url: string;
  init?: FlatFetchInit | undefined;
}

export interface GetHeadersResponse {
  headers: { [key: string]: string };
}

export interface GetHeadersResponse_HeadersEntry {
  key: string;
  value: string;
}

function createBaseFlatFetchInit(): FlatFetchInit {
  return { method: undefined, body: undefined, headers: {} };
}

export namespace FlatFetchInit {
  export function encode(message: FlatFetchInit, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.method !== undefined) {
      writer.uint32(10).string(message.method);
    }
    if (message.body !== undefined) {
      writer.uint32(18).string(message.body);
    }
    Object.entries(message.headers).forEach(([key, value]) => {
      FlatFetchInit_HeadersEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).ldelim();
    });
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): FlatFetchInit {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlatFetchInit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.method = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.body = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = FlatFetchInit_HeadersEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.headers[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): FlatFetchInit {
    return {
      method: isSet(object.method) ? String(object.method) : undefined,
      body: isSet(object.body) ? String(object.body) : undefined,
      headers: isObject(object.headers)
        ? Object.entries(object.headers).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  }

  export function toJSON(message: FlatFetchInit): unknown {
    const obj: any = {};
    message.method !== undefined && (obj.method = message.method);
    message.body !== undefined && (obj.body = message.body);
    obj.headers = {};
    if (message.headers) {
      Object.entries(message.headers).forEach(([k, v]) => {
        obj.headers[k] = v;
      });
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<FlatFetchInit>, I>>(base?: I): FlatFetchInit {
    return FlatFetchInit.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<FlatFetchInit>, I>>(object: I): FlatFetchInit {
    const message = createBaseFlatFetchInit();
    message.method = object.method ?? undefined;
    message.body = object.body ?? undefined;
    message.headers = Object.entries(object.headers ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = String(value);
      }
      return acc;
    }, {});
    return message;
  }
}

function createBaseFlatFetchInit_HeadersEntry(): FlatFetchInit_HeadersEntry {
  return { key: "", value: "" };
}

export namespace FlatFetchInit_HeadersEntry {
  export function encode(message: FlatFetchInit_HeadersEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): FlatFetchInit_HeadersEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlatFetchInit_HeadersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): FlatFetchInit_HeadersEntry {
    return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
  }

  export function toJSON(message: FlatFetchInit_HeadersEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<FlatFetchInit_HeadersEntry>, I>>(
    base?: I,
  ): FlatFetchInit_HeadersEntry {
    return FlatFetchInit_HeadersEntry.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<FlatFetchInit_HeadersEntry>, I>>(
    object: I,
  ): FlatFetchInit_HeadersEntry {
    const message = createBaseFlatFetchInit_HeadersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  }
}

function createBaseFlatFetchResponse(): FlatFetchResponse {
  return { ok: false, status: 0, statusText: "", headers: {}, body: "" };
}

export namespace FlatFetchResponse {
  export function encode(message: FlatFetchResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ok === true) {
      writer.uint32(8).bool(message.ok);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.statusText !== "") {
      writer.uint32(26).string(message.statusText);
    }
    Object.entries(message.headers).forEach(([key, value]) => {
      FlatFetchResponse_HeadersEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).ldelim();
    });
    if (message.body !== "") {
      writer.uint32(42).string(message.body);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): FlatFetchResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlatFetchResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.ok = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.statusText = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = FlatFetchResponse_HeadersEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.headers[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.body = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): FlatFetchResponse {
    return {
      ok: isSet(object.ok) ? Boolean(object.ok) : false,
      status: isSet(object.status) ? Number(object.status) : 0,
      statusText: isSet(object.statusText) ? String(object.statusText) : "",
      headers: isObject(object.headers)
        ? Object.entries(object.headers).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      body: isSet(object.body) ? String(object.body) : "",
    };
  }

  export function toJSON(message: FlatFetchResponse): unknown {
    const obj: any = {};
    message.ok !== undefined && (obj.ok = message.ok);
    message.status !== undefined && (obj.status = Math.round(message.status));
    message.statusText !== undefined && (obj.statusText = message.statusText);
    obj.headers = {};
    if (message.headers) {
      Object.entries(message.headers).forEach(([k, v]) => {
        obj.headers[k] = v;
      });
    }
    message.body !== undefined && (obj.body = message.body);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<FlatFetchResponse>, I>>(base?: I): FlatFetchResponse {
    return FlatFetchResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<FlatFetchResponse>, I>>(object: I): FlatFetchResponse {
    const message = createBaseFlatFetchResponse();
    message.ok = object.ok ?? false;
    message.status = object.status ?? 0;
    message.statusText = object.statusText ?? "";
    message.headers = Object.entries(object.headers ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = String(value);
      }
      return acc;
    }, {});
    message.body = object.body ?? "";
    return message;
  }
}

function createBaseFlatFetchResponse_HeadersEntry(): FlatFetchResponse_HeadersEntry {
  return { key: "", value: "" };
}

export namespace FlatFetchResponse_HeadersEntry {
  export function encode(
    message: FlatFetchResponse_HeadersEntry,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): FlatFetchResponse_HeadersEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlatFetchResponse_HeadersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): FlatFetchResponse_HeadersEntry {
    return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
  }

  export function toJSON(message: FlatFetchResponse_HeadersEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<FlatFetchResponse_HeadersEntry>, I>>(
    base?: I,
  ): FlatFetchResponse_HeadersEntry {
    return FlatFetchResponse_HeadersEntry.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<FlatFetchResponse_HeadersEntry>, I>>(
    object: I,
  ): FlatFetchResponse_HeadersEntry {
    const message = createBaseFlatFetchResponse_HeadersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  }
}

function createBaseSignedFetchRequest(): SignedFetchRequest {
  return { url: "", init: undefined };
}

export namespace SignedFetchRequest {
  export function encode(message: SignedFetchRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.init !== undefined) {
      FlatFetchInit.encode(message.init, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): SignedFetchRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignedFetchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.init = FlatFetchInit.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): SignedFetchRequest {
    return {
      url: isSet(object.url) ? String(object.url) : "",
      init: isSet(object.init) ? FlatFetchInit.fromJSON(object.init) : undefined,
    };
  }

  export function toJSON(message: SignedFetchRequest): unknown {
    const obj: any = {};
    message.url !== undefined && (obj.url = message.url);
    message.init !== undefined && (obj.init = message.init ? FlatFetchInit.toJSON(message.init) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<SignedFetchRequest>, I>>(base?: I): SignedFetchRequest {
    return SignedFetchRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<SignedFetchRequest>, I>>(object: I): SignedFetchRequest {
    const message = createBaseSignedFetchRequest();
    message.url = object.url ?? "";
    message.init = (object.init !== undefined && object.init !== null)
      ? FlatFetchInit.fromPartial(object.init)
      : undefined;
    return message;
  }
}

function createBaseGetHeadersResponse(): GetHeadersResponse {
  return { headers: {} };
}

export namespace GetHeadersResponse {
  export function encode(message: GetHeadersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    Object.entries(message.headers).forEach(([key, value]) => {
      GetHeadersResponse_HeadersEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).ldelim();
    });
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetHeadersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHeadersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = GetHeadersResponse_HeadersEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.headers[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): GetHeadersResponse {
    return {
      headers: isObject(object.headers)
        ? Object.entries(object.headers).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  }

  export function toJSON(message: GetHeadersResponse): unknown {
    const obj: any = {};
    obj.headers = {};
    if (message.headers) {
      Object.entries(message.headers).forEach(([k, v]) => {
        obj.headers[k] = v;
      });
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetHeadersResponse>, I>>(base?: I): GetHeadersResponse {
    return GetHeadersResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetHeadersResponse>, I>>(object: I): GetHeadersResponse {
    const message = createBaseGetHeadersResponse();
    message.headers = Object.entries(object.headers ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = String(value);
      }
      return acc;
    }, {});
    return message;
  }
}

function createBaseGetHeadersResponse_HeadersEntry(): GetHeadersResponse_HeadersEntry {
  return { key: "", value: "" };
}

export namespace GetHeadersResponse_HeadersEntry {
  export function encode(
    message: GetHeadersResponse_HeadersEntry,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetHeadersResponse_HeadersEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHeadersResponse_HeadersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): GetHeadersResponse_HeadersEntry {
    return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
  }

  export function toJSON(message: GetHeadersResponse_HeadersEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetHeadersResponse_HeadersEntry>, I>>(
    base?: I,
  ): GetHeadersResponse_HeadersEntry {
    return GetHeadersResponse_HeadersEntry.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetHeadersResponse_HeadersEntry>, I>>(
    object: I,
  ): GetHeadersResponse_HeadersEntry {
    const message = createBaseGetHeadersResponse_HeadersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  }
}

export type SignedFetchServiceDefinition = typeof SignedFetchServiceDefinition;
export const SignedFetchServiceDefinition = {
  name: "SignedFetchService",
  fullName: "decentraland.kernel.apis.SignedFetchService",
  methods: {
    /**
     * SignedFetch is used to authenticate JSON requests in name of the users,
     * a special scoped signature is generated following the https://adr.decentraland.org/adr/ADR-44
     */
    signedFetch: {
      name: "SignedFetch",
      requestType: SignedFetchRequest,
      requestStream: false,
      responseType: FlatFetchResponse,
      responseStream: false,
      options: {},
    },
    getHeaders: {
      name: "GetHeaders",
      requestType: SignedFetchRequest,
      requestStream: false,
      responseType: GetHeadersResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
