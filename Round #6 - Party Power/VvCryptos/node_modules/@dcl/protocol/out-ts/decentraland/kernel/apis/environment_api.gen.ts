/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { ContentMapping } from "../../common/content_mapping.gen";

export const protobufPackage = "decentraland.kernel.apis";

export interface MinimalRunnableEntity {
  content: ContentMapping[];
  metadataJson: string;
}

export interface BootstrapDataResponse {
  id: string;
  baseUrl: string;
  entity: MinimalRunnableEntity | undefined;
  useFPSThrottling: boolean;
}

export interface PreviewModeResponse {
  isPreview: boolean;
}

export interface AreUnsafeRequestAllowedResponse {
  status: boolean;
}

export interface GetPlatformResponse {
  platform: string;
}

export interface EnvironmentRealm {
  domain: string;
  layer: string;
  room: string;
  serverName: string;
  displayName: string;
  protocol: string;
}

export interface GetCurrentRealmResponse {
  currentRealm?: EnvironmentRealm | undefined;
}

export interface GetExplorerConfigurationResponse {
  clientUri: string;
  configurations: { [key: string]: string };
}

export interface GetExplorerConfigurationResponse_ConfigurationsEntry {
  key: string;
  value: string;
}

export interface GetDecentralandTimeResponse {
  seconds: number;
}

export interface GetBootstrapDataRequest {
}

export interface IsPreviewModeRequest {
}

export interface GetPlatformRequest {
}

export interface AreUnsafeRequestAllowedRequest {
}

export interface GetCurrentRealmRequest {
}

export interface GetExplorerConfigurationRequest {
}

export interface GetDecentralandTimeRequest {
}

function createBaseMinimalRunnableEntity(): MinimalRunnableEntity {
  return { content: [], metadataJson: "" };
}

export namespace MinimalRunnableEntity {
  export function encode(message: MinimalRunnableEntity, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.content) {
      ContentMapping.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.metadataJson !== "") {
      writer.uint32(18).string(message.metadataJson);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): MinimalRunnableEntity {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMinimalRunnableEntity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.content.push(ContentMapping.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadataJson = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): MinimalRunnableEntity {
    return {
      content: Array.isArray(object?.content) ? object.content.map((e: any) => ContentMapping.fromJSON(e)) : [],
      metadataJson: isSet(object.metadataJson) ? String(object.metadataJson) : "",
    };
  }

  export function toJSON(message: MinimalRunnableEntity): unknown {
    const obj: any = {};
    if (message.content) {
      obj.content = message.content.map((e) => e ? ContentMapping.toJSON(e) : undefined);
    } else {
      obj.content = [];
    }
    message.metadataJson !== undefined && (obj.metadataJson = message.metadataJson);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<MinimalRunnableEntity>, I>>(base?: I): MinimalRunnableEntity {
    return MinimalRunnableEntity.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<MinimalRunnableEntity>, I>>(
    object: I,
  ): MinimalRunnableEntity {
    const message = createBaseMinimalRunnableEntity();
    message.content = object.content?.map((e) => ContentMapping.fromPartial(e)) || [];
    message.metadataJson = object.metadataJson ?? "";
    return message;
  }
}

function createBaseBootstrapDataResponse(): BootstrapDataResponse {
  return { id: "", baseUrl: "", entity: undefined, useFPSThrottling: false };
}

export namespace BootstrapDataResponse {
  export function encode(message: BootstrapDataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.baseUrl !== "") {
      writer.uint32(34).string(message.baseUrl);
    }
    if (message.entity !== undefined) {
      MinimalRunnableEntity.encode(message.entity, writer.uint32(18).fork()).ldelim();
    }
    if (message.useFPSThrottling === true) {
      writer.uint32(40).bool(message.useFPSThrottling);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): BootstrapDataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBootstrapDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.baseUrl = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entity = MinimalRunnableEntity.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.useFPSThrottling = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): BootstrapDataResponse {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      baseUrl: isSet(object.baseUrl) ? String(object.baseUrl) : "",
      entity: isSet(object.entity) ? MinimalRunnableEntity.fromJSON(object.entity) : undefined,
      useFPSThrottling: isSet(object.useFPSThrottling) ? Boolean(object.useFPSThrottling) : false,
    };
  }

  export function toJSON(message: BootstrapDataResponse): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.baseUrl !== undefined && (obj.baseUrl = message.baseUrl);
    message.entity !== undefined &&
      (obj.entity = message.entity ? MinimalRunnableEntity.toJSON(message.entity) : undefined);
    message.useFPSThrottling !== undefined && (obj.useFPSThrottling = message.useFPSThrottling);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<BootstrapDataResponse>, I>>(base?: I): BootstrapDataResponse {
    return BootstrapDataResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<BootstrapDataResponse>, I>>(
    object: I,
  ): BootstrapDataResponse {
    const message = createBaseBootstrapDataResponse();
    message.id = object.id ?? "";
    message.baseUrl = object.baseUrl ?? "";
    message.entity = (object.entity !== undefined && object.entity !== null)
      ? MinimalRunnableEntity.fromPartial(object.entity)
      : undefined;
    message.useFPSThrottling = object.useFPSThrottling ?? false;
    return message;
  }
}

function createBasePreviewModeResponse(): PreviewModeResponse {
  return { isPreview: false };
}

export namespace PreviewModeResponse {
  export function encode(message: PreviewModeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.isPreview === true) {
      writer.uint32(8).bool(message.isPreview);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PreviewModeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePreviewModeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.isPreview = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PreviewModeResponse {
    return { isPreview: isSet(object.isPreview) ? Boolean(object.isPreview) : false };
  }

  export function toJSON(message: PreviewModeResponse): unknown {
    const obj: any = {};
    message.isPreview !== undefined && (obj.isPreview = message.isPreview);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PreviewModeResponse>, I>>(base?: I): PreviewModeResponse {
    return PreviewModeResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PreviewModeResponse>, I>>(object: I): PreviewModeResponse {
    const message = createBasePreviewModeResponse();
    message.isPreview = object.isPreview ?? false;
    return message;
  }
}

function createBaseAreUnsafeRequestAllowedResponse(): AreUnsafeRequestAllowedResponse {
  return { status: false };
}

export namespace AreUnsafeRequestAllowedResponse {
  export function encode(
    message: AreUnsafeRequestAllowedResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.status === true) {
      writer.uint32(8).bool(message.status);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): AreUnsafeRequestAllowedResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAreUnsafeRequestAllowedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): AreUnsafeRequestAllowedResponse {
    return { status: isSet(object.status) ? Boolean(object.status) : false };
  }

  export function toJSON(message: AreUnsafeRequestAllowedResponse): unknown {
    const obj: any = {};
    message.status !== undefined && (obj.status = message.status);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<AreUnsafeRequestAllowedResponse>, I>>(
    base?: I,
  ): AreUnsafeRequestAllowedResponse {
    return AreUnsafeRequestAllowedResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<AreUnsafeRequestAllowedResponse>, I>>(
    object: I,
  ): AreUnsafeRequestAllowedResponse {
    const message = createBaseAreUnsafeRequestAllowedResponse();
    message.status = object.status ?? false;
    return message;
  }
}

function createBaseGetPlatformResponse(): GetPlatformResponse {
  return { platform: "" };
}

export namespace GetPlatformResponse {
  export function encode(message: GetPlatformResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.platform !== "") {
      writer.uint32(10).string(message.platform);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetPlatformResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlatformResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.platform = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): GetPlatformResponse {
    return { platform: isSet(object.platform) ? String(object.platform) : "" };
  }

  export function toJSON(message: GetPlatformResponse): unknown {
    const obj: any = {};
    message.platform !== undefined && (obj.platform = message.platform);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetPlatformResponse>, I>>(base?: I): GetPlatformResponse {
    return GetPlatformResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetPlatformResponse>, I>>(object: I): GetPlatformResponse {
    const message = createBaseGetPlatformResponse();
    message.platform = object.platform ?? "";
    return message;
  }
}

function createBaseEnvironmentRealm(): EnvironmentRealm {
  return { domain: "", layer: "", room: "", serverName: "", displayName: "", protocol: "" };
}

export namespace EnvironmentRealm {
  export function encode(message: EnvironmentRealm, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.domain !== "") {
      writer.uint32(10).string(message.domain);
    }
    if (message.layer !== "") {
      writer.uint32(18).string(message.layer);
    }
    if (message.room !== "") {
      writer.uint32(26).string(message.room);
    }
    if (message.serverName !== "") {
      writer.uint32(34).string(message.serverName);
    }
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    if (message.protocol !== "") {
      writer.uint32(50).string(message.protocol);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): EnvironmentRealm {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironmentRealm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.layer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.room = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.serverName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.protocol = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): EnvironmentRealm {
    return {
      domain: isSet(object.domain) ? String(object.domain) : "",
      layer: isSet(object.layer) ? String(object.layer) : "",
      room: isSet(object.room) ? String(object.room) : "",
      serverName: isSet(object.serverName) ? String(object.serverName) : "",
      displayName: isSet(object.displayName) ? String(object.displayName) : "",
      protocol: isSet(object.protocol) ? String(object.protocol) : "",
    };
  }

  export function toJSON(message: EnvironmentRealm): unknown {
    const obj: any = {};
    message.domain !== undefined && (obj.domain = message.domain);
    message.layer !== undefined && (obj.layer = message.layer);
    message.room !== undefined && (obj.room = message.room);
    message.serverName !== undefined && (obj.serverName = message.serverName);
    message.displayName !== undefined && (obj.displayName = message.displayName);
    message.protocol !== undefined && (obj.protocol = message.protocol);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<EnvironmentRealm>, I>>(base?: I): EnvironmentRealm {
    return EnvironmentRealm.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<EnvironmentRealm>, I>>(object: I): EnvironmentRealm {
    const message = createBaseEnvironmentRealm();
    message.domain = object.domain ?? "";
    message.layer = object.layer ?? "";
    message.room = object.room ?? "";
    message.serverName = object.serverName ?? "";
    message.displayName = object.displayName ?? "";
    message.protocol = object.protocol ?? "";
    return message;
  }
}

function createBaseGetCurrentRealmResponse(): GetCurrentRealmResponse {
  return { currentRealm: undefined };
}

export namespace GetCurrentRealmResponse {
  export function encode(message: GetCurrentRealmResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.currentRealm !== undefined) {
      EnvironmentRealm.encode(message.currentRealm, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetCurrentRealmResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCurrentRealmResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.currentRealm = EnvironmentRealm.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): GetCurrentRealmResponse {
    return { currentRealm: isSet(object.currentRealm) ? EnvironmentRealm.fromJSON(object.currentRealm) : undefined };
  }

  export function toJSON(message: GetCurrentRealmResponse): unknown {
    const obj: any = {};
    message.currentRealm !== undefined &&
      (obj.currentRealm = message.currentRealm ? EnvironmentRealm.toJSON(message.currentRealm) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetCurrentRealmResponse>, I>>(base?: I): GetCurrentRealmResponse {
    return GetCurrentRealmResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetCurrentRealmResponse>, I>>(
    object: I,
  ): GetCurrentRealmResponse {
    const message = createBaseGetCurrentRealmResponse();
    message.currentRealm = (object.currentRealm !== undefined && object.currentRealm !== null)
      ? EnvironmentRealm.fromPartial(object.currentRealm)
      : undefined;
    return message;
  }
}

function createBaseGetExplorerConfigurationResponse(): GetExplorerConfigurationResponse {
  return { clientUri: "", configurations: {} };
}

export namespace GetExplorerConfigurationResponse {
  export function encode(
    message: GetExplorerConfigurationResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.clientUri !== "") {
      writer.uint32(10).string(message.clientUri);
    }
    Object.entries(message.configurations).forEach(([key, value]) => {
      GetExplorerConfigurationResponse_ConfigurationsEntry.encode({ key: key as any, value }, writer.uint32(18).fork())
        .ldelim();
    });
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetExplorerConfigurationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetExplorerConfigurationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = GetExplorerConfigurationResponse_ConfigurationsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.configurations[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): GetExplorerConfigurationResponse {
    return {
      clientUri: isSet(object.clientUri) ? String(object.clientUri) : "",
      configurations: isObject(object.configurations)
        ? Object.entries(object.configurations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  }

  export function toJSON(message: GetExplorerConfigurationResponse): unknown {
    const obj: any = {};
    message.clientUri !== undefined && (obj.clientUri = message.clientUri);
    obj.configurations = {};
    if (message.configurations) {
      Object.entries(message.configurations).forEach(([k, v]) => {
        obj.configurations[k] = v;
      });
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetExplorerConfigurationResponse>, I>>(
    base?: I,
  ): GetExplorerConfigurationResponse {
    return GetExplorerConfigurationResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetExplorerConfigurationResponse>, I>>(
    object: I,
  ): GetExplorerConfigurationResponse {
    const message = createBaseGetExplorerConfigurationResponse();
    message.clientUri = object.clientUri ?? "";
    message.configurations = Object.entries(object.configurations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  }
}

function createBaseGetExplorerConfigurationResponse_ConfigurationsEntry(): GetExplorerConfigurationResponse_ConfigurationsEntry {
  return { key: "", value: "" };
}

export namespace GetExplorerConfigurationResponse_ConfigurationsEntry {
  export function encode(
    message: GetExplorerConfigurationResponse_ConfigurationsEntry,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  }

  export function decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): GetExplorerConfigurationResponse_ConfigurationsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetExplorerConfigurationResponse_ConfigurationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): GetExplorerConfigurationResponse_ConfigurationsEntry {
    return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
  }

  export function toJSON(message: GetExplorerConfigurationResponse_ConfigurationsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetExplorerConfigurationResponse_ConfigurationsEntry>, I>>(
    base?: I,
  ): GetExplorerConfigurationResponse_ConfigurationsEntry {
    return GetExplorerConfigurationResponse_ConfigurationsEntry.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetExplorerConfigurationResponse_ConfigurationsEntry>, I>>(
    object: I,
  ): GetExplorerConfigurationResponse_ConfigurationsEntry {
    const message = createBaseGetExplorerConfigurationResponse_ConfigurationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  }
}

function createBaseGetDecentralandTimeResponse(): GetDecentralandTimeResponse {
  return { seconds: 0 };
}

export namespace GetDecentralandTimeResponse {
  export function encode(message: GetDecentralandTimeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.seconds !== 0) {
      writer.uint32(8).int32(message.seconds);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetDecentralandTimeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDecentralandTimeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.seconds = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): GetDecentralandTimeResponse {
    return { seconds: isSet(object.seconds) ? Number(object.seconds) : 0 };
  }

  export function toJSON(message: GetDecentralandTimeResponse): unknown {
    const obj: any = {};
    message.seconds !== undefined && (obj.seconds = Math.round(message.seconds));
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetDecentralandTimeResponse>, I>>(
    base?: I,
  ): GetDecentralandTimeResponse {
    return GetDecentralandTimeResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetDecentralandTimeResponse>, I>>(
    object: I,
  ): GetDecentralandTimeResponse {
    const message = createBaseGetDecentralandTimeResponse();
    message.seconds = object.seconds ?? 0;
    return message;
  }
}

function createBaseGetBootstrapDataRequest(): GetBootstrapDataRequest {
  return {};
}

export namespace GetBootstrapDataRequest {
  export function encode(_: GetBootstrapDataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetBootstrapDataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBootstrapDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): GetBootstrapDataRequest {
    return {};
  }

  export function toJSON(_: GetBootstrapDataRequest): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetBootstrapDataRequest>, I>>(base?: I): GetBootstrapDataRequest {
    return GetBootstrapDataRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetBootstrapDataRequest>, I>>(_: I): GetBootstrapDataRequest {
    const message = createBaseGetBootstrapDataRequest();
    return message;
  }
}

function createBaseIsPreviewModeRequest(): IsPreviewModeRequest {
  return {};
}

export namespace IsPreviewModeRequest {
  export function encode(_: IsPreviewModeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): IsPreviewModeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsPreviewModeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): IsPreviewModeRequest {
    return {};
  }

  export function toJSON(_: IsPreviewModeRequest): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<IsPreviewModeRequest>, I>>(base?: I): IsPreviewModeRequest {
    return IsPreviewModeRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<IsPreviewModeRequest>, I>>(_: I): IsPreviewModeRequest {
    const message = createBaseIsPreviewModeRequest();
    return message;
  }
}

function createBaseGetPlatformRequest(): GetPlatformRequest {
  return {};
}

export namespace GetPlatformRequest {
  export function encode(_: GetPlatformRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetPlatformRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlatformRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): GetPlatformRequest {
    return {};
  }

  export function toJSON(_: GetPlatformRequest): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetPlatformRequest>, I>>(base?: I): GetPlatformRequest {
    return GetPlatformRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetPlatformRequest>, I>>(_: I): GetPlatformRequest {
    const message = createBaseGetPlatformRequest();
    return message;
  }
}

function createBaseAreUnsafeRequestAllowedRequest(): AreUnsafeRequestAllowedRequest {
  return {};
}

export namespace AreUnsafeRequestAllowedRequest {
  export function encode(_: AreUnsafeRequestAllowedRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): AreUnsafeRequestAllowedRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAreUnsafeRequestAllowedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): AreUnsafeRequestAllowedRequest {
    return {};
  }

  export function toJSON(_: AreUnsafeRequestAllowedRequest): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<AreUnsafeRequestAllowedRequest>, I>>(
    base?: I,
  ): AreUnsafeRequestAllowedRequest {
    return AreUnsafeRequestAllowedRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<AreUnsafeRequestAllowedRequest>, I>>(
    _: I,
  ): AreUnsafeRequestAllowedRequest {
    const message = createBaseAreUnsafeRequestAllowedRequest();
    return message;
  }
}

function createBaseGetCurrentRealmRequest(): GetCurrentRealmRequest {
  return {};
}

export namespace GetCurrentRealmRequest {
  export function encode(_: GetCurrentRealmRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetCurrentRealmRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCurrentRealmRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): GetCurrentRealmRequest {
    return {};
  }

  export function toJSON(_: GetCurrentRealmRequest): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetCurrentRealmRequest>, I>>(base?: I): GetCurrentRealmRequest {
    return GetCurrentRealmRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetCurrentRealmRequest>, I>>(_: I): GetCurrentRealmRequest {
    const message = createBaseGetCurrentRealmRequest();
    return message;
  }
}

function createBaseGetExplorerConfigurationRequest(): GetExplorerConfigurationRequest {
  return {};
}

export namespace GetExplorerConfigurationRequest {
  export function encode(_: GetExplorerConfigurationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetExplorerConfigurationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetExplorerConfigurationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): GetExplorerConfigurationRequest {
    return {};
  }

  export function toJSON(_: GetExplorerConfigurationRequest): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetExplorerConfigurationRequest>, I>>(
    base?: I,
  ): GetExplorerConfigurationRequest {
    return GetExplorerConfigurationRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetExplorerConfigurationRequest>, I>>(
    _: I,
  ): GetExplorerConfigurationRequest {
    const message = createBaseGetExplorerConfigurationRequest();
    return message;
  }
}

function createBaseGetDecentralandTimeRequest(): GetDecentralandTimeRequest {
  return {};
}

export namespace GetDecentralandTimeRequest {
  export function encode(_: GetDecentralandTimeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetDecentralandTimeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDecentralandTimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): GetDecentralandTimeRequest {
    return {};
  }

  export function toJSON(_: GetDecentralandTimeRequest): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetDecentralandTimeRequest>, I>>(
    base?: I,
  ): GetDecentralandTimeRequest {
    return GetDecentralandTimeRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetDecentralandTimeRequest>, I>>(
    _: I,
  ): GetDecentralandTimeRequest {
    const message = createBaseGetDecentralandTimeRequest();
    return message;
  }
}

export type EnvironmentApiServiceDefinition = typeof EnvironmentApiServiceDefinition;
export const EnvironmentApiServiceDefinition = {
  name: "EnvironmentApiService",
  fullName: "decentraland.kernel.apis.EnvironmentApiService",
  methods: {
    /** @deprecated, only available for SDK6 compatibility. Use runtime_api instead */
    getBootstrapData: {
      name: "GetBootstrapData",
      requestType: GetBootstrapDataRequest,
      requestStream: false,
      responseType: BootstrapDataResponse,
      responseStream: false,
      options: {},
    },
    /** @deprecated, only available for SDK6 compatibility. Needs migration */
    isPreviewMode: {
      name: "IsPreviewMode",
      requestType: IsPreviewModeRequest,
      requestStream: false,
      responseType: PreviewModeResponse,
      responseStream: false,
      options: {},
    },
    /** @deprecated, only available for SDK6 compatibility */
    getPlatform: {
      name: "GetPlatform",
      requestType: GetPlatformRequest,
      requestStream: false,
      responseType: GetPlatformResponse,
      responseStream: false,
      options: {},
    },
    /** @deprecated, only available for SDK6 compatibility */
    areUnsafeRequestAllowed: {
      name: "AreUnsafeRequestAllowed",
      requestType: AreUnsafeRequestAllowedRequest,
      requestStream: false,
      responseType: AreUnsafeRequestAllowedResponse,
      responseStream: false,
      options: {},
    },
    /** @deprecated, use GetCurrentRealm from runtime_api instead */
    getCurrentRealm: {
      name: "GetCurrentRealm",
      requestType: GetCurrentRealmRequest,
      requestStream: false,
      responseType: GetCurrentRealmResponse,
      responseStream: false,
      options: {},
    },
    /** @deprecated, only available for SDK6 compatibility */
    getExplorerConfiguration: {
      name: "GetExplorerConfiguration",
      requestType: GetExplorerConfigurationRequest,
      requestStream: false,
      responseType: GetExplorerConfigurationResponse,
      responseStream: false,
      options: {},
    },
    /** @deprecated, use GetTime from runtime_api instead */
    getDecentralandTime: {
      name: "GetDecentralandTime",
      requestType: GetDecentralandTimeRequest,
      requestStream: false,
      responseType: GetDecentralandTimeResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
