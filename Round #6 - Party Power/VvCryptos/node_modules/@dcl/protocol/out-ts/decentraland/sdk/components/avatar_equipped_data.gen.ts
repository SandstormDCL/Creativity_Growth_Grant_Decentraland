/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "decentraland.sdk.components";

/**
 * AvatarEquipData is used to read the information about the avatar's owneables.
 * this component is written by the engine using the communications transports'
 * data.
 */
export interface PBAvatarEquippedData {
  wearableUrns: string[];
  emoteUrns: string[];
}

function createBasePBAvatarEquippedData(): PBAvatarEquippedData {
  return { wearableUrns: [], emoteUrns: [] };
}

export namespace PBAvatarEquippedData {
  export function encode(message: PBAvatarEquippedData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.wearableUrns) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.emoteUrns) {
      writer.uint32(18).string(v!);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBAvatarEquippedData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBAvatarEquippedData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.wearableUrns.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.emoteUrns.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBAvatarEquippedData {
    return {
      wearableUrns: Array.isArray(object?.wearableUrns) ? object.wearableUrns.map((e: any) => String(e)) : [],
      emoteUrns: Array.isArray(object?.emoteUrns) ? object.emoteUrns.map((e: any) => String(e)) : [],
    };
  }

  export function toJSON(message: PBAvatarEquippedData): unknown {
    const obj: any = {};
    if (message.wearableUrns) {
      obj.wearableUrns = message.wearableUrns.map((e) => e);
    } else {
      obj.wearableUrns = [];
    }
    if (message.emoteUrns) {
      obj.emoteUrns = message.emoteUrns.map((e) => e);
    } else {
      obj.emoteUrns = [];
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBAvatarEquippedData>, I>>(base?: I): PBAvatarEquippedData {
    return PBAvatarEquippedData.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBAvatarEquippedData>, I>>(object: I): PBAvatarEquippedData {
    const message = createBasePBAvatarEquippedData();
    message.wearableUrns = object.wearableUrns?.map((e) => e) || [];
    message.emoteUrns = object.emoteUrns?.map((e) => e) || [];
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };
