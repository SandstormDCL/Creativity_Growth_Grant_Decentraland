/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Vector3 } from "../../common/vectors.gen";
import { CameraType, cameraTypeFromJSON, cameraTypeToJSON } from "./common/camera_type.gen";

export const protobufPackage = "decentraland.sdk.components";

/**
 * The CameraModeArea component can be attached to an Entity to define a region of space where
 * the player's camera mode (1st-person or 3rd-person) is overridden.
 *
 * The Entity's Transform position determines the center-point of the region, while its size is
 * given as a vector in the `area` property below. The Transform rotation is applied, but the scale
 * is ignored.
 *
 * When players leave the region, their previous setting is restored.
 *
 * Note that, while commonly used to delineate a 2D area in a scene (hence the name), the region
 * is actually a 3D volume.
 */
export interface PBCameraModeArea {
  /** the 3D size of the region */
  area:
    | Vector3
    | undefined;
  /** the camera mode to enforce */
  mode: CameraType;
}

function createBasePBCameraModeArea(): PBCameraModeArea {
  return { area: undefined, mode: 0 };
}

export namespace PBCameraModeArea {
  export function encode(message: PBCameraModeArea, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.area !== undefined) {
      Vector3.encode(message.area, writer.uint32(10).fork()).ldelim();
    }
    if (message.mode !== 0) {
      writer.uint32(16).int32(message.mode);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBCameraModeArea {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBCameraModeArea();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.area = Vector3.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.mode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBCameraModeArea {
    return {
      area: isSet(object.area) ? Vector3.fromJSON(object.area) : undefined,
      mode: isSet(object.mode) ? cameraTypeFromJSON(object.mode) : 0,
    };
  }

  export function toJSON(message: PBCameraModeArea): unknown {
    const obj: any = {};
    message.area !== undefined && (obj.area = message.area ? Vector3.toJSON(message.area) : undefined);
    message.mode !== undefined && (obj.mode = cameraTypeToJSON(message.mode));
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBCameraModeArea>, I>>(base?: I): PBCameraModeArea {
    return PBCameraModeArea.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBCameraModeArea>, I>>(object: I): PBCameraModeArea {
    const message = createBasePBCameraModeArea();
    message.area = (object.area !== undefined && object.area !== null) ? Vector3.fromPartial(object.area) : undefined;
    message.mode = object.mode ?? 0;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
