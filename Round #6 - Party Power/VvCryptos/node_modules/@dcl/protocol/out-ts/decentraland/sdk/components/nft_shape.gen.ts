/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Color3 } from "../../common/colors.gen";

export const protobufPackage = "decentraland.sdk.components";

/** NftFrameType is a predefined framing style for the image. */
export enum NftFrameType {
  NFT_CLASSIC = 0,
  NFT_BAROQUE_ORNAMENT = 1,
  NFT_DIAMOND_ORNAMENT = 2,
  NFT_MINIMAL_WIDE = 3,
  NFT_MINIMAL_GREY = 4,
  NFT_BLOCKY = 5,
  NFT_GOLD_EDGES = 6,
  NFT_GOLD_CARVED = 7,
  NFT_GOLD_WIDE = 8,
  NFT_GOLD_ROUNDED = 9,
  NFT_METAL_MEDIUM = 10,
  NFT_METAL_WIDE = 11,
  NFT_METAL_SLIM = 12,
  NFT_METAL_ROUNDED = 13,
  NFT_PINS = 14,
  NFT_MINIMAL_BLACK = 15,
  NFT_MINIMAL_WHITE = 16,
  NFT_TAPE = 17,
  NFT_WOOD_SLIM = 18,
  NFT_WOOD_WIDE = 19,
  NFT_WOOD_TWIGS = 20,
  NFT_CANVAS = 21,
  NFT_NONE = 22,
  UNRECOGNIZED = -1,
}

export function nftFrameTypeFromJSON(object: any): NftFrameType {
  switch (object) {
    case 0:
    case "NFT_CLASSIC":
      return NftFrameType.NFT_CLASSIC;
    case 1:
    case "NFT_BAROQUE_ORNAMENT":
      return NftFrameType.NFT_BAROQUE_ORNAMENT;
    case 2:
    case "NFT_DIAMOND_ORNAMENT":
      return NftFrameType.NFT_DIAMOND_ORNAMENT;
    case 3:
    case "NFT_MINIMAL_WIDE":
      return NftFrameType.NFT_MINIMAL_WIDE;
    case 4:
    case "NFT_MINIMAL_GREY":
      return NftFrameType.NFT_MINIMAL_GREY;
    case 5:
    case "NFT_BLOCKY":
      return NftFrameType.NFT_BLOCKY;
    case 6:
    case "NFT_GOLD_EDGES":
      return NftFrameType.NFT_GOLD_EDGES;
    case 7:
    case "NFT_GOLD_CARVED":
      return NftFrameType.NFT_GOLD_CARVED;
    case 8:
    case "NFT_GOLD_WIDE":
      return NftFrameType.NFT_GOLD_WIDE;
    case 9:
    case "NFT_GOLD_ROUNDED":
      return NftFrameType.NFT_GOLD_ROUNDED;
    case 10:
    case "NFT_METAL_MEDIUM":
      return NftFrameType.NFT_METAL_MEDIUM;
    case 11:
    case "NFT_METAL_WIDE":
      return NftFrameType.NFT_METAL_WIDE;
    case 12:
    case "NFT_METAL_SLIM":
      return NftFrameType.NFT_METAL_SLIM;
    case 13:
    case "NFT_METAL_ROUNDED":
      return NftFrameType.NFT_METAL_ROUNDED;
    case 14:
    case "NFT_PINS":
      return NftFrameType.NFT_PINS;
    case 15:
    case "NFT_MINIMAL_BLACK":
      return NftFrameType.NFT_MINIMAL_BLACK;
    case 16:
    case "NFT_MINIMAL_WHITE":
      return NftFrameType.NFT_MINIMAL_WHITE;
    case 17:
    case "NFT_TAPE":
      return NftFrameType.NFT_TAPE;
    case 18:
    case "NFT_WOOD_SLIM":
      return NftFrameType.NFT_WOOD_SLIM;
    case 19:
    case "NFT_WOOD_WIDE":
      return NftFrameType.NFT_WOOD_WIDE;
    case 20:
    case "NFT_WOOD_TWIGS":
      return NftFrameType.NFT_WOOD_TWIGS;
    case 21:
    case "NFT_CANVAS":
      return NftFrameType.NFT_CANVAS;
    case 22:
    case "NFT_NONE":
      return NftFrameType.NFT_NONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NftFrameType.UNRECOGNIZED;
  }
}

export function nftFrameTypeToJSON(object: NftFrameType): string {
  switch (object) {
    case NftFrameType.NFT_CLASSIC:
      return "NFT_CLASSIC";
    case NftFrameType.NFT_BAROQUE_ORNAMENT:
      return "NFT_BAROQUE_ORNAMENT";
    case NftFrameType.NFT_DIAMOND_ORNAMENT:
      return "NFT_DIAMOND_ORNAMENT";
    case NftFrameType.NFT_MINIMAL_WIDE:
      return "NFT_MINIMAL_WIDE";
    case NftFrameType.NFT_MINIMAL_GREY:
      return "NFT_MINIMAL_GREY";
    case NftFrameType.NFT_BLOCKY:
      return "NFT_BLOCKY";
    case NftFrameType.NFT_GOLD_EDGES:
      return "NFT_GOLD_EDGES";
    case NftFrameType.NFT_GOLD_CARVED:
      return "NFT_GOLD_CARVED";
    case NftFrameType.NFT_GOLD_WIDE:
      return "NFT_GOLD_WIDE";
    case NftFrameType.NFT_GOLD_ROUNDED:
      return "NFT_GOLD_ROUNDED";
    case NftFrameType.NFT_METAL_MEDIUM:
      return "NFT_METAL_MEDIUM";
    case NftFrameType.NFT_METAL_WIDE:
      return "NFT_METAL_WIDE";
    case NftFrameType.NFT_METAL_SLIM:
      return "NFT_METAL_SLIM";
    case NftFrameType.NFT_METAL_ROUNDED:
      return "NFT_METAL_ROUNDED";
    case NftFrameType.NFT_PINS:
      return "NFT_PINS";
    case NftFrameType.NFT_MINIMAL_BLACK:
      return "NFT_MINIMAL_BLACK";
    case NftFrameType.NFT_MINIMAL_WHITE:
      return "NFT_MINIMAL_WHITE";
    case NftFrameType.NFT_TAPE:
      return "NFT_TAPE";
    case NftFrameType.NFT_WOOD_SLIM:
      return "NFT_WOOD_SLIM";
    case NftFrameType.NFT_WOOD_WIDE:
      return "NFT_WOOD_WIDE";
    case NftFrameType.NFT_WOOD_TWIGS:
      return "NFT_WOOD_TWIGS";
    case NftFrameType.NFT_CANVAS:
      return "NFT_CANVAS";
    case NftFrameType.NFT_NONE:
      return "NFT_NONE";
    case NftFrameType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The NftShape component renders a framed picture from an NFT. It supports PNG, JPEG and GIF files.
 *
 * The `urn` field is the URI of the NFT, and must follow the format 'urn:decentraland:<CHAIN>:<CONTRACT_STANDARD>:<CONTRACT_ADDRESS>:<TOKEN_ID>'
 * Example: 'urn:decentraland:ethereum:erc721:0x00000000:123'
 *
 * The picture frame can have several different styles, plus a background color for images that have
 * transparent pixels.
 */
export interface PBNftShape {
  /** the URI of the NFT */
  urn: string;
  /** the frame style (default NFT_CLASSIC) */
  style?:
    | NftFrameType
    | undefined;
  /** RGB background (default [0.6404918, 0.611472, 0.8584906]) */
  color?: Color3 | undefined;
}

function createBasePBNftShape(): PBNftShape {
  return { urn: "", style: undefined, color: undefined };
}

export namespace PBNftShape {
  export function encode(message: PBNftShape, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.urn !== "") {
      writer.uint32(10).string(message.urn);
    }
    if (message.style !== undefined) {
      writer.uint32(16).int32(message.style);
    }
    if (message.color !== undefined) {
      Color3.encode(message.color, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBNftShape {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBNftShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.urn = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.style = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.color = Color3.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBNftShape {
    return {
      urn: isSet(object.urn) ? String(object.urn) : "",
      style: isSet(object.style) ? nftFrameTypeFromJSON(object.style) : undefined,
      color: isSet(object.color) ? Color3.fromJSON(object.color) : undefined,
    };
  }

  export function toJSON(message: PBNftShape): unknown {
    const obj: any = {};
    message.urn !== undefined && (obj.urn = message.urn);
    message.style !== undefined &&
      (obj.style = message.style !== undefined ? nftFrameTypeToJSON(message.style) : undefined);
    message.color !== undefined && (obj.color = message.color ? Color3.toJSON(message.color) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBNftShape>, I>>(base?: I): PBNftShape {
    return PBNftShape.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBNftShape>, I>>(object: I): PBNftShape {
    const message = createBasePBNftShape();
    message.urn = object.urn ?? "";
    message.style = object.style ?? undefined;
    message.color = (object.color !== undefined && object.color !== null)
      ? Color3.fromPartial(object.color)
      : undefined;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
