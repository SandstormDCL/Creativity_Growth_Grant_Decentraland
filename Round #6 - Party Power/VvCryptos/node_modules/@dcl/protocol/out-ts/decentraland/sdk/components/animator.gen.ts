/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "decentraland.sdk.components";

/**
 * The Animator component is a container for multiple potential animations an Entity can display,
 * separately or at the same time. It can be used to start, stop or blend animations; as well as
 * to inspect their playback state.
 *
 * Animations have a `weight` property, which determines how pronounced the animation will be. This
 * can be adjusted to blend animations together, or gracefully transition from one to the next.
 */
export interface PBAnimator {
  /** a collection of animations and their current state */
  states: PBAnimationState[];
}

/** AnimationState indicates the status and configuration of one available animation. */
export interface PBAnimationState {
  /** the animation path in the `files` array of the scene manifest */
  clip: string;
  /** whether this animation is currently playing */
  playing?:
    | boolean
    | undefined;
  /** @experimental the "weight" of this animation (see below, default: 1.0) */
  weight?:
    | number
    | undefined;
  /** the playback speed (default: 1.0) */
  speed?:
    | number
    | undefined;
  /** whether the animation repeats (**) until is manually stopped (default: true) */
  loop?:
    | boolean
    | undefined;
  /** whether the animation is restored to the initial state (*) when it changes from stopped to playing (default: false) */
  shouldReset?: boolean | undefined;
}

function createBasePBAnimator(): PBAnimator {
  return { states: [] };
}

export namespace PBAnimator {
  export function encode(message: PBAnimator, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.states) {
      PBAnimationState.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBAnimator {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBAnimator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.states.push(PBAnimationState.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBAnimator {
    return { states: Array.isArray(object?.states) ? object.states.map((e: any) => PBAnimationState.fromJSON(e)) : [] };
  }

  export function toJSON(message: PBAnimator): unknown {
    const obj: any = {};
    if (message.states) {
      obj.states = message.states.map((e) => e ? PBAnimationState.toJSON(e) : undefined);
    } else {
      obj.states = [];
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBAnimator>, I>>(base?: I): PBAnimator {
    return PBAnimator.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBAnimator>, I>>(object: I): PBAnimator {
    const message = createBasePBAnimator();
    message.states = object.states?.map((e) => PBAnimationState.fromPartial(e)) || [];
    return message;
  }
}

function createBasePBAnimationState(): PBAnimationState {
  return { clip: "", playing: undefined, weight: undefined, speed: undefined, loop: undefined, shouldReset: undefined };
}

export namespace PBAnimationState {
  export function encode(message: PBAnimationState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clip !== "") {
      writer.uint32(18).string(message.clip);
    }
    if (message.playing !== undefined) {
      writer.uint32(24).bool(message.playing);
    }
    if (message.weight !== undefined) {
      writer.uint32(37).float(message.weight);
    }
    if (message.speed !== undefined) {
      writer.uint32(45).float(message.speed);
    }
    if (message.loop !== undefined) {
      writer.uint32(48).bool(message.loop);
    }
    if (message.shouldReset !== undefined) {
      writer.uint32(56).bool(message.shouldReset);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBAnimationState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBAnimationState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clip = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.playing = reader.bool();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.weight = reader.float();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.speed = reader.float();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.loop = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.shouldReset = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBAnimationState {
    return {
      clip: isSet(object.clip) ? String(object.clip) : "",
      playing: isSet(object.playing) ? Boolean(object.playing) : undefined,
      weight: isSet(object.weight) ? Number(object.weight) : undefined,
      speed: isSet(object.speed) ? Number(object.speed) : undefined,
      loop: isSet(object.loop) ? Boolean(object.loop) : undefined,
      shouldReset: isSet(object.shouldReset) ? Boolean(object.shouldReset) : undefined,
    };
  }

  export function toJSON(message: PBAnimationState): unknown {
    const obj: any = {};
    message.clip !== undefined && (obj.clip = message.clip);
    message.playing !== undefined && (obj.playing = message.playing);
    message.weight !== undefined && (obj.weight = message.weight);
    message.speed !== undefined && (obj.speed = message.speed);
    message.loop !== undefined && (obj.loop = message.loop);
    message.shouldReset !== undefined && (obj.shouldReset = message.shouldReset);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBAnimationState>, I>>(base?: I): PBAnimationState {
    return PBAnimationState.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBAnimationState>, I>>(object: I): PBAnimationState {
    const message = createBasePBAnimationState();
    message.clip = object.clip ?? "";
    message.playing = object.playing ?? undefined;
    message.weight = object.weight ?? undefined;
    message.speed = object.speed ?? undefined;
    message.loop = object.loop ?? undefined;
    message.shouldReset = object.shouldReset ?? undefined;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
