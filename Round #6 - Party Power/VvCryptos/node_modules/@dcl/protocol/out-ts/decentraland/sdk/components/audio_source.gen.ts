/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "decentraland.sdk.components";

/**
 * The AudioSource component can play an audio clips bundled with the scene, controlling some
 * of the behavior.
 *
 * In each AudioSource instance, the sound is spatially located at the associated entityâ€™s position,
 * given by its Transform.
 *
 * Note that the `audio_clip_url` is not actually a URL, but rather the path of a file bundled with
 * the scene and declared in its manifest. The name was chosen because the URL use-case will
 * eventually be supported.
 *
 * `playing=true` when it's previously `playing=true`
 *  a) if clip is playing and `current_time` is NOT SET, the clip remains in the current `current_time`
 *  b) if clip is stopped or `current_time` is set, the clip is played from the `current_time` (if set) or from the beginning
 *
 * If other property (volume, loop, pitch) is changed while playing, the clip is keep playing with the new properties
 * Changing `audio_clip_url` while playing stops the current clip and plays the new one (as a new instance)
 */
export interface PBAudioSource {
  /** whether the clip is currently playing. */
  playing?:
    | boolean
    | undefined;
  /** the audio volume (default: 1.0). */
  volume?:
    | number
    | undefined;
  /** whether the clip should restart when finished. */
  loop?:
    | boolean
    | undefined;
  /** the audio pitch (default: 1.0). */
  pitch?:
    | number
    | undefined;
  /** the clip path as given in the `files` array of the scene's manifest. */
  audioClipUrl: string;
  /** specifies the current playback time of the clip in seconds (default: 0). */
  currentTime?:
    | number
    | undefined;
  /** whether the audio plays at constant volume across the scene. */
  global?: boolean | undefined;
}

function createBasePBAudioSource(): PBAudioSource {
  return {
    playing: undefined,
    volume: undefined,
    loop: undefined,
    pitch: undefined,
    audioClipUrl: "",
    currentTime: undefined,
    global: undefined,
  };
}

export namespace PBAudioSource {
  export function encode(message: PBAudioSource, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.playing !== undefined) {
      writer.uint32(8).bool(message.playing);
    }
    if (message.volume !== undefined) {
      writer.uint32(21).float(message.volume);
    }
    if (message.loop !== undefined) {
      writer.uint32(24).bool(message.loop);
    }
    if (message.pitch !== undefined) {
      writer.uint32(37).float(message.pitch);
    }
    if (message.audioClipUrl !== "") {
      writer.uint32(42).string(message.audioClipUrl);
    }
    if (message.currentTime !== undefined) {
      writer.uint32(53).float(message.currentTime);
    }
    if (message.global !== undefined) {
      writer.uint32(56).bool(message.global);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBAudioSource {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBAudioSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.playing = reader.bool();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.volume = reader.float();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.loop = reader.bool();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.pitch = reader.float();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.audioClipUrl = reader.string();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.currentTime = reader.float();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.global = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBAudioSource {
    return {
      playing: isSet(object.playing) ? Boolean(object.playing) : undefined,
      volume: isSet(object.volume) ? Number(object.volume) : undefined,
      loop: isSet(object.loop) ? Boolean(object.loop) : undefined,
      pitch: isSet(object.pitch) ? Number(object.pitch) : undefined,
      audioClipUrl: isSet(object.audioClipUrl) ? String(object.audioClipUrl) : "",
      currentTime: isSet(object.currentTime) ? Number(object.currentTime) : undefined,
      global: isSet(object.global) ? Boolean(object.global) : undefined,
    };
  }

  export function toJSON(message: PBAudioSource): unknown {
    const obj: any = {};
    message.playing !== undefined && (obj.playing = message.playing);
    message.volume !== undefined && (obj.volume = message.volume);
    message.loop !== undefined && (obj.loop = message.loop);
    message.pitch !== undefined && (obj.pitch = message.pitch);
    message.audioClipUrl !== undefined && (obj.audioClipUrl = message.audioClipUrl);
    message.currentTime !== undefined && (obj.currentTime = message.currentTime);
    message.global !== undefined && (obj.global = message.global);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBAudioSource>, I>>(base?: I): PBAudioSource {
    return PBAudioSource.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBAudioSource>, I>>(object: I): PBAudioSource {
    const message = createBasePBAudioSource();
    message.playing = object.playing ?? undefined;
    message.volume = object.volume ?? undefined;
    message.loop = object.loop ?? undefined;
    message.pitch = object.pitch ?? undefined;
    message.audioClipUrl = object.audioClipUrl ?? "";
    message.currentTime = object.currentTime ?? undefined;
    message.global = object.global ?? undefined;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
