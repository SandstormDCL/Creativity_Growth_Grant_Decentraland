/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Vector3 } from "../../common/vectors.gen";

export const protobufPackage = "decentraland.sdk.components";

/** AvatarModifierType is an effect that should be applied to avatars inside the region. */
export enum AvatarModifierType {
  /** AMT_HIDE_AVATARS - avatars are invisible */
  AMT_HIDE_AVATARS = 0,
  /** AMT_DISABLE_PASSPORTS - selecting (e.g. clicking) an avatar will not bring up their profile. */
  AMT_DISABLE_PASSPORTS = 1,
  UNRECOGNIZED = -1,
}

export function avatarModifierTypeFromJSON(object: any): AvatarModifierType {
  switch (object) {
    case 0:
    case "AMT_HIDE_AVATARS":
      return AvatarModifierType.AMT_HIDE_AVATARS;
    case 1:
    case "AMT_DISABLE_PASSPORTS":
      return AvatarModifierType.AMT_DISABLE_PASSPORTS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AvatarModifierType.UNRECOGNIZED;
  }
}

export function avatarModifierTypeToJSON(object: AvatarModifierType): string {
  switch (object) {
    case AvatarModifierType.AMT_HIDE_AVATARS:
      return "AMT_HIDE_AVATARS";
    case AvatarModifierType.AMT_DISABLE_PASSPORTS:
      return "AMT_DISABLE_PASSPORTS";
    case AvatarModifierType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The AvatarModifierArea component can be attached to an Entity to define a region of space where
 * avatar behavior changes.
 *
 * The Entity's Transform position determines the center-point of the region, while its size is
 * given as a vector in the `area` property below. The Transform rotation is applied, but the scale
 * is ignored.
 *
 * The modifier effect is only applied to avatars inside the region. It does not affect how players
 * standing inside it see avatars on the other side of the boundary.
 *
 * Note that, while commonly used to delineate a 2D area in a scene (hence the name), the region
 * is actually a 3D volume.
 */
export interface PBAvatarModifierArea {
  /** the 3D size of the region */
  area:
    | Vector3
    | undefined;
  /** user IDs that can enter and remain unaffected */
  excludeIds: string[];
  /** list of modifiers to apply */
  modifiers: AvatarModifierType[];
}

function createBasePBAvatarModifierArea(): PBAvatarModifierArea {
  return { area: undefined, excludeIds: [], modifiers: [] };
}

export namespace PBAvatarModifierArea {
  export function encode(message: PBAvatarModifierArea, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.area !== undefined) {
      Vector3.encode(message.area, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.excludeIds) {
      writer.uint32(18).string(v!);
    }
    writer.uint32(26).fork();
    for (const v of message.modifiers) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBAvatarModifierArea {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBAvatarModifierArea();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.area = Vector3.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.excludeIds.push(reader.string());
          continue;
        case 3:
          if (tag === 24) {
            message.modifiers.push(reader.int32() as any);

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.modifiers.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBAvatarModifierArea {
    return {
      area: isSet(object.area) ? Vector3.fromJSON(object.area) : undefined,
      excludeIds: Array.isArray(object?.excludeIds) ? object.excludeIds.map((e: any) => String(e)) : [],
      modifiers: Array.isArray(object?.modifiers)
        ? object.modifiers.map((e: any) => avatarModifierTypeFromJSON(e))
        : [],
    };
  }

  export function toJSON(message: PBAvatarModifierArea): unknown {
    const obj: any = {};
    message.area !== undefined && (obj.area = message.area ? Vector3.toJSON(message.area) : undefined);
    if (message.excludeIds) {
      obj.excludeIds = message.excludeIds.map((e) => e);
    } else {
      obj.excludeIds = [];
    }
    if (message.modifiers) {
      obj.modifiers = message.modifiers.map((e) => avatarModifierTypeToJSON(e));
    } else {
      obj.modifiers = [];
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBAvatarModifierArea>, I>>(base?: I): PBAvatarModifierArea {
    return PBAvatarModifierArea.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBAvatarModifierArea>, I>>(object: I): PBAvatarModifierArea {
    const message = createBasePBAvatarModifierArea();
    message.area = (object.area !== undefined && object.area !== null) ? Vector3.fromPartial(object.area) : undefined;
    message.excludeIds = object.excludeIds?.map((e) => e) || [];
    message.modifiers = object.modifiers?.map((e) => e) || [];
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
