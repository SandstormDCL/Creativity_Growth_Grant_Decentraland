/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Color3 } from "../../common/colors.gen";

export const protobufPackage = "decentraland.sdk.components";

/** AvatarBase sets all modifiers over the avatar's apparence. */
export interface PBAvatarBase {
  skinColor: Color3 | undefined;
  eyesColor: Color3 | undefined;
  hairColor: Color3 | undefined;
  bodyShapeUrn: string;
  name: string;
}

function createBasePBAvatarBase(): PBAvatarBase {
  return { skinColor: undefined, eyesColor: undefined, hairColor: undefined, bodyShapeUrn: "", name: "" };
}

export namespace PBAvatarBase {
  export function encode(message: PBAvatarBase, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.skinColor !== undefined) {
      Color3.encode(message.skinColor, writer.uint32(10).fork()).ldelim();
    }
    if (message.eyesColor !== undefined) {
      Color3.encode(message.eyesColor, writer.uint32(18).fork()).ldelim();
    }
    if (message.hairColor !== undefined) {
      Color3.encode(message.hairColor, writer.uint32(26).fork()).ldelim();
    }
    if (message.bodyShapeUrn !== "") {
      writer.uint32(34).string(message.bodyShapeUrn);
    }
    if (message.name !== "") {
      writer.uint32(42).string(message.name);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBAvatarBase {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBAvatarBase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.skinColor = Color3.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eyesColor = Color3.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hairColor = Color3.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.bodyShapeUrn = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBAvatarBase {
    return {
      skinColor: isSet(object.skinColor) ? Color3.fromJSON(object.skinColor) : undefined,
      eyesColor: isSet(object.eyesColor) ? Color3.fromJSON(object.eyesColor) : undefined,
      hairColor: isSet(object.hairColor) ? Color3.fromJSON(object.hairColor) : undefined,
      bodyShapeUrn: isSet(object.bodyShapeUrn) ? String(object.bodyShapeUrn) : "",
      name: isSet(object.name) ? String(object.name) : "",
    };
  }

  export function toJSON(message: PBAvatarBase): unknown {
    const obj: any = {};
    message.skinColor !== undefined &&
      (obj.skinColor = message.skinColor ? Color3.toJSON(message.skinColor) : undefined);
    message.eyesColor !== undefined &&
      (obj.eyesColor = message.eyesColor ? Color3.toJSON(message.eyesColor) : undefined);
    message.hairColor !== undefined &&
      (obj.hairColor = message.hairColor ? Color3.toJSON(message.hairColor) : undefined);
    message.bodyShapeUrn !== undefined && (obj.bodyShapeUrn = message.bodyShapeUrn);
    message.name !== undefined && (obj.name = message.name);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBAvatarBase>, I>>(base?: I): PBAvatarBase {
    return PBAvatarBase.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBAvatarBase>, I>>(object: I): PBAvatarBase {
    const message = createBasePBAvatarBase();
    message.skinColor = (object.skinColor !== undefined && object.skinColor !== null)
      ? Color3.fromPartial(object.skinColor)
      : undefined;
    message.eyesColor = (object.eyesColor !== undefined && object.eyesColor !== null)
      ? Color3.fromPartial(object.eyesColor)
      : undefined;
    message.hairColor = (object.hairColor !== undefined && object.hairColor !== null)
      ? Color3.fromPartial(object.hairColor)
      : undefined;
    message.bodyShapeUrn = object.bodyShapeUrn ?? "";
    message.name = object.name ?? "";
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
