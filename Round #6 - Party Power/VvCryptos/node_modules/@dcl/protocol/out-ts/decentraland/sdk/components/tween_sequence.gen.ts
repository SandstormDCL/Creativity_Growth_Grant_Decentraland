/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { PBTween } from "./tween.gen";

export const protobufPackage = "decentraland.sdk.components";

export enum TweenLoop {
  TL_RESTART = 0,
  TL_YOYO = 1,
  UNRECOGNIZED = -1,
}

export function tweenLoopFromJSON(object: any): TweenLoop {
  switch (object) {
    case 0:
    case "TL_RESTART":
      return TweenLoop.TL_RESTART;
    case 1:
    case "TL_YOYO":
      return TweenLoop.TL_YOYO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TweenLoop.UNRECOGNIZED;
  }
}

export function tweenLoopToJSON(object: TweenLoop): string {
  switch (object) {
    case TweenLoop.TL_RESTART:
      return "TL_RESTART";
    case TweenLoop.TL_YOYO:
      return "TL_YOYO";
    case TweenLoop.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PBTweenSequence {
  sequence: PBTween[];
  loop?: TweenLoop | undefined;
}

function createBasePBTweenSequence(): PBTweenSequence {
  return { sequence: [], loop: undefined };
}

export namespace PBTweenSequence {
  export function encode(message: PBTweenSequence, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.sequence) {
      PBTween.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.loop !== undefined) {
      writer.uint32(16).int32(message.loop);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBTweenSequence {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBTweenSequence();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sequence.push(PBTween.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.loop = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBTweenSequence {
    return {
      sequence: Array.isArray(object?.sequence) ? object.sequence.map((e: any) => PBTween.fromJSON(e)) : [],
      loop: isSet(object.loop) ? tweenLoopFromJSON(object.loop) : undefined,
    };
  }

  export function toJSON(message: PBTweenSequence): unknown {
    const obj: any = {};
    if (message.sequence) {
      obj.sequence = message.sequence.map((e) => e ? PBTween.toJSON(e) : undefined);
    } else {
      obj.sequence = [];
    }
    message.loop !== undefined && (obj.loop = message.loop !== undefined ? tweenLoopToJSON(message.loop) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBTweenSequence>, I>>(base?: I): PBTweenSequence {
    return PBTweenSequence.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBTweenSequence>, I>>(object: I): PBTweenSequence {
    const message = createBasePBTweenSequence();
    message.sequence = object.sequence?.map((e) => PBTween.fromPartial(e)) || [];
    message.loop = object.loop ?? undefined;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
