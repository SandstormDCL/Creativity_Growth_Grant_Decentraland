/* eslint-disable */

export const protobufPackage = "decentraland.sdk.components.common";

export enum TextAlignMode {
  TAM_TOP_LEFT = 0,
  TAM_TOP_CENTER = 1,
  TAM_TOP_RIGHT = 2,
  TAM_MIDDLE_LEFT = 3,
  TAM_MIDDLE_CENTER = 4,
  TAM_MIDDLE_RIGHT = 5,
  TAM_BOTTOM_LEFT = 6,
  TAM_BOTTOM_CENTER = 7,
  TAM_BOTTOM_RIGHT = 8,
  UNRECOGNIZED = -1,
}

export function textAlignModeFromJSON(object: any): TextAlignMode {
  switch (object) {
    case 0:
    case "TAM_TOP_LEFT":
      return TextAlignMode.TAM_TOP_LEFT;
    case 1:
    case "TAM_TOP_CENTER":
      return TextAlignMode.TAM_TOP_CENTER;
    case 2:
    case "TAM_TOP_RIGHT":
      return TextAlignMode.TAM_TOP_RIGHT;
    case 3:
    case "TAM_MIDDLE_LEFT":
      return TextAlignMode.TAM_MIDDLE_LEFT;
    case 4:
    case "TAM_MIDDLE_CENTER":
      return TextAlignMode.TAM_MIDDLE_CENTER;
    case 5:
    case "TAM_MIDDLE_RIGHT":
      return TextAlignMode.TAM_MIDDLE_RIGHT;
    case 6:
    case "TAM_BOTTOM_LEFT":
      return TextAlignMode.TAM_BOTTOM_LEFT;
    case 7:
    case "TAM_BOTTOM_CENTER":
      return TextAlignMode.TAM_BOTTOM_CENTER;
    case 8:
    case "TAM_BOTTOM_RIGHT":
      return TextAlignMode.TAM_BOTTOM_RIGHT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TextAlignMode.UNRECOGNIZED;
  }
}

export function textAlignModeToJSON(object: TextAlignMode): string {
  switch (object) {
    case TextAlignMode.TAM_TOP_LEFT:
      return "TAM_TOP_LEFT";
    case TextAlignMode.TAM_TOP_CENTER:
      return "TAM_TOP_CENTER";
    case TextAlignMode.TAM_TOP_RIGHT:
      return "TAM_TOP_RIGHT";
    case TextAlignMode.TAM_MIDDLE_LEFT:
      return "TAM_MIDDLE_LEFT";
    case TextAlignMode.TAM_MIDDLE_CENTER:
      return "TAM_MIDDLE_CENTER";
    case TextAlignMode.TAM_MIDDLE_RIGHT:
      return "TAM_MIDDLE_RIGHT";
    case TextAlignMode.TAM_BOTTOM_LEFT:
      return "TAM_BOTTOM_LEFT";
    case TextAlignMode.TAM_BOTTOM_CENTER:
      return "TAM_BOTTOM_CENTER";
    case TextAlignMode.TAM_BOTTOM_RIGHT:
      return "TAM_BOTTOM_RIGHT";
    case TextAlignMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Font {
  F_SANS_SERIF = 0,
  F_SERIF = 1,
  F_MONOSPACE = 2,
  UNRECOGNIZED = -1,
}

export function fontFromJSON(object: any): Font {
  switch (object) {
    case 0:
    case "F_SANS_SERIF":
      return Font.F_SANS_SERIF;
    case 1:
    case "F_SERIF":
      return Font.F_SERIF;
    case 2:
    case "F_MONOSPACE":
      return Font.F_MONOSPACE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Font.UNRECOGNIZED;
  }
}

export function fontToJSON(object: Font): string {
  switch (object) {
    case Font.F_SANS_SERIF:
      return "F_SANS_SERIF";
    case Font.F_SERIF:
      return "F_SERIF";
    case Font.F_MONOSPACE:
      return "F_MONOSPACE";
    case Font.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
