/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Vector3 } from "../../common/vectors.gen";
import { RaycastHit } from "./common/raycast_hit.gen";

export const protobufPackage = "decentraland.sdk.components";

/**
 * The PBRaycast component and PBRaycastResult are defined in https://adr.decentraland.org/adr/ADR-200
 *
 * The RaycastResult component is added to an Entity when the results of a previously attached
 * Raycast component are available. It contains information about the ray and any objects it
 * collided with.
 */
export interface PBRaycastResult {
  /** timestamp is a correlation id, copied from the PBRaycast */
  timestamp?:
    | number
    | undefined;
  /** the starting point of the ray in global coordinates */
  globalOrigin:
    | Vector3
    | undefined;
  /** the direction vector of the ray in global coordinates */
  direction:
    | Vector3
    | undefined;
  /** zero or more hits */
  hits: RaycastHit[];
  /** number of tick in which the event was produced, equals to EngineInfo.tick_number */
  tickNumber: number;
}

function createBasePBRaycastResult(): PBRaycastResult {
  return { timestamp: undefined, globalOrigin: undefined, direction: undefined, hits: [], tickNumber: 0 };
}

export namespace PBRaycastResult {
  export function encode(message: PBRaycastResult, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.timestamp !== undefined) {
      writer.uint32(8).uint32(message.timestamp);
    }
    if (message.globalOrigin !== undefined) {
      Vector3.encode(message.globalOrigin, writer.uint32(18).fork()).ldelim();
    }
    if (message.direction !== undefined) {
      Vector3.encode(message.direction, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.hits) {
      RaycastHit.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    if (message.tickNumber !== 0) {
      writer.uint32(40).uint32(message.tickNumber);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBRaycastResult {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBRaycastResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.timestamp = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.globalOrigin = Vector3.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.direction = Vector3.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.hits.push(RaycastHit.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.tickNumber = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBRaycastResult {
    return {
      timestamp: isSet(object.timestamp) ? Number(object.timestamp) : undefined,
      globalOrigin: isSet(object.globalOrigin) ? Vector3.fromJSON(object.globalOrigin) : undefined,
      direction: isSet(object.direction) ? Vector3.fromJSON(object.direction) : undefined,
      hits: Array.isArray(object?.hits) ? object.hits.map((e: any) => RaycastHit.fromJSON(e)) : [],
      tickNumber: isSet(object.tickNumber) ? Number(object.tickNumber) : 0,
    };
  }

  export function toJSON(message: PBRaycastResult): unknown {
    const obj: any = {};
    message.timestamp !== undefined && (obj.timestamp = Math.round(message.timestamp));
    message.globalOrigin !== undefined &&
      (obj.globalOrigin = message.globalOrigin ? Vector3.toJSON(message.globalOrigin) : undefined);
    message.direction !== undefined &&
      (obj.direction = message.direction ? Vector3.toJSON(message.direction) : undefined);
    if (message.hits) {
      obj.hits = message.hits.map((e) => e ? RaycastHit.toJSON(e) : undefined);
    } else {
      obj.hits = [];
    }
    message.tickNumber !== undefined && (obj.tickNumber = Math.round(message.tickNumber));
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBRaycastResult>, I>>(base?: I): PBRaycastResult {
    return PBRaycastResult.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBRaycastResult>, I>>(object: I): PBRaycastResult {
    const message = createBasePBRaycastResult();
    message.timestamp = object.timestamp ?? undefined;
    message.globalOrigin = (object.globalOrigin !== undefined && object.globalOrigin !== null)
      ? Vector3.fromPartial(object.globalOrigin)
      : undefined;
    message.direction = (object.direction !== undefined && object.direction !== null)
      ? Vector3.fromPartial(object.direction)
      : undefined;
    message.hits = object.hits?.map((e) => RaycastHit.fromPartial(e)) || [];
    message.tickNumber = object.tickNumber ?? 0;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
