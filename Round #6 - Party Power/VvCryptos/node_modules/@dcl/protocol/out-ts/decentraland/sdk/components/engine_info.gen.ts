/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "decentraland.sdk.components";

/**
 * EngineInfo provides information about the graphics engine running the scene.
 * The values of this component are written at the "physics" stage of the ADR-148. Meaning
 * the tick_number and frame_number of the same frame could be used as correlation numbers
 * for timestamps in other components.
 */
export interface PBEngineInfo {
  /** frame counter of the engine */
  frameNumber: number;
  /** total runtime of this scene in seconds */
  totalRuntime: number;
  /** tick counter of the scene as per ADR-148 */
  tickNumber: number;
}

function createBasePBEngineInfo(): PBEngineInfo {
  return { frameNumber: 0, totalRuntime: 0, tickNumber: 0 };
}

export namespace PBEngineInfo {
  export function encode(message: PBEngineInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.frameNumber !== 0) {
      writer.uint32(8).uint32(message.frameNumber);
    }
    if (message.totalRuntime !== 0) {
      writer.uint32(21).float(message.totalRuntime);
    }
    if (message.tickNumber !== 0) {
      writer.uint32(24).uint32(message.tickNumber);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBEngineInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBEngineInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.frameNumber = reader.uint32();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.totalRuntime = reader.float();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.tickNumber = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBEngineInfo {
    return {
      frameNumber: isSet(object.frameNumber) ? Number(object.frameNumber) : 0,
      totalRuntime: isSet(object.totalRuntime) ? Number(object.totalRuntime) : 0,
      tickNumber: isSet(object.tickNumber) ? Number(object.tickNumber) : 0,
    };
  }

  export function toJSON(message: PBEngineInfo): unknown {
    const obj: any = {};
    message.frameNumber !== undefined && (obj.frameNumber = Math.round(message.frameNumber));
    message.totalRuntime !== undefined && (obj.totalRuntime = message.totalRuntime);
    message.tickNumber !== undefined && (obj.tickNumber = Math.round(message.tickNumber));
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBEngineInfo>, I>>(base?: I): PBEngineInfo {
    return PBEngineInfo.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBEngineInfo>, I>>(object: I): PBEngineInfo {
    const message = createBasePBEngineInfo();
    message.frameNumber = object.frameNumber ?? 0;
    message.totalRuntime = object.totalRuntime ?? 0;
    message.tickNumber = object.tickNumber ?? 0;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
