/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Color3 } from "../../common/colors.gen";

export const protobufPackage = "decentraland.sdk.components";

/**
 * The AvatarShape component contains the information required to draw and animate avatar, acting as
 * a simplified GLTF container for this specific case.
 *
 * All fields (except ID) are optional have reasonable default values. In the case of `wearables`,
 * each slot on the Avatar's body that is not explicitly included in the list has its own default.
 *
 * Note that, while AvatarShape can be attached to any Entity, it's only actually used in the global
 * Avatar Scene. Other requirements are usually better served by GLTFs.
 */
export interface PBAvatarShape {
  /** the user ID */
  id: string;
  /** visible name (default: "NPC") */
  name?:
    | string
    | undefined;
  /** shape URN (default "urn:decentraland:off-chain:base-avatars:BaseFemale") */
  bodyShape?:
    | string
    | undefined;
  /** RGB (default [0.6, 0.462, 0.356]) */
  skinColor?:
    | Color3
    | undefined;
  /** RGB (default [0.283, 0.142, 0]) */
  hairColor?:
    | Color3
    | undefined;
  /** RGB (default [0.6, 0.462, 0.356]) */
  eyeColor?:
    | Color3
    | undefined;
  /** current emote animations */
  expressionTriggerId?:
    | string
    | undefined;
  /** start of emote animations (in the same order) */
  expressionTriggerTimestamp?:
    | number
    | undefined;
  /** whether to display the floating voice chat icon */
  talking?:
    | boolean
    | undefined;
  /**
   * Wearable URNs, one for each body slot.
   *   Default values for each unspecified slot:
   *     Eyes    : "urn:decentraland:off-chain:base-avatars:f_eyes_00",
   *     Eyebrows: "urn:decentraland:off-chain:base-avatars:f_eyebrows_00",
   *     Mouth   : "urn:decentraland:off-chain:base-avatars:f_mouth_00"
   *     Hair    : "urn:decentraland:off-chain:base-avatars:standard_hair",
   *     Shirt   : "urn:decentraland:off-chain:base-avatars:f_simple_yellow_tshirt",
   *     Trousers: "urn:decentraland:off-chain:base-avatars:f_brown_trousers",
   *     Shoes   : "urn:decentraland:off-chain:base-avatars:bun_shoes"]
   */
  wearables: string[];
  /** available emotes (default empty) */
  emotes: string[];
}

function createBasePBAvatarShape(): PBAvatarShape {
  return {
    id: "",
    name: undefined,
    bodyShape: undefined,
    skinColor: undefined,
    hairColor: undefined,
    eyeColor: undefined,
    expressionTriggerId: undefined,
    expressionTriggerTimestamp: undefined,
    talking: undefined,
    wearables: [],
    emotes: [],
  };
}

export namespace PBAvatarShape {
  export function encode(message: PBAvatarShape, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.bodyShape !== undefined) {
      writer.uint32(26).string(message.bodyShape);
    }
    if (message.skinColor !== undefined) {
      Color3.encode(message.skinColor, writer.uint32(34).fork()).ldelim();
    }
    if (message.hairColor !== undefined) {
      Color3.encode(message.hairColor, writer.uint32(42).fork()).ldelim();
    }
    if (message.eyeColor !== undefined) {
      Color3.encode(message.eyeColor, writer.uint32(50).fork()).ldelim();
    }
    if (message.expressionTriggerId !== undefined) {
      writer.uint32(58).string(message.expressionTriggerId);
    }
    if (message.expressionTriggerTimestamp !== undefined) {
      writer.uint32(64).int64(message.expressionTriggerTimestamp);
    }
    if (message.talking !== undefined) {
      writer.uint32(72).bool(message.talking);
    }
    for (const v of message.wearables) {
      writer.uint32(82).string(v!);
    }
    for (const v of message.emotes) {
      writer.uint32(90).string(v!);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBAvatarShape {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBAvatarShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.bodyShape = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.skinColor = Color3.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.hairColor = Color3.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.eyeColor = Color3.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.expressionTriggerId = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.expressionTriggerTimestamp = longToNumber(reader.int64() as Long);
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.talking = reader.bool();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.wearables.push(reader.string());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.emotes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBAvatarShape {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : undefined,
      bodyShape: isSet(object.bodyShape) ? String(object.bodyShape) : undefined,
      skinColor: isSet(object.skinColor) ? Color3.fromJSON(object.skinColor) : undefined,
      hairColor: isSet(object.hairColor) ? Color3.fromJSON(object.hairColor) : undefined,
      eyeColor: isSet(object.eyeColor) ? Color3.fromJSON(object.eyeColor) : undefined,
      expressionTriggerId: isSet(object.expressionTriggerId) ? String(object.expressionTriggerId) : undefined,
      expressionTriggerTimestamp: isSet(object.expressionTriggerTimestamp)
        ? Number(object.expressionTriggerTimestamp)
        : undefined,
      talking: isSet(object.talking) ? Boolean(object.talking) : undefined,
      wearables: Array.isArray(object?.wearables) ? object.wearables.map((e: any) => String(e)) : [],
      emotes: Array.isArray(object?.emotes) ? object.emotes.map((e: any) => String(e)) : [],
    };
  }

  export function toJSON(message: PBAvatarShape): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.name !== undefined && (obj.name = message.name);
    message.bodyShape !== undefined && (obj.bodyShape = message.bodyShape);
    message.skinColor !== undefined &&
      (obj.skinColor = message.skinColor ? Color3.toJSON(message.skinColor) : undefined);
    message.hairColor !== undefined &&
      (obj.hairColor = message.hairColor ? Color3.toJSON(message.hairColor) : undefined);
    message.eyeColor !== undefined && (obj.eyeColor = message.eyeColor ? Color3.toJSON(message.eyeColor) : undefined);
    message.expressionTriggerId !== undefined && (obj.expressionTriggerId = message.expressionTriggerId);
    message.expressionTriggerTimestamp !== undefined &&
      (obj.expressionTriggerTimestamp = Math.round(message.expressionTriggerTimestamp));
    message.talking !== undefined && (obj.talking = message.talking);
    if (message.wearables) {
      obj.wearables = message.wearables.map((e) => e);
    } else {
      obj.wearables = [];
    }
    if (message.emotes) {
      obj.emotes = message.emotes.map((e) => e);
    } else {
      obj.emotes = [];
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBAvatarShape>, I>>(base?: I): PBAvatarShape {
    return PBAvatarShape.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBAvatarShape>, I>>(object: I): PBAvatarShape {
    const message = createBasePBAvatarShape();
    message.id = object.id ?? "";
    message.name = object.name ?? undefined;
    message.bodyShape = object.bodyShape ?? undefined;
    message.skinColor = (object.skinColor !== undefined && object.skinColor !== null)
      ? Color3.fromPartial(object.skinColor)
      : undefined;
    message.hairColor = (object.hairColor !== undefined && object.hairColor !== null)
      ? Color3.fromPartial(object.hairColor)
      : undefined;
    message.eyeColor = (object.eyeColor !== undefined && object.eyeColor !== null)
      ? Color3.fromPartial(object.eyeColor)
      : undefined;
    message.expressionTriggerId = object.expressionTriggerId ?? undefined;
    message.expressionTriggerTimestamp = object.expressionTriggerTimestamp ?? undefined;
    message.talking = object.talking ?? undefined;
    message.wearables = object.wearables?.map((e) => e) || [];
    message.emotes = object.emotes?.map((e) => e) || [];
    return message;
  }
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
