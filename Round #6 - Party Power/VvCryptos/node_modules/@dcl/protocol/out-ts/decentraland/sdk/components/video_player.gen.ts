/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "decentraland.sdk.components";

export interface PBVideoPlayer {
  /** which file to load */
  src: string;
  /** default true */
  playing?:
    | boolean
    | undefined;
  /** default 0.0 */
  position?:
    | number
    | undefined;
  /** default 1.0 */
  volume?:
    | number
    | undefined;
  /** default 1.0 */
  playbackRate?:
    | number
    | undefined;
  /** default false */
  loop?: boolean | undefined;
}

function createBasePBVideoPlayer(): PBVideoPlayer {
  return {
    src: "",
    playing: undefined,
    position: undefined,
    volume: undefined,
    playbackRate: undefined,
    loop: undefined,
  };
}

export namespace PBVideoPlayer {
  export function encode(message: PBVideoPlayer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.src !== "") {
      writer.uint32(10).string(message.src);
    }
    if (message.playing !== undefined) {
      writer.uint32(16).bool(message.playing);
    }
    if (message.position !== undefined) {
      writer.uint32(29).float(message.position);
    }
    if (message.volume !== undefined) {
      writer.uint32(37).float(message.volume);
    }
    if (message.playbackRate !== undefined) {
      writer.uint32(45).float(message.playbackRate);
    }
    if (message.loop !== undefined) {
      writer.uint32(48).bool(message.loop);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBVideoPlayer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBVideoPlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.src = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.playing = reader.bool();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.position = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.volume = reader.float();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.playbackRate = reader.float();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.loop = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBVideoPlayer {
    return {
      src: isSet(object.src) ? String(object.src) : "",
      playing: isSet(object.playing) ? Boolean(object.playing) : undefined,
      position: isSet(object.position) ? Number(object.position) : undefined,
      volume: isSet(object.volume) ? Number(object.volume) : undefined,
      playbackRate: isSet(object.playbackRate) ? Number(object.playbackRate) : undefined,
      loop: isSet(object.loop) ? Boolean(object.loop) : undefined,
    };
  }

  export function toJSON(message: PBVideoPlayer): unknown {
    const obj: any = {};
    message.src !== undefined && (obj.src = message.src);
    message.playing !== undefined && (obj.playing = message.playing);
    message.position !== undefined && (obj.position = message.position);
    message.volume !== undefined && (obj.volume = message.volume);
    message.playbackRate !== undefined && (obj.playbackRate = message.playbackRate);
    message.loop !== undefined && (obj.loop = message.loop);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBVideoPlayer>, I>>(base?: I): PBVideoPlayer {
    return PBVideoPlayer.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBVideoPlayer>, I>>(object: I): PBVideoPlayer {
    const message = createBasePBVideoPlayer();
    message.src = object.src ?? "";
    message.playing = object.playing ?? undefined;
    message.position = object.position ?? undefined;
    message.volume = object.volume ?? undefined;
    message.playbackRate = object.playbackRate ?? undefined;
    message.loop = object.loop ?? undefined;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
