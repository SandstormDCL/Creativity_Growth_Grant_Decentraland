/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "decentraland.sdk.components";

/**
 * BillboardMode indicates one or more axis for automatic rotation, in OR-able bit flag form.
 * Only the values below and the (BM_X | BM_Y) combination are valid.
 */
export enum BillboardMode {
  BM_NONE = 0,
  BM_X = 1,
  BM_Y = 2,
  BM_Z = 4,
  /** BM_ALL - bitwise combination BM_X | BM_Y | BM_Z */
  BM_ALL = 7,
  UNRECOGNIZED = -1,
}

export function billboardModeFromJSON(object: any): BillboardMode {
  switch (object) {
    case 0:
    case "BM_NONE":
      return BillboardMode.BM_NONE;
    case 1:
    case "BM_X":
      return BillboardMode.BM_X;
    case 2:
    case "BM_Y":
      return BillboardMode.BM_Y;
    case 4:
    case "BM_Z":
      return BillboardMode.BM_Z;
    case 7:
    case "BM_ALL":
      return BillboardMode.BM_ALL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BillboardMode.UNRECOGNIZED;
  }
}

export function billboardModeToJSON(object: BillboardMode): string {
  switch (object) {
    case BillboardMode.BM_NONE:
      return "BM_NONE";
    case BillboardMode.BM_X:
      return "BM_X";
    case BillboardMode.BM_Y:
      return "BM_Y";
    case BillboardMode.BM_Z:
      return "BM_Z";
    case BillboardMode.BM_ALL:
      return "BM_ALL";
    case BillboardMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The Billboard component makes an Entity automatically reorient its rotation to face the camera.
 * As the name indicates, itâ€™s used to display in-game billboards and frequently combined with
 * the TextShape component.
 *
 * Billboard only affects the Entity's rotation. Its scale and position are still determined by its
 * Transform.
 */
export interface PBBillboard {
  /** the BillboardMode (default: BM_ALL) */
  billboardMode?: BillboardMode | undefined;
}

function createBasePBBillboard(): PBBillboard {
  return { billboardMode: undefined };
}

export namespace PBBillboard {
  export function encode(message: PBBillboard, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.billboardMode !== undefined) {
      writer.uint32(8).int32(message.billboardMode);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBBillboard {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBBillboard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.billboardMode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBBillboard {
    return { billboardMode: isSet(object.billboardMode) ? billboardModeFromJSON(object.billboardMode) : undefined };
  }

  export function toJSON(message: PBBillboard): unknown {
    const obj: any = {};
    message.billboardMode !== undefined &&
      (obj.billboardMode = message.billboardMode !== undefined
        ? billboardModeToJSON(message.billboardMode)
        : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBBillboard>, I>>(base?: I): PBBillboard {
    return PBBillboard.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBBillboard>, I>>(object: I): PBBillboard {
    const message = createBasePBBillboard();
    message.billboardMode = object.billboardMode ?? undefined;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
