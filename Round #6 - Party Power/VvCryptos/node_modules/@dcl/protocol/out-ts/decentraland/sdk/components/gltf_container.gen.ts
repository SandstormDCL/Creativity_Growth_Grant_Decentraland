/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "decentraland.sdk.components";

/**
 * GltfContainer loads a GLTF file (and any additional files packaged inside) attached to an Entity.
 *
 * This allows the use of custom models, materials, collision boundaries and shapes that can't be
 * achieved using MeshRenderer, MeshCollider and other standard components.
 */
export interface PBGltfContainer {
  /** the GLTF file path as listed in the scene's manifest. */
  src: string;
  /** default: 0 */
  visibleMeshesCollisionMask?:
    | number
    | undefined;
  /** default: CL_POINTER | CL_PHYSICS */
  invisibleMeshesCollisionMask?: number | undefined;
}

function createBasePBGltfContainer(): PBGltfContainer {
  return { src: "", visibleMeshesCollisionMask: undefined, invisibleMeshesCollisionMask: undefined };
}

export namespace PBGltfContainer {
  export function encode(message: PBGltfContainer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.src !== "") {
      writer.uint32(10).string(message.src);
    }
    if (message.visibleMeshesCollisionMask !== undefined) {
      writer.uint32(32).uint32(message.visibleMeshesCollisionMask);
    }
    if (message.invisibleMeshesCollisionMask !== undefined) {
      writer.uint32(40).uint32(message.invisibleMeshesCollisionMask);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBGltfContainer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBGltfContainer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.src = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.visibleMeshesCollisionMask = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.invisibleMeshesCollisionMask = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBGltfContainer {
    return {
      src: isSet(object.src) ? String(object.src) : "",
      visibleMeshesCollisionMask: isSet(object.visibleMeshesCollisionMask)
        ? Number(object.visibleMeshesCollisionMask)
        : undefined,
      invisibleMeshesCollisionMask: isSet(object.invisibleMeshesCollisionMask)
        ? Number(object.invisibleMeshesCollisionMask)
        : undefined,
    };
  }

  export function toJSON(message: PBGltfContainer): unknown {
    const obj: any = {};
    message.src !== undefined && (obj.src = message.src);
    message.visibleMeshesCollisionMask !== undefined &&
      (obj.visibleMeshesCollisionMask = Math.round(message.visibleMeshesCollisionMask));
    message.invisibleMeshesCollisionMask !== undefined &&
      (obj.invisibleMeshesCollisionMask = Math.round(message.invisibleMeshesCollisionMask));
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBGltfContainer>, I>>(base?: I): PBGltfContainer {
    return PBGltfContainer.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBGltfContainer>, I>>(object: I): PBGltfContainer {
    const message = createBasePBGltfContainer();
    message.src = object.src ?? "";
    message.visibleMeshesCollisionMask = object.visibleMeshesCollisionMask ?? undefined;
    message.invisibleMeshesCollisionMask = object.invisibleMeshesCollisionMask ?? undefined;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
