/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Vector3 } from "../../../common/vectors.gen";

export const protobufPackage = "decentraland.sdk.components.common";

/** RaycastHit contains information about the intersection of a ray with a mesh. */
export interface RaycastHit {
  /** Position will be relative to the scene */
  position:
    | Vector3
    | undefined;
  /** the starting point of the ray in global coordinates */
  globalOrigin:
    | Vector3
    | undefined;
  /** the direction vector of the ray in global coordinates */
  direction:
    | Vector3
    | undefined;
  /** normal of the hit surface in global coordinates */
  normalHit:
    | Vector3
    | undefined;
  /** the distance between the ray origin and the hit position */
  length: number;
  /** mesh name, if collision happened inside a GltfContainer */
  meshName?:
    | string
    | undefined;
  /** the ID of the Entity that has the impacted mesh attached */
  entityId?: number | undefined;
}

function createBaseRaycastHit(): RaycastHit {
  return {
    position: undefined,
    globalOrigin: undefined,
    direction: undefined,
    normalHit: undefined,
    length: 0,
    meshName: undefined,
    entityId: undefined,
  };
}

export namespace RaycastHit {
  export function encode(message: RaycastHit, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.position !== undefined) {
      Vector3.encode(message.position, writer.uint32(10).fork()).ldelim();
    }
    if (message.globalOrigin !== undefined) {
      Vector3.encode(message.globalOrigin, writer.uint32(18).fork()).ldelim();
    }
    if (message.direction !== undefined) {
      Vector3.encode(message.direction, writer.uint32(26).fork()).ldelim();
    }
    if (message.normalHit !== undefined) {
      Vector3.encode(message.normalHit, writer.uint32(34).fork()).ldelim();
    }
    if (message.length !== 0) {
      writer.uint32(45).float(message.length);
    }
    if (message.meshName !== undefined) {
      writer.uint32(50).string(message.meshName);
    }
    if (message.entityId !== undefined) {
      writer.uint32(56).uint32(message.entityId);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): RaycastHit {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRaycastHit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.position = Vector3.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.globalOrigin = Vector3.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.direction = Vector3.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.normalHit = Vector3.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.length = reader.float();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.meshName = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.entityId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): RaycastHit {
    return {
      position: isSet(object.position) ? Vector3.fromJSON(object.position) : undefined,
      globalOrigin: isSet(object.globalOrigin) ? Vector3.fromJSON(object.globalOrigin) : undefined,
      direction: isSet(object.direction) ? Vector3.fromJSON(object.direction) : undefined,
      normalHit: isSet(object.normalHit) ? Vector3.fromJSON(object.normalHit) : undefined,
      length: isSet(object.length) ? Number(object.length) : 0,
      meshName: isSet(object.meshName) ? String(object.meshName) : undefined,
      entityId: isSet(object.entityId) ? Number(object.entityId) : undefined,
    };
  }

  export function toJSON(message: RaycastHit): unknown {
    const obj: any = {};
    message.position !== undefined && (obj.position = message.position ? Vector3.toJSON(message.position) : undefined);
    message.globalOrigin !== undefined &&
      (obj.globalOrigin = message.globalOrigin ? Vector3.toJSON(message.globalOrigin) : undefined);
    message.direction !== undefined &&
      (obj.direction = message.direction ? Vector3.toJSON(message.direction) : undefined);
    message.normalHit !== undefined &&
      (obj.normalHit = message.normalHit ? Vector3.toJSON(message.normalHit) : undefined);
    message.length !== undefined && (obj.length = message.length);
    message.meshName !== undefined && (obj.meshName = message.meshName);
    message.entityId !== undefined && (obj.entityId = Math.round(message.entityId));
    return obj;
  }

  export function create<I extends Exact<DeepPartial<RaycastHit>, I>>(base?: I): RaycastHit {
    return RaycastHit.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<RaycastHit>, I>>(object: I): RaycastHit {
    const message = createBaseRaycastHit();
    message.position = (object.position !== undefined && object.position !== null)
      ? Vector3.fromPartial(object.position)
      : undefined;
    message.globalOrigin = (object.globalOrigin !== undefined && object.globalOrigin !== null)
      ? Vector3.fromPartial(object.globalOrigin)
      : undefined;
    message.direction = (object.direction !== undefined && object.direction !== null)
      ? Vector3.fromPartial(object.direction)
      : undefined;
    message.normalHit = (object.normalHit !== undefined && object.normalHit !== null)
      ? Vector3.fromPartial(object.normalHit)
      : undefined;
    message.length = object.length ?? 0;
    message.meshName = object.meshName ?? undefined;
    message.entityId = object.entityId ?? undefined;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
