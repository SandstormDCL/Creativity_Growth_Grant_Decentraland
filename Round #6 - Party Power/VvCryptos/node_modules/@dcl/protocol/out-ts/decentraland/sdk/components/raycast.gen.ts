/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Vector3 } from "../../common/vectors.gen";

export const protobufPackage = "decentraland.sdk.components";

/** RaycastQueryType indicates whether the ray should stop on the first collition, or continue. */
export enum RaycastQueryType {
  /** RQT_HIT_FIRST - Pick the first (not necessarily the closest) hit within the range */
  RQT_HIT_FIRST = 0,
  /** RQT_QUERY_ALL - Pick all hits within the range */
  RQT_QUERY_ALL = 1,
  /** RQT_NONE - Do not perform the raycast, only set the raycast result with empty hits */
  RQT_NONE = 2,
  UNRECOGNIZED = -1,
}

export function raycastQueryTypeFromJSON(object: any): RaycastQueryType {
  switch (object) {
    case 0:
    case "RQT_HIT_FIRST":
      return RaycastQueryType.RQT_HIT_FIRST;
    case 1:
    case "RQT_QUERY_ALL":
      return RaycastQueryType.RQT_QUERY_ALL;
    case 2:
    case "RQT_NONE":
      return RaycastQueryType.RQT_NONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RaycastQueryType.UNRECOGNIZED;
  }
}

export function raycastQueryTypeToJSON(object: RaycastQueryType): string {
  switch (object) {
    case RaycastQueryType.RQT_HIT_FIRST:
      return "RQT_HIT_FIRST";
    case RaycastQueryType.RQT_QUERY_ALL:
      return "RQT_QUERY_ALL";
    case RaycastQueryType.RQT_NONE:
      return "RQT_NONE";
    case RaycastQueryType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The PBRaycast component and PBRaycastResult are defined in https://adr.decentraland.org/adr/ADR-200
 *
 * The Raycast component allows scenes to request raycasting from the game engine. The results will
 * be available in a RaycastResult component set later on the same Entity.
 */
export interface PBRaycast {
  /** Correlation ID, defined by the scene and used internally by the scene */
  timestamp?:
    | number
    | undefined;
  /**
   * How much to offset the starting point of the ray, relative to the entity's transform.
   * Defaults to vec3(0,0,0)
   */
  originOffset?: Vector3 | undefined;
  direction?:
    | { $case: "localDirection"; localDirection: Vector3 }
    | { $case: "globalDirection"; globalDirection: Vector3 }
    | { $case: "globalTarget"; globalTarget: Vector3 }
    | { $case: "targetEntity"; targetEntity: number }
    | undefined;
  /** Maximum length of the ray in virtual meters (global space) */
  maxDistance: number;
  /** the RaycastQueryType behavior */
  queryType: RaycastQueryType;
  /**
   * Indicates the renderer to perform the raycast on every scene tick (ADR-148),
   * otherwise it will be performed only once, defaults to false
   */
  continuous?:
    | boolean
    | undefined;
  /** Collision mask, by default CL_POINTER | CL_PHYSICS */
  collisionMask?: number | undefined;
}

function createBasePBRaycast(): PBRaycast {
  return {
    timestamp: undefined,
    originOffset: undefined,
    direction: undefined,
    maxDistance: 0,
    queryType: 0,
    continuous: undefined,
    collisionMask: undefined,
  };
}

export namespace PBRaycast {
  export function encode(message: PBRaycast, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.timestamp !== undefined) {
      writer.uint32(8).uint32(message.timestamp);
    }
    if (message.originOffset !== undefined) {
      Vector3.encode(message.originOffset, writer.uint32(18).fork()).ldelim();
    }
    switch (message.direction?.$case) {
      case "localDirection":
        Vector3.encode(message.direction.localDirection, writer.uint32(50).fork()).ldelim();
        break;
      case "globalDirection":
        Vector3.encode(message.direction.globalDirection, writer.uint32(26).fork()).ldelim();
        break;
      case "globalTarget":
        Vector3.encode(message.direction.globalTarget, writer.uint32(58).fork()).ldelim();
        break;
      case "targetEntity":
        writer.uint32(80).uint32(message.direction.targetEntity);
        break;
    }
    if (message.maxDistance !== 0) {
      writer.uint32(37).float(message.maxDistance);
    }
    if (message.queryType !== 0) {
      writer.uint32(40).int32(message.queryType);
    }
    if (message.continuous !== undefined) {
      writer.uint32(64).bool(message.continuous);
    }
    if (message.collisionMask !== undefined) {
      writer.uint32(72).uint32(message.collisionMask);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBRaycast {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBRaycast();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.timestamp = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.originOffset = Vector3.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.direction = { $case: "localDirection", localDirection: Vector3.decode(reader, reader.uint32()) };
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.direction = { $case: "globalDirection", globalDirection: Vector3.decode(reader, reader.uint32()) };
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.direction = { $case: "globalTarget", globalTarget: Vector3.decode(reader, reader.uint32()) };
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.direction = { $case: "targetEntity", targetEntity: reader.uint32() };
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.maxDistance = reader.float();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.queryType = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.continuous = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.collisionMask = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBRaycast {
    return {
      timestamp: isSet(object.timestamp) ? Number(object.timestamp) : undefined,
      originOffset: isSet(object.originOffset) ? Vector3.fromJSON(object.originOffset) : undefined,
      direction: isSet(object.localDirection)
        ? { $case: "localDirection", localDirection: Vector3.fromJSON(object.localDirection) }
        : isSet(object.globalDirection)
        ? { $case: "globalDirection", globalDirection: Vector3.fromJSON(object.globalDirection) }
        : isSet(object.globalTarget)
        ? { $case: "globalTarget", globalTarget: Vector3.fromJSON(object.globalTarget) }
        : isSet(object.targetEntity)
        ? { $case: "targetEntity", targetEntity: Number(object.targetEntity) }
        : undefined,
      maxDistance: isSet(object.maxDistance) ? Number(object.maxDistance) : 0,
      queryType: isSet(object.queryType) ? raycastQueryTypeFromJSON(object.queryType) : 0,
      continuous: isSet(object.continuous) ? Boolean(object.continuous) : undefined,
      collisionMask: isSet(object.collisionMask) ? Number(object.collisionMask) : undefined,
    };
  }

  export function toJSON(message: PBRaycast): unknown {
    const obj: any = {};
    message.timestamp !== undefined && (obj.timestamp = Math.round(message.timestamp));
    message.originOffset !== undefined &&
      (obj.originOffset = message.originOffset ? Vector3.toJSON(message.originOffset) : undefined);
    message.direction?.$case === "localDirection" &&
      (obj.localDirection = message.direction?.localDirection
        ? Vector3.toJSON(message.direction?.localDirection)
        : undefined);
    message.direction?.$case === "globalDirection" &&
      (obj.globalDirection = message.direction?.globalDirection
        ? Vector3.toJSON(message.direction?.globalDirection)
        : undefined);
    message.direction?.$case === "globalTarget" &&
      (obj.globalTarget = message.direction?.globalTarget
        ? Vector3.toJSON(message.direction?.globalTarget)
        : undefined);
    message.direction?.$case === "targetEntity" && (obj.targetEntity = Math.round(message.direction?.targetEntity));
    message.maxDistance !== undefined && (obj.maxDistance = message.maxDistance);
    message.queryType !== undefined && (obj.queryType = raycastQueryTypeToJSON(message.queryType));
    message.continuous !== undefined && (obj.continuous = message.continuous);
    message.collisionMask !== undefined && (obj.collisionMask = Math.round(message.collisionMask));
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBRaycast>, I>>(base?: I): PBRaycast {
    return PBRaycast.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBRaycast>, I>>(object: I): PBRaycast {
    const message = createBasePBRaycast();
    message.timestamp = object.timestamp ?? undefined;
    message.originOffset = (object.originOffset !== undefined && object.originOffset !== null)
      ? Vector3.fromPartial(object.originOffset)
      : undefined;
    if (
      object.direction?.$case === "localDirection" &&
      object.direction?.localDirection !== undefined &&
      object.direction?.localDirection !== null
    ) {
      message.direction = {
        $case: "localDirection",
        localDirection: Vector3.fromPartial(object.direction.localDirection),
      };
    }
    if (
      object.direction?.$case === "globalDirection" &&
      object.direction?.globalDirection !== undefined &&
      object.direction?.globalDirection !== null
    ) {
      message.direction = {
        $case: "globalDirection",
        globalDirection: Vector3.fromPartial(object.direction.globalDirection),
      };
    }
    if (
      object.direction?.$case === "globalTarget" &&
      object.direction?.globalTarget !== undefined &&
      object.direction?.globalTarget !== null
    ) {
      message.direction = { $case: "globalTarget", globalTarget: Vector3.fromPartial(object.direction.globalTarget) };
    }
    if (
      object.direction?.$case === "targetEntity" &&
      object.direction?.targetEntity !== undefined &&
      object.direction?.targetEntity !== null
    ) {
      message.direction = { $case: "targetEntity", targetEntity: object.direction.targetEntity };
    }
    message.maxDistance = object.maxDistance ?? 0;
    message.queryType = object.queryType ?? 0;
    message.continuous = object.continuous ?? undefined;
    message.collisionMask = object.collisionMask ?? undefined;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
