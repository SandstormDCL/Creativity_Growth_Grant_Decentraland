/* eslint-disable */
import _m0 from "protobufjs/minimal";
import {
  InputAction,
  inputActionFromJSON,
  inputActionToJSON,
  PointerEventType,
  pointerEventTypeFromJSON,
  pointerEventTypeToJSON,
} from "./common/input_action.gen";
import { RaycastHit } from "./common/raycast_hit.gen";

export const protobufPackage = "decentraland.sdk.components";

/** renderer append a new object of this in each command, there can be many commands per frames */
export interface PBPointerEventsResult {
  /** identifier of the input */
  button: InputAction;
  hit: RaycastHit | undefined;
  state: PointerEventType;
  /** monotonic counter */
  timestamp: number;
  /** if the input is analog then we store it here */
  analog?:
    | number
    | undefined;
  /** number of tick in which the event was produced, equals to EngineInfo.tick_number */
  tickNumber: number;
}

function createBasePBPointerEventsResult(): PBPointerEventsResult {
  return { button: 0, hit: undefined, state: 0, timestamp: 0, analog: undefined, tickNumber: 0 };
}

export namespace PBPointerEventsResult {
  export function encode(message: PBPointerEventsResult, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.button !== 0) {
      writer.uint32(8).int32(message.button);
    }
    if (message.hit !== undefined) {
      RaycastHit.encode(message.hit, writer.uint32(18).fork()).ldelim();
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.timestamp !== 0) {
      writer.uint32(40).uint32(message.timestamp);
    }
    if (message.analog !== undefined) {
      writer.uint32(53).float(message.analog);
    }
    if (message.tickNumber !== 0) {
      writer.uint32(56).uint32(message.tickNumber);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBPointerEventsResult {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBPointerEventsResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.button = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hit = RaycastHit.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.timestamp = reader.uint32();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.analog = reader.float();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.tickNumber = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBPointerEventsResult {
    return {
      button: isSet(object.button) ? inputActionFromJSON(object.button) : 0,
      hit: isSet(object.hit) ? RaycastHit.fromJSON(object.hit) : undefined,
      state: isSet(object.state) ? pointerEventTypeFromJSON(object.state) : 0,
      timestamp: isSet(object.timestamp) ? Number(object.timestamp) : 0,
      analog: isSet(object.analog) ? Number(object.analog) : undefined,
      tickNumber: isSet(object.tickNumber) ? Number(object.tickNumber) : 0,
    };
  }

  export function toJSON(message: PBPointerEventsResult): unknown {
    const obj: any = {};
    message.button !== undefined && (obj.button = inputActionToJSON(message.button));
    message.hit !== undefined && (obj.hit = message.hit ? RaycastHit.toJSON(message.hit) : undefined);
    message.state !== undefined && (obj.state = pointerEventTypeToJSON(message.state));
    message.timestamp !== undefined && (obj.timestamp = Math.round(message.timestamp));
    message.analog !== undefined && (obj.analog = message.analog);
    message.tickNumber !== undefined && (obj.tickNumber = Math.round(message.tickNumber));
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBPointerEventsResult>, I>>(base?: I): PBPointerEventsResult {
    return PBPointerEventsResult.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBPointerEventsResult>, I>>(
    object: I,
  ): PBPointerEventsResult {
    const message = createBasePBPointerEventsResult();
    message.button = object.button ?? 0;
    message.hit = (object.hit !== undefined && object.hit !== null) ? RaycastHit.fromPartial(object.hit) : undefined;
    message.state = object.state ?? 0;
    message.timestamp = object.timestamp ?? 0;
    message.analog = object.analog ?? undefined;
    message.tickNumber = object.tickNumber ?? 0;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
