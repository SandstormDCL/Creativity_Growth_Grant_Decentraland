/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Color3, Color4 } from "../../common/colors.gen";
import { TextureUnion } from "../../common/texture.gen";

export const protobufPackage = "decentraland.sdk.components";

export enum MaterialTransparencyMode {
  MTM_OPAQUE = 0,
  MTM_ALPHA_TEST = 1,
  MTM_ALPHA_BLEND = 2,
  MTM_ALPHA_TEST_AND_ALPHA_BLEND = 3,
  MTM_AUTO = 4,
  UNRECOGNIZED = -1,
}

export function materialTransparencyModeFromJSON(object: any): MaterialTransparencyMode {
  switch (object) {
    case 0:
    case "MTM_OPAQUE":
      return MaterialTransparencyMode.MTM_OPAQUE;
    case 1:
    case "MTM_ALPHA_TEST":
      return MaterialTransparencyMode.MTM_ALPHA_TEST;
    case 2:
    case "MTM_ALPHA_BLEND":
      return MaterialTransparencyMode.MTM_ALPHA_BLEND;
    case 3:
    case "MTM_ALPHA_TEST_AND_ALPHA_BLEND":
      return MaterialTransparencyMode.MTM_ALPHA_TEST_AND_ALPHA_BLEND;
    case 4:
    case "MTM_AUTO":
      return MaterialTransparencyMode.MTM_AUTO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MaterialTransparencyMode.UNRECOGNIZED;
  }
}

export function materialTransparencyModeToJSON(object: MaterialTransparencyMode): string {
  switch (object) {
    case MaterialTransparencyMode.MTM_OPAQUE:
      return "MTM_OPAQUE";
    case MaterialTransparencyMode.MTM_ALPHA_TEST:
      return "MTM_ALPHA_TEST";
    case MaterialTransparencyMode.MTM_ALPHA_BLEND:
      return "MTM_ALPHA_BLEND";
    case MaterialTransparencyMode.MTM_ALPHA_TEST_AND_ALPHA_BLEND:
      return "MTM_ALPHA_TEST_AND_ALPHA_BLEND";
    case MaterialTransparencyMode.MTM_AUTO:
      return "MTM_AUTO";
    case MaterialTransparencyMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PBMaterial {
  material?:
    | { $case: "unlit"; unlit: PBMaterial_UnlitMaterial }
    | { $case: "pbr"; pbr: PBMaterial_PbrMaterial }
    | undefined;
}

export interface PBMaterial_UnlitMaterial {
  /** default = null */
  texture?:
    | TextureUnion
    | undefined;
  /** default = 0.5. range value: from 0 to 1 */
  alphaTest?:
    | number
    | undefined;
  /** default =  true */
  castShadows?:
    | boolean
    | undefined;
  /** default = white; */
  diffuseColor?:
    | Color4
    | undefined;
  /** default = null */
  alphaTexture?: TextureUnion | undefined;
}

export interface PBMaterial_PbrMaterial {
  /** default = null */
  texture?:
    | TextureUnion
    | undefined;
  /** default = 0.5. range value: from 0 to 1 */
  alphaTest?:
    | number
    | undefined;
  /** default =  true */
  castShadows?:
    | boolean
    | undefined;
  /** @deprecated Alpha textures are no longer supported on PBRMaterial and UnlitMaterial.alphaTexture should be used instead. */
  alphaTexture?:
    | TextureUnion
    | undefined;
  /** default = null */
  emissiveTexture?:
    | TextureUnion
    | undefined;
  /** default = null */
  bumpTexture?:
    | TextureUnion
    | undefined;
  /** default = white; */
  albedoColor?:
    | Color4
    | undefined;
  /** default = black; */
  emissiveColor?:
    | Color3
    | undefined;
  /** default = white; */
  reflectivityColor?:
    | Color3
    | undefined;
  /** default = TransparencyMode.Auto */
  transparencyMode?:
    | MaterialTransparencyMode
    | undefined;
  /** default = 0.5 */
  metallic?:
    | number
    | undefined;
  /** default = 0.5 */
  roughness?:
    | number
    | undefined;
  /** default = 1 */
  specularIntensity?:
    | number
    | undefined;
  /** default = 2 */
  emissiveIntensity?:
    | number
    | undefined;
  /** default = 1 */
  directIntensity?: number | undefined;
}

function createBasePBMaterial(): PBMaterial {
  return { material: undefined };
}

export namespace PBMaterial {
  export function encode(message: PBMaterial, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    switch (message.material?.$case) {
      case "unlit":
        PBMaterial_UnlitMaterial.encode(message.material.unlit, writer.uint32(10).fork()).ldelim();
        break;
      case "pbr":
        PBMaterial_PbrMaterial.encode(message.material.pbr, writer.uint32(18).fork()).ldelim();
        break;
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBMaterial {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBMaterial();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.material = { $case: "unlit", unlit: PBMaterial_UnlitMaterial.decode(reader, reader.uint32()) };
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.material = { $case: "pbr", pbr: PBMaterial_PbrMaterial.decode(reader, reader.uint32()) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBMaterial {
    return {
      material: isSet(object.unlit)
        ? { $case: "unlit", unlit: PBMaterial_UnlitMaterial.fromJSON(object.unlit) }
        : isSet(object.pbr)
        ? { $case: "pbr", pbr: PBMaterial_PbrMaterial.fromJSON(object.pbr) }
        : undefined,
    };
  }

  export function toJSON(message: PBMaterial): unknown {
    const obj: any = {};
    message.material?.$case === "unlit" &&
      (obj.unlit = message.material?.unlit ? PBMaterial_UnlitMaterial.toJSON(message.material?.unlit) : undefined);
    message.material?.$case === "pbr" &&
      (obj.pbr = message.material?.pbr ? PBMaterial_PbrMaterial.toJSON(message.material?.pbr) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBMaterial>, I>>(base?: I): PBMaterial {
    return PBMaterial.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBMaterial>, I>>(object: I): PBMaterial {
    const message = createBasePBMaterial();
    if (object.material?.$case === "unlit" && object.material?.unlit !== undefined && object.material?.unlit !== null) {
      message.material = { $case: "unlit", unlit: PBMaterial_UnlitMaterial.fromPartial(object.material.unlit) };
    }
    if (object.material?.$case === "pbr" && object.material?.pbr !== undefined && object.material?.pbr !== null) {
      message.material = { $case: "pbr", pbr: PBMaterial_PbrMaterial.fromPartial(object.material.pbr) };
    }
    return message;
  }
}

function createBasePBMaterial_UnlitMaterial(): PBMaterial_UnlitMaterial {
  return {
    texture: undefined,
    alphaTest: undefined,
    castShadows: undefined,
    diffuseColor: undefined,
    alphaTexture: undefined,
  };
}

export namespace PBMaterial_UnlitMaterial {
  export function encode(message: PBMaterial_UnlitMaterial, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.texture !== undefined) {
      TextureUnion.encode(message.texture, writer.uint32(10).fork()).ldelim();
    }
    if (message.alphaTest !== undefined) {
      writer.uint32(21).float(message.alphaTest);
    }
    if (message.castShadows !== undefined) {
      writer.uint32(24).bool(message.castShadows);
    }
    if (message.diffuseColor !== undefined) {
      Color4.encode(message.diffuseColor, writer.uint32(34).fork()).ldelim();
    }
    if (message.alphaTexture !== undefined) {
      TextureUnion.encode(message.alphaTexture, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBMaterial_UnlitMaterial {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBMaterial_UnlitMaterial();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.texture = TextureUnion.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.alphaTest = reader.float();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.castShadows = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.diffuseColor = Color4.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.alphaTexture = TextureUnion.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBMaterial_UnlitMaterial {
    return {
      texture: isSet(object.texture) ? TextureUnion.fromJSON(object.texture) : undefined,
      alphaTest: isSet(object.alphaTest) ? Number(object.alphaTest) : undefined,
      castShadows: isSet(object.castShadows) ? Boolean(object.castShadows) : undefined,
      diffuseColor: isSet(object.diffuseColor) ? Color4.fromJSON(object.diffuseColor) : undefined,
      alphaTexture: isSet(object.alphaTexture) ? TextureUnion.fromJSON(object.alphaTexture) : undefined,
    };
  }

  export function toJSON(message: PBMaterial_UnlitMaterial): unknown {
    const obj: any = {};
    message.texture !== undefined && (obj.texture = message.texture ? TextureUnion.toJSON(message.texture) : undefined);
    message.alphaTest !== undefined && (obj.alphaTest = message.alphaTest);
    message.castShadows !== undefined && (obj.castShadows = message.castShadows);
    message.diffuseColor !== undefined &&
      (obj.diffuseColor = message.diffuseColor ? Color4.toJSON(message.diffuseColor) : undefined);
    message.alphaTexture !== undefined &&
      (obj.alphaTexture = message.alphaTexture ? TextureUnion.toJSON(message.alphaTexture) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBMaterial_UnlitMaterial>, I>>(
    base?: I,
  ): PBMaterial_UnlitMaterial {
    return PBMaterial_UnlitMaterial.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBMaterial_UnlitMaterial>, I>>(
    object: I,
  ): PBMaterial_UnlitMaterial {
    const message = createBasePBMaterial_UnlitMaterial();
    message.texture = (object.texture !== undefined && object.texture !== null)
      ? TextureUnion.fromPartial(object.texture)
      : undefined;
    message.alphaTest = object.alphaTest ?? undefined;
    message.castShadows = object.castShadows ?? undefined;
    message.diffuseColor = (object.diffuseColor !== undefined && object.diffuseColor !== null)
      ? Color4.fromPartial(object.diffuseColor)
      : undefined;
    message.alphaTexture = (object.alphaTexture !== undefined && object.alphaTexture !== null)
      ? TextureUnion.fromPartial(object.alphaTexture)
      : undefined;
    return message;
  }
}

function createBasePBMaterial_PbrMaterial(): PBMaterial_PbrMaterial {
  return {
    texture: undefined,
    alphaTest: undefined,
    castShadows: undefined,
    alphaTexture: undefined,
    emissiveTexture: undefined,
    bumpTexture: undefined,
    albedoColor: undefined,
    emissiveColor: undefined,
    reflectivityColor: undefined,
    transparencyMode: undefined,
    metallic: undefined,
    roughness: undefined,
    specularIntensity: undefined,
    emissiveIntensity: undefined,
    directIntensity: undefined,
  };
}

export namespace PBMaterial_PbrMaterial {
  export function encode(message: PBMaterial_PbrMaterial, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.texture !== undefined) {
      TextureUnion.encode(message.texture, writer.uint32(10).fork()).ldelim();
    }
    if (message.alphaTest !== undefined) {
      writer.uint32(21).float(message.alphaTest);
    }
    if (message.castShadows !== undefined) {
      writer.uint32(24).bool(message.castShadows);
    }
    if (message.alphaTexture !== undefined) {
      TextureUnion.encode(message.alphaTexture, writer.uint32(34).fork()).ldelim();
    }
    if (message.emissiveTexture !== undefined) {
      TextureUnion.encode(message.emissiveTexture, writer.uint32(42).fork()).ldelim();
    }
    if (message.bumpTexture !== undefined) {
      TextureUnion.encode(message.bumpTexture, writer.uint32(50).fork()).ldelim();
    }
    if (message.albedoColor !== undefined) {
      Color4.encode(message.albedoColor, writer.uint32(58).fork()).ldelim();
    }
    if (message.emissiveColor !== undefined) {
      Color3.encode(message.emissiveColor, writer.uint32(66).fork()).ldelim();
    }
    if (message.reflectivityColor !== undefined) {
      Color3.encode(message.reflectivityColor, writer.uint32(74).fork()).ldelim();
    }
    if (message.transparencyMode !== undefined) {
      writer.uint32(80).int32(message.transparencyMode);
    }
    if (message.metallic !== undefined) {
      writer.uint32(93).float(message.metallic);
    }
    if (message.roughness !== undefined) {
      writer.uint32(101).float(message.roughness);
    }
    if (message.specularIntensity !== undefined) {
      writer.uint32(117).float(message.specularIntensity);
    }
    if (message.emissiveIntensity !== undefined) {
      writer.uint32(125).float(message.emissiveIntensity);
    }
    if (message.directIntensity !== undefined) {
      writer.uint32(133).float(message.directIntensity);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBMaterial_PbrMaterial {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBMaterial_PbrMaterial();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.texture = TextureUnion.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.alphaTest = reader.float();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.castShadows = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.alphaTexture = TextureUnion.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.emissiveTexture = TextureUnion.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bumpTexture = TextureUnion.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.albedoColor = Color4.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.emissiveColor = Color3.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.reflectivityColor = Color3.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.transparencyMode = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 93) {
            break;
          }

          message.metallic = reader.float();
          continue;
        case 12:
          if (tag !== 101) {
            break;
          }

          message.roughness = reader.float();
          continue;
        case 14:
          if (tag !== 117) {
            break;
          }

          message.specularIntensity = reader.float();
          continue;
        case 15:
          if (tag !== 125) {
            break;
          }

          message.emissiveIntensity = reader.float();
          continue;
        case 16:
          if (tag !== 133) {
            break;
          }

          message.directIntensity = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBMaterial_PbrMaterial {
    return {
      texture: isSet(object.texture) ? TextureUnion.fromJSON(object.texture) : undefined,
      alphaTest: isSet(object.alphaTest) ? Number(object.alphaTest) : undefined,
      castShadows: isSet(object.castShadows) ? Boolean(object.castShadows) : undefined,
      alphaTexture: isSet(object.alphaTexture) ? TextureUnion.fromJSON(object.alphaTexture) : undefined,
      emissiveTexture: isSet(object.emissiveTexture) ? TextureUnion.fromJSON(object.emissiveTexture) : undefined,
      bumpTexture: isSet(object.bumpTexture) ? TextureUnion.fromJSON(object.bumpTexture) : undefined,
      albedoColor: isSet(object.albedoColor) ? Color4.fromJSON(object.albedoColor) : undefined,
      emissiveColor: isSet(object.emissiveColor) ? Color3.fromJSON(object.emissiveColor) : undefined,
      reflectivityColor: isSet(object.reflectivityColor) ? Color3.fromJSON(object.reflectivityColor) : undefined,
      transparencyMode: isSet(object.transparencyMode)
        ? materialTransparencyModeFromJSON(object.transparencyMode)
        : undefined,
      metallic: isSet(object.metallic) ? Number(object.metallic) : undefined,
      roughness: isSet(object.roughness) ? Number(object.roughness) : undefined,
      specularIntensity: isSet(object.specularIntensity) ? Number(object.specularIntensity) : undefined,
      emissiveIntensity: isSet(object.emissiveIntensity) ? Number(object.emissiveIntensity) : undefined,
      directIntensity: isSet(object.directIntensity) ? Number(object.directIntensity) : undefined,
    };
  }

  export function toJSON(message: PBMaterial_PbrMaterial): unknown {
    const obj: any = {};
    message.texture !== undefined && (obj.texture = message.texture ? TextureUnion.toJSON(message.texture) : undefined);
    message.alphaTest !== undefined && (obj.alphaTest = message.alphaTest);
    message.castShadows !== undefined && (obj.castShadows = message.castShadows);
    message.alphaTexture !== undefined &&
      (obj.alphaTexture = message.alphaTexture ? TextureUnion.toJSON(message.alphaTexture) : undefined);
    message.emissiveTexture !== undefined &&
      (obj.emissiveTexture = message.emissiveTexture ? TextureUnion.toJSON(message.emissiveTexture) : undefined);
    message.bumpTexture !== undefined &&
      (obj.bumpTexture = message.bumpTexture ? TextureUnion.toJSON(message.bumpTexture) : undefined);
    message.albedoColor !== undefined &&
      (obj.albedoColor = message.albedoColor ? Color4.toJSON(message.albedoColor) : undefined);
    message.emissiveColor !== undefined &&
      (obj.emissiveColor = message.emissiveColor ? Color3.toJSON(message.emissiveColor) : undefined);
    message.reflectivityColor !== undefined &&
      (obj.reflectivityColor = message.reflectivityColor ? Color3.toJSON(message.reflectivityColor) : undefined);
    message.transparencyMode !== undefined &&
      (obj.transparencyMode = message.transparencyMode !== undefined
        ? materialTransparencyModeToJSON(message.transparencyMode)
        : undefined);
    message.metallic !== undefined && (obj.metallic = message.metallic);
    message.roughness !== undefined && (obj.roughness = message.roughness);
    message.specularIntensity !== undefined && (obj.specularIntensity = message.specularIntensity);
    message.emissiveIntensity !== undefined && (obj.emissiveIntensity = message.emissiveIntensity);
    message.directIntensity !== undefined && (obj.directIntensity = message.directIntensity);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBMaterial_PbrMaterial>, I>>(base?: I): PBMaterial_PbrMaterial {
    return PBMaterial_PbrMaterial.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBMaterial_PbrMaterial>, I>>(
    object: I,
  ): PBMaterial_PbrMaterial {
    const message = createBasePBMaterial_PbrMaterial();
    message.texture = (object.texture !== undefined && object.texture !== null)
      ? TextureUnion.fromPartial(object.texture)
      : undefined;
    message.alphaTest = object.alphaTest ?? undefined;
    message.castShadows = object.castShadows ?? undefined;
    message.alphaTexture = (object.alphaTexture !== undefined && object.alphaTexture !== null)
      ? TextureUnion.fromPartial(object.alphaTexture)
      : undefined;
    message.emissiveTexture = (object.emissiveTexture !== undefined && object.emissiveTexture !== null)
      ? TextureUnion.fromPartial(object.emissiveTexture)
      : undefined;
    message.bumpTexture = (object.bumpTexture !== undefined && object.bumpTexture !== null)
      ? TextureUnion.fromPartial(object.bumpTexture)
      : undefined;
    message.albedoColor = (object.albedoColor !== undefined && object.albedoColor !== null)
      ? Color4.fromPartial(object.albedoColor)
      : undefined;
    message.emissiveColor = (object.emissiveColor !== undefined && object.emissiveColor !== null)
      ? Color3.fromPartial(object.emissiveColor)
      : undefined;
    message.reflectivityColor = (object.reflectivityColor !== undefined && object.reflectivityColor !== null)
      ? Color3.fromPartial(object.reflectivityColor)
      : undefined;
    message.transparencyMode = object.transparencyMode ?? undefined;
    message.metallic = object.metallic ?? undefined;
    message.roughness = object.roughness ?? undefined;
    message.specularIntensity = object.specularIntensity ?? undefined;
    message.emissiveIntensity = object.emissiveIntensity ?? undefined;
    message.directIntensity = object.directIntensity ?? undefined;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
