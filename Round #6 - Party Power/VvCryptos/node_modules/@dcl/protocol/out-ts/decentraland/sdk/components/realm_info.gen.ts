/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "decentraland.sdk.components";

export interface PBRealmInfo {
  baseUrl: string;
  realmName: string;
  networkId: number;
  commsAdapter: string;
  isPreview: boolean;
  room?: string | undefined;
  isConnectedSceneRoom?: boolean | undefined;
}

function createBasePBRealmInfo(): PBRealmInfo {
  return {
    baseUrl: "",
    realmName: "",
    networkId: 0,
    commsAdapter: "",
    isPreview: false,
    room: undefined,
    isConnectedSceneRoom: undefined,
  };
}

export namespace PBRealmInfo {
  export function encode(message: PBRealmInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.baseUrl !== "") {
      writer.uint32(10).string(message.baseUrl);
    }
    if (message.realmName !== "") {
      writer.uint32(18).string(message.realmName);
    }
    if (message.networkId !== 0) {
      writer.uint32(24).int32(message.networkId);
    }
    if (message.commsAdapter !== "") {
      writer.uint32(34).string(message.commsAdapter);
    }
    if (message.isPreview === true) {
      writer.uint32(40).bool(message.isPreview);
    }
    if (message.room !== undefined) {
      writer.uint32(50).string(message.room);
    }
    if (message.isConnectedSceneRoom !== undefined) {
      writer.uint32(56).bool(message.isConnectedSceneRoom);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBRealmInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBRealmInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.baseUrl = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.realmName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.networkId = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.commsAdapter = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isPreview = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.room = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.isConnectedSceneRoom = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBRealmInfo {
    return {
      baseUrl: isSet(object.baseUrl) ? String(object.baseUrl) : "",
      realmName: isSet(object.realmName) ? String(object.realmName) : "",
      networkId: isSet(object.networkId) ? Number(object.networkId) : 0,
      commsAdapter: isSet(object.commsAdapter) ? String(object.commsAdapter) : "",
      isPreview: isSet(object.isPreview) ? Boolean(object.isPreview) : false,
      room: isSet(object.room) ? String(object.room) : undefined,
      isConnectedSceneRoom: isSet(object.isConnectedSceneRoom) ? Boolean(object.isConnectedSceneRoom) : undefined,
    };
  }

  export function toJSON(message: PBRealmInfo): unknown {
    const obj: any = {};
    message.baseUrl !== undefined && (obj.baseUrl = message.baseUrl);
    message.realmName !== undefined && (obj.realmName = message.realmName);
    message.networkId !== undefined && (obj.networkId = Math.round(message.networkId));
    message.commsAdapter !== undefined && (obj.commsAdapter = message.commsAdapter);
    message.isPreview !== undefined && (obj.isPreview = message.isPreview);
    message.room !== undefined && (obj.room = message.room);
    message.isConnectedSceneRoom !== undefined && (obj.isConnectedSceneRoom = message.isConnectedSceneRoom);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBRealmInfo>, I>>(base?: I): PBRealmInfo {
    return PBRealmInfo.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBRealmInfo>, I>>(object: I): PBRealmInfo {
    const message = createBasePBRealmInfo();
    message.baseUrl = object.baseUrl ?? "";
    message.realmName = object.realmName ?? "";
    message.networkId = object.networkId ?? 0;
    message.commsAdapter = object.commsAdapter ?? "";
    message.isPreview = object.isPreview ?? false;
    message.room = object.room ?? undefined;
    message.isConnectedSceneRoom = object.isConnectedSceneRoom ?? undefined;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
