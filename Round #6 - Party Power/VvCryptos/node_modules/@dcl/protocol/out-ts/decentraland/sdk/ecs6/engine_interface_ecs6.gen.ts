/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Vector3 } from "../../common/vectors.gen";
import {
  ECS6ComponentAnimator,
  ECS6ComponentAttachToAvatar,
  ECS6ComponentAudioClip,
  ECS6ComponentAudioSource,
  ECS6ComponentAudioStream,
  ECS6ComponentAvatarModifierArea,
  ECS6ComponentAvatarShape,
  ECS6ComponentAvatarTexture,
  ECS6ComponentBasicMaterial,
  ECS6ComponentBillboard,
  ECS6ComponentBoxShape,
  ECS6ComponentCameraModeArea,
  ECS6ComponentCircleShape,
  ECS6ComponentConeShape,
  ECS6ComponentCylinderShape,
  ECS6ComponentFont,
  ECS6ComponentGizmos,
  ECS6ComponentGltfShape,
  ECS6ComponentMaterial,
  ECS6ComponentNftShape,
  ECS6ComponentObjShape,
  ECS6ComponentPlaneShape,
  ECS6ComponentSmartItem,
  ECS6ComponentSphereShape,
  ECS6ComponentTextShape,
  ECS6ComponentTexture,
  ECS6ComponentTransform,
  ECS6ComponentUiButton,
  ECS6ComponentUiContainerRect,
  ECS6ComponentUiContainerStack,
  ECS6ComponentUiFullScreenShape,
  ECS6ComponentUiImage,
  ECS6ComponentUiInputText,
  ECS6ComponentUiScreenSpaceShape,
  ECS6ComponentUiScrollRect,
  ECS6ComponentUiShape,
  ECS6ComponentUiText,
  ECS6ComponentUiWorldSpaceShape,
  ECS6ComponentUuidCallback,
  ECS6ComponentVideoClip,
  ECS6ComponentVideoTexture,
} from "./components_ecs6.gen";

export const protobufPackage = "decentraland.sdk.ecs6";

export interface OpenExternalUrlBody {
  url: string;
}

export interface OpenNFTDialogBody {
  assetContractAddress: string;
  tokenId: string;
  comment?: string | undefined;
}

export interface ComponentBodyPayload {
  payload?:
    | { $case: "avatarModifierArea"; avatarModifierArea: ECS6ComponentAvatarModifierArea }
    | { $case: "transform"; transform: ECS6ComponentTransform }
    | { $case: "attachToAvatar"; attachToAvatar: ECS6ComponentAttachToAvatar }
    | { $case: "billboard"; billboard: ECS6ComponentBillboard }
    | { $case: "boxShape"; boxShape: ECS6ComponentBoxShape }
    | { $case: "sphereShape"; sphereShape: ECS6ComponentSphereShape }
    | { $case: "circleShape"; circleShape: ECS6ComponentCircleShape }
    | { $case: "planeShape"; planeShape: ECS6ComponentPlaneShape }
    | { $case: "coneShape"; coneShape: ECS6ComponentConeShape }
    | { $case: "cylinderShape"; cylinderShape: ECS6ComponentCylinderShape }
    | { $case: "gltfShape"; gltfShape: ECS6ComponentGltfShape }
    | { $case: "nftShape"; nftShape: ECS6ComponentNftShape }
    | { $case: "texture"; texture: ECS6ComponentTexture }
    | { $case: "animator"; animator: ECS6ComponentAnimator }
    | { $case: "objShape"; objShape: ECS6ComponentObjShape }
    | { $case: "font"; font: ECS6ComponentFont }
    | { $case: "textShape"; textShape: ECS6ComponentTextShape }
    | { $case: "material"; material: ECS6ComponentMaterial }
    | { $case: "basicMaterial"; basicMaterial: ECS6ComponentBasicMaterial }
    | { $case: "uuidCallback"; uuidCallback: ECS6ComponentUuidCallback }
    | { $case: "smartItem"; smartItem: ECS6ComponentSmartItem }
    | { $case: "videoClip"; videoClip: ECS6ComponentVideoClip }
    | { $case: "videoTexture"; videoTexture: ECS6ComponentVideoTexture }
    | { $case: "cameraModeArea"; cameraModeArea: ECS6ComponentCameraModeArea }
    | { $case: "avatarTexture"; avatarTexture: ECS6ComponentAvatarTexture }
    | { $case: "audioClip"; audioClip: ECS6ComponentAudioClip }
    | { $case: "audioSource"; audioSource: ECS6ComponentAudioSource }
    | { $case: "audioStream"; audioStream: ECS6ComponentAudioStream }
    | { $case: "avatarShape"; avatarShape: ECS6ComponentAvatarShape }
    | { $case: "gizmos"; gizmos: ECS6ComponentGizmos }
    | { $case: "uiShape"; uiShape: ECS6ComponentUiShape }
    | { $case: "uiContainerRect"; uiContainerRect: ECS6ComponentUiContainerRect }
    | { $case: "uiContainerStack"; uiContainerStack: ECS6ComponentUiContainerStack }
    | { $case: "uiButton"; uiButton: ECS6ComponentUiButton }
    | { $case: "uiText"; uiText: ECS6ComponentUiText }
    | { $case: "uiInputText"; uiInputText: ECS6ComponentUiInputText }
    | { $case: "uiImage"; uiImage: ECS6ComponentUiImage }
    | { $case: "uiScrollRect"; uiScrollRect: ECS6ComponentUiScrollRect }
    | { $case: "uiWorldSpaceShape"; uiWorldSpaceShape: ECS6ComponentUiWorldSpaceShape }
    | { $case: "uiScreenSpaceShape"; uiScreenSpaceShape: ECS6ComponentUiScreenSpaceShape }
    | { $case: "uiFullScreenShape"; uiFullScreenShape: ECS6ComponentUiFullScreenShape }
    | undefined;
}

export interface CreateEntityBody {
  id: string;
}

export interface RemoveEntityBody {
  id: string;
}

export interface UpdateEntityComponentBody {
  entityId: string;
  classId: number;
  name: string;
  componentData: ComponentBodyPayload | undefined;
}

export interface AttachEntityComponentBody {
  entityId: string;
  name: string;
  id: string;
}

export interface ComponentRemovedBody {
  entityId: string;
  name: string;
}

export interface SetEntityParentBody {
  entityId: string;
  parentId: string;
}

export interface QueryBody {
  queryId: string;
  payload: QueryBody_RayQuery | undefined;
}

export interface QueryBody_Ray {
  origin: Vector3 | undefined;
  direction: Vector3 | undefined;
  distance: number;
}

export interface QueryBody_RayQuery {
  queryId: string;
  queryType: string;
  ray: QueryBody_Ray | undefined;
}

export interface ComponentCreatedBody {
  id: string;
  classId: number;
  name: string;
}

export interface ComponentDisposedBody {
  id: string;
}

export interface ComponentUpdatedBody {
  id: string;
  componentData: ComponentBodyPayload | undefined;
}

export interface InitMessagesFinishedBody {
}

export interface EntityActionPayload {
  payload?:
    | { $case: "openExternalUrl"; openExternalUrl: OpenExternalUrlBody }
    | { $case: "openNftDialog"; openNftDialog: OpenNFTDialogBody }
    | { $case: "createEntity"; createEntity: CreateEntityBody }
    | { $case: "removeEntity"; removeEntity: RemoveEntityBody }
    | { $case: "updateEntityComponent"; updateEntityComponent: UpdateEntityComponentBody }
    | { $case: "attachEntityComponent"; attachEntityComponent: AttachEntityComponentBody }
    | { $case: "componentRemoved"; componentRemoved: ComponentRemovedBody }
    | { $case: "setEntityParent"; setEntityParent: SetEntityParentBody }
    | { $case: "query"; query: QueryBody }
    | { $case: "componentCreated"; componentCreated: ComponentCreatedBody }
    | { $case: "componentDisposed"; componentDisposed: ComponentDisposedBody }
    | { $case: "componentUpdated"; componentUpdated: ComponentUpdatedBody }
    | { $case: "initMessagesFinished"; initMessagesFinished: InitMessagesFinishedBody }
    | undefined;
}

export interface EntityAction {
  tag?: string | undefined;
  payload: EntityActionPayload | undefined;
}

function createBaseOpenExternalUrlBody(): OpenExternalUrlBody {
  return { url: "" };
}

export namespace OpenExternalUrlBody {
  export function encode(message: OpenExternalUrlBody, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): OpenExternalUrlBody {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenExternalUrlBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): OpenExternalUrlBody {
    return { url: isSet(object.url) ? String(object.url) : "" };
  }

  export function toJSON(message: OpenExternalUrlBody): unknown {
    const obj: any = {};
    message.url !== undefined && (obj.url = message.url);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<OpenExternalUrlBody>, I>>(base?: I): OpenExternalUrlBody {
    return OpenExternalUrlBody.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<OpenExternalUrlBody>, I>>(object: I): OpenExternalUrlBody {
    const message = createBaseOpenExternalUrlBody();
    message.url = object.url ?? "";
    return message;
  }
}

function createBaseOpenNFTDialogBody(): OpenNFTDialogBody {
  return { assetContractAddress: "", tokenId: "", comment: undefined };
}

export namespace OpenNFTDialogBody {
  export function encode(message: OpenNFTDialogBody, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.assetContractAddress !== "") {
      writer.uint32(10).string(message.assetContractAddress);
    }
    if (message.tokenId !== "") {
      writer.uint32(18).string(message.tokenId);
    }
    if (message.comment !== undefined) {
      writer.uint32(26).string(message.comment);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): OpenNFTDialogBody {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenNFTDialogBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.assetContractAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tokenId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.comment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): OpenNFTDialogBody {
    return {
      assetContractAddress: isSet(object.assetContractAddress) ? String(object.assetContractAddress) : "",
      tokenId: isSet(object.tokenId) ? String(object.tokenId) : "",
      comment: isSet(object.comment) ? String(object.comment) : undefined,
    };
  }

  export function toJSON(message: OpenNFTDialogBody): unknown {
    const obj: any = {};
    message.assetContractAddress !== undefined && (obj.assetContractAddress = message.assetContractAddress);
    message.tokenId !== undefined && (obj.tokenId = message.tokenId);
    message.comment !== undefined && (obj.comment = message.comment);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<OpenNFTDialogBody>, I>>(base?: I): OpenNFTDialogBody {
    return OpenNFTDialogBody.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<OpenNFTDialogBody>, I>>(object: I): OpenNFTDialogBody {
    const message = createBaseOpenNFTDialogBody();
    message.assetContractAddress = object.assetContractAddress ?? "";
    message.tokenId = object.tokenId ?? "";
    message.comment = object.comment ?? undefined;
    return message;
  }
}

function createBaseComponentBodyPayload(): ComponentBodyPayload {
  return { payload: undefined };
}

export namespace ComponentBodyPayload {
  export function encode(message: ComponentBodyPayload, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    switch (message.payload?.$case) {
      case "avatarModifierArea":
        ECS6ComponentAvatarModifierArea.encode(message.payload.avatarModifierArea, writer.uint32(10).fork()).ldelim();
        break;
      case "transform":
        ECS6ComponentTransform.encode(message.payload.transform, writer.uint32(18).fork()).ldelim();
        break;
      case "attachToAvatar":
        ECS6ComponentAttachToAvatar.encode(message.payload.attachToAvatar, writer.uint32(26).fork()).ldelim();
        break;
      case "billboard":
        ECS6ComponentBillboard.encode(message.payload.billboard, writer.uint32(34).fork()).ldelim();
        break;
      case "boxShape":
        ECS6ComponentBoxShape.encode(message.payload.boxShape, writer.uint32(42).fork()).ldelim();
        break;
      case "sphereShape":
        ECS6ComponentSphereShape.encode(message.payload.sphereShape, writer.uint32(50).fork()).ldelim();
        break;
      case "circleShape":
        ECS6ComponentCircleShape.encode(message.payload.circleShape, writer.uint32(58).fork()).ldelim();
        break;
      case "planeShape":
        ECS6ComponentPlaneShape.encode(message.payload.planeShape, writer.uint32(66).fork()).ldelim();
        break;
      case "coneShape":
        ECS6ComponentConeShape.encode(message.payload.coneShape, writer.uint32(74).fork()).ldelim();
        break;
      case "cylinderShape":
        ECS6ComponentCylinderShape.encode(message.payload.cylinderShape, writer.uint32(82).fork()).ldelim();
        break;
      case "gltfShape":
        ECS6ComponentGltfShape.encode(message.payload.gltfShape, writer.uint32(90).fork()).ldelim();
        break;
      case "nftShape":
        ECS6ComponentNftShape.encode(message.payload.nftShape, writer.uint32(98).fork()).ldelim();
        break;
      case "texture":
        ECS6ComponentTexture.encode(message.payload.texture, writer.uint32(106).fork()).ldelim();
        break;
      case "animator":
        ECS6ComponentAnimator.encode(message.payload.animator, writer.uint32(114).fork()).ldelim();
        break;
      case "objShape":
        ECS6ComponentObjShape.encode(message.payload.objShape, writer.uint32(122).fork()).ldelim();
        break;
      case "font":
        ECS6ComponentFont.encode(message.payload.font, writer.uint32(130).fork()).ldelim();
        break;
      case "textShape":
        ECS6ComponentTextShape.encode(message.payload.textShape, writer.uint32(138).fork()).ldelim();
        break;
      case "material":
        ECS6ComponentMaterial.encode(message.payload.material, writer.uint32(146).fork()).ldelim();
        break;
      case "basicMaterial":
        ECS6ComponentBasicMaterial.encode(message.payload.basicMaterial, writer.uint32(154).fork()).ldelim();
        break;
      case "uuidCallback":
        ECS6ComponentUuidCallback.encode(message.payload.uuidCallback, writer.uint32(162).fork()).ldelim();
        break;
      case "smartItem":
        ECS6ComponentSmartItem.encode(message.payload.smartItem, writer.uint32(170).fork()).ldelim();
        break;
      case "videoClip":
        ECS6ComponentVideoClip.encode(message.payload.videoClip, writer.uint32(178).fork()).ldelim();
        break;
      case "videoTexture":
        ECS6ComponentVideoTexture.encode(message.payload.videoTexture, writer.uint32(186).fork()).ldelim();
        break;
      case "cameraModeArea":
        ECS6ComponentCameraModeArea.encode(message.payload.cameraModeArea, writer.uint32(194).fork()).ldelim();
        break;
      case "avatarTexture":
        ECS6ComponentAvatarTexture.encode(message.payload.avatarTexture, writer.uint32(202).fork()).ldelim();
        break;
      case "audioClip":
        ECS6ComponentAudioClip.encode(message.payload.audioClip, writer.uint32(210).fork()).ldelim();
        break;
      case "audioSource":
        ECS6ComponentAudioSource.encode(message.payload.audioSource, writer.uint32(218).fork()).ldelim();
        break;
      case "audioStream":
        ECS6ComponentAudioStream.encode(message.payload.audioStream, writer.uint32(226).fork()).ldelim();
        break;
      case "avatarShape":
        ECS6ComponentAvatarShape.encode(message.payload.avatarShape, writer.uint32(234).fork()).ldelim();
        break;
      case "gizmos":
        ECS6ComponentGizmos.encode(message.payload.gizmos, writer.uint32(242).fork()).ldelim();
        break;
      case "uiShape":
        ECS6ComponentUiShape.encode(message.payload.uiShape, writer.uint32(250).fork()).ldelim();
        break;
      case "uiContainerRect":
        ECS6ComponentUiContainerRect.encode(message.payload.uiContainerRect, writer.uint32(258).fork()).ldelim();
        break;
      case "uiContainerStack":
        ECS6ComponentUiContainerStack.encode(message.payload.uiContainerStack, writer.uint32(266).fork()).ldelim();
        break;
      case "uiButton":
        ECS6ComponentUiButton.encode(message.payload.uiButton, writer.uint32(274).fork()).ldelim();
        break;
      case "uiText":
        ECS6ComponentUiText.encode(message.payload.uiText, writer.uint32(282).fork()).ldelim();
        break;
      case "uiInputText":
        ECS6ComponentUiInputText.encode(message.payload.uiInputText, writer.uint32(290).fork()).ldelim();
        break;
      case "uiImage":
        ECS6ComponentUiImage.encode(message.payload.uiImage, writer.uint32(298).fork()).ldelim();
        break;
      case "uiScrollRect":
        ECS6ComponentUiScrollRect.encode(message.payload.uiScrollRect, writer.uint32(306).fork()).ldelim();
        break;
      case "uiWorldSpaceShape":
        ECS6ComponentUiWorldSpaceShape.encode(message.payload.uiWorldSpaceShape, writer.uint32(314).fork()).ldelim();
        break;
      case "uiScreenSpaceShape":
        ECS6ComponentUiScreenSpaceShape.encode(message.payload.uiScreenSpaceShape, writer.uint32(322).fork()).ldelim();
        break;
      case "uiFullScreenShape":
        ECS6ComponentUiFullScreenShape.encode(message.payload.uiFullScreenShape, writer.uint32(330).fork()).ldelim();
        break;
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ComponentBodyPayload {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComponentBodyPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.payload = {
            $case: "avatarModifierArea",
            avatarModifierArea: ECS6ComponentAvatarModifierArea.decode(reader, reader.uint32()),
          };
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payload = { $case: "transform", transform: ECS6ComponentTransform.decode(reader, reader.uint32()) };
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.payload = {
            $case: "attachToAvatar",
            attachToAvatar: ECS6ComponentAttachToAvatar.decode(reader, reader.uint32()),
          };
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.payload = { $case: "billboard", billboard: ECS6ComponentBillboard.decode(reader, reader.uint32()) };
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.payload = { $case: "boxShape", boxShape: ECS6ComponentBoxShape.decode(reader, reader.uint32()) };
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.payload = {
            $case: "sphereShape",
            sphereShape: ECS6ComponentSphereShape.decode(reader, reader.uint32()),
          };
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.payload = {
            $case: "circleShape",
            circleShape: ECS6ComponentCircleShape.decode(reader, reader.uint32()),
          };
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.payload = {
            $case: "planeShape",
            planeShape: ECS6ComponentPlaneShape.decode(reader, reader.uint32()),
          };
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.payload = { $case: "coneShape", coneShape: ECS6ComponentConeShape.decode(reader, reader.uint32()) };
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.payload = {
            $case: "cylinderShape",
            cylinderShape: ECS6ComponentCylinderShape.decode(reader, reader.uint32()),
          };
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.payload = { $case: "gltfShape", gltfShape: ECS6ComponentGltfShape.decode(reader, reader.uint32()) };
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.payload = { $case: "nftShape", nftShape: ECS6ComponentNftShape.decode(reader, reader.uint32()) };
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.payload = { $case: "texture", texture: ECS6ComponentTexture.decode(reader, reader.uint32()) };
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.payload = { $case: "animator", animator: ECS6ComponentAnimator.decode(reader, reader.uint32()) };
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.payload = { $case: "objShape", objShape: ECS6ComponentObjShape.decode(reader, reader.uint32()) };
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.payload = { $case: "font", font: ECS6ComponentFont.decode(reader, reader.uint32()) };
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.payload = { $case: "textShape", textShape: ECS6ComponentTextShape.decode(reader, reader.uint32()) };
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.payload = { $case: "material", material: ECS6ComponentMaterial.decode(reader, reader.uint32()) };
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.payload = {
            $case: "basicMaterial",
            basicMaterial: ECS6ComponentBasicMaterial.decode(reader, reader.uint32()),
          };
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.payload = {
            $case: "uuidCallback",
            uuidCallback: ECS6ComponentUuidCallback.decode(reader, reader.uint32()),
          };
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.payload = { $case: "smartItem", smartItem: ECS6ComponentSmartItem.decode(reader, reader.uint32()) };
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.payload = { $case: "videoClip", videoClip: ECS6ComponentVideoClip.decode(reader, reader.uint32()) };
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.payload = {
            $case: "videoTexture",
            videoTexture: ECS6ComponentVideoTexture.decode(reader, reader.uint32()),
          };
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.payload = {
            $case: "cameraModeArea",
            cameraModeArea: ECS6ComponentCameraModeArea.decode(reader, reader.uint32()),
          };
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.payload = {
            $case: "avatarTexture",
            avatarTexture: ECS6ComponentAvatarTexture.decode(reader, reader.uint32()),
          };
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.payload = { $case: "audioClip", audioClip: ECS6ComponentAudioClip.decode(reader, reader.uint32()) };
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.payload = {
            $case: "audioSource",
            audioSource: ECS6ComponentAudioSource.decode(reader, reader.uint32()),
          };
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.payload = {
            $case: "audioStream",
            audioStream: ECS6ComponentAudioStream.decode(reader, reader.uint32()),
          };
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.payload = {
            $case: "avatarShape",
            avatarShape: ECS6ComponentAvatarShape.decode(reader, reader.uint32()),
          };
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.payload = { $case: "gizmos", gizmos: ECS6ComponentGizmos.decode(reader, reader.uint32()) };
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.payload = { $case: "uiShape", uiShape: ECS6ComponentUiShape.decode(reader, reader.uint32()) };
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.payload = {
            $case: "uiContainerRect",
            uiContainerRect: ECS6ComponentUiContainerRect.decode(reader, reader.uint32()),
          };
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.payload = {
            $case: "uiContainerStack",
            uiContainerStack: ECS6ComponentUiContainerStack.decode(reader, reader.uint32()),
          };
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.payload = { $case: "uiButton", uiButton: ECS6ComponentUiButton.decode(reader, reader.uint32()) };
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.payload = { $case: "uiText", uiText: ECS6ComponentUiText.decode(reader, reader.uint32()) };
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }

          message.payload = {
            $case: "uiInputText",
            uiInputText: ECS6ComponentUiInputText.decode(reader, reader.uint32()),
          };
          continue;
        case 37:
          if (tag !== 298) {
            break;
          }

          message.payload = { $case: "uiImage", uiImage: ECS6ComponentUiImage.decode(reader, reader.uint32()) };
          continue;
        case 38:
          if (tag !== 306) {
            break;
          }

          message.payload = {
            $case: "uiScrollRect",
            uiScrollRect: ECS6ComponentUiScrollRect.decode(reader, reader.uint32()),
          };
          continue;
        case 39:
          if (tag !== 314) {
            break;
          }

          message.payload = {
            $case: "uiWorldSpaceShape",
            uiWorldSpaceShape: ECS6ComponentUiWorldSpaceShape.decode(reader, reader.uint32()),
          };
          continue;
        case 40:
          if (tag !== 322) {
            break;
          }

          message.payload = {
            $case: "uiScreenSpaceShape",
            uiScreenSpaceShape: ECS6ComponentUiScreenSpaceShape.decode(reader, reader.uint32()),
          };
          continue;
        case 41:
          if (tag !== 330) {
            break;
          }

          message.payload = {
            $case: "uiFullScreenShape",
            uiFullScreenShape: ECS6ComponentUiFullScreenShape.decode(reader, reader.uint32()),
          };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ComponentBodyPayload {
    return {
      payload: isSet(object.avatarModifierArea)
        ? {
          $case: "avatarModifierArea",
          avatarModifierArea: ECS6ComponentAvatarModifierArea.fromJSON(object.avatarModifierArea),
        }
        : isSet(object.transform)
        ? { $case: "transform", transform: ECS6ComponentTransform.fromJSON(object.transform) }
        : isSet(object.attachToAvatar)
        ? { $case: "attachToAvatar", attachToAvatar: ECS6ComponentAttachToAvatar.fromJSON(object.attachToAvatar) }
        : isSet(object.billboard)
        ? { $case: "billboard", billboard: ECS6ComponentBillboard.fromJSON(object.billboard) }
        : isSet(object.boxShape)
        ? { $case: "boxShape", boxShape: ECS6ComponentBoxShape.fromJSON(object.boxShape) }
        : isSet(object.sphereShape)
        ? { $case: "sphereShape", sphereShape: ECS6ComponentSphereShape.fromJSON(object.sphereShape) }
        : isSet(object.circleShape)
        ? { $case: "circleShape", circleShape: ECS6ComponentCircleShape.fromJSON(object.circleShape) }
        : isSet(object.planeShape)
        ? { $case: "planeShape", planeShape: ECS6ComponentPlaneShape.fromJSON(object.planeShape) }
        : isSet(object.coneShape)
        ? { $case: "coneShape", coneShape: ECS6ComponentConeShape.fromJSON(object.coneShape) }
        : isSet(object.cylinderShape)
        ? { $case: "cylinderShape", cylinderShape: ECS6ComponentCylinderShape.fromJSON(object.cylinderShape) }
        : isSet(object.gltfShape)
        ? { $case: "gltfShape", gltfShape: ECS6ComponentGltfShape.fromJSON(object.gltfShape) }
        : isSet(object.nftShape)
        ? { $case: "nftShape", nftShape: ECS6ComponentNftShape.fromJSON(object.nftShape) }
        : isSet(object.texture)
        ? { $case: "texture", texture: ECS6ComponentTexture.fromJSON(object.texture) }
        : isSet(object.animator)
        ? { $case: "animator", animator: ECS6ComponentAnimator.fromJSON(object.animator) }
        : isSet(object.objShape)
        ? { $case: "objShape", objShape: ECS6ComponentObjShape.fromJSON(object.objShape) }
        : isSet(object.font)
        ? { $case: "font", font: ECS6ComponentFont.fromJSON(object.font) }
        : isSet(object.textShape)
        ? { $case: "textShape", textShape: ECS6ComponentTextShape.fromJSON(object.textShape) }
        : isSet(object.material)
        ? { $case: "material", material: ECS6ComponentMaterial.fromJSON(object.material) }
        : isSet(object.basicMaterial)
        ? { $case: "basicMaterial", basicMaterial: ECS6ComponentBasicMaterial.fromJSON(object.basicMaterial) }
        : isSet(object.uuidCallback)
        ? { $case: "uuidCallback", uuidCallback: ECS6ComponentUuidCallback.fromJSON(object.uuidCallback) }
        : isSet(object.smartItem)
        ? { $case: "smartItem", smartItem: ECS6ComponentSmartItem.fromJSON(object.smartItem) }
        : isSet(object.videoClip)
        ? { $case: "videoClip", videoClip: ECS6ComponentVideoClip.fromJSON(object.videoClip) }
        : isSet(object.videoTexture)
        ? { $case: "videoTexture", videoTexture: ECS6ComponentVideoTexture.fromJSON(object.videoTexture) }
        : isSet(object.cameraModeArea)
        ? { $case: "cameraModeArea", cameraModeArea: ECS6ComponentCameraModeArea.fromJSON(object.cameraModeArea) }
        : isSet(object.avatarTexture)
        ? { $case: "avatarTexture", avatarTexture: ECS6ComponentAvatarTexture.fromJSON(object.avatarTexture) }
        : isSet(object.audioClip)
        ? { $case: "audioClip", audioClip: ECS6ComponentAudioClip.fromJSON(object.audioClip) }
        : isSet(object.audioSource)
        ? { $case: "audioSource", audioSource: ECS6ComponentAudioSource.fromJSON(object.audioSource) }
        : isSet(object.audioStream)
        ? { $case: "audioStream", audioStream: ECS6ComponentAudioStream.fromJSON(object.audioStream) }
        : isSet(object.avatarShape)
        ? { $case: "avatarShape", avatarShape: ECS6ComponentAvatarShape.fromJSON(object.avatarShape) }
        : isSet(object.gizmos)
        ? { $case: "gizmos", gizmos: ECS6ComponentGizmos.fromJSON(object.gizmos) }
        : isSet(object.uiShape)
        ? { $case: "uiShape", uiShape: ECS6ComponentUiShape.fromJSON(object.uiShape) }
        : isSet(object.uiContainerRect)
        ? { $case: "uiContainerRect", uiContainerRect: ECS6ComponentUiContainerRect.fromJSON(object.uiContainerRect) }
        : isSet(object.uiContainerStack)
        ? {
          $case: "uiContainerStack",
          uiContainerStack: ECS6ComponentUiContainerStack.fromJSON(object.uiContainerStack),
        }
        : isSet(object.uiButton)
        ? { $case: "uiButton", uiButton: ECS6ComponentUiButton.fromJSON(object.uiButton) }
        : isSet(object.uiText)
        ? { $case: "uiText", uiText: ECS6ComponentUiText.fromJSON(object.uiText) }
        : isSet(object.uiInputText)
        ? { $case: "uiInputText", uiInputText: ECS6ComponentUiInputText.fromJSON(object.uiInputText) }
        : isSet(object.uiImage)
        ? { $case: "uiImage", uiImage: ECS6ComponentUiImage.fromJSON(object.uiImage) }
        : isSet(object.uiScrollRect)
        ? { $case: "uiScrollRect", uiScrollRect: ECS6ComponentUiScrollRect.fromJSON(object.uiScrollRect) }
        : isSet(object.uiWorldSpaceShape)
        ? {
          $case: "uiWorldSpaceShape",
          uiWorldSpaceShape: ECS6ComponentUiWorldSpaceShape.fromJSON(object.uiWorldSpaceShape),
        }
        : isSet(object.uiScreenSpaceShape)
        ? {
          $case: "uiScreenSpaceShape",
          uiScreenSpaceShape: ECS6ComponentUiScreenSpaceShape.fromJSON(object.uiScreenSpaceShape),
        }
        : isSet(object.uiFullScreenShape)
        ? {
          $case: "uiFullScreenShape",
          uiFullScreenShape: ECS6ComponentUiFullScreenShape.fromJSON(object.uiFullScreenShape),
        }
        : undefined,
    };
  }

  export function toJSON(message: ComponentBodyPayload): unknown {
    const obj: any = {};
    message.payload?.$case === "avatarModifierArea" &&
      (obj.avatarModifierArea = message.payload?.avatarModifierArea
        ? ECS6ComponentAvatarModifierArea.toJSON(message.payload?.avatarModifierArea)
        : undefined);
    message.payload?.$case === "transform" &&
      (obj.transform = message.payload?.transform
        ? ECS6ComponentTransform.toJSON(message.payload?.transform)
        : undefined);
    message.payload?.$case === "attachToAvatar" &&
      (obj.attachToAvatar = message.payload?.attachToAvatar
        ? ECS6ComponentAttachToAvatar.toJSON(message.payload?.attachToAvatar)
        : undefined);
    message.payload?.$case === "billboard" &&
      (obj.billboard = message.payload?.billboard
        ? ECS6ComponentBillboard.toJSON(message.payload?.billboard)
        : undefined);
    message.payload?.$case === "boxShape" &&
      (obj.boxShape = message.payload?.boxShape ? ECS6ComponentBoxShape.toJSON(message.payload?.boxShape) : undefined);
    message.payload?.$case === "sphereShape" &&
      (obj.sphereShape = message.payload?.sphereShape
        ? ECS6ComponentSphereShape.toJSON(message.payload?.sphereShape)
        : undefined);
    message.payload?.$case === "circleShape" &&
      (obj.circleShape = message.payload?.circleShape
        ? ECS6ComponentCircleShape.toJSON(message.payload?.circleShape)
        : undefined);
    message.payload?.$case === "planeShape" &&
      (obj.planeShape = message.payload?.planeShape
        ? ECS6ComponentPlaneShape.toJSON(message.payload?.planeShape)
        : undefined);
    message.payload?.$case === "coneShape" &&
      (obj.coneShape = message.payload?.coneShape
        ? ECS6ComponentConeShape.toJSON(message.payload?.coneShape)
        : undefined);
    message.payload?.$case === "cylinderShape" &&
      (obj.cylinderShape = message.payload?.cylinderShape
        ? ECS6ComponentCylinderShape.toJSON(message.payload?.cylinderShape)
        : undefined);
    message.payload?.$case === "gltfShape" &&
      (obj.gltfShape = message.payload?.gltfShape
        ? ECS6ComponentGltfShape.toJSON(message.payload?.gltfShape)
        : undefined);
    message.payload?.$case === "nftShape" &&
      (obj.nftShape = message.payload?.nftShape ? ECS6ComponentNftShape.toJSON(message.payload?.nftShape) : undefined);
    message.payload?.$case === "texture" &&
      (obj.texture = message.payload?.texture ? ECS6ComponentTexture.toJSON(message.payload?.texture) : undefined);
    message.payload?.$case === "animator" &&
      (obj.animator = message.payload?.animator ? ECS6ComponentAnimator.toJSON(message.payload?.animator) : undefined);
    message.payload?.$case === "objShape" &&
      (obj.objShape = message.payload?.objShape ? ECS6ComponentObjShape.toJSON(message.payload?.objShape) : undefined);
    message.payload?.$case === "font" &&
      (obj.font = message.payload?.font ? ECS6ComponentFont.toJSON(message.payload?.font) : undefined);
    message.payload?.$case === "textShape" &&
      (obj.textShape = message.payload?.textShape
        ? ECS6ComponentTextShape.toJSON(message.payload?.textShape)
        : undefined);
    message.payload?.$case === "material" &&
      (obj.material = message.payload?.material ? ECS6ComponentMaterial.toJSON(message.payload?.material) : undefined);
    message.payload?.$case === "basicMaterial" &&
      (obj.basicMaterial = message.payload?.basicMaterial
        ? ECS6ComponentBasicMaterial.toJSON(message.payload?.basicMaterial)
        : undefined);
    message.payload?.$case === "uuidCallback" &&
      (obj.uuidCallback = message.payload?.uuidCallback
        ? ECS6ComponentUuidCallback.toJSON(message.payload?.uuidCallback)
        : undefined);
    message.payload?.$case === "smartItem" &&
      (obj.smartItem = message.payload?.smartItem
        ? ECS6ComponentSmartItem.toJSON(message.payload?.smartItem)
        : undefined);
    message.payload?.$case === "videoClip" &&
      (obj.videoClip = message.payload?.videoClip
        ? ECS6ComponentVideoClip.toJSON(message.payload?.videoClip)
        : undefined);
    message.payload?.$case === "videoTexture" &&
      (obj.videoTexture = message.payload?.videoTexture
        ? ECS6ComponentVideoTexture.toJSON(message.payload?.videoTexture)
        : undefined);
    message.payload?.$case === "cameraModeArea" &&
      (obj.cameraModeArea = message.payload?.cameraModeArea
        ? ECS6ComponentCameraModeArea.toJSON(message.payload?.cameraModeArea)
        : undefined);
    message.payload?.$case === "avatarTexture" &&
      (obj.avatarTexture = message.payload?.avatarTexture
        ? ECS6ComponentAvatarTexture.toJSON(message.payload?.avatarTexture)
        : undefined);
    message.payload?.$case === "audioClip" &&
      (obj.audioClip = message.payload?.audioClip
        ? ECS6ComponentAudioClip.toJSON(message.payload?.audioClip)
        : undefined);
    message.payload?.$case === "audioSource" &&
      (obj.audioSource = message.payload?.audioSource
        ? ECS6ComponentAudioSource.toJSON(message.payload?.audioSource)
        : undefined);
    message.payload?.$case === "audioStream" &&
      (obj.audioStream = message.payload?.audioStream
        ? ECS6ComponentAudioStream.toJSON(message.payload?.audioStream)
        : undefined);
    message.payload?.$case === "avatarShape" &&
      (obj.avatarShape = message.payload?.avatarShape
        ? ECS6ComponentAvatarShape.toJSON(message.payload?.avatarShape)
        : undefined);
    message.payload?.$case === "gizmos" &&
      (obj.gizmos = message.payload?.gizmos ? ECS6ComponentGizmos.toJSON(message.payload?.gizmos) : undefined);
    message.payload?.$case === "uiShape" &&
      (obj.uiShape = message.payload?.uiShape ? ECS6ComponentUiShape.toJSON(message.payload?.uiShape) : undefined);
    message.payload?.$case === "uiContainerRect" &&
      (obj.uiContainerRect = message.payload?.uiContainerRect
        ? ECS6ComponentUiContainerRect.toJSON(message.payload?.uiContainerRect)
        : undefined);
    message.payload?.$case === "uiContainerStack" &&
      (obj.uiContainerStack = message.payload?.uiContainerStack
        ? ECS6ComponentUiContainerStack.toJSON(message.payload?.uiContainerStack)
        : undefined);
    message.payload?.$case === "uiButton" &&
      (obj.uiButton = message.payload?.uiButton ? ECS6ComponentUiButton.toJSON(message.payload?.uiButton) : undefined);
    message.payload?.$case === "uiText" &&
      (obj.uiText = message.payload?.uiText ? ECS6ComponentUiText.toJSON(message.payload?.uiText) : undefined);
    message.payload?.$case === "uiInputText" &&
      (obj.uiInputText = message.payload?.uiInputText
        ? ECS6ComponentUiInputText.toJSON(message.payload?.uiInputText)
        : undefined);
    message.payload?.$case === "uiImage" &&
      (obj.uiImage = message.payload?.uiImage ? ECS6ComponentUiImage.toJSON(message.payload?.uiImage) : undefined);
    message.payload?.$case === "uiScrollRect" &&
      (obj.uiScrollRect = message.payload?.uiScrollRect
        ? ECS6ComponentUiScrollRect.toJSON(message.payload?.uiScrollRect)
        : undefined);
    message.payload?.$case === "uiWorldSpaceShape" &&
      (obj.uiWorldSpaceShape = message.payload?.uiWorldSpaceShape
        ? ECS6ComponentUiWorldSpaceShape.toJSON(message.payload?.uiWorldSpaceShape)
        : undefined);
    message.payload?.$case === "uiScreenSpaceShape" &&
      (obj.uiScreenSpaceShape = message.payload?.uiScreenSpaceShape
        ? ECS6ComponentUiScreenSpaceShape.toJSON(message.payload?.uiScreenSpaceShape)
        : undefined);
    message.payload?.$case === "uiFullScreenShape" &&
      (obj.uiFullScreenShape = message.payload?.uiFullScreenShape
        ? ECS6ComponentUiFullScreenShape.toJSON(message.payload?.uiFullScreenShape)
        : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ComponentBodyPayload>, I>>(base?: I): ComponentBodyPayload {
    return ComponentBodyPayload.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ComponentBodyPayload>, I>>(object: I): ComponentBodyPayload {
    const message = createBaseComponentBodyPayload();
    if (
      object.payload?.$case === "avatarModifierArea" &&
      object.payload?.avatarModifierArea !== undefined &&
      object.payload?.avatarModifierArea !== null
    ) {
      message.payload = {
        $case: "avatarModifierArea",
        avatarModifierArea: ECS6ComponentAvatarModifierArea.fromPartial(object.payload.avatarModifierArea),
      };
    }
    if (
      object.payload?.$case === "transform" &&
      object.payload?.transform !== undefined &&
      object.payload?.transform !== null
    ) {
      message.payload = { $case: "transform", transform: ECS6ComponentTransform.fromPartial(object.payload.transform) };
    }
    if (
      object.payload?.$case === "attachToAvatar" &&
      object.payload?.attachToAvatar !== undefined &&
      object.payload?.attachToAvatar !== null
    ) {
      message.payload = {
        $case: "attachToAvatar",
        attachToAvatar: ECS6ComponentAttachToAvatar.fromPartial(object.payload.attachToAvatar),
      };
    }
    if (
      object.payload?.$case === "billboard" &&
      object.payload?.billboard !== undefined &&
      object.payload?.billboard !== null
    ) {
      message.payload = { $case: "billboard", billboard: ECS6ComponentBillboard.fromPartial(object.payload.billboard) };
    }
    if (
      object.payload?.$case === "boxShape" &&
      object.payload?.boxShape !== undefined &&
      object.payload?.boxShape !== null
    ) {
      message.payload = { $case: "boxShape", boxShape: ECS6ComponentBoxShape.fromPartial(object.payload.boxShape) };
    }
    if (
      object.payload?.$case === "sphereShape" &&
      object.payload?.sphereShape !== undefined &&
      object.payload?.sphereShape !== null
    ) {
      message.payload = {
        $case: "sphereShape",
        sphereShape: ECS6ComponentSphereShape.fromPartial(object.payload.sphereShape),
      };
    }
    if (
      object.payload?.$case === "circleShape" &&
      object.payload?.circleShape !== undefined &&
      object.payload?.circleShape !== null
    ) {
      message.payload = {
        $case: "circleShape",
        circleShape: ECS6ComponentCircleShape.fromPartial(object.payload.circleShape),
      };
    }
    if (
      object.payload?.$case === "planeShape" &&
      object.payload?.planeShape !== undefined &&
      object.payload?.planeShape !== null
    ) {
      message.payload = {
        $case: "planeShape",
        planeShape: ECS6ComponentPlaneShape.fromPartial(object.payload.planeShape),
      };
    }
    if (
      object.payload?.$case === "coneShape" &&
      object.payload?.coneShape !== undefined &&
      object.payload?.coneShape !== null
    ) {
      message.payload = { $case: "coneShape", coneShape: ECS6ComponentConeShape.fromPartial(object.payload.coneShape) };
    }
    if (
      object.payload?.$case === "cylinderShape" &&
      object.payload?.cylinderShape !== undefined &&
      object.payload?.cylinderShape !== null
    ) {
      message.payload = {
        $case: "cylinderShape",
        cylinderShape: ECS6ComponentCylinderShape.fromPartial(object.payload.cylinderShape),
      };
    }
    if (
      object.payload?.$case === "gltfShape" &&
      object.payload?.gltfShape !== undefined &&
      object.payload?.gltfShape !== null
    ) {
      message.payload = { $case: "gltfShape", gltfShape: ECS6ComponentGltfShape.fromPartial(object.payload.gltfShape) };
    }
    if (
      object.payload?.$case === "nftShape" &&
      object.payload?.nftShape !== undefined &&
      object.payload?.nftShape !== null
    ) {
      message.payload = { $case: "nftShape", nftShape: ECS6ComponentNftShape.fromPartial(object.payload.nftShape) };
    }
    if (
      object.payload?.$case === "texture" && object.payload?.texture !== undefined && object.payload?.texture !== null
    ) {
      message.payload = { $case: "texture", texture: ECS6ComponentTexture.fromPartial(object.payload.texture) };
    }
    if (
      object.payload?.$case === "animator" &&
      object.payload?.animator !== undefined &&
      object.payload?.animator !== null
    ) {
      message.payload = { $case: "animator", animator: ECS6ComponentAnimator.fromPartial(object.payload.animator) };
    }
    if (
      object.payload?.$case === "objShape" &&
      object.payload?.objShape !== undefined &&
      object.payload?.objShape !== null
    ) {
      message.payload = { $case: "objShape", objShape: ECS6ComponentObjShape.fromPartial(object.payload.objShape) };
    }
    if (object.payload?.$case === "font" && object.payload?.font !== undefined && object.payload?.font !== null) {
      message.payload = { $case: "font", font: ECS6ComponentFont.fromPartial(object.payload.font) };
    }
    if (
      object.payload?.$case === "textShape" &&
      object.payload?.textShape !== undefined &&
      object.payload?.textShape !== null
    ) {
      message.payload = { $case: "textShape", textShape: ECS6ComponentTextShape.fromPartial(object.payload.textShape) };
    }
    if (
      object.payload?.$case === "material" &&
      object.payload?.material !== undefined &&
      object.payload?.material !== null
    ) {
      message.payload = { $case: "material", material: ECS6ComponentMaterial.fromPartial(object.payload.material) };
    }
    if (
      object.payload?.$case === "basicMaterial" &&
      object.payload?.basicMaterial !== undefined &&
      object.payload?.basicMaterial !== null
    ) {
      message.payload = {
        $case: "basicMaterial",
        basicMaterial: ECS6ComponentBasicMaterial.fromPartial(object.payload.basicMaterial),
      };
    }
    if (
      object.payload?.$case === "uuidCallback" &&
      object.payload?.uuidCallback !== undefined &&
      object.payload?.uuidCallback !== null
    ) {
      message.payload = {
        $case: "uuidCallback",
        uuidCallback: ECS6ComponentUuidCallback.fromPartial(object.payload.uuidCallback),
      };
    }
    if (
      object.payload?.$case === "smartItem" &&
      object.payload?.smartItem !== undefined &&
      object.payload?.smartItem !== null
    ) {
      message.payload = { $case: "smartItem", smartItem: ECS6ComponentSmartItem.fromPartial(object.payload.smartItem) };
    }
    if (
      object.payload?.$case === "videoClip" &&
      object.payload?.videoClip !== undefined &&
      object.payload?.videoClip !== null
    ) {
      message.payload = { $case: "videoClip", videoClip: ECS6ComponentVideoClip.fromPartial(object.payload.videoClip) };
    }
    if (
      object.payload?.$case === "videoTexture" &&
      object.payload?.videoTexture !== undefined &&
      object.payload?.videoTexture !== null
    ) {
      message.payload = {
        $case: "videoTexture",
        videoTexture: ECS6ComponentVideoTexture.fromPartial(object.payload.videoTexture),
      };
    }
    if (
      object.payload?.$case === "cameraModeArea" &&
      object.payload?.cameraModeArea !== undefined &&
      object.payload?.cameraModeArea !== null
    ) {
      message.payload = {
        $case: "cameraModeArea",
        cameraModeArea: ECS6ComponentCameraModeArea.fromPartial(object.payload.cameraModeArea),
      };
    }
    if (
      object.payload?.$case === "avatarTexture" &&
      object.payload?.avatarTexture !== undefined &&
      object.payload?.avatarTexture !== null
    ) {
      message.payload = {
        $case: "avatarTexture",
        avatarTexture: ECS6ComponentAvatarTexture.fromPartial(object.payload.avatarTexture),
      };
    }
    if (
      object.payload?.$case === "audioClip" &&
      object.payload?.audioClip !== undefined &&
      object.payload?.audioClip !== null
    ) {
      message.payload = { $case: "audioClip", audioClip: ECS6ComponentAudioClip.fromPartial(object.payload.audioClip) };
    }
    if (
      object.payload?.$case === "audioSource" &&
      object.payload?.audioSource !== undefined &&
      object.payload?.audioSource !== null
    ) {
      message.payload = {
        $case: "audioSource",
        audioSource: ECS6ComponentAudioSource.fromPartial(object.payload.audioSource),
      };
    }
    if (
      object.payload?.$case === "audioStream" &&
      object.payload?.audioStream !== undefined &&
      object.payload?.audioStream !== null
    ) {
      message.payload = {
        $case: "audioStream",
        audioStream: ECS6ComponentAudioStream.fromPartial(object.payload.audioStream),
      };
    }
    if (
      object.payload?.$case === "avatarShape" &&
      object.payload?.avatarShape !== undefined &&
      object.payload?.avatarShape !== null
    ) {
      message.payload = {
        $case: "avatarShape",
        avatarShape: ECS6ComponentAvatarShape.fromPartial(object.payload.avatarShape),
      };
    }
    if (object.payload?.$case === "gizmos" && object.payload?.gizmos !== undefined && object.payload?.gizmos !== null) {
      message.payload = { $case: "gizmos", gizmos: ECS6ComponentGizmos.fromPartial(object.payload.gizmos) };
    }
    if (
      object.payload?.$case === "uiShape" && object.payload?.uiShape !== undefined && object.payload?.uiShape !== null
    ) {
      message.payload = { $case: "uiShape", uiShape: ECS6ComponentUiShape.fromPartial(object.payload.uiShape) };
    }
    if (
      object.payload?.$case === "uiContainerRect" &&
      object.payload?.uiContainerRect !== undefined &&
      object.payload?.uiContainerRect !== null
    ) {
      message.payload = {
        $case: "uiContainerRect",
        uiContainerRect: ECS6ComponentUiContainerRect.fromPartial(object.payload.uiContainerRect),
      };
    }
    if (
      object.payload?.$case === "uiContainerStack" &&
      object.payload?.uiContainerStack !== undefined &&
      object.payload?.uiContainerStack !== null
    ) {
      message.payload = {
        $case: "uiContainerStack",
        uiContainerStack: ECS6ComponentUiContainerStack.fromPartial(object.payload.uiContainerStack),
      };
    }
    if (
      object.payload?.$case === "uiButton" &&
      object.payload?.uiButton !== undefined &&
      object.payload?.uiButton !== null
    ) {
      message.payload = { $case: "uiButton", uiButton: ECS6ComponentUiButton.fromPartial(object.payload.uiButton) };
    }
    if (object.payload?.$case === "uiText" && object.payload?.uiText !== undefined && object.payload?.uiText !== null) {
      message.payload = { $case: "uiText", uiText: ECS6ComponentUiText.fromPartial(object.payload.uiText) };
    }
    if (
      object.payload?.$case === "uiInputText" &&
      object.payload?.uiInputText !== undefined &&
      object.payload?.uiInputText !== null
    ) {
      message.payload = {
        $case: "uiInputText",
        uiInputText: ECS6ComponentUiInputText.fromPartial(object.payload.uiInputText),
      };
    }
    if (
      object.payload?.$case === "uiImage" && object.payload?.uiImage !== undefined && object.payload?.uiImage !== null
    ) {
      message.payload = { $case: "uiImage", uiImage: ECS6ComponentUiImage.fromPartial(object.payload.uiImage) };
    }
    if (
      object.payload?.$case === "uiScrollRect" &&
      object.payload?.uiScrollRect !== undefined &&
      object.payload?.uiScrollRect !== null
    ) {
      message.payload = {
        $case: "uiScrollRect",
        uiScrollRect: ECS6ComponentUiScrollRect.fromPartial(object.payload.uiScrollRect),
      };
    }
    if (
      object.payload?.$case === "uiWorldSpaceShape" &&
      object.payload?.uiWorldSpaceShape !== undefined &&
      object.payload?.uiWorldSpaceShape !== null
    ) {
      message.payload = {
        $case: "uiWorldSpaceShape",
        uiWorldSpaceShape: ECS6ComponentUiWorldSpaceShape.fromPartial(object.payload.uiWorldSpaceShape),
      };
    }
    if (
      object.payload?.$case === "uiScreenSpaceShape" &&
      object.payload?.uiScreenSpaceShape !== undefined &&
      object.payload?.uiScreenSpaceShape !== null
    ) {
      message.payload = {
        $case: "uiScreenSpaceShape",
        uiScreenSpaceShape: ECS6ComponentUiScreenSpaceShape.fromPartial(object.payload.uiScreenSpaceShape),
      };
    }
    if (
      object.payload?.$case === "uiFullScreenShape" &&
      object.payload?.uiFullScreenShape !== undefined &&
      object.payload?.uiFullScreenShape !== null
    ) {
      message.payload = {
        $case: "uiFullScreenShape",
        uiFullScreenShape: ECS6ComponentUiFullScreenShape.fromPartial(object.payload.uiFullScreenShape),
      };
    }
    return message;
  }
}

function createBaseCreateEntityBody(): CreateEntityBody {
  return { id: "" };
}

export namespace CreateEntityBody {
  export function encode(message: CreateEntityBody, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): CreateEntityBody {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEntityBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): CreateEntityBody {
    return { id: isSet(object.id) ? String(object.id) : "" };
  }

  export function toJSON(message: CreateEntityBody): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<CreateEntityBody>, I>>(base?: I): CreateEntityBody {
    return CreateEntityBody.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<CreateEntityBody>, I>>(object: I): CreateEntityBody {
    const message = createBaseCreateEntityBody();
    message.id = object.id ?? "";
    return message;
  }
}

function createBaseRemoveEntityBody(): RemoveEntityBody {
  return { id: "" };
}

export namespace RemoveEntityBody {
  export function encode(message: RemoveEntityBody, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): RemoveEntityBody {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveEntityBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): RemoveEntityBody {
    return { id: isSet(object.id) ? String(object.id) : "" };
  }

  export function toJSON(message: RemoveEntityBody): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<RemoveEntityBody>, I>>(base?: I): RemoveEntityBody {
    return RemoveEntityBody.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<RemoveEntityBody>, I>>(object: I): RemoveEntityBody {
    const message = createBaseRemoveEntityBody();
    message.id = object.id ?? "";
    return message;
  }
}

function createBaseUpdateEntityComponentBody(): UpdateEntityComponentBody {
  return { entityId: "", classId: 0, name: "", componentData: undefined };
}

export namespace UpdateEntityComponentBody {
  export function encode(message: UpdateEntityComponentBody, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.entityId !== "") {
      writer.uint32(10).string(message.entityId);
    }
    if (message.classId !== 0) {
      writer.uint32(16).int32(message.classId);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.componentData !== undefined) {
      ComponentBodyPayload.encode(message.componentData, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): UpdateEntityComponentBody {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEntityComponentBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entityId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.classId = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.componentData = ComponentBodyPayload.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): UpdateEntityComponentBody {
    return {
      entityId: isSet(object.entityId) ? String(object.entityId) : "",
      classId: isSet(object.classId) ? Number(object.classId) : 0,
      name: isSet(object.name) ? String(object.name) : "",
      componentData: isSet(object.componentData) ? ComponentBodyPayload.fromJSON(object.componentData) : undefined,
    };
  }

  export function toJSON(message: UpdateEntityComponentBody): unknown {
    const obj: any = {};
    message.entityId !== undefined && (obj.entityId = message.entityId);
    message.classId !== undefined && (obj.classId = Math.round(message.classId));
    message.name !== undefined && (obj.name = message.name);
    message.componentData !== undefined &&
      (obj.componentData = message.componentData ? ComponentBodyPayload.toJSON(message.componentData) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<UpdateEntityComponentBody>, I>>(
    base?: I,
  ): UpdateEntityComponentBody {
    return UpdateEntityComponentBody.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<UpdateEntityComponentBody>, I>>(
    object: I,
  ): UpdateEntityComponentBody {
    const message = createBaseUpdateEntityComponentBody();
    message.entityId = object.entityId ?? "";
    message.classId = object.classId ?? 0;
    message.name = object.name ?? "";
    message.componentData = (object.componentData !== undefined && object.componentData !== null)
      ? ComponentBodyPayload.fromPartial(object.componentData)
      : undefined;
    return message;
  }
}

function createBaseAttachEntityComponentBody(): AttachEntityComponentBody {
  return { entityId: "", name: "", id: "" };
}

export namespace AttachEntityComponentBody {
  export function encode(message: AttachEntityComponentBody, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.entityId !== "") {
      writer.uint32(10).string(message.entityId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): AttachEntityComponentBody {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachEntityComponentBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entityId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): AttachEntityComponentBody {
    return {
      entityId: isSet(object.entityId) ? String(object.entityId) : "",
      name: isSet(object.name) ? String(object.name) : "",
      id: isSet(object.id) ? String(object.id) : "",
    };
  }

  export function toJSON(message: AttachEntityComponentBody): unknown {
    const obj: any = {};
    message.entityId !== undefined && (obj.entityId = message.entityId);
    message.name !== undefined && (obj.name = message.name);
    message.id !== undefined && (obj.id = message.id);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<AttachEntityComponentBody>, I>>(
    base?: I,
  ): AttachEntityComponentBody {
    return AttachEntityComponentBody.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<AttachEntityComponentBody>, I>>(
    object: I,
  ): AttachEntityComponentBody {
    const message = createBaseAttachEntityComponentBody();
    message.entityId = object.entityId ?? "";
    message.name = object.name ?? "";
    message.id = object.id ?? "";
    return message;
  }
}

function createBaseComponentRemovedBody(): ComponentRemovedBody {
  return { entityId: "", name: "" };
}

export namespace ComponentRemovedBody {
  export function encode(message: ComponentRemovedBody, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.entityId !== "") {
      writer.uint32(10).string(message.entityId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ComponentRemovedBody {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComponentRemovedBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entityId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ComponentRemovedBody {
    return {
      entityId: isSet(object.entityId) ? String(object.entityId) : "",
      name: isSet(object.name) ? String(object.name) : "",
    };
  }

  export function toJSON(message: ComponentRemovedBody): unknown {
    const obj: any = {};
    message.entityId !== undefined && (obj.entityId = message.entityId);
    message.name !== undefined && (obj.name = message.name);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ComponentRemovedBody>, I>>(base?: I): ComponentRemovedBody {
    return ComponentRemovedBody.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ComponentRemovedBody>, I>>(object: I): ComponentRemovedBody {
    const message = createBaseComponentRemovedBody();
    message.entityId = object.entityId ?? "";
    message.name = object.name ?? "";
    return message;
  }
}

function createBaseSetEntityParentBody(): SetEntityParentBody {
  return { entityId: "", parentId: "" };
}

export namespace SetEntityParentBody {
  export function encode(message: SetEntityParentBody, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.entityId !== "") {
      writer.uint32(10).string(message.entityId);
    }
    if (message.parentId !== "") {
      writer.uint32(18).string(message.parentId);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): SetEntityParentBody {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetEntityParentBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entityId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parentId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): SetEntityParentBody {
    return {
      entityId: isSet(object.entityId) ? String(object.entityId) : "",
      parentId: isSet(object.parentId) ? String(object.parentId) : "",
    };
  }

  export function toJSON(message: SetEntityParentBody): unknown {
    const obj: any = {};
    message.entityId !== undefined && (obj.entityId = message.entityId);
    message.parentId !== undefined && (obj.parentId = message.parentId);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<SetEntityParentBody>, I>>(base?: I): SetEntityParentBody {
    return SetEntityParentBody.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<SetEntityParentBody>, I>>(object: I): SetEntityParentBody {
    const message = createBaseSetEntityParentBody();
    message.entityId = object.entityId ?? "";
    message.parentId = object.parentId ?? "";
    return message;
  }
}

function createBaseQueryBody(): QueryBody {
  return { queryId: "", payload: undefined };
}

export namespace QueryBody {
  export function encode(message: QueryBody, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.queryId !== "") {
      writer.uint32(10).string(message.queryId);
    }
    if (message.payload !== undefined) {
      QueryBody_RayQuery.encode(message.payload, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): QueryBody {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.queryId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payload = QueryBody_RayQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): QueryBody {
    return {
      queryId: isSet(object.queryId) ? String(object.queryId) : "",
      payload: isSet(object.payload) ? QueryBody_RayQuery.fromJSON(object.payload) : undefined,
    };
  }

  export function toJSON(message: QueryBody): unknown {
    const obj: any = {};
    message.queryId !== undefined && (obj.queryId = message.queryId);
    message.payload !== undefined &&
      (obj.payload = message.payload ? QueryBody_RayQuery.toJSON(message.payload) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<QueryBody>, I>>(base?: I): QueryBody {
    return QueryBody.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<QueryBody>, I>>(object: I): QueryBody {
    const message = createBaseQueryBody();
    message.queryId = object.queryId ?? "";
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? QueryBody_RayQuery.fromPartial(object.payload)
      : undefined;
    return message;
  }
}

function createBaseQueryBody_Ray(): QueryBody_Ray {
  return { origin: undefined, direction: undefined, distance: 0 };
}

export namespace QueryBody_Ray {
  export function encode(message: QueryBody_Ray, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.origin !== undefined) {
      Vector3.encode(message.origin, writer.uint32(10).fork()).ldelim();
    }
    if (message.direction !== undefined) {
      Vector3.encode(message.direction, writer.uint32(18).fork()).ldelim();
    }
    if (message.distance !== 0) {
      writer.uint32(29).float(message.distance);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): QueryBody_Ray {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBody_Ray();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.origin = Vector3.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.direction = Vector3.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.distance = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): QueryBody_Ray {
    return {
      origin: isSet(object.origin) ? Vector3.fromJSON(object.origin) : undefined,
      direction: isSet(object.direction) ? Vector3.fromJSON(object.direction) : undefined,
      distance: isSet(object.distance) ? Number(object.distance) : 0,
    };
  }

  export function toJSON(message: QueryBody_Ray): unknown {
    const obj: any = {};
    message.origin !== undefined && (obj.origin = message.origin ? Vector3.toJSON(message.origin) : undefined);
    message.direction !== undefined &&
      (obj.direction = message.direction ? Vector3.toJSON(message.direction) : undefined);
    message.distance !== undefined && (obj.distance = message.distance);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<QueryBody_Ray>, I>>(base?: I): QueryBody_Ray {
    return QueryBody_Ray.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<QueryBody_Ray>, I>>(object: I): QueryBody_Ray {
    const message = createBaseQueryBody_Ray();
    message.origin = (object.origin !== undefined && object.origin !== null)
      ? Vector3.fromPartial(object.origin)
      : undefined;
    message.direction = (object.direction !== undefined && object.direction !== null)
      ? Vector3.fromPartial(object.direction)
      : undefined;
    message.distance = object.distance ?? 0;
    return message;
  }
}

function createBaseQueryBody_RayQuery(): QueryBody_RayQuery {
  return { queryId: "", queryType: "", ray: undefined };
}

export namespace QueryBody_RayQuery {
  export function encode(message: QueryBody_RayQuery, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.queryId !== "") {
      writer.uint32(10).string(message.queryId);
    }
    if (message.queryType !== "") {
      writer.uint32(18).string(message.queryType);
    }
    if (message.ray !== undefined) {
      QueryBody_Ray.encode(message.ray, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): QueryBody_RayQuery {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBody_RayQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.queryId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queryType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ray = QueryBody_Ray.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): QueryBody_RayQuery {
    return {
      queryId: isSet(object.queryId) ? String(object.queryId) : "",
      queryType: isSet(object.queryType) ? String(object.queryType) : "",
      ray: isSet(object.ray) ? QueryBody_Ray.fromJSON(object.ray) : undefined,
    };
  }

  export function toJSON(message: QueryBody_RayQuery): unknown {
    const obj: any = {};
    message.queryId !== undefined && (obj.queryId = message.queryId);
    message.queryType !== undefined && (obj.queryType = message.queryType);
    message.ray !== undefined && (obj.ray = message.ray ? QueryBody_Ray.toJSON(message.ray) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<QueryBody_RayQuery>, I>>(base?: I): QueryBody_RayQuery {
    return QueryBody_RayQuery.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<QueryBody_RayQuery>, I>>(object: I): QueryBody_RayQuery {
    const message = createBaseQueryBody_RayQuery();
    message.queryId = object.queryId ?? "";
    message.queryType = object.queryType ?? "";
    message.ray = (object.ray !== undefined && object.ray !== null) ? QueryBody_Ray.fromPartial(object.ray) : undefined;
    return message;
  }
}

function createBaseComponentCreatedBody(): ComponentCreatedBody {
  return { id: "", classId: 0, name: "" };
}

export namespace ComponentCreatedBody {
  export function encode(message: ComponentCreatedBody, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.classId !== 0) {
      writer.uint32(16).int32(message.classId);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ComponentCreatedBody {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComponentCreatedBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.classId = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ComponentCreatedBody {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      classId: isSet(object.classId) ? Number(object.classId) : 0,
      name: isSet(object.name) ? String(object.name) : "",
    };
  }

  export function toJSON(message: ComponentCreatedBody): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.classId !== undefined && (obj.classId = Math.round(message.classId));
    message.name !== undefined && (obj.name = message.name);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ComponentCreatedBody>, I>>(base?: I): ComponentCreatedBody {
    return ComponentCreatedBody.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ComponentCreatedBody>, I>>(object: I): ComponentCreatedBody {
    const message = createBaseComponentCreatedBody();
    message.id = object.id ?? "";
    message.classId = object.classId ?? 0;
    message.name = object.name ?? "";
    return message;
  }
}

function createBaseComponentDisposedBody(): ComponentDisposedBody {
  return { id: "" };
}

export namespace ComponentDisposedBody {
  export function encode(message: ComponentDisposedBody, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ComponentDisposedBody {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComponentDisposedBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ComponentDisposedBody {
    return { id: isSet(object.id) ? String(object.id) : "" };
  }

  export function toJSON(message: ComponentDisposedBody): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ComponentDisposedBody>, I>>(base?: I): ComponentDisposedBody {
    return ComponentDisposedBody.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ComponentDisposedBody>, I>>(
    object: I,
  ): ComponentDisposedBody {
    const message = createBaseComponentDisposedBody();
    message.id = object.id ?? "";
    return message;
  }
}

function createBaseComponentUpdatedBody(): ComponentUpdatedBody {
  return { id: "", componentData: undefined };
}

export namespace ComponentUpdatedBody {
  export function encode(message: ComponentUpdatedBody, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.componentData !== undefined) {
      ComponentBodyPayload.encode(message.componentData, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ComponentUpdatedBody {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComponentUpdatedBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.componentData = ComponentBodyPayload.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ComponentUpdatedBody {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      componentData: isSet(object.componentData) ? ComponentBodyPayload.fromJSON(object.componentData) : undefined,
    };
  }

  export function toJSON(message: ComponentUpdatedBody): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.componentData !== undefined &&
      (obj.componentData = message.componentData ? ComponentBodyPayload.toJSON(message.componentData) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ComponentUpdatedBody>, I>>(base?: I): ComponentUpdatedBody {
    return ComponentUpdatedBody.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ComponentUpdatedBody>, I>>(object: I): ComponentUpdatedBody {
    const message = createBaseComponentUpdatedBody();
    message.id = object.id ?? "";
    message.componentData = (object.componentData !== undefined && object.componentData !== null)
      ? ComponentBodyPayload.fromPartial(object.componentData)
      : undefined;
    return message;
  }
}

function createBaseInitMessagesFinishedBody(): InitMessagesFinishedBody {
  return {};
}

export namespace InitMessagesFinishedBody {
  export function encode(_: InitMessagesFinishedBody, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): InitMessagesFinishedBody {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitMessagesFinishedBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): InitMessagesFinishedBody {
    return {};
  }

  export function toJSON(_: InitMessagesFinishedBody): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<InitMessagesFinishedBody>, I>>(
    base?: I,
  ): InitMessagesFinishedBody {
    return InitMessagesFinishedBody.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<InitMessagesFinishedBody>, I>>(
    _: I,
  ): InitMessagesFinishedBody {
    const message = createBaseInitMessagesFinishedBody();
    return message;
  }
}

function createBaseEntityActionPayload(): EntityActionPayload {
  return { payload: undefined };
}

export namespace EntityActionPayload {
  export function encode(message: EntityActionPayload, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    switch (message.payload?.$case) {
      case "openExternalUrl":
        OpenExternalUrlBody.encode(message.payload.openExternalUrl, writer.uint32(10).fork()).ldelim();
        break;
      case "openNftDialog":
        OpenNFTDialogBody.encode(message.payload.openNftDialog, writer.uint32(18).fork()).ldelim();
        break;
      case "createEntity":
        CreateEntityBody.encode(message.payload.createEntity, writer.uint32(26).fork()).ldelim();
        break;
      case "removeEntity":
        RemoveEntityBody.encode(message.payload.removeEntity, writer.uint32(34).fork()).ldelim();
        break;
      case "updateEntityComponent":
        UpdateEntityComponentBody.encode(message.payload.updateEntityComponent, writer.uint32(42).fork()).ldelim();
        break;
      case "attachEntityComponent":
        AttachEntityComponentBody.encode(message.payload.attachEntityComponent, writer.uint32(50).fork()).ldelim();
        break;
      case "componentRemoved":
        ComponentRemovedBody.encode(message.payload.componentRemoved, writer.uint32(58).fork()).ldelim();
        break;
      case "setEntityParent":
        SetEntityParentBody.encode(message.payload.setEntityParent, writer.uint32(66).fork()).ldelim();
        break;
      case "query":
        QueryBody.encode(message.payload.query, writer.uint32(74).fork()).ldelim();
        break;
      case "componentCreated":
        ComponentCreatedBody.encode(message.payload.componentCreated, writer.uint32(82).fork()).ldelim();
        break;
      case "componentDisposed":
        ComponentDisposedBody.encode(message.payload.componentDisposed, writer.uint32(90).fork()).ldelim();
        break;
      case "componentUpdated":
        ComponentUpdatedBody.encode(message.payload.componentUpdated, writer.uint32(98).fork()).ldelim();
        break;
      case "initMessagesFinished":
        InitMessagesFinishedBody.encode(message.payload.initMessagesFinished, writer.uint32(106).fork()).ldelim();
        break;
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): EntityActionPayload {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityActionPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.payload = {
            $case: "openExternalUrl",
            openExternalUrl: OpenExternalUrlBody.decode(reader, reader.uint32()),
          };
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payload = {
            $case: "openNftDialog",
            openNftDialog: OpenNFTDialogBody.decode(reader, reader.uint32()),
          };
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.payload = { $case: "createEntity", createEntity: CreateEntityBody.decode(reader, reader.uint32()) };
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.payload = { $case: "removeEntity", removeEntity: RemoveEntityBody.decode(reader, reader.uint32()) };
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.payload = {
            $case: "updateEntityComponent",
            updateEntityComponent: UpdateEntityComponentBody.decode(reader, reader.uint32()),
          };
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.payload = {
            $case: "attachEntityComponent",
            attachEntityComponent: AttachEntityComponentBody.decode(reader, reader.uint32()),
          };
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.payload = {
            $case: "componentRemoved",
            componentRemoved: ComponentRemovedBody.decode(reader, reader.uint32()),
          };
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.payload = {
            $case: "setEntityParent",
            setEntityParent: SetEntityParentBody.decode(reader, reader.uint32()),
          };
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.payload = { $case: "query", query: QueryBody.decode(reader, reader.uint32()) };
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.payload = {
            $case: "componentCreated",
            componentCreated: ComponentCreatedBody.decode(reader, reader.uint32()),
          };
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.payload = {
            $case: "componentDisposed",
            componentDisposed: ComponentDisposedBody.decode(reader, reader.uint32()),
          };
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.payload = {
            $case: "componentUpdated",
            componentUpdated: ComponentUpdatedBody.decode(reader, reader.uint32()),
          };
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.payload = {
            $case: "initMessagesFinished",
            initMessagesFinished: InitMessagesFinishedBody.decode(reader, reader.uint32()),
          };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): EntityActionPayload {
    return {
      payload: isSet(object.openExternalUrl)
        ? { $case: "openExternalUrl", openExternalUrl: OpenExternalUrlBody.fromJSON(object.openExternalUrl) }
        : isSet(object.openNftDialog)
        ? { $case: "openNftDialog", openNftDialog: OpenNFTDialogBody.fromJSON(object.openNftDialog) }
        : isSet(object.createEntity)
        ? { $case: "createEntity", createEntity: CreateEntityBody.fromJSON(object.createEntity) }
        : isSet(object.removeEntity)
        ? { $case: "removeEntity", removeEntity: RemoveEntityBody.fromJSON(object.removeEntity) }
        : isSet(object.updateEntityComponent)
        ? {
          $case: "updateEntityComponent",
          updateEntityComponent: UpdateEntityComponentBody.fromJSON(object.updateEntityComponent),
        }
        : isSet(object.attachEntityComponent)
        ? {
          $case: "attachEntityComponent",
          attachEntityComponent: AttachEntityComponentBody.fromJSON(object.attachEntityComponent),
        }
        : isSet(object.componentRemoved)
        ? { $case: "componentRemoved", componentRemoved: ComponentRemovedBody.fromJSON(object.componentRemoved) }
        : isSet(object.setEntityParent)
        ? { $case: "setEntityParent", setEntityParent: SetEntityParentBody.fromJSON(object.setEntityParent) }
        : isSet(object.query)
        ? { $case: "query", query: QueryBody.fromJSON(object.query) }
        : isSet(object.componentCreated)
        ? { $case: "componentCreated", componentCreated: ComponentCreatedBody.fromJSON(object.componentCreated) }
        : isSet(object.componentDisposed)
        ? { $case: "componentDisposed", componentDisposed: ComponentDisposedBody.fromJSON(object.componentDisposed) }
        : isSet(object.componentUpdated)
        ? { $case: "componentUpdated", componentUpdated: ComponentUpdatedBody.fromJSON(object.componentUpdated) }
        : isSet(object.initMessagesFinished)
        ? {
          $case: "initMessagesFinished",
          initMessagesFinished: InitMessagesFinishedBody.fromJSON(object.initMessagesFinished),
        }
        : undefined,
    };
  }

  export function toJSON(message: EntityActionPayload): unknown {
    const obj: any = {};
    message.payload?.$case === "openExternalUrl" &&
      (obj.openExternalUrl = message.payload?.openExternalUrl
        ? OpenExternalUrlBody.toJSON(message.payload?.openExternalUrl)
        : undefined);
    message.payload?.$case === "openNftDialog" &&
      (obj.openNftDialog = message.payload?.openNftDialog
        ? OpenNFTDialogBody.toJSON(message.payload?.openNftDialog)
        : undefined);
    message.payload?.$case === "createEntity" &&
      (obj.createEntity = message.payload?.createEntity
        ? CreateEntityBody.toJSON(message.payload?.createEntity)
        : undefined);
    message.payload?.$case === "removeEntity" &&
      (obj.removeEntity = message.payload?.removeEntity
        ? RemoveEntityBody.toJSON(message.payload?.removeEntity)
        : undefined);
    message.payload?.$case === "updateEntityComponent" &&
      (obj.updateEntityComponent = message.payload?.updateEntityComponent
        ? UpdateEntityComponentBody.toJSON(message.payload?.updateEntityComponent)
        : undefined);
    message.payload?.$case === "attachEntityComponent" &&
      (obj.attachEntityComponent = message.payload?.attachEntityComponent
        ? AttachEntityComponentBody.toJSON(message.payload?.attachEntityComponent)
        : undefined);
    message.payload?.$case === "componentRemoved" &&
      (obj.componentRemoved = message.payload?.componentRemoved
        ? ComponentRemovedBody.toJSON(message.payload?.componentRemoved)
        : undefined);
    message.payload?.$case === "setEntityParent" &&
      (obj.setEntityParent = message.payload?.setEntityParent
        ? SetEntityParentBody.toJSON(message.payload?.setEntityParent)
        : undefined);
    message.payload?.$case === "query" &&
      (obj.query = message.payload?.query ? QueryBody.toJSON(message.payload?.query) : undefined);
    message.payload?.$case === "componentCreated" &&
      (obj.componentCreated = message.payload?.componentCreated
        ? ComponentCreatedBody.toJSON(message.payload?.componentCreated)
        : undefined);
    message.payload?.$case === "componentDisposed" &&
      (obj.componentDisposed = message.payload?.componentDisposed
        ? ComponentDisposedBody.toJSON(message.payload?.componentDisposed)
        : undefined);
    message.payload?.$case === "componentUpdated" &&
      (obj.componentUpdated = message.payload?.componentUpdated
        ? ComponentUpdatedBody.toJSON(message.payload?.componentUpdated)
        : undefined);
    message.payload?.$case === "initMessagesFinished" &&
      (obj.initMessagesFinished = message.payload?.initMessagesFinished
        ? InitMessagesFinishedBody.toJSON(message.payload?.initMessagesFinished)
        : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<EntityActionPayload>, I>>(base?: I): EntityActionPayload {
    return EntityActionPayload.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<EntityActionPayload>, I>>(object: I): EntityActionPayload {
    const message = createBaseEntityActionPayload();
    if (
      object.payload?.$case === "openExternalUrl" &&
      object.payload?.openExternalUrl !== undefined &&
      object.payload?.openExternalUrl !== null
    ) {
      message.payload = {
        $case: "openExternalUrl",
        openExternalUrl: OpenExternalUrlBody.fromPartial(object.payload.openExternalUrl),
      };
    }
    if (
      object.payload?.$case === "openNftDialog" &&
      object.payload?.openNftDialog !== undefined &&
      object.payload?.openNftDialog !== null
    ) {
      message.payload = {
        $case: "openNftDialog",
        openNftDialog: OpenNFTDialogBody.fromPartial(object.payload.openNftDialog),
      };
    }
    if (
      object.payload?.$case === "createEntity" &&
      object.payload?.createEntity !== undefined &&
      object.payload?.createEntity !== null
    ) {
      message.payload = {
        $case: "createEntity",
        createEntity: CreateEntityBody.fromPartial(object.payload.createEntity),
      };
    }
    if (
      object.payload?.$case === "removeEntity" &&
      object.payload?.removeEntity !== undefined &&
      object.payload?.removeEntity !== null
    ) {
      message.payload = {
        $case: "removeEntity",
        removeEntity: RemoveEntityBody.fromPartial(object.payload.removeEntity),
      };
    }
    if (
      object.payload?.$case === "updateEntityComponent" &&
      object.payload?.updateEntityComponent !== undefined &&
      object.payload?.updateEntityComponent !== null
    ) {
      message.payload = {
        $case: "updateEntityComponent",
        updateEntityComponent: UpdateEntityComponentBody.fromPartial(object.payload.updateEntityComponent),
      };
    }
    if (
      object.payload?.$case === "attachEntityComponent" &&
      object.payload?.attachEntityComponent !== undefined &&
      object.payload?.attachEntityComponent !== null
    ) {
      message.payload = {
        $case: "attachEntityComponent",
        attachEntityComponent: AttachEntityComponentBody.fromPartial(object.payload.attachEntityComponent),
      };
    }
    if (
      object.payload?.$case === "componentRemoved" &&
      object.payload?.componentRemoved !== undefined &&
      object.payload?.componentRemoved !== null
    ) {
      message.payload = {
        $case: "componentRemoved",
        componentRemoved: ComponentRemovedBody.fromPartial(object.payload.componentRemoved),
      };
    }
    if (
      object.payload?.$case === "setEntityParent" &&
      object.payload?.setEntityParent !== undefined &&
      object.payload?.setEntityParent !== null
    ) {
      message.payload = {
        $case: "setEntityParent",
        setEntityParent: SetEntityParentBody.fromPartial(object.payload.setEntityParent),
      };
    }
    if (object.payload?.$case === "query" && object.payload?.query !== undefined && object.payload?.query !== null) {
      message.payload = { $case: "query", query: QueryBody.fromPartial(object.payload.query) };
    }
    if (
      object.payload?.$case === "componentCreated" &&
      object.payload?.componentCreated !== undefined &&
      object.payload?.componentCreated !== null
    ) {
      message.payload = {
        $case: "componentCreated",
        componentCreated: ComponentCreatedBody.fromPartial(object.payload.componentCreated),
      };
    }
    if (
      object.payload?.$case === "componentDisposed" &&
      object.payload?.componentDisposed !== undefined &&
      object.payload?.componentDisposed !== null
    ) {
      message.payload = {
        $case: "componentDisposed",
        componentDisposed: ComponentDisposedBody.fromPartial(object.payload.componentDisposed),
      };
    }
    if (
      object.payload?.$case === "componentUpdated" &&
      object.payload?.componentUpdated !== undefined &&
      object.payload?.componentUpdated !== null
    ) {
      message.payload = {
        $case: "componentUpdated",
        componentUpdated: ComponentUpdatedBody.fromPartial(object.payload.componentUpdated),
      };
    }
    if (
      object.payload?.$case === "initMessagesFinished" &&
      object.payload?.initMessagesFinished !== undefined &&
      object.payload?.initMessagesFinished !== null
    ) {
      message.payload = {
        $case: "initMessagesFinished",
        initMessagesFinished: InitMessagesFinishedBody.fromPartial(object.payload.initMessagesFinished),
      };
    }
    return message;
  }
}

function createBaseEntityAction(): EntityAction {
  return { tag: undefined, payload: undefined };
}

export namespace EntityAction {
  export function encode(message: EntityAction, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.tag !== undefined) {
      writer.uint32(18).string(message.tag);
    }
    if (message.payload !== undefined) {
      EntityActionPayload.encode(message.payload, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): EntityAction {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tag = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.payload = EntityActionPayload.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): EntityAction {
    return {
      tag: isSet(object.tag) ? String(object.tag) : undefined,
      payload: isSet(object.payload) ? EntityActionPayload.fromJSON(object.payload) : undefined,
    };
  }

  export function toJSON(message: EntityAction): unknown {
    const obj: any = {};
    message.tag !== undefined && (obj.tag = message.tag);
    message.payload !== undefined &&
      (obj.payload = message.payload ? EntityActionPayload.toJSON(message.payload) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<EntityAction>, I>>(base?: I): EntityAction {
    return EntityAction.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<EntityAction>, I>>(object: I): EntityAction {
    const message = createBaseEntityAction();
    message.tag = object.tag ?? undefined;
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? EntityActionPayload.fromPartial(object.payload)
      : undefined;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
