/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { LoadingState, loadingStateFromJSON, loadingStateToJSON } from "./common/loading_state.gen";

export const protobufPackage = "decentraland.sdk.components";

/**
 * GltfContainerLoadingState is set by the engine and provides information about
 * the current state of the GltfContainer of an entity.
 */
export interface PBGltfContainerLoadingState {
  currentState: LoadingState;
}

function createBasePBGltfContainerLoadingState(): PBGltfContainerLoadingState {
  return { currentState: 0 };
}

export namespace PBGltfContainerLoadingState {
  export function encode(message: PBGltfContainerLoadingState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.currentState !== 0) {
      writer.uint32(8).int32(message.currentState);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBGltfContainerLoadingState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBGltfContainerLoadingState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.currentState = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBGltfContainerLoadingState {
    return { currentState: isSet(object.currentState) ? loadingStateFromJSON(object.currentState) : 0 };
  }

  export function toJSON(message: PBGltfContainerLoadingState): unknown {
    const obj: any = {};
    message.currentState !== undefined && (obj.currentState = loadingStateToJSON(message.currentState));
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBGltfContainerLoadingState>, I>>(
    base?: I,
  ): PBGltfContainerLoadingState {
    return PBGltfContainerLoadingState.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBGltfContainerLoadingState>, I>>(
    object: I,
  ): PBGltfContainerLoadingState {
    const message = createBasePBGltfContainerLoadingState();
    message.currentState = object.currentState ?? 0;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
