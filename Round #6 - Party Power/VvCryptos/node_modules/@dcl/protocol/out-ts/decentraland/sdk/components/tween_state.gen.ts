/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "decentraland.sdk.components";

export enum TweenStateStatus {
  TS_ACTIVE = 0,
  TS_COMPLETED = 1,
  TS_PAUSED = 2,
  UNRECOGNIZED = -1,
}

export function tweenStateStatusFromJSON(object: any): TweenStateStatus {
  switch (object) {
    case 0:
    case "TS_ACTIVE":
      return TweenStateStatus.TS_ACTIVE;
    case 1:
    case "TS_COMPLETED":
      return TweenStateStatus.TS_COMPLETED;
    case 2:
    case "TS_PAUSED":
      return TweenStateStatus.TS_PAUSED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TweenStateStatus.UNRECOGNIZED;
  }
}

export function tweenStateStatusToJSON(object: TweenStateStatus): string {
  switch (object) {
    case TweenStateStatus.TS_ACTIVE:
      return "TS_ACTIVE";
    case TweenStateStatus.TS_COMPLETED:
      return "TS_COMPLETED";
    case TweenStateStatus.TS_PAUSED:
      return "TS_PAUSED";
    case TweenStateStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PBTweenState {
  state: TweenStateStatus;
  /** between 0 and 1 */
  currentTime: number;
}

function createBasePBTweenState(): PBTweenState {
  return { state: 0, currentTime: 0 };
}

export namespace PBTweenState {
  export function encode(message: PBTweenState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.currentTime !== 0) {
      writer.uint32(21).float(message.currentTime);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBTweenState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBTweenState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.currentTime = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBTweenState {
    return {
      state: isSet(object.state) ? tweenStateStatusFromJSON(object.state) : 0,
      currentTime: isSet(object.currentTime) ? Number(object.currentTime) : 0,
    };
  }

  export function toJSON(message: PBTweenState): unknown {
    const obj: any = {};
    message.state !== undefined && (obj.state = tweenStateStatusToJSON(message.state));
    message.currentTime !== undefined && (obj.currentTime = message.currentTime);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBTweenState>, I>>(base?: I): PBTweenState {
    return PBTweenState.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBTweenState>, I>>(object: I): PBTweenState {
    const message = createBasePBTweenState();
    message.state = object.state ?? 0;
    message.currentTime = object.currentTime ?? 0;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
