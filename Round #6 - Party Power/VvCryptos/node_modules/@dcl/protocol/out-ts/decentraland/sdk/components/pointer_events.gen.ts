/* eslint-disable */
import _m0 from "protobufjs/minimal";
import {
  InputAction,
  inputActionFromJSON,
  inputActionToJSON,
  PointerEventType,
  pointerEventTypeFromJSON,
  pointerEventTypeToJSON,
} from "./common/input_action.gen";

export const protobufPackage = "decentraland.sdk.components";

/**
 * PointerEvents adds configurable pointer-based interactions to the attached Entity.
 *
 * Events that match the criteria defined in the PointerEvents structure are reported back to the
 * Entity via the PointerEventsResult component.
 *
 * Some examples of events that can be detected:
 * - Pointer hovering over the Entity.
 * - Held mouse button released over the Entity.
 * - Controller button pressed while targeting the Entity.
 * - Key pressed while targeting the Entity, but only in close range.
 *
 * It also supports simple visual feedback when interactions occur, by showing floating text.
 * More sophisticated feedback requires the use of other components.
 */
export interface PBPointerEvents {
  /** the list of relevant events to detect */
  pointerEvents: PBPointerEvents_Entry[];
}

export interface PBPointerEvents_Info {
  /** key/button in use (default IA_ANY) */
  button?:
    | InputAction
    | undefined;
  /** feedback on hover (default 'Interact') */
  hoverText?:
    | string
    | undefined;
  /** range of interaction (default 10) */
  maxDistance?:
    | number
    | undefined;
  /** enable or disable hover text and highlight (default true) */
  showFeedback?:
    | boolean
    | undefined;
  /** enable or disable hover highlight (default true) */
  showHighlight?: boolean | undefined;
}

export interface PBPointerEvents_Entry {
  /** the kind of interaction to detect */
  eventType: PointerEventType;
  /** additional configuration for this detection */
  eventInfo: PBPointerEvents_Info | undefined;
}

function createBasePBPointerEvents(): PBPointerEvents {
  return { pointerEvents: [] };
}

export namespace PBPointerEvents {
  export function encode(message: PBPointerEvents, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.pointerEvents) {
      PBPointerEvents_Entry.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBPointerEvents {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBPointerEvents();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pointerEvents.push(PBPointerEvents_Entry.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBPointerEvents {
    return {
      pointerEvents: Array.isArray(object?.pointerEvents)
        ? object.pointerEvents.map((e: any) => PBPointerEvents_Entry.fromJSON(e))
        : [],
    };
  }

  export function toJSON(message: PBPointerEvents): unknown {
    const obj: any = {};
    if (message.pointerEvents) {
      obj.pointerEvents = message.pointerEvents.map((e) => e ? PBPointerEvents_Entry.toJSON(e) : undefined);
    } else {
      obj.pointerEvents = [];
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBPointerEvents>, I>>(base?: I): PBPointerEvents {
    return PBPointerEvents.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBPointerEvents>, I>>(object: I): PBPointerEvents {
    const message = createBasePBPointerEvents();
    message.pointerEvents = object.pointerEvents?.map((e) => PBPointerEvents_Entry.fromPartial(e)) || [];
    return message;
  }
}

function createBasePBPointerEvents_Info(): PBPointerEvents_Info {
  return {
    button: undefined,
    hoverText: undefined,
    maxDistance: undefined,
    showFeedback: undefined,
    showHighlight: undefined,
  };
}

export namespace PBPointerEvents_Info {
  export function encode(message: PBPointerEvents_Info, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.button !== undefined) {
      writer.uint32(8).int32(message.button);
    }
    if (message.hoverText !== undefined) {
      writer.uint32(18).string(message.hoverText);
    }
    if (message.maxDistance !== undefined) {
      writer.uint32(29).float(message.maxDistance);
    }
    if (message.showFeedback !== undefined) {
      writer.uint32(32).bool(message.showFeedback);
    }
    if (message.showHighlight !== undefined) {
      writer.uint32(40).bool(message.showHighlight);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBPointerEvents_Info {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBPointerEvents_Info();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.button = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hoverText = reader.string();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.maxDistance = reader.float();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.showFeedback = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.showHighlight = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBPointerEvents_Info {
    return {
      button: isSet(object.button) ? inputActionFromJSON(object.button) : undefined,
      hoverText: isSet(object.hoverText) ? String(object.hoverText) : undefined,
      maxDistance: isSet(object.maxDistance) ? Number(object.maxDistance) : undefined,
      showFeedback: isSet(object.showFeedback) ? Boolean(object.showFeedback) : undefined,
      showHighlight: isSet(object.showHighlight) ? Boolean(object.showHighlight) : undefined,
    };
  }

  export function toJSON(message: PBPointerEvents_Info): unknown {
    const obj: any = {};
    message.button !== undefined &&
      (obj.button = message.button !== undefined ? inputActionToJSON(message.button) : undefined);
    message.hoverText !== undefined && (obj.hoverText = message.hoverText);
    message.maxDistance !== undefined && (obj.maxDistance = message.maxDistance);
    message.showFeedback !== undefined && (obj.showFeedback = message.showFeedback);
    message.showHighlight !== undefined && (obj.showHighlight = message.showHighlight);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBPointerEvents_Info>, I>>(base?: I): PBPointerEvents_Info {
    return PBPointerEvents_Info.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBPointerEvents_Info>, I>>(object: I): PBPointerEvents_Info {
    const message = createBasePBPointerEvents_Info();
    message.button = object.button ?? undefined;
    message.hoverText = object.hoverText ?? undefined;
    message.maxDistance = object.maxDistance ?? undefined;
    message.showFeedback = object.showFeedback ?? undefined;
    message.showHighlight = object.showHighlight ?? undefined;
    return message;
  }
}

function createBasePBPointerEvents_Entry(): PBPointerEvents_Entry {
  return { eventType: 0, eventInfo: undefined };
}

export namespace PBPointerEvents_Entry {
  export function encode(message: PBPointerEvents_Entry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.eventType !== 0) {
      writer.uint32(8).int32(message.eventType);
    }
    if (message.eventInfo !== undefined) {
      PBPointerEvents_Info.encode(message.eventInfo, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBPointerEvents_Entry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBPointerEvents_Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.eventType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventInfo = PBPointerEvents_Info.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBPointerEvents_Entry {
    return {
      eventType: isSet(object.eventType) ? pointerEventTypeFromJSON(object.eventType) : 0,
      eventInfo: isSet(object.eventInfo) ? PBPointerEvents_Info.fromJSON(object.eventInfo) : undefined,
    };
  }

  export function toJSON(message: PBPointerEvents_Entry): unknown {
    const obj: any = {};
    message.eventType !== undefined && (obj.eventType = pointerEventTypeToJSON(message.eventType));
    message.eventInfo !== undefined &&
      (obj.eventInfo = message.eventInfo ? PBPointerEvents_Info.toJSON(message.eventInfo) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBPointerEvents_Entry>, I>>(base?: I): PBPointerEvents_Entry {
    return PBPointerEvents_Entry.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBPointerEvents_Entry>, I>>(
    object: I,
  ): PBPointerEvents_Entry {
    const message = createBasePBPointerEvents_Entry();
    message.eventType = object.eventType ?? 0;
    message.eventInfo = (object.eventInfo !== undefined && object.eventInfo !== null)
      ? PBPointerEvents_Info.fromPartial(object.eventInfo)
      : undefined;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
