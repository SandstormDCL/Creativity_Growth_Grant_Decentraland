/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "decentraland.sdk.components";

export enum YGPositionType {
  YGPT_RELATIVE = 0,
  YGPT_ABSOLUTE = 1,
  UNRECOGNIZED = -1,
}

export function yGPositionTypeFromJSON(object: any): YGPositionType {
  switch (object) {
    case 0:
    case "YGPT_RELATIVE":
      return YGPositionType.YGPT_RELATIVE;
    case 1:
    case "YGPT_ABSOLUTE":
      return YGPositionType.YGPT_ABSOLUTE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return YGPositionType.UNRECOGNIZED;
  }
}

export function yGPositionTypeToJSON(object: YGPositionType): string {
  switch (object) {
    case YGPositionType.YGPT_RELATIVE:
      return "YGPT_RELATIVE";
    case YGPositionType.YGPT_ABSOLUTE:
      return "YGPT_ABSOLUTE";
    case YGPositionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum YGAlign {
  YGA_AUTO = 0,
  YGA_FLEX_START = 1,
  YGA_CENTER = 2,
  YGA_FLEX_END = 3,
  YGA_STRETCH = 4,
  YGA_BASELINE = 5,
  YGA_SPACE_BETWEEN = 6,
  YGA_SPACE_AROUND = 7,
  UNRECOGNIZED = -1,
}

export function yGAlignFromJSON(object: any): YGAlign {
  switch (object) {
    case 0:
    case "YGA_AUTO":
      return YGAlign.YGA_AUTO;
    case 1:
    case "YGA_FLEX_START":
      return YGAlign.YGA_FLEX_START;
    case 2:
    case "YGA_CENTER":
      return YGAlign.YGA_CENTER;
    case 3:
    case "YGA_FLEX_END":
      return YGAlign.YGA_FLEX_END;
    case 4:
    case "YGA_STRETCH":
      return YGAlign.YGA_STRETCH;
    case 5:
    case "YGA_BASELINE":
      return YGAlign.YGA_BASELINE;
    case 6:
    case "YGA_SPACE_BETWEEN":
      return YGAlign.YGA_SPACE_BETWEEN;
    case 7:
    case "YGA_SPACE_AROUND":
      return YGAlign.YGA_SPACE_AROUND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return YGAlign.UNRECOGNIZED;
  }
}

export function yGAlignToJSON(object: YGAlign): string {
  switch (object) {
    case YGAlign.YGA_AUTO:
      return "YGA_AUTO";
    case YGAlign.YGA_FLEX_START:
      return "YGA_FLEX_START";
    case YGAlign.YGA_CENTER:
      return "YGA_CENTER";
    case YGAlign.YGA_FLEX_END:
      return "YGA_FLEX_END";
    case YGAlign.YGA_STRETCH:
      return "YGA_STRETCH";
    case YGAlign.YGA_BASELINE:
      return "YGA_BASELINE";
    case YGAlign.YGA_SPACE_BETWEEN:
      return "YGA_SPACE_BETWEEN";
    case YGAlign.YGA_SPACE_AROUND:
      return "YGA_SPACE_AROUND";
    case YGAlign.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum YGUnit {
  YGU_UNDEFINED = 0,
  YGU_POINT = 1,
  YGU_PERCENT = 2,
  YGU_AUTO = 3,
  UNRECOGNIZED = -1,
}

export function yGUnitFromJSON(object: any): YGUnit {
  switch (object) {
    case 0:
    case "YGU_UNDEFINED":
      return YGUnit.YGU_UNDEFINED;
    case 1:
    case "YGU_POINT":
      return YGUnit.YGU_POINT;
    case 2:
    case "YGU_PERCENT":
      return YGUnit.YGU_PERCENT;
    case 3:
    case "YGU_AUTO":
      return YGUnit.YGU_AUTO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return YGUnit.UNRECOGNIZED;
  }
}

export function yGUnitToJSON(object: YGUnit): string {
  switch (object) {
    case YGUnit.YGU_UNDEFINED:
      return "YGU_UNDEFINED";
    case YGUnit.YGU_POINT:
      return "YGU_POINT";
    case YGUnit.YGU_PERCENT:
      return "YGU_PERCENT";
    case YGUnit.YGU_AUTO:
      return "YGU_AUTO";
    case YGUnit.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum YGFlexDirection {
  YGFD_ROW = 0,
  YGFD_COLUMN = 1,
  YGFD_COLUMN_REVERSE = 2,
  YGFD_ROW_REVERSE = 3,
  UNRECOGNIZED = -1,
}

export function yGFlexDirectionFromJSON(object: any): YGFlexDirection {
  switch (object) {
    case 0:
    case "YGFD_ROW":
      return YGFlexDirection.YGFD_ROW;
    case 1:
    case "YGFD_COLUMN":
      return YGFlexDirection.YGFD_COLUMN;
    case 2:
    case "YGFD_COLUMN_REVERSE":
      return YGFlexDirection.YGFD_COLUMN_REVERSE;
    case 3:
    case "YGFD_ROW_REVERSE":
      return YGFlexDirection.YGFD_ROW_REVERSE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return YGFlexDirection.UNRECOGNIZED;
  }
}

export function yGFlexDirectionToJSON(object: YGFlexDirection): string {
  switch (object) {
    case YGFlexDirection.YGFD_ROW:
      return "YGFD_ROW";
    case YGFlexDirection.YGFD_COLUMN:
      return "YGFD_COLUMN";
    case YGFlexDirection.YGFD_COLUMN_REVERSE:
      return "YGFD_COLUMN_REVERSE";
    case YGFlexDirection.YGFD_ROW_REVERSE:
      return "YGFD_ROW_REVERSE";
    case YGFlexDirection.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum YGWrap {
  YGW_NO_WRAP = 0,
  YGW_WRAP = 1,
  YGW_WRAP_REVERSE = 2,
  UNRECOGNIZED = -1,
}

export function yGWrapFromJSON(object: any): YGWrap {
  switch (object) {
    case 0:
    case "YGW_NO_WRAP":
      return YGWrap.YGW_NO_WRAP;
    case 1:
    case "YGW_WRAP":
      return YGWrap.YGW_WRAP;
    case 2:
    case "YGW_WRAP_REVERSE":
      return YGWrap.YGW_WRAP_REVERSE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return YGWrap.UNRECOGNIZED;
  }
}

export function yGWrapToJSON(object: YGWrap): string {
  switch (object) {
    case YGWrap.YGW_NO_WRAP:
      return "YGW_NO_WRAP";
    case YGWrap.YGW_WRAP:
      return "YGW_WRAP";
    case YGWrap.YGW_WRAP_REVERSE:
      return "YGW_WRAP_REVERSE";
    case YGWrap.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum YGJustify {
  YGJ_FLEX_START = 0,
  YGJ_CENTER = 1,
  YGJ_FLEX_END = 2,
  YGJ_SPACE_BETWEEN = 3,
  YGJ_SPACE_AROUND = 4,
  YGJ_SPACE_EVENLY = 5,
  UNRECOGNIZED = -1,
}

export function yGJustifyFromJSON(object: any): YGJustify {
  switch (object) {
    case 0:
    case "YGJ_FLEX_START":
      return YGJustify.YGJ_FLEX_START;
    case 1:
    case "YGJ_CENTER":
      return YGJustify.YGJ_CENTER;
    case 2:
    case "YGJ_FLEX_END":
      return YGJustify.YGJ_FLEX_END;
    case 3:
    case "YGJ_SPACE_BETWEEN":
      return YGJustify.YGJ_SPACE_BETWEEN;
    case 4:
    case "YGJ_SPACE_AROUND":
      return YGJustify.YGJ_SPACE_AROUND;
    case 5:
    case "YGJ_SPACE_EVENLY":
      return YGJustify.YGJ_SPACE_EVENLY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return YGJustify.UNRECOGNIZED;
  }
}

export function yGJustifyToJSON(object: YGJustify): string {
  switch (object) {
    case YGJustify.YGJ_FLEX_START:
      return "YGJ_FLEX_START";
    case YGJustify.YGJ_CENTER:
      return "YGJ_CENTER";
    case YGJustify.YGJ_FLEX_END:
      return "YGJ_FLEX_END";
    case YGJustify.YGJ_SPACE_BETWEEN:
      return "YGJ_SPACE_BETWEEN";
    case YGJustify.YGJ_SPACE_AROUND:
      return "YGJ_SPACE_AROUND";
    case YGJustify.YGJ_SPACE_EVENLY:
      return "YGJ_SPACE_EVENLY";
    case YGJustify.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum YGOverflow {
  YGO_VISIBLE = 0,
  YGO_HIDDEN = 1,
  YGO_SCROLL = 2,
  UNRECOGNIZED = -1,
}

export function yGOverflowFromJSON(object: any): YGOverflow {
  switch (object) {
    case 0:
    case "YGO_VISIBLE":
      return YGOverflow.YGO_VISIBLE;
    case 1:
    case "YGO_HIDDEN":
      return YGOverflow.YGO_HIDDEN;
    case 2:
    case "YGO_SCROLL":
      return YGOverflow.YGO_SCROLL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return YGOverflow.UNRECOGNIZED;
  }
}

export function yGOverflowToJSON(object: YGOverflow): string {
  switch (object) {
    case YGOverflow.YGO_VISIBLE:
      return "YGO_VISIBLE";
    case YGOverflow.YGO_HIDDEN:
      return "YGO_HIDDEN";
    case YGOverflow.YGO_SCROLL:
      return "YGO_SCROLL";
    case YGOverflow.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum YGDisplay {
  YGD_FLEX = 0,
  YGD_NONE = 1,
  UNRECOGNIZED = -1,
}

export function yGDisplayFromJSON(object: any): YGDisplay {
  switch (object) {
    case 0:
    case "YGD_FLEX":
      return YGDisplay.YGD_FLEX;
    case 1:
    case "YGD_NONE":
      return YGDisplay.YGD_NONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return YGDisplay.UNRECOGNIZED;
  }
}

export function yGDisplayToJSON(object: YGDisplay): string {
  switch (object) {
    case YGDisplay.YGD_FLEX:
      return "YGD_FLEX";
    case YGDisplay.YGD_NONE:
      return "YGD_NONE";
    case YGDisplay.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum YGEdge {
  YGE_LEFT = 0,
  YGE_TOP = 1,
  YGE_RIGHT = 2,
  YGE_BOTTOM = 3,
  YGE_START = 4,
  YGE_END = 5,
  YGE_HORIZONTAL = 6,
  YGE_VERTICAL = 7,
  YGE_ALL = 8,
  UNRECOGNIZED = -1,
}

export function yGEdgeFromJSON(object: any): YGEdge {
  switch (object) {
    case 0:
    case "YGE_LEFT":
      return YGEdge.YGE_LEFT;
    case 1:
    case "YGE_TOP":
      return YGEdge.YGE_TOP;
    case 2:
    case "YGE_RIGHT":
      return YGEdge.YGE_RIGHT;
    case 3:
    case "YGE_BOTTOM":
      return YGEdge.YGE_BOTTOM;
    case 4:
    case "YGE_START":
      return YGEdge.YGE_START;
    case 5:
    case "YGE_END":
      return YGEdge.YGE_END;
    case 6:
    case "YGE_HORIZONTAL":
      return YGEdge.YGE_HORIZONTAL;
    case 7:
    case "YGE_VERTICAL":
      return YGEdge.YGE_VERTICAL;
    case 8:
    case "YGE_ALL":
      return YGEdge.YGE_ALL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return YGEdge.UNRECOGNIZED;
  }
}

export function yGEdgeToJSON(object: YGEdge): string {
  switch (object) {
    case YGEdge.YGE_LEFT:
      return "YGE_LEFT";
    case YGEdge.YGE_TOP:
      return "YGE_TOP";
    case YGEdge.YGE_RIGHT:
      return "YGE_RIGHT";
    case YGEdge.YGE_BOTTOM:
      return "YGE_BOTTOM";
    case YGEdge.YGE_START:
      return "YGE_START";
    case YGEdge.YGE_END:
      return "YGE_END";
    case YGEdge.YGE_HORIZONTAL:
      return "YGE_HORIZONTAL";
    case YGEdge.YGE_VERTICAL:
      return "YGE_VERTICAL";
    case YGEdge.YGE_ALL:
      return "YGE_ALL";
    case YGEdge.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PointerFilterMode {
  PFM_NONE = 0,
  PFM_BLOCK = 1,
  UNRECOGNIZED = -1,
}

export function pointerFilterModeFromJSON(object: any): PointerFilterMode {
  switch (object) {
    case 0:
    case "PFM_NONE":
      return PointerFilterMode.PFM_NONE;
    case 1:
    case "PFM_BLOCK":
      return PointerFilterMode.PFM_BLOCK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PointerFilterMode.UNRECOGNIZED;
  }
}

export function pointerFilterModeToJSON(object: PointerFilterMode): string {
  switch (object) {
    case PointerFilterMode.PFM_NONE:
      return "PFM_NONE";
    case PointerFilterMode.PFM_BLOCK:
      return "PFM_BLOCK";
    case PointerFilterMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PBUiTransform {
  parent: number;
  rightOf: number;
  /** default: YGAlign.YGA_FLEX_START */
  alignContent?:
    | YGAlign
    | undefined;
  /** default: YGAlign.YGA_STRETCH */
  alignItems?:
    | YGAlign
    | undefined;
  /** default: YGWrap.YGW_WRAP */
  flexWrap?:
    | YGWrap
    | undefined;
  /** default: 1 */
  flexShrink?:
    | number
    | undefined;
  /** YGPositionType.YGPT_RELATIVE */
  positionType: YGPositionType;
  /** YGAlign.YGA_AUTO */
  alignSelf: YGAlign;
  /** YGFlexDirection.YGFD_ROW */
  flexDirection: YGFlexDirection;
  /** YGJustify.YGJ_FLEX_START */
  justifyContent: YGJustify;
  /** YGOverflow.YGO_VISIBLE */
  overflow: YGOverflow;
  /** YGDisplay.YGD_FLEX */
  display: YGDisplay;
  /** YGUnit.YGU_UNDEFINED */
  flexBasisUnit: YGUnit;
  flexBasis: number;
  flexGrow: number;
  /** YGUnit.YGU_UNDEFINED */
  widthUnit: YGUnit;
  width: number;
  /** YGUnit.YGU_UNDEFINED */
  heightUnit: YGUnit;
  height: number;
  /** YGUnit.YGU_UNDEFINED */
  minWidthUnit: YGUnit;
  minWidth: number;
  /** YGUnit.YGU_UNDEFINED */
  minHeightUnit: YGUnit;
  minHeight: number;
  /** YGUnit.YGU_UNDEFINED */
  maxWidthUnit: YGUnit;
  maxWidth: number;
  /** YGUnit.YGU_UNDEFINED */
  maxHeightUnit: YGUnit;
  maxHeight: number;
  /** YGUnit.YGU_UNDEFINED */
  positionLeftUnit: YGUnit;
  positionLeft: number;
  /** YGUnit.YGU_UNDEFINED */
  positionTopUnit: YGUnit;
  positionTop: number;
  /** YGUnit.YGU_UNDEFINED */
  positionRightUnit: YGUnit;
  positionRight: number;
  /** YGUnit.YGU_UNDEFINED */
  positionBottomUnit: YGUnit;
  positionBottom: number;
  /** YGUnit.YGU_UNDEFINED */
  marginLeftUnit: YGUnit;
  marginLeft: number;
  /** YGUnit.YGU_UNDEFINED */
  marginTopUnit: YGUnit;
  marginTop: number;
  /** YGUnit.YGU_UNDEFINED */
  marginRightUnit: YGUnit;
  marginRight: number;
  /** YGUnit.YGU_UNDEFINED */
  marginBottomUnit: YGUnit;
  marginBottom: number;
  /** YGUnit.YGU_UNDEFINED */
  paddingLeftUnit: YGUnit;
  paddingLeft: number;
  /** YGUnit.YGU_UNDEFINED */
  paddingTopUnit: YGUnit;
  paddingTop: number;
  /** YGUnit.YGU_UNDEFINED */
  paddingRightUnit: YGUnit;
  paddingRight: number;
  /** YGUnit.YGU_UNDEFINED */
  paddingBottomUnit: YGUnit;
  paddingBottom: number;
  /** default: PointerFilterMode.PFM_NONE */
  pointerFilter?: PointerFilterMode | undefined;
}

function createBasePBUiTransform(): PBUiTransform {
  return {
    parent: 0,
    rightOf: 0,
    alignContent: undefined,
    alignItems: undefined,
    flexWrap: undefined,
    flexShrink: undefined,
    positionType: 0,
    alignSelf: 0,
    flexDirection: 0,
    justifyContent: 0,
    overflow: 0,
    display: 0,
    flexBasisUnit: 0,
    flexBasis: 0,
    flexGrow: 0,
    widthUnit: 0,
    width: 0,
    heightUnit: 0,
    height: 0,
    minWidthUnit: 0,
    minWidth: 0,
    minHeightUnit: 0,
    minHeight: 0,
    maxWidthUnit: 0,
    maxWidth: 0,
    maxHeightUnit: 0,
    maxHeight: 0,
    positionLeftUnit: 0,
    positionLeft: 0,
    positionTopUnit: 0,
    positionTop: 0,
    positionRightUnit: 0,
    positionRight: 0,
    positionBottomUnit: 0,
    positionBottom: 0,
    marginLeftUnit: 0,
    marginLeft: 0,
    marginTopUnit: 0,
    marginTop: 0,
    marginRightUnit: 0,
    marginRight: 0,
    marginBottomUnit: 0,
    marginBottom: 0,
    paddingLeftUnit: 0,
    paddingLeft: 0,
    paddingTopUnit: 0,
    paddingTop: 0,
    paddingRightUnit: 0,
    paddingRight: 0,
    paddingBottomUnit: 0,
    paddingBottom: 0,
    pointerFilter: undefined,
  };
}

export namespace PBUiTransform {
  export function encode(message: PBUiTransform, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.parent !== 0) {
      writer.uint32(8).int32(message.parent);
    }
    if (message.rightOf !== 0) {
      writer.uint32(16).int32(message.rightOf);
    }
    if (message.alignContent !== undefined) {
      writer.uint32(24).int32(message.alignContent);
    }
    if (message.alignItems !== undefined) {
      writer.uint32(32).int32(message.alignItems);
    }
    if (message.flexWrap !== undefined) {
      writer.uint32(40).int32(message.flexWrap);
    }
    if (message.flexShrink !== undefined) {
      writer.uint32(53).float(message.flexShrink);
    }
    if (message.positionType !== 0) {
      writer.uint32(56).int32(message.positionType);
    }
    if (message.alignSelf !== 0) {
      writer.uint32(64).int32(message.alignSelf);
    }
    if (message.flexDirection !== 0) {
      writer.uint32(72).int32(message.flexDirection);
    }
    if (message.justifyContent !== 0) {
      writer.uint32(80).int32(message.justifyContent);
    }
    if (message.overflow !== 0) {
      writer.uint32(88).int32(message.overflow);
    }
    if (message.display !== 0) {
      writer.uint32(96).int32(message.display);
    }
    if (message.flexBasisUnit !== 0) {
      writer.uint32(104).int32(message.flexBasisUnit);
    }
    if (message.flexBasis !== 0) {
      writer.uint32(117).float(message.flexBasis);
    }
    if (message.flexGrow !== 0) {
      writer.uint32(125).float(message.flexGrow);
    }
    if (message.widthUnit !== 0) {
      writer.uint32(128).int32(message.widthUnit);
    }
    if (message.width !== 0) {
      writer.uint32(141).float(message.width);
    }
    if (message.heightUnit !== 0) {
      writer.uint32(144).int32(message.heightUnit);
    }
    if (message.height !== 0) {
      writer.uint32(157).float(message.height);
    }
    if (message.minWidthUnit !== 0) {
      writer.uint32(160).int32(message.minWidthUnit);
    }
    if (message.minWidth !== 0) {
      writer.uint32(173).float(message.minWidth);
    }
    if (message.minHeightUnit !== 0) {
      writer.uint32(176).int32(message.minHeightUnit);
    }
    if (message.minHeight !== 0) {
      writer.uint32(189).float(message.minHeight);
    }
    if (message.maxWidthUnit !== 0) {
      writer.uint32(192).int32(message.maxWidthUnit);
    }
    if (message.maxWidth !== 0) {
      writer.uint32(205).float(message.maxWidth);
    }
    if (message.maxHeightUnit !== 0) {
      writer.uint32(208).int32(message.maxHeightUnit);
    }
    if (message.maxHeight !== 0) {
      writer.uint32(221).float(message.maxHeight);
    }
    if (message.positionLeftUnit !== 0) {
      writer.uint32(224).int32(message.positionLeftUnit);
    }
    if (message.positionLeft !== 0) {
      writer.uint32(237).float(message.positionLeft);
    }
    if (message.positionTopUnit !== 0) {
      writer.uint32(240).int32(message.positionTopUnit);
    }
    if (message.positionTop !== 0) {
      writer.uint32(253).float(message.positionTop);
    }
    if (message.positionRightUnit !== 0) {
      writer.uint32(256).int32(message.positionRightUnit);
    }
    if (message.positionRight !== 0) {
      writer.uint32(269).float(message.positionRight);
    }
    if (message.positionBottomUnit !== 0) {
      writer.uint32(272).int32(message.positionBottomUnit);
    }
    if (message.positionBottom !== 0) {
      writer.uint32(285).float(message.positionBottom);
    }
    if (message.marginLeftUnit !== 0) {
      writer.uint32(288).int32(message.marginLeftUnit);
    }
    if (message.marginLeft !== 0) {
      writer.uint32(301).float(message.marginLeft);
    }
    if (message.marginTopUnit !== 0) {
      writer.uint32(304).int32(message.marginTopUnit);
    }
    if (message.marginTop !== 0) {
      writer.uint32(317).float(message.marginTop);
    }
    if (message.marginRightUnit !== 0) {
      writer.uint32(320).int32(message.marginRightUnit);
    }
    if (message.marginRight !== 0) {
      writer.uint32(333).float(message.marginRight);
    }
    if (message.marginBottomUnit !== 0) {
      writer.uint32(336).int32(message.marginBottomUnit);
    }
    if (message.marginBottom !== 0) {
      writer.uint32(349).float(message.marginBottom);
    }
    if (message.paddingLeftUnit !== 0) {
      writer.uint32(352).int32(message.paddingLeftUnit);
    }
    if (message.paddingLeft !== 0) {
      writer.uint32(365).float(message.paddingLeft);
    }
    if (message.paddingTopUnit !== 0) {
      writer.uint32(368).int32(message.paddingTopUnit);
    }
    if (message.paddingTop !== 0) {
      writer.uint32(381).float(message.paddingTop);
    }
    if (message.paddingRightUnit !== 0) {
      writer.uint32(384).int32(message.paddingRightUnit);
    }
    if (message.paddingRight !== 0) {
      writer.uint32(397).float(message.paddingRight);
    }
    if (message.paddingBottomUnit !== 0) {
      writer.uint32(400).int32(message.paddingBottomUnit);
    }
    if (message.paddingBottom !== 0) {
      writer.uint32(413).float(message.paddingBottom);
    }
    if (message.pointerFilter !== undefined) {
      writer.uint32(416).int32(message.pointerFilter);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBUiTransform {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBUiTransform();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.parent = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.rightOf = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.alignContent = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.alignItems = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.flexWrap = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.flexShrink = reader.float();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.positionType = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.alignSelf = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.flexDirection = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.justifyContent = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.overflow = reader.int32() as any;
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.display = reader.int32() as any;
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.flexBasisUnit = reader.int32() as any;
          continue;
        case 14:
          if (tag !== 117) {
            break;
          }

          message.flexBasis = reader.float();
          continue;
        case 15:
          if (tag !== 125) {
            break;
          }

          message.flexGrow = reader.float();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.widthUnit = reader.int32() as any;
          continue;
        case 17:
          if (tag !== 141) {
            break;
          }

          message.width = reader.float();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.heightUnit = reader.int32() as any;
          continue;
        case 19:
          if (tag !== 157) {
            break;
          }

          message.height = reader.float();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.minWidthUnit = reader.int32() as any;
          continue;
        case 21:
          if (tag !== 173) {
            break;
          }

          message.minWidth = reader.float();
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.minHeightUnit = reader.int32() as any;
          continue;
        case 23:
          if (tag !== 189) {
            break;
          }

          message.minHeight = reader.float();
          continue;
        case 24:
          if (tag !== 192) {
            break;
          }

          message.maxWidthUnit = reader.int32() as any;
          continue;
        case 25:
          if (tag !== 205) {
            break;
          }

          message.maxWidth = reader.float();
          continue;
        case 26:
          if (tag !== 208) {
            break;
          }

          message.maxHeightUnit = reader.int32() as any;
          continue;
        case 27:
          if (tag !== 221) {
            break;
          }

          message.maxHeight = reader.float();
          continue;
        case 28:
          if (tag !== 224) {
            break;
          }

          message.positionLeftUnit = reader.int32() as any;
          continue;
        case 29:
          if (tag !== 237) {
            break;
          }

          message.positionLeft = reader.float();
          continue;
        case 30:
          if (tag !== 240) {
            break;
          }

          message.positionTopUnit = reader.int32() as any;
          continue;
        case 31:
          if (tag !== 253) {
            break;
          }

          message.positionTop = reader.float();
          continue;
        case 32:
          if (tag !== 256) {
            break;
          }

          message.positionRightUnit = reader.int32() as any;
          continue;
        case 33:
          if (tag !== 269) {
            break;
          }

          message.positionRight = reader.float();
          continue;
        case 34:
          if (tag !== 272) {
            break;
          }

          message.positionBottomUnit = reader.int32() as any;
          continue;
        case 35:
          if (tag !== 285) {
            break;
          }

          message.positionBottom = reader.float();
          continue;
        case 36:
          if (tag !== 288) {
            break;
          }

          message.marginLeftUnit = reader.int32() as any;
          continue;
        case 37:
          if (tag !== 301) {
            break;
          }

          message.marginLeft = reader.float();
          continue;
        case 38:
          if (tag !== 304) {
            break;
          }

          message.marginTopUnit = reader.int32() as any;
          continue;
        case 39:
          if (tag !== 317) {
            break;
          }

          message.marginTop = reader.float();
          continue;
        case 40:
          if (tag !== 320) {
            break;
          }

          message.marginRightUnit = reader.int32() as any;
          continue;
        case 41:
          if (tag !== 333) {
            break;
          }

          message.marginRight = reader.float();
          continue;
        case 42:
          if (tag !== 336) {
            break;
          }

          message.marginBottomUnit = reader.int32() as any;
          continue;
        case 43:
          if (tag !== 349) {
            break;
          }

          message.marginBottom = reader.float();
          continue;
        case 44:
          if (tag !== 352) {
            break;
          }

          message.paddingLeftUnit = reader.int32() as any;
          continue;
        case 45:
          if (tag !== 365) {
            break;
          }

          message.paddingLeft = reader.float();
          continue;
        case 46:
          if (tag !== 368) {
            break;
          }

          message.paddingTopUnit = reader.int32() as any;
          continue;
        case 47:
          if (tag !== 381) {
            break;
          }

          message.paddingTop = reader.float();
          continue;
        case 48:
          if (tag !== 384) {
            break;
          }

          message.paddingRightUnit = reader.int32() as any;
          continue;
        case 49:
          if (tag !== 397) {
            break;
          }

          message.paddingRight = reader.float();
          continue;
        case 50:
          if (tag !== 400) {
            break;
          }

          message.paddingBottomUnit = reader.int32() as any;
          continue;
        case 51:
          if (tag !== 413) {
            break;
          }

          message.paddingBottom = reader.float();
          continue;
        case 52:
          if (tag !== 416) {
            break;
          }

          message.pointerFilter = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBUiTransform {
    return {
      parent: isSet(object.parent) ? Number(object.parent) : 0,
      rightOf: isSet(object.rightOf) ? Number(object.rightOf) : 0,
      alignContent: isSet(object.alignContent) ? yGAlignFromJSON(object.alignContent) : undefined,
      alignItems: isSet(object.alignItems) ? yGAlignFromJSON(object.alignItems) : undefined,
      flexWrap: isSet(object.flexWrap) ? yGWrapFromJSON(object.flexWrap) : undefined,
      flexShrink: isSet(object.flexShrink) ? Number(object.flexShrink) : undefined,
      positionType: isSet(object.positionType) ? yGPositionTypeFromJSON(object.positionType) : 0,
      alignSelf: isSet(object.alignSelf) ? yGAlignFromJSON(object.alignSelf) : 0,
      flexDirection: isSet(object.flexDirection) ? yGFlexDirectionFromJSON(object.flexDirection) : 0,
      justifyContent: isSet(object.justifyContent) ? yGJustifyFromJSON(object.justifyContent) : 0,
      overflow: isSet(object.overflow) ? yGOverflowFromJSON(object.overflow) : 0,
      display: isSet(object.display) ? yGDisplayFromJSON(object.display) : 0,
      flexBasisUnit: isSet(object.flexBasisUnit) ? yGUnitFromJSON(object.flexBasisUnit) : 0,
      flexBasis: isSet(object.flexBasis) ? Number(object.flexBasis) : 0,
      flexGrow: isSet(object.flexGrow) ? Number(object.flexGrow) : 0,
      widthUnit: isSet(object.widthUnit) ? yGUnitFromJSON(object.widthUnit) : 0,
      width: isSet(object.width) ? Number(object.width) : 0,
      heightUnit: isSet(object.heightUnit) ? yGUnitFromJSON(object.heightUnit) : 0,
      height: isSet(object.height) ? Number(object.height) : 0,
      minWidthUnit: isSet(object.minWidthUnit) ? yGUnitFromJSON(object.minWidthUnit) : 0,
      minWidth: isSet(object.minWidth) ? Number(object.minWidth) : 0,
      minHeightUnit: isSet(object.minHeightUnit) ? yGUnitFromJSON(object.minHeightUnit) : 0,
      minHeight: isSet(object.minHeight) ? Number(object.minHeight) : 0,
      maxWidthUnit: isSet(object.maxWidthUnit) ? yGUnitFromJSON(object.maxWidthUnit) : 0,
      maxWidth: isSet(object.maxWidth) ? Number(object.maxWidth) : 0,
      maxHeightUnit: isSet(object.maxHeightUnit) ? yGUnitFromJSON(object.maxHeightUnit) : 0,
      maxHeight: isSet(object.maxHeight) ? Number(object.maxHeight) : 0,
      positionLeftUnit: isSet(object.positionLeftUnit) ? yGUnitFromJSON(object.positionLeftUnit) : 0,
      positionLeft: isSet(object.positionLeft) ? Number(object.positionLeft) : 0,
      positionTopUnit: isSet(object.positionTopUnit) ? yGUnitFromJSON(object.positionTopUnit) : 0,
      positionTop: isSet(object.positionTop) ? Number(object.positionTop) : 0,
      positionRightUnit: isSet(object.positionRightUnit) ? yGUnitFromJSON(object.positionRightUnit) : 0,
      positionRight: isSet(object.positionRight) ? Number(object.positionRight) : 0,
      positionBottomUnit: isSet(object.positionBottomUnit) ? yGUnitFromJSON(object.positionBottomUnit) : 0,
      positionBottom: isSet(object.positionBottom) ? Number(object.positionBottom) : 0,
      marginLeftUnit: isSet(object.marginLeftUnit) ? yGUnitFromJSON(object.marginLeftUnit) : 0,
      marginLeft: isSet(object.marginLeft) ? Number(object.marginLeft) : 0,
      marginTopUnit: isSet(object.marginTopUnit) ? yGUnitFromJSON(object.marginTopUnit) : 0,
      marginTop: isSet(object.marginTop) ? Number(object.marginTop) : 0,
      marginRightUnit: isSet(object.marginRightUnit) ? yGUnitFromJSON(object.marginRightUnit) : 0,
      marginRight: isSet(object.marginRight) ? Number(object.marginRight) : 0,
      marginBottomUnit: isSet(object.marginBottomUnit) ? yGUnitFromJSON(object.marginBottomUnit) : 0,
      marginBottom: isSet(object.marginBottom) ? Number(object.marginBottom) : 0,
      paddingLeftUnit: isSet(object.paddingLeftUnit) ? yGUnitFromJSON(object.paddingLeftUnit) : 0,
      paddingLeft: isSet(object.paddingLeft) ? Number(object.paddingLeft) : 0,
      paddingTopUnit: isSet(object.paddingTopUnit) ? yGUnitFromJSON(object.paddingTopUnit) : 0,
      paddingTop: isSet(object.paddingTop) ? Number(object.paddingTop) : 0,
      paddingRightUnit: isSet(object.paddingRightUnit) ? yGUnitFromJSON(object.paddingRightUnit) : 0,
      paddingRight: isSet(object.paddingRight) ? Number(object.paddingRight) : 0,
      paddingBottomUnit: isSet(object.paddingBottomUnit) ? yGUnitFromJSON(object.paddingBottomUnit) : 0,
      paddingBottom: isSet(object.paddingBottom) ? Number(object.paddingBottom) : 0,
      pointerFilter: isSet(object.pointerFilter) ? pointerFilterModeFromJSON(object.pointerFilter) : undefined,
    };
  }

  export function toJSON(message: PBUiTransform): unknown {
    const obj: any = {};
    message.parent !== undefined && (obj.parent = Math.round(message.parent));
    message.rightOf !== undefined && (obj.rightOf = Math.round(message.rightOf));
    message.alignContent !== undefined &&
      (obj.alignContent = message.alignContent !== undefined ? yGAlignToJSON(message.alignContent) : undefined);
    message.alignItems !== undefined &&
      (obj.alignItems = message.alignItems !== undefined ? yGAlignToJSON(message.alignItems) : undefined);
    message.flexWrap !== undefined &&
      (obj.flexWrap = message.flexWrap !== undefined ? yGWrapToJSON(message.flexWrap) : undefined);
    message.flexShrink !== undefined && (obj.flexShrink = message.flexShrink);
    message.positionType !== undefined && (obj.positionType = yGPositionTypeToJSON(message.positionType));
    message.alignSelf !== undefined && (obj.alignSelf = yGAlignToJSON(message.alignSelf));
    message.flexDirection !== undefined && (obj.flexDirection = yGFlexDirectionToJSON(message.flexDirection));
    message.justifyContent !== undefined && (obj.justifyContent = yGJustifyToJSON(message.justifyContent));
    message.overflow !== undefined && (obj.overflow = yGOverflowToJSON(message.overflow));
    message.display !== undefined && (obj.display = yGDisplayToJSON(message.display));
    message.flexBasisUnit !== undefined && (obj.flexBasisUnit = yGUnitToJSON(message.flexBasisUnit));
    message.flexBasis !== undefined && (obj.flexBasis = message.flexBasis);
    message.flexGrow !== undefined && (obj.flexGrow = message.flexGrow);
    message.widthUnit !== undefined && (obj.widthUnit = yGUnitToJSON(message.widthUnit));
    message.width !== undefined && (obj.width = message.width);
    message.heightUnit !== undefined && (obj.heightUnit = yGUnitToJSON(message.heightUnit));
    message.height !== undefined && (obj.height = message.height);
    message.minWidthUnit !== undefined && (obj.minWidthUnit = yGUnitToJSON(message.minWidthUnit));
    message.minWidth !== undefined && (obj.minWidth = message.minWidth);
    message.minHeightUnit !== undefined && (obj.minHeightUnit = yGUnitToJSON(message.minHeightUnit));
    message.minHeight !== undefined && (obj.minHeight = message.minHeight);
    message.maxWidthUnit !== undefined && (obj.maxWidthUnit = yGUnitToJSON(message.maxWidthUnit));
    message.maxWidth !== undefined && (obj.maxWidth = message.maxWidth);
    message.maxHeightUnit !== undefined && (obj.maxHeightUnit = yGUnitToJSON(message.maxHeightUnit));
    message.maxHeight !== undefined && (obj.maxHeight = message.maxHeight);
    message.positionLeftUnit !== undefined && (obj.positionLeftUnit = yGUnitToJSON(message.positionLeftUnit));
    message.positionLeft !== undefined && (obj.positionLeft = message.positionLeft);
    message.positionTopUnit !== undefined && (obj.positionTopUnit = yGUnitToJSON(message.positionTopUnit));
    message.positionTop !== undefined && (obj.positionTop = message.positionTop);
    message.positionRightUnit !== undefined && (obj.positionRightUnit = yGUnitToJSON(message.positionRightUnit));
    message.positionRight !== undefined && (obj.positionRight = message.positionRight);
    message.positionBottomUnit !== undefined && (obj.positionBottomUnit = yGUnitToJSON(message.positionBottomUnit));
    message.positionBottom !== undefined && (obj.positionBottom = message.positionBottom);
    message.marginLeftUnit !== undefined && (obj.marginLeftUnit = yGUnitToJSON(message.marginLeftUnit));
    message.marginLeft !== undefined && (obj.marginLeft = message.marginLeft);
    message.marginTopUnit !== undefined && (obj.marginTopUnit = yGUnitToJSON(message.marginTopUnit));
    message.marginTop !== undefined && (obj.marginTop = message.marginTop);
    message.marginRightUnit !== undefined && (obj.marginRightUnit = yGUnitToJSON(message.marginRightUnit));
    message.marginRight !== undefined && (obj.marginRight = message.marginRight);
    message.marginBottomUnit !== undefined && (obj.marginBottomUnit = yGUnitToJSON(message.marginBottomUnit));
    message.marginBottom !== undefined && (obj.marginBottom = message.marginBottom);
    message.paddingLeftUnit !== undefined && (obj.paddingLeftUnit = yGUnitToJSON(message.paddingLeftUnit));
    message.paddingLeft !== undefined && (obj.paddingLeft = message.paddingLeft);
    message.paddingTopUnit !== undefined && (obj.paddingTopUnit = yGUnitToJSON(message.paddingTopUnit));
    message.paddingTop !== undefined && (obj.paddingTop = message.paddingTop);
    message.paddingRightUnit !== undefined && (obj.paddingRightUnit = yGUnitToJSON(message.paddingRightUnit));
    message.paddingRight !== undefined && (obj.paddingRight = message.paddingRight);
    message.paddingBottomUnit !== undefined && (obj.paddingBottomUnit = yGUnitToJSON(message.paddingBottomUnit));
    message.paddingBottom !== undefined && (obj.paddingBottom = message.paddingBottom);
    message.pointerFilter !== undefined &&
      (obj.pointerFilter = message.pointerFilter !== undefined
        ? pointerFilterModeToJSON(message.pointerFilter)
        : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBUiTransform>, I>>(base?: I): PBUiTransform {
    return PBUiTransform.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBUiTransform>, I>>(object: I): PBUiTransform {
    const message = createBasePBUiTransform();
    message.parent = object.parent ?? 0;
    message.rightOf = object.rightOf ?? 0;
    message.alignContent = object.alignContent ?? undefined;
    message.alignItems = object.alignItems ?? undefined;
    message.flexWrap = object.flexWrap ?? undefined;
    message.flexShrink = object.flexShrink ?? undefined;
    message.positionType = object.positionType ?? 0;
    message.alignSelf = object.alignSelf ?? 0;
    message.flexDirection = object.flexDirection ?? 0;
    message.justifyContent = object.justifyContent ?? 0;
    message.overflow = object.overflow ?? 0;
    message.display = object.display ?? 0;
    message.flexBasisUnit = object.flexBasisUnit ?? 0;
    message.flexBasis = object.flexBasis ?? 0;
    message.flexGrow = object.flexGrow ?? 0;
    message.widthUnit = object.widthUnit ?? 0;
    message.width = object.width ?? 0;
    message.heightUnit = object.heightUnit ?? 0;
    message.height = object.height ?? 0;
    message.minWidthUnit = object.minWidthUnit ?? 0;
    message.minWidth = object.minWidth ?? 0;
    message.minHeightUnit = object.minHeightUnit ?? 0;
    message.minHeight = object.minHeight ?? 0;
    message.maxWidthUnit = object.maxWidthUnit ?? 0;
    message.maxWidth = object.maxWidth ?? 0;
    message.maxHeightUnit = object.maxHeightUnit ?? 0;
    message.maxHeight = object.maxHeight ?? 0;
    message.positionLeftUnit = object.positionLeftUnit ?? 0;
    message.positionLeft = object.positionLeft ?? 0;
    message.positionTopUnit = object.positionTopUnit ?? 0;
    message.positionTop = object.positionTop ?? 0;
    message.positionRightUnit = object.positionRightUnit ?? 0;
    message.positionRight = object.positionRight ?? 0;
    message.positionBottomUnit = object.positionBottomUnit ?? 0;
    message.positionBottom = object.positionBottom ?? 0;
    message.marginLeftUnit = object.marginLeftUnit ?? 0;
    message.marginLeft = object.marginLeft ?? 0;
    message.marginTopUnit = object.marginTopUnit ?? 0;
    message.marginTop = object.marginTop ?? 0;
    message.marginRightUnit = object.marginRightUnit ?? 0;
    message.marginRight = object.marginRight ?? 0;
    message.marginBottomUnit = object.marginBottomUnit ?? 0;
    message.marginBottom = object.marginBottom ?? 0;
    message.paddingLeftUnit = object.paddingLeftUnit ?? 0;
    message.paddingLeft = object.paddingLeft ?? 0;
    message.paddingTopUnit = object.paddingTopUnit ?? 0;
    message.paddingTop = object.paddingTop ?? 0;
    message.paddingRightUnit = object.paddingRightUnit ?? 0;
    message.paddingRight = object.paddingRight ?? 0;
    message.paddingBottomUnit = object.paddingBottomUnit ?? 0;
    message.paddingBottom = object.paddingBottom ?? 0;
    message.pointerFilter = object.pointerFilter ?? undefined;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
