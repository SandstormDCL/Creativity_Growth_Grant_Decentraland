/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Color3 } from "../../common/colors.gen";
import { Quaternion, Vector3 } from "../../common/vectors.gen";

export const protobufPackage = "decentraland.sdk.ecs6";

export interface ECS6Color4 {
  r: number;
  g: number;
  b: number;
  a?: number | undefined;
}

export interface Area {
  box?: Vector3 | undefined;
}

export interface UiValue {
  value?: number | undefined;
  type?: UiValue_UiValueType | undefined;
}

export enum UiValue_UiValueType {
  UVT_PERCENT = 0,
  PIXELS = 1,
  UNRECOGNIZED = -1,
}

export function uiValue_UiValueTypeFromJSON(object: any): UiValue_UiValueType {
  switch (object) {
    case 0:
    case "UVT_PERCENT":
      return UiValue_UiValueType.UVT_PERCENT;
    case 1:
    case "PIXELS":
      return UiValue_UiValueType.PIXELS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UiValue_UiValueType.UNRECOGNIZED;
  }
}

export function uiValue_UiValueTypeToJSON(object: UiValue_UiValueType): string {
  switch (object) {
    case UiValue_UiValueType.UVT_PERCENT:
      return "UVT_PERCENT";
    case UiValue_UiValueType.PIXELS:
      return "PIXELS";
    case UiValue_UiValueType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** CLASS_ID.AVATAR_MODIFIER_AREA */
export interface ECS6ComponentAvatarModifierArea {
  area?: Area | undefined;
  modifiers: string[];
  excludeIds: string[];
}

/** CLASS_ID.TRANSFORM */
export interface ECS6ComponentTransform {
  position?: Vector3 | undefined;
  rotation?: Quaternion | undefined;
  scale?: Vector3 | undefined;
}

/** CLASS_ID.AVATAR_ATTACH */
export interface ECS6ComponentAttachToAvatar {
  avatarId?: string | undefined;
  anchorPointId?: ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId | undefined;
  avatarSceneId?: string | undefined;
}

export enum ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId {
  ATAAP_POSITION = 0,
  ATAAP_NAME_TAG = 1,
  ATAAP_LEFT_HAND = 2,
  ATAAP_RIGHT_HAND = 3,
  UNRECOGNIZED = -1,
}

export function eCS6ComponentAttachToAvatar_AttachToAvatarAnchorPointIdFromJSON(
  object: any,
): ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId {
  switch (object) {
    case 0:
    case "ATAAP_POSITION":
      return ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.ATAAP_POSITION;
    case 1:
    case "ATAAP_NAME_TAG":
      return ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.ATAAP_NAME_TAG;
    case 2:
    case "ATAAP_LEFT_HAND":
      return ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.ATAAP_LEFT_HAND;
    case 3:
    case "ATAAP_RIGHT_HAND":
      return ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.ATAAP_RIGHT_HAND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.UNRECOGNIZED;
  }
}

export function eCS6ComponentAttachToAvatar_AttachToAvatarAnchorPointIdToJSON(
  object: ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId,
): string {
  switch (object) {
    case ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.ATAAP_POSITION:
      return "ATAAP_POSITION";
    case ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.ATAAP_NAME_TAG:
      return "ATAAP_NAME_TAG";
    case ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.ATAAP_LEFT_HAND:
      return "ATAAP_LEFT_HAND";
    case ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.ATAAP_RIGHT_HAND:
      return "ATAAP_RIGHT_HAND";
    case ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** CLASS_ID.BILLBOARD */
export interface ECS6ComponentBillboard {
  x?: boolean | undefined;
  y?: boolean | undefined;
  z?: boolean | undefined;
}

/** CLASS_ID.BOX_SHAPE */
export interface ECS6ComponentBoxShape {
  withCollisions?: boolean | undefined;
  isPointerBlocker?: boolean | undefined;
  visible?: boolean | undefined;
  uvs: number[];
}

/** CLASS_ID.SPHERE_SHAPE */
export interface ECS6ComponentSphereShape {
  withCollisions?: boolean | undefined;
  isPointerBlocker?: boolean | undefined;
  visible?: boolean | undefined;
}

/** CLASS_ID.CIRCLE_SHAPE */
export interface ECS6ComponentCircleShape {
  withCollisions?: boolean | undefined;
  isPointerBlocker?: boolean | undefined;
  visible?: boolean | undefined;
  segments?: number | undefined;
  arc?: number | undefined;
}

/** CLASS_ID.PLANE_SHAPE */
export interface ECS6ComponentPlaneShape {
  withCollisions?: boolean | undefined;
  isPointerBlocker?: boolean | undefined;
  visible?: boolean | undefined;
  uvs: number[];
  width?: number | undefined;
  height?: number | undefined;
}

/** CLASS_ID.CONE_SHAPE */
export interface ECS6ComponentConeShape {
  withCollisions?: boolean | undefined;
  isPointerBlocker?: boolean | undefined;
  visible?: boolean | undefined;
  radiusTop?: number | undefined;
  radiusBottom?: number | undefined;
  segmentsHeight?: number | undefined;
  segmentsRadial?: number | undefined;
  openEnded?: boolean | undefined;
  radius?: number | undefined;
  arc?: number | undefined;
}

/** CLASS_ID.CYLINDER_SHAPE */
export interface ECS6ComponentCylinderShape {
  withCollisions?: boolean | undefined;
  isPointerBlocker?: boolean | undefined;
  visible?: boolean | undefined;
  radiusTop?: number | undefined;
  radiusBottom?: number | undefined;
  segmentsHeight?: number | undefined;
  segmentsRadial?: number | undefined;
  openEnded?: boolean | undefined;
  radius?: number | undefined;
  arc?: number | undefined;
}

/** CLASS_ID.GLTF_SHAPE */
export interface ECS6ComponentGltfShape {
  withCollisions?: boolean | undefined;
  isPointerBlocker?: boolean | undefined;
  visible?: boolean | undefined;
  src?: string | undefined;
}

/** CLASS_ID.NFT_SHAPE */
export interface ECS6ComponentNftShape {
  withCollisions?: boolean | undefined;
  isPointerBlocker?: boolean | undefined;
  visible?: boolean | undefined;
  src?: string | undefined;
  style?: ECS6ComponentNftShape_PictureFrameStyle | undefined;
  color?: Color3 | undefined;
}

export enum ECS6ComponentNftShape_PictureFrameStyle {
  PFS_CLASSIC = 0,
  PFS_BAROQUE_ORNAMENT = 1,
  PFS_DIAMOND_ORNAMENT = 2,
  PFS_MINIMAL_WIDE = 3,
  PFS_MINIMAL_GREY = 4,
  PFS_BLOCKY = 5,
  PFS_GOLD_EDGES = 6,
  PFS_GOLD_CARVED = 7,
  PFS_GOLD_WIDE = 8,
  PFS_GOLD_ROUNDED = 9,
  PFS_METAL_MEDIUM = 10,
  PFS_METAL_WIDE = 11,
  PFS_METAL_SLIM = 12,
  PFS_METAL_ROUNDED = 13,
  PFS_PINS = 14,
  PFS_MINIMAL_BLACK = 15,
  PFS_MINIMAL_WHITE = 16,
  PFS_TAPE = 17,
  PFS_WOOD_SLIM = 18,
  PFS_WOOD_WIDE = 19,
  PFS_WOOD_TWIGS = 20,
  PFS_CANVAS = 21,
  PFS_NONE = 22,
  UNRECOGNIZED = -1,
}

export function eCS6ComponentNftShape_PictureFrameStyleFromJSON(object: any): ECS6ComponentNftShape_PictureFrameStyle {
  switch (object) {
    case 0:
    case "PFS_CLASSIC":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_CLASSIC;
    case 1:
    case "PFS_BAROQUE_ORNAMENT":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_BAROQUE_ORNAMENT;
    case 2:
    case "PFS_DIAMOND_ORNAMENT":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_DIAMOND_ORNAMENT;
    case 3:
    case "PFS_MINIMAL_WIDE":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_MINIMAL_WIDE;
    case 4:
    case "PFS_MINIMAL_GREY":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_MINIMAL_GREY;
    case 5:
    case "PFS_BLOCKY":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_BLOCKY;
    case 6:
    case "PFS_GOLD_EDGES":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_GOLD_EDGES;
    case 7:
    case "PFS_GOLD_CARVED":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_GOLD_CARVED;
    case 8:
    case "PFS_GOLD_WIDE":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_GOLD_WIDE;
    case 9:
    case "PFS_GOLD_ROUNDED":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_GOLD_ROUNDED;
    case 10:
    case "PFS_METAL_MEDIUM":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_METAL_MEDIUM;
    case 11:
    case "PFS_METAL_WIDE":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_METAL_WIDE;
    case 12:
    case "PFS_METAL_SLIM":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_METAL_SLIM;
    case 13:
    case "PFS_METAL_ROUNDED":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_METAL_ROUNDED;
    case 14:
    case "PFS_PINS":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_PINS;
    case 15:
    case "PFS_MINIMAL_BLACK":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_MINIMAL_BLACK;
    case 16:
    case "PFS_MINIMAL_WHITE":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_MINIMAL_WHITE;
    case 17:
    case "PFS_TAPE":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_TAPE;
    case 18:
    case "PFS_WOOD_SLIM":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_WOOD_SLIM;
    case 19:
    case "PFS_WOOD_WIDE":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_WOOD_WIDE;
    case 20:
    case "PFS_WOOD_TWIGS":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_WOOD_TWIGS;
    case 21:
    case "PFS_CANVAS":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_CANVAS;
    case 22:
    case "PFS_NONE":
      return ECS6ComponentNftShape_PictureFrameStyle.PFS_NONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ECS6ComponentNftShape_PictureFrameStyle.UNRECOGNIZED;
  }
}

export function eCS6ComponentNftShape_PictureFrameStyleToJSON(object: ECS6ComponentNftShape_PictureFrameStyle): string {
  switch (object) {
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_CLASSIC:
      return "PFS_CLASSIC";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_BAROQUE_ORNAMENT:
      return "PFS_BAROQUE_ORNAMENT";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_DIAMOND_ORNAMENT:
      return "PFS_DIAMOND_ORNAMENT";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_MINIMAL_WIDE:
      return "PFS_MINIMAL_WIDE";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_MINIMAL_GREY:
      return "PFS_MINIMAL_GREY";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_BLOCKY:
      return "PFS_BLOCKY";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_GOLD_EDGES:
      return "PFS_GOLD_EDGES";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_GOLD_CARVED:
      return "PFS_GOLD_CARVED";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_GOLD_WIDE:
      return "PFS_GOLD_WIDE";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_GOLD_ROUNDED:
      return "PFS_GOLD_ROUNDED";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_METAL_MEDIUM:
      return "PFS_METAL_MEDIUM";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_METAL_WIDE:
      return "PFS_METAL_WIDE";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_METAL_SLIM:
      return "PFS_METAL_SLIM";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_METAL_ROUNDED:
      return "PFS_METAL_ROUNDED";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_PINS:
      return "PFS_PINS";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_MINIMAL_BLACK:
      return "PFS_MINIMAL_BLACK";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_MINIMAL_WHITE:
      return "PFS_MINIMAL_WHITE";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_TAPE:
      return "PFS_TAPE";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_WOOD_SLIM:
      return "PFS_WOOD_SLIM";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_WOOD_WIDE:
      return "PFS_WOOD_WIDE";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_WOOD_TWIGS:
      return "PFS_WOOD_TWIGS";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_CANVAS:
      return "PFS_CANVAS";
    case ECS6ComponentNftShape_PictureFrameStyle.PFS_NONE:
      return "PFS_NONE";
    case ECS6ComponentNftShape_PictureFrameStyle.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** CLASS_ID.TEXTURE */
export interface ECS6ComponentTexture {
  src?: string | undefined;
  samplingMode?: number | undefined;
  wrap?: number | undefined;
  hasAlpha?: boolean | undefined;
}

/** CLASS_ID.ANIMATION */
export interface ECS6ComponentAnimator {
  states: ECS6ComponentAnimator_AnimationState[];
}

export interface ECS6ComponentAnimator_AnimationState {
  clip?: string | undefined;
  looping?: boolean | undefined;
  weight?: number | undefined;
  playing?: boolean | undefined;
  shouldReset?: boolean | undefined;
  speed?: number | undefined;
  name?: string | undefined;
}

/** CLASS_ID.OBJ_SHAPE */
export interface ECS6ComponentObjShape {
  withCollisions?: boolean | undefined;
  isPointerBlocker?: boolean | undefined;
  visible?: boolean | undefined;
  src?: string | undefined;
}

/** CLASS_ID.FONT */
export interface ECS6ComponentFont {
  src?: string | undefined;
}

/** CLASS_ID.TEXT_SHAPE */
export interface ECS6ComponentTextShape {
  outlineWidth?: number | undefined;
  outlineColor?: Color3 | undefined;
  color?: Color3 | undefined;
  fontSize?: number | undefined;
  font?: string | undefined;
  opacity?: number | undefined;
  value?: string | undefined;
  lineSpacing?: string | undefined;
  lineCount?: number | undefined;
  textWrapping?: boolean | undefined;
  shadowBlur?: number | undefined;
  shadowOffsetX?: number | undefined;
  shadowOffsetY?: number | undefined;
  shadowColor?: Color3 | undefined;
  hTextAlign?: string | undefined;
  vTextAlign?: string | undefined;
  width?: number | undefined;
  height?: number | undefined;
  paddingTop?: number | undefined;
  paddingRight?: number | undefined;
  paddingBottom?: number | undefined;
  paddingLeft?: number | undefined;
  billboard?: boolean | undefined;
  visible?: boolean | undefined;
}

/** CLASS_ID.PBR_MATERIAL */
export interface ECS6ComponentMaterial {
  alphaTest?: number | undefined;
  albedoColor?: ECS6Color4 | undefined;
  emissiveColor?: Color3 | undefined;
  metallic?: number | undefined;
  roughness?: number | undefined;
  reflectivityColor?: Color3 | undefined;
  directIntensity?: number | undefined;
  microSurface?: number | undefined;
  emissiveIntensity?: number | undefined;
  specularIntensity?: number | undefined;
  albedoTexture?: string | undefined;
  alphaTexture?: string | undefined;
  emissiveTexture?: string | undefined;
  bumpTexture?: string | undefined;
  transparencyMode?: number | undefined;
  castShadows?: boolean | undefined;
}

/** CLASS_ID.BASIC_MATERIAL */
export interface ECS6ComponentBasicMaterial {
  alphaTest?: number | undefined;
  texture?: string | undefined;
  castShadows?: boolean | undefined;
}

/** CLASS_ID.UUID_CALLBACK */
export interface ECS6ComponentUuidCallback {
  button?: string | undefined;
  hoverText?: string | undefined;
  distance?: number | undefined;
  showFeedback?: boolean | undefined;
  type?: string | undefined;
  uuid?: string | undefined;
}

/** CLASS_ID.SMART_ITEM) */
export interface ECS6ComponentSmartItem {
}

/** CLASS_ID.VIDEO_CLIP */
export interface ECS6ComponentVideoClip {
  url?: string | undefined;
}

/** CLASS_ID.VIDEO_TEXTURE */
export interface ECS6ComponentVideoTexture {
  samplingMode?: number | undefined;
  wrap?: number | undefined;
  volume?: number | undefined;
  playbackRate?: number | undefined;
  seek?: number | undefined;
  playing?: boolean | undefined;
  loop?: boolean | undefined;
  videoClipId?: string | undefined;
}

export enum ECS6ComponentVideoTexture_VideoStatus {
  NONE = 0,
  ERROR = 1,
  LOADING = 2,
  READY = 3,
  PLAYING = 4,
  BUFFERING = 5,
  UNRECOGNIZED = -1,
}

export function eCS6ComponentVideoTexture_VideoStatusFromJSON(object: any): ECS6ComponentVideoTexture_VideoStatus {
  switch (object) {
    case 0:
    case "NONE":
      return ECS6ComponentVideoTexture_VideoStatus.NONE;
    case 1:
    case "ERROR":
      return ECS6ComponentVideoTexture_VideoStatus.ERROR;
    case 2:
    case "LOADING":
      return ECS6ComponentVideoTexture_VideoStatus.LOADING;
    case 3:
    case "READY":
      return ECS6ComponentVideoTexture_VideoStatus.READY;
    case 4:
    case "PLAYING":
      return ECS6ComponentVideoTexture_VideoStatus.PLAYING;
    case 5:
    case "BUFFERING":
      return ECS6ComponentVideoTexture_VideoStatus.BUFFERING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ECS6ComponentVideoTexture_VideoStatus.UNRECOGNIZED;
  }
}

export function eCS6ComponentVideoTexture_VideoStatusToJSON(object: ECS6ComponentVideoTexture_VideoStatus): string {
  switch (object) {
    case ECS6ComponentVideoTexture_VideoStatus.NONE:
      return "NONE";
    case ECS6ComponentVideoTexture_VideoStatus.ERROR:
      return "ERROR";
    case ECS6ComponentVideoTexture_VideoStatus.LOADING:
      return "LOADING";
    case ECS6ComponentVideoTexture_VideoStatus.READY:
      return "READY";
    case ECS6ComponentVideoTexture_VideoStatus.PLAYING:
      return "PLAYING";
    case ECS6ComponentVideoTexture_VideoStatus.BUFFERING:
      return "BUFFERING";
    case ECS6ComponentVideoTexture_VideoStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** CLASS_ID.CAMERA_MODE_AREA */
export interface ECS6ComponentCameraModeArea {
  area: Area | undefined;
  cameraMode: ECS6ComponentCameraModeArea_CameraMode;
}

export enum ECS6ComponentCameraModeArea_CameraMode {
  CM_FIRST_PERSON = 0,
  CM_THIRD_PERSON = 1,
  CM_BUILDING_TOOL_GOD_MODE = 2,
  UNRECOGNIZED = -1,
}

export function eCS6ComponentCameraModeArea_CameraModeFromJSON(object: any): ECS6ComponentCameraModeArea_CameraMode {
  switch (object) {
    case 0:
    case "CM_FIRST_PERSON":
      return ECS6ComponentCameraModeArea_CameraMode.CM_FIRST_PERSON;
    case 1:
    case "CM_THIRD_PERSON":
      return ECS6ComponentCameraModeArea_CameraMode.CM_THIRD_PERSON;
    case 2:
    case "CM_BUILDING_TOOL_GOD_MODE":
      return ECS6ComponentCameraModeArea_CameraMode.CM_BUILDING_TOOL_GOD_MODE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ECS6ComponentCameraModeArea_CameraMode.UNRECOGNIZED;
  }
}

export function eCS6ComponentCameraModeArea_CameraModeToJSON(object: ECS6ComponentCameraModeArea_CameraMode): string {
  switch (object) {
    case ECS6ComponentCameraModeArea_CameraMode.CM_FIRST_PERSON:
      return "CM_FIRST_PERSON";
    case ECS6ComponentCameraModeArea_CameraMode.CM_THIRD_PERSON:
      return "CM_THIRD_PERSON";
    case ECS6ComponentCameraModeArea_CameraMode.CM_BUILDING_TOOL_GOD_MODE:
      return "CM_BUILDING_TOOL_GOD_MODE";
    case ECS6ComponentCameraModeArea_CameraMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** CLASS_ID.AVATAR_TEXTURE */
export interface ECS6ComponentAvatarTexture {
  samplingMode?: number | undefined;
  wrap?: number | undefined;
  hasAlpha?: boolean | undefined;
  userId?: string | undefined;
}

/** CLASS_ID.AUDIO_CLIP */
export interface ECS6ComponentAudioClip {
  url?: string | undefined;
  loop?: boolean | undefined;
  loadingCompleteEventId?: string | undefined;
  volume?: number | undefined;
}

/** CLASS_ID.AUDIO_SOURCE */
export interface ECS6ComponentAudioSource {
  audioClipId?: string | undefined;
  loop?: boolean | undefined;
  volume?: number | undefined;
  playing?: boolean | undefined;
  pitch?: number | undefined;
  playedAtTimestamp?: number | undefined;
}

/** CLASS_ID.AUDIO_STREAM */
export interface ECS6ComponentAudioStream {
  url?: string | undefined;
  playing?: boolean | undefined;
  volume?: number | undefined;
}

/** CLASS_ID.AVATAR_SHAPE */
export interface ECS6ComponentAvatarShape {
  id?: string | undefined;
  name?: string | undefined;
  expressionTriggerId?: string | undefined;
  expressionTriggerTimestamp?: number | undefined;
  bodyShape?: string | undefined;
  wearables: string[];
  emotes: ECS6ComponentAvatarShape_Emote[];
  skinColor?: ECS6Color4 | undefined;
  hairColor?: ECS6Color4 | undefined;
  eyeColor?: ECS6Color4 | undefined;
  useDummyModel?: boolean | undefined;
  talking?: boolean | undefined;
}

export interface ECS6ComponentAvatarShape_Emote {
  slot?: number | undefined;
  urn?: string | undefined;
}

/** CLASS_ID.GIZMOS */
export interface ECS6ComponentGizmos {
  position?: boolean | undefined;
  rotation?: boolean | undefined;
  scale?: boolean | undefined;
  cycle?: boolean | undefined;
  selectedGizmo?: string | undefined;
  localReference?: boolean | undefined;
}

/** NO CLASS */
export interface ECS6ComponentUiShape {
  name?: string | undefined;
  visible?: boolean | undefined;
  opacity?: number | undefined;
  hAlign?: string | undefined;
  vAlign?: string | undefined;
  width?: UiValue | undefined;
  height?: UiValue | undefined;
  positionX?: UiValue | undefined;
  positionY?: UiValue | undefined;
  isPointerBlocker?: boolean | undefined;
  parentComponent?: string | undefined;
}

/** CLASS_ID.UI_CONTAINER_RECT */
export interface ECS6ComponentUiContainerRect {
  /** UiShape */
  name?: string | undefined;
  visible?: boolean | undefined;
  opacity?: number | undefined;
  hAlign?: string | undefined;
  vAlign?: string | undefined;
  width?: UiValue | undefined;
  height?: UiValue | undefined;
  positionX?: UiValue | undefined;
  positionY?: UiValue | undefined;
  isPointerBlocker?: boolean | undefined;
  parentComponent?:
    | string
    | undefined;
  /** UiShape */
  thickness?: number | undefined;
  color?: ECS6Color4 | undefined;
  alignmentUsesSize?: boolean | undefined;
}

/** CLASS_ID.UI_CONTAINER_STACK */
export interface ECS6ComponentUiContainerStack {
  /** UiShape */
  name?: string | undefined;
  visible?: boolean | undefined;
  opacity?: number | undefined;
  hAlign?: string | undefined;
  vAlign?: string | undefined;
  width?: UiValue | undefined;
  height?: UiValue | undefined;
  positionX?: UiValue | undefined;
  positionY?: UiValue | undefined;
  isPointerBlocker?:
    | boolean
    | undefined;
  /** UiShape */
  parentComponent?: string | undefined;
  adaptWidth?: boolean | undefined;
  adaptHeight?: boolean | undefined;
  color?: ECS6Color4 | undefined;
  stackOrientation?: ECS6ComponentUiContainerStack_UIStackOrientation | undefined;
  spacing?: number | undefined;
}

export enum ECS6ComponentUiContainerStack_UIStackOrientation {
  VERTICAL = 0,
  HORIZONTAL = 1,
  UNRECOGNIZED = -1,
}

export function eCS6ComponentUiContainerStack_UIStackOrientationFromJSON(
  object: any,
): ECS6ComponentUiContainerStack_UIStackOrientation {
  switch (object) {
    case 0:
    case "VERTICAL":
      return ECS6ComponentUiContainerStack_UIStackOrientation.VERTICAL;
    case 1:
    case "HORIZONTAL":
      return ECS6ComponentUiContainerStack_UIStackOrientation.HORIZONTAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ECS6ComponentUiContainerStack_UIStackOrientation.UNRECOGNIZED;
  }
}

export function eCS6ComponentUiContainerStack_UIStackOrientationToJSON(
  object: ECS6ComponentUiContainerStack_UIStackOrientation,
): string {
  switch (object) {
    case ECS6ComponentUiContainerStack_UIStackOrientation.VERTICAL:
      return "VERTICAL";
    case ECS6ComponentUiContainerStack_UIStackOrientation.HORIZONTAL:
      return "HORIZONTAL";
    case ECS6ComponentUiContainerStack_UIStackOrientation.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** CLASS_ID.UI_BUTTON_SHAPE */
export interface ECS6ComponentUiButton {
  /** UiShape */
  name?: string | undefined;
  visible?: boolean | undefined;
  opacity?: number | undefined;
  hAlign?: string | undefined;
  vAlign?: string | undefined;
  width?: UiValue | undefined;
  height?: UiValue | undefined;
  positionX?: UiValue | undefined;
  positionY?: UiValue | undefined;
  isPointerBlocker?:
    | boolean
    | undefined;
  /** UiShape */
  parentComponent?: string | undefined;
  fontSize?: number | undefined;
  fontWeight?: string | undefined;
  thickness?: number | undefined;
  cornerRadius?: number | undefined;
  color?: ECS6Color4 | undefined;
  background?: ECS6Color4 | undefined;
  paddingTop?: number | undefined;
  paddingRight?: number | undefined;
  paddingBottom?: number | undefined;
  paddingLeft?: number | undefined;
  shadowBlur?: number | undefined;
  shadowOffsetX?: number | undefined;
  shadowOffsetY?: number | undefined;
  shadowColor?: ECS6Color4 | undefined;
  text?: string | undefined;
}

/** CLASS_ID.UI_TEXT_SHAPE */
export interface ECS6ComponentUiText {
  /** UiShape */
  name?: string | undefined;
  visible?: boolean | undefined;
  opacity?: number | undefined;
  hAlign?: string | undefined;
  vAlign?: string | undefined;
  width?: UiValue | undefined;
  height?: UiValue | undefined;
  positionX?: UiValue | undefined;
  positionY?: UiValue | undefined;
  isPointerBlocker?:
    | boolean
    | undefined;
  /** UiShape */
  parentComponent?: string | undefined;
  outlineWidth?: number | undefined;
  outlineColor?: ECS6Color4 | undefined;
  color?: ECS6Color4 | undefined;
  fontSize?: number | undefined;
  fontAutoSize?: boolean | undefined;
  font?: string | undefined;
  value?: string | undefined;
  lineSpacing?: number | undefined;
  lineCount?: number | undefined;
  adaptWidth?: boolean | undefined;
  adaptHeight?: boolean | undefined;
  textWrapping?: boolean | undefined;
  shadowBlur?: number | undefined;
  shadowOffsetX?: number | undefined;
  shadowOffsetY?: number | undefined;
  shadowColor?: ECS6Color4 | undefined;
  hTextAlign?: string | undefined;
  vTextAlign?: string | undefined;
  paddingTop?: number | undefined;
  paddingRight?: number | undefined;
  paddingBottom?: number | undefined;
  paddingLeft?: number | undefined;
}

/** CLASS_ID.UI_INPUT_TEXT_SHAPE */
export interface ECS6ComponentUiInputText {
  /** UiShape */
  name?: string | undefined;
  visible?: boolean | undefined;
  opacity?: number | undefined;
  hAlign?: string | undefined;
  vAlign?: string | undefined;
  width?: UiValue | undefined;
  height?: UiValue | undefined;
  positionX?: UiValue | undefined;
  positionY?: UiValue | undefined;
  isPointerBlocker?:
    | boolean
    | undefined;
  /** UiShape */
  parentComponent?: string | undefined;
  outlineWidth?: number | undefined;
  outlineColor?: ECS6Color4 | undefined;
  color?: ECS6Color4 | undefined;
  fontSize?: number | undefined;
  font?: string | undefined;
  value?: string | undefined;
  placeholder?: string | undefined;
  margin?: number | undefined;
  focusedBackground?: ECS6Color4 | undefined;
  textWrapping?: boolean | undefined;
  shadowBlur?: number | undefined;
  shadowOffsetX?: number | undefined;
  shadowOffsetY?: number | undefined;
  shadowColor?: ECS6Color4 | undefined;
  hTextAlign?: string | undefined;
  vTextAlign?: string | undefined;
  paddingTop?: number | undefined;
  paddingRight?: number | undefined;
  paddingBottom?: number | undefined;
  paddingLeft?: number | undefined;
  onTextChanged?: string | undefined;
  onFocus?: string | undefined;
  onBlur?: string | undefined;
  onTextSubmit?: string | undefined;
  onChanged?: string | undefined;
}

/** CLASS_ID.UI_IMAGE_SHAPE */
export interface ECS6ComponentUiImage {
  /** UiShape */
  name?: string | undefined;
  visible?: boolean | undefined;
  opacity?: number | undefined;
  hAlign?: string | undefined;
  vAlign?: string | undefined;
  width?: UiValue | undefined;
  height?: UiValue | undefined;
  positionX?: UiValue | undefined;
  positionY?: UiValue | undefined;
  isPointerBlocker?:
    | boolean
    | undefined;
  /** UiShape */
  parentComponent?: string | undefined;
  sourceLeft?: number | undefined;
  sourceTop?: number | undefined;
  sourceWidth?: number | undefined;
  sourceHeight?: number | undefined;
  source?: string | undefined;
  paddingTop?: number | undefined;
  paddingRight?: number | undefined;
  paddingBottom?: number | undefined;
  paddingLeft?: number | undefined;
  sizeInPixels?: boolean | undefined;
  onClick?: string | undefined;
}

/** CLASS_ID.UI_SLIDER_SHAPE */
export interface ECS6ComponentUiScrollRect {
  /** UiShape */
  name?: string | undefined;
  visible?: boolean | undefined;
  opacity?: number | undefined;
  hAlign?: string | undefined;
  vAlign?: string | undefined;
  width?: UiValue | undefined;
  height?: UiValue | undefined;
  positionX?: UiValue | undefined;
  positionY?: UiValue | undefined;
  isPointerBlocker?:
    | boolean
    | undefined;
  /** UiShape */
  parentComponent?: string | undefined;
  valueX?: number | undefined;
  valueY?: number | undefined;
  backgroundColor?: ECS6Color4 | undefined;
  isHorizontal?: boolean | undefined;
  isVertical?: boolean | undefined;
  paddingTop?: number | undefined;
  paddingRight?: number | undefined;
  paddingBottom?: number | undefined;
  paddingLeft?: number | undefined;
  onChanged?: string | undefined;
}

/** CLASS_ID.UI_WORLD_SPACE_SHAPE */
export interface ECS6ComponentUiWorldSpaceShape {
  /** UiShape */
  name?: string | undefined;
  visible?: boolean | undefined;
  opacity?: number | undefined;
  hAlign?: string | undefined;
  vAlign?: string | undefined;
  width?: UiValue | undefined;
  height?: UiValue | undefined;
  positionX?: UiValue | undefined;
  positionY?: UiValue | undefined;
  isPointerBlocker?:
    | boolean
    | undefined;
  /** UiShape */
  parentComponent?: string | undefined;
}

/** CLASS_ID.UI_SCREEN_SPACE_SHAPE */
export interface ECS6ComponentUiScreenSpaceShape {
  /** UiShape */
  name?: string | undefined;
  visible?: boolean | undefined;
  opacity?: number | undefined;
  hAlign?: string | undefined;
  vAlign?: string | undefined;
  width?: UiValue | undefined;
  height?: UiValue | undefined;
  positionX?: UiValue | undefined;
  positionY?: UiValue | undefined;
  isPointerBlocker?:
    | boolean
    | undefined;
  /** UiShape */
  parentComponent?: string | undefined;
}

/** CLASS_ID.UI_FULLSCREEN_SHAPE */
export interface ECS6ComponentUiFullScreenShape {
  /** UiShape */
  name?: string | undefined;
  visible?: boolean | undefined;
  opacity?: number | undefined;
  hAlign?: string | undefined;
  vAlign?: string | undefined;
  width?: UiValue | undefined;
  height?: UiValue | undefined;
  positionX?: UiValue | undefined;
  positionY?: UiValue | undefined;
  isPointerBlocker?:
    | boolean
    | undefined;
  /** UiShape */
  parentComponent?: string | undefined;
}

function createBaseECS6Color4(): ECS6Color4 {
  return { r: 0, g: 0, b: 0, a: undefined };
}

export namespace ECS6Color4 {
  export function encode(message: ECS6Color4, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.r !== 0) {
      writer.uint32(13).float(message.r);
    }
    if (message.g !== 0) {
      writer.uint32(21).float(message.g);
    }
    if (message.b !== 0) {
      writer.uint32(29).float(message.b);
    }
    if (message.a !== undefined) {
      writer.uint32(37).float(message.a);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6Color4 {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6Color4();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.r = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.g = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.b = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.a = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6Color4 {
    return {
      r: isSet(object.r) ? Number(object.r) : 0,
      g: isSet(object.g) ? Number(object.g) : 0,
      b: isSet(object.b) ? Number(object.b) : 0,
      a: isSet(object.a) ? Number(object.a) : undefined,
    };
  }

  export function toJSON(message: ECS6Color4): unknown {
    const obj: any = {};
    message.r !== undefined && (obj.r = message.r);
    message.g !== undefined && (obj.g = message.g);
    message.b !== undefined && (obj.b = message.b);
    message.a !== undefined && (obj.a = message.a);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6Color4>, I>>(base?: I): ECS6Color4 {
    return ECS6Color4.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6Color4>, I>>(object: I): ECS6Color4 {
    const message = createBaseECS6Color4();
    message.r = object.r ?? 0;
    message.g = object.g ?? 0;
    message.b = object.b ?? 0;
    message.a = object.a ?? undefined;
    return message;
  }
}

function createBaseArea(): Area {
  return { box: undefined };
}

export namespace Area {
  export function encode(message: Area, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.box !== undefined) {
      Vector3.encode(message.box, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): Area {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArea();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.box = Vector3.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): Area {
    return { box: isSet(object.box) ? Vector3.fromJSON(object.box) : undefined };
  }

  export function toJSON(message: Area): unknown {
    const obj: any = {};
    message.box !== undefined && (obj.box = message.box ? Vector3.toJSON(message.box) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<Area>, I>>(base?: I): Area {
    return Area.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<Area>, I>>(object: I): Area {
    const message = createBaseArea();
    message.box = (object.box !== undefined && object.box !== null) ? Vector3.fromPartial(object.box) : undefined;
    return message;
  }
}

function createBaseUiValue(): UiValue {
  return { value: undefined, type: undefined };
}

export namespace UiValue {
  export function encode(message: UiValue, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== undefined) {
      writer.uint32(13).float(message.value);
    }
    if (message.type !== undefined) {
      writer.uint32(16).int32(message.type);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): UiValue {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUiValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): UiValue {
    return {
      value: isSet(object.value) ? Number(object.value) : undefined,
      type: isSet(object.type) ? uiValue_UiValueTypeFromJSON(object.type) : undefined,
    };
  }

  export function toJSON(message: UiValue): unknown {
    const obj: any = {};
    message.value !== undefined && (obj.value = message.value);
    message.type !== undefined &&
      (obj.type = message.type !== undefined ? uiValue_UiValueTypeToJSON(message.type) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<UiValue>, I>>(base?: I): UiValue {
    return UiValue.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<UiValue>, I>>(object: I): UiValue {
    const message = createBaseUiValue();
    message.value = object.value ?? undefined;
    message.type = object.type ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentAvatarModifierArea(): ECS6ComponentAvatarModifierArea {
  return { area: undefined, modifiers: [], excludeIds: [] };
}

export namespace ECS6ComponentAvatarModifierArea {
  export function encode(
    message: ECS6ComponentAvatarModifierArea,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.area !== undefined) {
      Area.encode(message.area, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.modifiers) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.excludeIds) {
      writer.uint32(26).string(v!);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentAvatarModifierArea {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentAvatarModifierArea();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.area = Area.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.modifiers.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.excludeIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentAvatarModifierArea {
    return {
      area: isSet(object.area) ? Area.fromJSON(object.area) : undefined,
      modifiers: Array.isArray(object?.modifiers) ? object.modifiers.map((e: any) => String(e)) : [],
      excludeIds: Array.isArray(object?.excludeIds) ? object.excludeIds.map((e: any) => String(e)) : [],
    };
  }

  export function toJSON(message: ECS6ComponentAvatarModifierArea): unknown {
    const obj: any = {};
    message.area !== undefined && (obj.area = message.area ? Area.toJSON(message.area) : undefined);
    if (message.modifiers) {
      obj.modifiers = message.modifiers.map((e) => e);
    } else {
      obj.modifiers = [];
    }
    if (message.excludeIds) {
      obj.excludeIds = message.excludeIds.map((e) => e);
    } else {
      obj.excludeIds = [];
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentAvatarModifierArea>, I>>(
    base?: I,
  ): ECS6ComponentAvatarModifierArea {
    return ECS6ComponentAvatarModifierArea.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentAvatarModifierArea>, I>>(
    object: I,
  ): ECS6ComponentAvatarModifierArea {
    const message = createBaseECS6ComponentAvatarModifierArea();
    message.area = (object.area !== undefined && object.area !== null) ? Area.fromPartial(object.area) : undefined;
    message.modifiers = object.modifiers?.map((e) => e) || [];
    message.excludeIds = object.excludeIds?.map((e) => e) || [];
    return message;
  }
}

function createBaseECS6ComponentTransform(): ECS6ComponentTransform {
  return { position: undefined, rotation: undefined, scale: undefined };
}

export namespace ECS6ComponentTransform {
  export function encode(message: ECS6ComponentTransform, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.position !== undefined) {
      Vector3.encode(message.position, writer.uint32(10).fork()).ldelim();
    }
    if (message.rotation !== undefined) {
      Quaternion.encode(message.rotation, writer.uint32(18).fork()).ldelim();
    }
    if (message.scale !== undefined) {
      Vector3.encode(message.scale, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentTransform {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentTransform();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.position = Vector3.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rotation = Quaternion.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.scale = Vector3.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentTransform {
    return {
      position: isSet(object.position) ? Vector3.fromJSON(object.position) : undefined,
      rotation: isSet(object.rotation) ? Quaternion.fromJSON(object.rotation) : undefined,
      scale: isSet(object.scale) ? Vector3.fromJSON(object.scale) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentTransform): unknown {
    const obj: any = {};
    message.position !== undefined && (obj.position = message.position ? Vector3.toJSON(message.position) : undefined);
    message.rotation !== undefined &&
      (obj.rotation = message.rotation ? Quaternion.toJSON(message.rotation) : undefined);
    message.scale !== undefined && (obj.scale = message.scale ? Vector3.toJSON(message.scale) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentTransform>, I>>(base?: I): ECS6ComponentTransform {
    return ECS6ComponentTransform.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentTransform>, I>>(
    object: I,
  ): ECS6ComponentTransform {
    const message = createBaseECS6ComponentTransform();
    message.position = (object.position !== undefined && object.position !== null)
      ? Vector3.fromPartial(object.position)
      : undefined;
    message.rotation = (object.rotation !== undefined && object.rotation !== null)
      ? Quaternion.fromPartial(object.rotation)
      : undefined;
    message.scale = (object.scale !== undefined && object.scale !== null)
      ? Vector3.fromPartial(object.scale)
      : undefined;
    return message;
  }
}

function createBaseECS6ComponentAttachToAvatar(): ECS6ComponentAttachToAvatar {
  return { avatarId: undefined, anchorPointId: undefined, avatarSceneId: undefined };
}

export namespace ECS6ComponentAttachToAvatar {
  export function encode(message: ECS6ComponentAttachToAvatar, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.avatarId !== undefined) {
      writer.uint32(10).string(message.avatarId);
    }
    if (message.anchorPointId !== undefined) {
      writer.uint32(16).int32(message.anchorPointId);
    }
    if (message.avatarSceneId !== undefined) {
      writer.uint32(26).string(message.avatarSceneId);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentAttachToAvatar {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentAttachToAvatar();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.avatarId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.anchorPointId = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.avatarSceneId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentAttachToAvatar {
    return {
      avatarId: isSet(object.avatarId) ? String(object.avatarId) : undefined,
      anchorPointId: isSet(object.anchorPointId)
        ? eCS6ComponentAttachToAvatar_AttachToAvatarAnchorPointIdFromJSON(object.anchorPointId)
        : undefined,
      avatarSceneId: isSet(object.avatarSceneId) ? String(object.avatarSceneId) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentAttachToAvatar): unknown {
    const obj: any = {};
    message.avatarId !== undefined && (obj.avatarId = message.avatarId);
    message.anchorPointId !== undefined &&
      (obj.anchorPointId = message.anchorPointId !== undefined
        ? eCS6ComponentAttachToAvatar_AttachToAvatarAnchorPointIdToJSON(message.anchorPointId)
        : undefined);
    message.avatarSceneId !== undefined && (obj.avatarSceneId = message.avatarSceneId);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentAttachToAvatar>, I>>(
    base?: I,
  ): ECS6ComponentAttachToAvatar {
    return ECS6ComponentAttachToAvatar.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentAttachToAvatar>, I>>(
    object: I,
  ): ECS6ComponentAttachToAvatar {
    const message = createBaseECS6ComponentAttachToAvatar();
    message.avatarId = object.avatarId ?? undefined;
    message.anchorPointId = object.anchorPointId ?? undefined;
    message.avatarSceneId = object.avatarSceneId ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentBillboard(): ECS6ComponentBillboard {
  return { x: undefined, y: undefined, z: undefined };
}

export namespace ECS6ComponentBillboard {
  export function encode(message: ECS6ComponentBillboard, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x !== undefined) {
      writer.uint32(8).bool(message.x);
    }
    if (message.y !== undefined) {
      writer.uint32(16).bool(message.y);
    }
    if (message.z !== undefined) {
      writer.uint32(24).bool(message.z);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentBillboard {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentBillboard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.x = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.y = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.z = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentBillboard {
    return {
      x: isSet(object.x) ? Boolean(object.x) : undefined,
      y: isSet(object.y) ? Boolean(object.y) : undefined,
      z: isSet(object.z) ? Boolean(object.z) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentBillboard): unknown {
    const obj: any = {};
    message.x !== undefined && (obj.x = message.x);
    message.y !== undefined && (obj.y = message.y);
    message.z !== undefined && (obj.z = message.z);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentBillboard>, I>>(base?: I): ECS6ComponentBillboard {
    return ECS6ComponentBillboard.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentBillboard>, I>>(
    object: I,
  ): ECS6ComponentBillboard {
    const message = createBaseECS6ComponentBillboard();
    message.x = object.x ?? undefined;
    message.y = object.y ?? undefined;
    message.z = object.z ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentBoxShape(): ECS6ComponentBoxShape {
  return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined, uvs: [] };
}

export namespace ECS6ComponentBoxShape {
  export function encode(message: ECS6ComponentBoxShape, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.withCollisions !== undefined) {
      writer.uint32(8).bool(message.withCollisions);
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(16).bool(message.isPointerBlocker);
    }
    if (message.visible !== undefined) {
      writer.uint32(24).bool(message.visible);
    }
    writer.uint32(34).fork();
    for (const v of message.uvs) {
      writer.float(v);
    }
    writer.ldelim();
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentBoxShape {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentBoxShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.withCollisions = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 4:
          if (tag === 37) {
            message.uvs.push(reader.float());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.uvs.push(reader.float());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentBoxShape {
    return {
      withCollisions: isSet(object.withCollisions) ? Boolean(object.withCollisions) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      uvs: Array.isArray(object?.uvs) ? object.uvs.map((e: any) => Number(e)) : [],
    };
  }

  export function toJSON(message: ECS6ComponentBoxShape): unknown {
    const obj: any = {};
    message.withCollisions !== undefined && (obj.withCollisions = message.withCollisions);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.visible !== undefined && (obj.visible = message.visible);
    if (message.uvs) {
      obj.uvs = message.uvs.map((e) => e);
    } else {
      obj.uvs = [];
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentBoxShape>, I>>(base?: I): ECS6ComponentBoxShape {
    return ECS6ComponentBoxShape.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentBoxShape>, I>>(
    object: I,
  ): ECS6ComponentBoxShape {
    const message = createBaseECS6ComponentBoxShape();
    message.withCollisions = object.withCollisions ?? undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.visible = object.visible ?? undefined;
    message.uvs = object.uvs?.map((e) => e) || [];
    return message;
  }
}

function createBaseECS6ComponentSphereShape(): ECS6ComponentSphereShape {
  return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined };
}

export namespace ECS6ComponentSphereShape {
  export function encode(message: ECS6ComponentSphereShape, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.withCollisions !== undefined) {
      writer.uint32(8).bool(message.withCollisions);
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(16).bool(message.isPointerBlocker);
    }
    if (message.visible !== undefined) {
      writer.uint32(24).bool(message.visible);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentSphereShape {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentSphereShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.withCollisions = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.visible = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentSphereShape {
    return {
      withCollisions: isSet(object.withCollisions) ? Boolean(object.withCollisions) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentSphereShape): unknown {
    const obj: any = {};
    message.withCollisions !== undefined && (obj.withCollisions = message.withCollisions);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.visible !== undefined && (obj.visible = message.visible);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentSphereShape>, I>>(
    base?: I,
  ): ECS6ComponentSphereShape {
    return ECS6ComponentSphereShape.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentSphereShape>, I>>(
    object: I,
  ): ECS6ComponentSphereShape {
    const message = createBaseECS6ComponentSphereShape();
    message.withCollisions = object.withCollisions ?? undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.visible = object.visible ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentCircleShape(): ECS6ComponentCircleShape {
  return {
    withCollisions: undefined,
    isPointerBlocker: undefined,
    visible: undefined,
    segments: undefined,
    arc: undefined,
  };
}

export namespace ECS6ComponentCircleShape {
  export function encode(message: ECS6ComponentCircleShape, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.withCollisions !== undefined) {
      writer.uint32(8).bool(message.withCollisions);
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(16).bool(message.isPointerBlocker);
    }
    if (message.visible !== undefined) {
      writer.uint32(24).bool(message.visible);
    }
    if (message.segments !== undefined) {
      writer.uint32(37).float(message.segments);
    }
    if (message.arc !== undefined) {
      writer.uint32(45).float(message.arc);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentCircleShape {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentCircleShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.withCollisions = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.segments = reader.float();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.arc = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentCircleShape {
    return {
      withCollisions: isSet(object.withCollisions) ? Boolean(object.withCollisions) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      segments: isSet(object.segments) ? Number(object.segments) : undefined,
      arc: isSet(object.arc) ? Number(object.arc) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentCircleShape): unknown {
    const obj: any = {};
    message.withCollisions !== undefined && (obj.withCollisions = message.withCollisions);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.visible !== undefined && (obj.visible = message.visible);
    message.segments !== undefined && (obj.segments = message.segments);
    message.arc !== undefined && (obj.arc = message.arc);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentCircleShape>, I>>(
    base?: I,
  ): ECS6ComponentCircleShape {
    return ECS6ComponentCircleShape.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentCircleShape>, I>>(
    object: I,
  ): ECS6ComponentCircleShape {
    const message = createBaseECS6ComponentCircleShape();
    message.withCollisions = object.withCollisions ?? undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.visible = object.visible ?? undefined;
    message.segments = object.segments ?? undefined;
    message.arc = object.arc ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentPlaneShape(): ECS6ComponentPlaneShape {
  return {
    withCollisions: undefined,
    isPointerBlocker: undefined,
    visible: undefined,
    uvs: [],
    width: undefined,
    height: undefined,
  };
}

export namespace ECS6ComponentPlaneShape {
  export function encode(message: ECS6ComponentPlaneShape, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.withCollisions !== undefined) {
      writer.uint32(8).bool(message.withCollisions);
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(16).bool(message.isPointerBlocker);
    }
    if (message.visible !== undefined) {
      writer.uint32(24).bool(message.visible);
    }
    writer.uint32(34).fork();
    for (const v of message.uvs) {
      writer.float(v);
    }
    writer.ldelim();
    if (message.width !== undefined) {
      writer.uint32(53).float(message.width);
    }
    if (message.height !== undefined) {
      writer.uint32(61).float(message.height);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentPlaneShape {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentPlaneShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.withCollisions = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 4:
          if (tag === 37) {
            message.uvs.push(reader.float());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.uvs.push(reader.float());
            }

            continue;
          }

          break;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.width = reader.float();
          continue;
        case 7:
          if (tag !== 61) {
            break;
          }

          message.height = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentPlaneShape {
    return {
      withCollisions: isSet(object.withCollisions) ? Boolean(object.withCollisions) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      uvs: Array.isArray(object?.uvs) ? object.uvs.map((e: any) => Number(e)) : [],
      width: isSet(object.width) ? Number(object.width) : undefined,
      height: isSet(object.height) ? Number(object.height) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentPlaneShape): unknown {
    const obj: any = {};
    message.withCollisions !== undefined && (obj.withCollisions = message.withCollisions);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.visible !== undefined && (obj.visible = message.visible);
    if (message.uvs) {
      obj.uvs = message.uvs.map((e) => e);
    } else {
      obj.uvs = [];
    }
    message.width !== undefined && (obj.width = message.width);
    message.height !== undefined && (obj.height = message.height);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentPlaneShape>, I>>(base?: I): ECS6ComponentPlaneShape {
    return ECS6ComponentPlaneShape.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentPlaneShape>, I>>(
    object: I,
  ): ECS6ComponentPlaneShape {
    const message = createBaseECS6ComponentPlaneShape();
    message.withCollisions = object.withCollisions ?? undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.visible = object.visible ?? undefined;
    message.uvs = object.uvs?.map((e) => e) || [];
    message.width = object.width ?? undefined;
    message.height = object.height ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentConeShape(): ECS6ComponentConeShape {
  return {
    withCollisions: undefined,
    isPointerBlocker: undefined,
    visible: undefined,
    radiusTop: undefined,
    radiusBottom: undefined,
    segmentsHeight: undefined,
    segmentsRadial: undefined,
    openEnded: undefined,
    radius: undefined,
    arc: undefined,
  };
}

export namespace ECS6ComponentConeShape {
  export function encode(message: ECS6ComponentConeShape, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.withCollisions !== undefined) {
      writer.uint32(8).bool(message.withCollisions);
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(16).bool(message.isPointerBlocker);
    }
    if (message.visible !== undefined) {
      writer.uint32(24).bool(message.visible);
    }
    if (message.radiusTop !== undefined) {
      writer.uint32(37).float(message.radiusTop);
    }
    if (message.radiusBottom !== undefined) {
      writer.uint32(45).float(message.radiusBottom);
    }
    if (message.segmentsHeight !== undefined) {
      writer.uint32(53).float(message.segmentsHeight);
    }
    if (message.segmentsRadial !== undefined) {
      writer.uint32(61).float(message.segmentsRadial);
    }
    if (message.openEnded !== undefined) {
      writer.uint32(64).bool(message.openEnded);
    }
    if (message.radius !== undefined) {
      writer.uint32(77).float(message.radius);
    }
    if (message.arc !== undefined) {
      writer.uint32(85).float(message.arc);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentConeShape {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentConeShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.withCollisions = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.radiusTop = reader.float();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.radiusBottom = reader.float();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.segmentsHeight = reader.float();
          continue;
        case 7:
          if (tag !== 61) {
            break;
          }

          message.segmentsRadial = reader.float();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.openEnded = reader.bool();
          continue;
        case 9:
          if (tag !== 77) {
            break;
          }

          message.radius = reader.float();
          continue;
        case 10:
          if (tag !== 85) {
            break;
          }

          message.arc = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentConeShape {
    return {
      withCollisions: isSet(object.withCollisions) ? Boolean(object.withCollisions) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      radiusTop: isSet(object.radiusTop) ? Number(object.radiusTop) : undefined,
      radiusBottom: isSet(object.radiusBottom) ? Number(object.radiusBottom) : undefined,
      segmentsHeight: isSet(object.segmentsHeight) ? Number(object.segmentsHeight) : undefined,
      segmentsRadial: isSet(object.segmentsRadial) ? Number(object.segmentsRadial) : undefined,
      openEnded: isSet(object.openEnded) ? Boolean(object.openEnded) : undefined,
      radius: isSet(object.radius) ? Number(object.radius) : undefined,
      arc: isSet(object.arc) ? Number(object.arc) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentConeShape): unknown {
    const obj: any = {};
    message.withCollisions !== undefined && (obj.withCollisions = message.withCollisions);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.visible !== undefined && (obj.visible = message.visible);
    message.radiusTop !== undefined && (obj.radiusTop = message.radiusTop);
    message.radiusBottom !== undefined && (obj.radiusBottom = message.radiusBottom);
    message.segmentsHeight !== undefined && (obj.segmentsHeight = message.segmentsHeight);
    message.segmentsRadial !== undefined && (obj.segmentsRadial = message.segmentsRadial);
    message.openEnded !== undefined && (obj.openEnded = message.openEnded);
    message.radius !== undefined && (obj.radius = message.radius);
    message.arc !== undefined && (obj.arc = message.arc);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentConeShape>, I>>(base?: I): ECS6ComponentConeShape {
    return ECS6ComponentConeShape.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentConeShape>, I>>(
    object: I,
  ): ECS6ComponentConeShape {
    const message = createBaseECS6ComponentConeShape();
    message.withCollisions = object.withCollisions ?? undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.visible = object.visible ?? undefined;
    message.radiusTop = object.radiusTop ?? undefined;
    message.radiusBottom = object.radiusBottom ?? undefined;
    message.segmentsHeight = object.segmentsHeight ?? undefined;
    message.segmentsRadial = object.segmentsRadial ?? undefined;
    message.openEnded = object.openEnded ?? undefined;
    message.radius = object.radius ?? undefined;
    message.arc = object.arc ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentCylinderShape(): ECS6ComponentCylinderShape {
  return {
    withCollisions: undefined,
    isPointerBlocker: undefined,
    visible: undefined,
    radiusTop: undefined,
    radiusBottom: undefined,
    segmentsHeight: undefined,
    segmentsRadial: undefined,
    openEnded: undefined,
    radius: undefined,
    arc: undefined,
  };
}

export namespace ECS6ComponentCylinderShape {
  export function encode(message: ECS6ComponentCylinderShape, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.withCollisions !== undefined) {
      writer.uint32(8).bool(message.withCollisions);
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(16).bool(message.isPointerBlocker);
    }
    if (message.visible !== undefined) {
      writer.uint32(24).bool(message.visible);
    }
    if (message.radiusTop !== undefined) {
      writer.uint32(37).float(message.radiusTop);
    }
    if (message.radiusBottom !== undefined) {
      writer.uint32(45).float(message.radiusBottom);
    }
    if (message.segmentsHeight !== undefined) {
      writer.uint32(53).float(message.segmentsHeight);
    }
    if (message.segmentsRadial !== undefined) {
      writer.uint32(61).float(message.segmentsRadial);
    }
    if (message.openEnded !== undefined) {
      writer.uint32(64).bool(message.openEnded);
    }
    if (message.radius !== undefined) {
      writer.uint32(77).float(message.radius);
    }
    if (message.arc !== undefined) {
      writer.uint32(85).float(message.arc);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentCylinderShape {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentCylinderShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.withCollisions = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.radiusTop = reader.float();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.radiusBottom = reader.float();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.segmentsHeight = reader.float();
          continue;
        case 7:
          if (tag !== 61) {
            break;
          }

          message.segmentsRadial = reader.float();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.openEnded = reader.bool();
          continue;
        case 9:
          if (tag !== 77) {
            break;
          }

          message.radius = reader.float();
          continue;
        case 10:
          if (tag !== 85) {
            break;
          }

          message.arc = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentCylinderShape {
    return {
      withCollisions: isSet(object.withCollisions) ? Boolean(object.withCollisions) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      radiusTop: isSet(object.radiusTop) ? Number(object.radiusTop) : undefined,
      radiusBottom: isSet(object.radiusBottom) ? Number(object.radiusBottom) : undefined,
      segmentsHeight: isSet(object.segmentsHeight) ? Number(object.segmentsHeight) : undefined,
      segmentsRadial: isSet(object.segmentsRadial) ? Number(object.segmentsRadial) : undefined,
      openEnded: isSet(object.openEnded) ? Boolean(object.openEnded) : undefined,
      radius: isSet(object.radius) ? Number(object.radius) : undefined,
      arc: isSet(object.arc) ? Number(object.arc) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentCylinderShape): unknown {
    const obj: any = {};
    message.withCollisions !== undefined && (obj.withCollisions = message.withCollisions);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.visible !== undefined && (obj.visible = message.visible);
    message.radiusTop !== undefined && (obj.radiusTop = message.radiusTop);
    message.radiusBottom !== undefined && (obj.radiusBottom = message.radiusBottom);
    message.segmentsHeight !== undefined && (obj.segmentsHeight = message.segmentsHeight);
    message.segmentsRadial !== undefined && (obj.segmentsRadial = message.segmentsRadial);
    message.openEnded !== undefined && (obj.openEnded = message.openEnded);
    message.radius !== undefined && (obj.radius = message.radius);
    message.arc !== undefined && (obj.arc = message.arc);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentCylinderShape>, I>>(
    base?: I,
  ): ECS6ComponentCylinderShape {
    return ECS6ComponentCylinderShape.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentCylinderShape>, I>>(
    object: I,
  ): ECS6ComponentCylinderShape {
    const message = createBaseECS6ComponentCylinderShape();
    message.withCollisions = object.withCollisions ?? undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.visible = object.visible ?? undefined;
    message.radiusTop = object.radiusTop ?? undefined;
    message.radiusBottom = object.radiusBottom ?? undefined;
    message.segmentsHeight = object.segmentsHeight ?? undefined;
    message.segmentsRadial = object.segmentsRadial ?? undefined;
    message.openEnded = object.openEnded ?? undefined;
    message.radius = object.radius ?? undefined;
    message.arc = object.arc ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentGltfShape(): ECS6ComponentGltfShape {
  return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined, src: undefined };
}

export namespace ECS6ComponentGltfShape {
  export function encode(message: ECS6ComponentGltfShape, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.withCollisions !== undefined) {
      writer.uint32(8).bool(message.withCollisions);
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(16).bool(message.isPointerBlocker);
    }
    if (message.visible !== undefined) {
      writer.uint32(24).bool(message.visible);
    }
    if (message.src !== undefined) {
      writer.uint32(34).string(message.src);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentGltfShape {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentGltfShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.withCollisions = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.src = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentGltfShape {
    return {
      withCollisions: isSet(object.withCollisions) ? Boolean(object.withCollisions) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      src: isSet(object.src) ? String(object.src) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentGltfShape): unknown {
    const obj: any = {};
    message.withCollisions !== undefined && (obj.withCollisions = message.withCollisions);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.visible !== undefined && (obj.visible = message.visible);
    message.src !== undefined && (obj.src = message.src);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentGltfShape>, I>>(base?: I): ECS6ComponentGltfShape {
    return ECS6ComponentGltfShape.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentGltfShape>, I>>(
    object: I,
  ): ECS6ComponentGltfShape {
    const message = createBaseECS6ComponentGltfShape();
    message.withCollisions = object.withCollisions ?? undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.visible = object.visible ?? undefined;
    message.src = object.src ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentNftShape(): ECS6ComponentNftShape {
  return {
    withCollisions: undefined,
    isPointerBlocker: undefined,
    visible: undefined,
    src: undefined,
    style: undefined,
    color: undefined,
  };
}

export namespace ECS6ComponentNftShape {
  export function encode(message: ECS6ComponentNftShape, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.withCollisions !== undefined) {
      writer.uint32(8).bool(message.withCollisions);
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(16).bool(message.isPointerBlocker);
    }
    if (message.visible !== undefined) {
      writer.uint32(24).bool(message.visible);
    }
    if (message.src !== undefined) {
      writer.uint32(34).string(message.src);
    }
    if (message.style !== undefined) {
      writer.uint32(40).int32(message.style);
    }
    if (message.color !== undefined) {
      Color3.encode(message.color, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentNftShape {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentNftShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.withCollisions = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.src = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.style = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.color = Color3.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentNftShape {
    return {
      withCollisions: isSet(object.withCollisions) ? Boolean(object.withCollisions) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      src: isSet(object.src) ? String(object.src) : undefined,
      style: isSet(object.style) ? eCS6ComponentNftShape_PictureFrameStyleFromJSON(object.style) : undefined,
      color: isSet(object.color) ? Color3.fromJSON(object.color) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentNftShape): unknown {
    const obj: any = {};
    message.withCollisions !== undefined && (obj.withCollisions = message.withCollisions);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.visible !== undefined && (obj.visible = message.visible);
    message.src !== undefined && (obj.src = message.src);
    message.style !== undefined &&
      (obj.style = message.style !== undefined
        ? eCS6ComponentNftShape_PictureFrameStyleToJSON(message.style)
        : undefined);
    message.color !== undefined && (obj.color = message.color ? Color3.toJSON(message.color) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentNftShape>, I>>(base?: I): ECS6ComponentNftShape {
    return ECS6ComponentNftShape.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentNftShape>, I>>(
    object: I,
  ): ECS6ComponentNftShape {
    const message = createBaseECS6ComponentNftShape();
    message.withCollisions = object.withCollisions ?? undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.visible = object.visible ?? undefined;
    message.src = object.src ?? undefined;
    message.style = object.style ?? undefined;
    message.color = (object.color !== undefined && object.color !== null)
      ? Color3.fromPartial(object.color)
      : undefined;
    return message;
  }
}

function createBaseECS6ComponentTexture(): ECS6ComponentTexture {
  return { src: undefined, samplingMode: undefined, wrap: undefined, hasAlpha: undefined };
}

export namespace ECS6ComponentTexture {
  export function encode(message: ECS6ComponentTexture, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.src !== undefined) {
      writer.uint32(10).string(message.src);
    }
    if (message.samplingMode !== undefined) {
      writer.uint32(16).int32(message.samplingMode);
    }
    if (message.wrap !== undefined) {
      writer.uint32(24).int32(message.wrap);
    }
    if (message.hasAlpha !== undefined) {
      writer.uint32(32).bool(message.hasAlpha);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentTexture {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentTexture();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.src = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.samplingMode = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.wrap = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.hasAlpha = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentTexture {
    return {
      src: isSet(object.src) ? String(object.src) : undefined,
      samplingMode: isSet(object.samplingMode) ? Number(object.samplingMode) : undefined,
      wrap: isSet(object.wrap) ? Number(object.wrap) : undefined,
      hasAlpha: isSet(object.hasAlpha) ? Boolean(object.hasAlpha) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentTexture): unknown {
    const obj: any = {};
    message.src !== undefined && (obj.src = message.src);
    message.samplingMode !== undefined && (obj.samplingMode = Math.round(message.samplingMode));
    message.wrap !== undefined && (obj.wrap = Math.round(message.wrap));
    message.hasAlpha !== undefined && (obj.hasAlpha = message.hasAlpha);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentTexture>, I>>(base?: I): ECS6ComponentTexture {
    return ECS6ComponentTexture.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentTexture>, I>>(object: I): ECS6ComponentTexture {
    const message = createBaseECS6ComponentTexture();
    message.src = object.src ?? undefined;
    message.samplingMode = object.samplingMode ?? undefined;
    message.wrap = object.wrap ?? undefined;
    message.hasAlpha = object.hasAlpha ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentAnimator(): ECS6ComponentAnimator {
  return { states: [] };
}

export namespace ECS6ComponentAnimator {
  export function encode(message: ECS6ComponentAnimator, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.states) {
      ECS6ComponentAnimator_AnimationState.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentAnimator {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentAnimator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.states.push(ECS6ComponentAnimator_AnimationState.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentAnimator {
    return {
      states: Array.isArray(object?.states)
        ? object.states.map((e: any) => ECS6ComponentAnimator_AnimationState.fromJSON(e))
        : [],
    };
  }

  export function toJSON(message: ECS6ComponentAnimator): unknown {
    const obj: any = {};
    if (message.states) {
      obj.states = message.states.map((e) => e ? ECS6ComponentAnimator_AnimationState.toJSON(e) : undefined);
    } else {
      obj.states = [];
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentAnimator>, I>>(base?: I): ECS6ComponentAnimator {
    return ECS6ComponentAnimator.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentAnimator>, I>>(
    object: I,
  ): ECS6ComponentAnimator {
    const message = createBaseECS6ComponentAnimator();
    message.states = object.states?.map((e) => ECS6ComponentAnimator_AnimationState.fromPartial(e)) || [];
    return message;
  }
}

function createBaseECS6ComponentAnimator_AnimationState(): ECS6ComponentAnimator_AnimationState {
  return {
    clip: undefined,
    looping: undefined,
    weight: undefined,
    playing: undefined,
    shouldReset: undefined,
    speed: undefined,
    name: undefined,
  };
}

export namespace ECS6ComponentAnimator_AnimationState {
  export function encode(
    message: ECS6ComponentAnimator_AnimationState,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.clip !== undefined) {
      writer.uint32(10).string(message.clip);
    }
    if (message.looping !== undefined) {
      writer.uint32(16).bool(message.looping);
    }
    if (message.weight !== undefined) {
      writer.uint32(29).float(message.weight);
    }
    if (message.playing !== undefined) {
      writer.uint32(32).bool(message.playing);
    }
    if (message.shouldReset !== undefined) {
      writer.uint32(40).bool(message.shouldReset);
    }
    if (message.speed !== undefined) {
      writer.uint32(53).float(message.speed);
    }
    if (message.name !== undefined) {
      writer.uint32(58).string(message.name);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentAnimator_AnimationState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentAnimator_AnimationState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clip = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.looping = reader.bool();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.weight = reader.float();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.playing = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.shouldReset = reader.bool();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.speed = reader.float();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentAnimator_AnimationState {
    return {
      clip: isSet(object.clip) ? String(object.clip) : undefined,
      looping: isSet(object.looping) ? Boolean(object.looping) : undefined,
      weight: isSet(object.weight) ? Number(object.weight) : undefined,
      playing: isSet(object.playing) ? Boolean(object.playing) : undefined,
      shouldReset: isSet(object.shouldReset) ? Boolean(object.shouldReset) : undefined,
      speed: isSet(object.speed) ? Number(object.speed) : undefined,
      name: isSet(object.name) ? String(object.name) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentAnimator_AnimationState): unknown {
    const obj: any = {};
    message.clip !== undefined && (obj.clip = message.clip);
    message.looping !== undefined && (obj.looping = message.looping);
    message.weight !== undefined && (obj.weight = message.weight);
    message.playing !== undefined && (obj.playing = message.playing);
    message.shouldReset !== undefined && (obj.shouldReset = message.shouldReset);
    message.speed !== undefined && (obj.speed = message.speed);
    message.name !== undefined && (obj.name = message.name);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentAnimator_AnimationState>, I>>(
    base?: I,
  ): ECS6ComponentAnimator_AnimationState {
    return ECS6ComponentAnimator_AnimationState.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentAnimator_AnimationState>, I>>(
    object: I,
  ): ECS6ComponentAnimator_AnimationState {
    const message = createBaseECS6ComponentAnimator_AnimationState();
    message.clip = object.clip ?? undefined;
    message.looping = object.looping ?? undefined;
    message.weight = object.weight ?? undefined;
    message.playing = object.playing ?? undefined;
    message.shouldReset = object.shouldReset ?? undefined;
    message.speed = object.speed ?? undefined;
    message.name = object.name ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentObjShape(): ECS6ComponentObjShape {
  return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined, src: undefined };
}

export namespace ECS6ComponentObjShape {
  export function encode(message: ECS6ComponentObjShape, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.withCollisions !== undefined) {
      writer.uint32(8).bool(message.withCollisions);
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(16).bool(message.isPointerBlocker);
    }
    if (message.visible !== undefined) {
      writer.uint32(24).bool(message.visible);
    }
    if (message.src !== undefined) {
      writer.uint32(34).string(message.src);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentObjShape {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentObjShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.withCollisions = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.src = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentObjShape {
    return {
      withCollisions: isSet(object.withCollisions) ? Boolean(object.withCollisions) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      src: isSet(object.src) ? String(object.src) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentObjShape): unknown {
    const obj: any = {};
    message.withCollisions !== undefined && (obj.withCollisions = message.withCollisions);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.visible !== undefined && (obj.visible = message.visible);
    message.src !== undefined && (obj.src = message.src);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentObjShape>, I>>(base?: I): ECS6ComponentObjShape {
    return ECS6ComponentObjShape.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentObjShape>, I>>(
    object: I,
  ): ECS6ComponentObjShape {
    const message = createBaseECS6ComponentObjShape();
    message.withCollisions = object.withCollisions ?? undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.visible = object.visible ?? undefined;
    message.src = object.src ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentFont(): ECS6ComponentFont {
  return { src: undefined };
}

export namespace ECS6ComponentFont {
  export function encode(message: ECS6ComponentFont, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.src !== undefined) {
      writer.uint32(10).string(message.src);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentFont {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentFont();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.src = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentFont {
    return { src: isSet(object.src) ? String(object.src) : undefined };
  }

  export function toJSON(message: ECS6ComponentFont): unknown {
    const obj: any = {};
    message.src !== undefined && (obj.src = message.src);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentFont>, I>>(base?: I): ECS6ComponentFont {
    return ECS6ComponentFont.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentFont>, I>>(object: I): ECS6ComponentFont {
    const message = createBaseECS6ComponentFont();
    message.src = object.src ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentTextShape(): ECS6ComponentTextShape {
  return {
    outlineWidth: undefined,
    outlineColor: undefined,
    color: undefined,
    fontSize: undefined,
    font: undefined,
    opacity: undefined,
    value: undefined,
    lineSpacing: undefined,
    lineCount: undefined,
    textWrapping: undefined,
    shadowBlur: undefined,
    shadowOffsetX: undefined,
    shadowOffsetY: undefined,
    shadowColor: undefined,
    hTextAlign: undefined,
    vTextAlign: undefined,
    width: undefined,
    height: undefined,
    paddingTop: undefined,
    paddingRight: undefined,
    paddingBottom: undefined,
    paddingLeft: undefined,
    billboard: undefined,
    visible: undefined,
  };
}

export namespace ECS6ComponentTextShape {
  export function encode(message: ECS6ComponentTextShape, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.outlineWidth !== undefined) {
      writer.uint32(13).float(message.outlineWidth);
    }
    if (message.outlineColor !== undefined) {
      Color3.encode(message.outlineColor, writer.uint32(18).fork()).ldelim();
    }
    if (message.color !== undefined) {
      Color3.encode(message.color, writer.uint32(26).fork()).ldelim();
    }
    if (message.fontSize !== undefined) {
      writer.uint32(37).float(message.fontSize);
    }
    if (message.font !== undefined) {
      writer.uint32(42).string(message.font);
    }
    if (message.opacity !== undefined) {
      writer.uint32(53).float(message.opacity);
    }
    if (message.value !== undefined) {
      writer.uint32(58).string(message.value);
    }
    if (message.lineSpacing !== undefined) {
      writer.uint32(66).string(message.lineSpacing);
    }
    if (message.lineCount !== undefined) {
      writer.uint32(72).int32(message.lineCount);
    }
    if (message.textWrapping !== undefined) {
      writer.uint32(80).bool(message.textWrapping);
    }
    if (message.shadowBlur !== undefined) {
      writer.uint32(93).float(message.shadowBlur);
    }
    if (message.shadowOffsetX !== undefined) {
      writer.uint32(101).float(message.shadowOffsetX);
    }
    if (message.shadowOffsetY !== undefined) {
      writer.uint32(109).float(message.shadowOffsetY);
    }
    if (message.shadowColor !== undefined) {
      Color3.encode(message.shadowColor, writer.uint32(114).fork()).ldelim();
    }
    if (message.hTextAlign !== undefined) {
      writer.uint32(122).string(message.hTextAlign);
    }
    if (message.vTextAlign !== undefined) {
      writer.uint32(130).string(message.vTextAlign);
    }
    if (message.width !== undefined) {
      writer.uint32(141).float(message.width);
    }
    if (message.height !== undefined) {
      writer.uint32(149).float(message.height);
    }
    if (message.paddingTop !== undefined) {
      writer.uint32(157).float(message.paddingTop);
    }
    if (message.paddingRight !== undefined) {
      writer.uint32(165).float(message.paddingRight);
    }
    if (message.paddingBottom !== undefined) {
      writer.uint32(173).float(message.paddingBottom);
    }
    if (message.paddingLeft !== undefined) {
      writer.uint32(181).float(message.paddingLeft);
    }
    if (message.billboard !== undefined) {
      writer.uint32(184).bool(message.billboard);
    }
    if (message.visible !== undefined) {
      writer.uint32(192).bool(message.visible);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentTextShape {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentTextShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.outlineWidth = reader.float();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.outlineColor = Color3.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.color = Color3.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.fontSize = reader.float();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.font = reader.string();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.opacity = reader.float();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.value = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.lineSpacing = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.lineCount = reader.int32();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.textWrapping = reader.bool();
          continue;
        case 11:
          if (tag !== 93) {
            break;
          }

          message.shadowBlur = reader.float();
          continue;
        case 12:
          if (tag !== 101) {
            break;
          }

          message.shadowOffsetX = reader.float();
          continue;
        case 13:
          if (tag !== 109) {
            break;
          }

          message.shadowOffsetY = reader.float();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.shadowColor = Color3.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.hTextAlign = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.vTextAlign = reader.string();
          continue;
        case 17:
          if (tag !== 141) {
            break;
          }

          message.width = reader.float();
          continue;
        case 18:
          if (tag !== 149) {
            break;
          }

          message.height = reader.float();
          continue;
        case 19:
          if (tag !== 157) {
            break;
          }

          message.paddingTop = reader.float();
          continue;
        case 20:
          if (tag !== 165) {
            break;
          }

          message.paddingRight = reader.float();
          continue;
        case 21:
          if (tag !== 173) {
            break;
          }

          message.paddingBottom = reader.float();
          continue;
        case 22:
          if (tag !== 181) {
            break;
          }

          message.paddingLeft = reader.float();
          continue;
        case 23:
          if (tag !== 184) {
            break;
          }

          message.billboard = reader.bool();
          continue;
        case 24:
          if (tag !== 192) {
            break;
          }

          message.visible = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentTextShape {
    return {
      outlineWidth: isSet(object.outlineWidth) ? Number(object.outlineWidth) : undefined,
      outlineColor: isSet(object.outlineColor) ? Color3.fromJSON(object.outlineColor) : undefined,
      color: isSet(object.color) ? Color3.fromJSON(object.color) : undefined,
      fontSize: isSet(object.fontSize) ? Number(object.fontSize) : undefined,
      font: isSet(object.font) ? String(object.font) : undefined,
      opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
      value: isSet(object.value) ? String(object.value) : undefined,
      lineSpacing: isSet(object.lineSpacing) ? String(object.lineSpacing) : undefined,
      lineCount: isSet(object.lineCount) ? Number(object.lineCount) : undefined,
      textWrapping: isSet(object.textWrapping) ? Boolean(object.textWrapping) : undefined,
      shadowBlur: isSet(object.shadowBlur) ? Number(object.shadowBlur) : undefined,
      shadowOffsetX: isSet(object.shadowOffsetX) ? Number(object.shadowOffsetX) : undefined,
      shadowOffsetY: isSet(object.shadowOffsetY) ? Number(object.shadowOffsetY) : undefined,
      shadowColor: isSet(object.shadowColor) ? Color3.fromJSON(object.shadowColor) : undefined,
      hTextAlign: isSet(object.hTextAlign) ? String(object.hTextAlign) : undefined,
      vTextAlign: isSet(object.vTextAlign) ? String(object.vTextAlign) : undefined,
      width: isSet(object.width) ? Number(object.width) : undefined,
      height: isSet(object.height) ? Number(object.height) : undefined,
      paddingTop: isSet(object.paddingTop) ? Number(object.paddingTop) : undefined,
      paddingRight: isSet(object.paddingRight) ? Number(object.paddingRight) : undefined,
      paddingBottom: isSet(object.paddingBottom) ? Number(object.paddingBottom) : undefined,
      paddingLeft: isSet(object.paddingLeft) ? Number(object.paddingLeft) : undefined,
      billboard: isSet(object.billboard) ? Boolean(object.billboard) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentTextShape): unknown {
    const obj: any = {};
    message.outlineWidth !== undefined && (obj.outlineWidth = message.outlineWidth);
    message.outlineColor !== undefined &&
      (obj.outlineColor = message.outlineColor ? Color3.toJSON(message.outlineColor) : undefined);
    message.color !== undefined && (obj.color = message.color ? Color3.toJSON(message.color) : undefined);
    message.fontSize !== undefined && (obj.fontSize = message.fontSize);
    message.font !== undefined && (obj.font = message.font);
    message.opacity !== undefined && (obj.opacity = message.opacity);
    message.value !== undefined && (obj.value = message.value);
    message.lineSpacing !== undefined && (obj.lineSpacing = message.lineSpacing);
    message.lineCount !== undefined && (obj.lineCount = Math.round(message.lineCount));
    message.textWrapping !== undefined && (obj.textWrapping = message.textWrapping);
    message.shadowBlur !== undefined && (obj.shadowBlur = message.shadowBlur);
    message.shadowOffsetX !== undefined && (obj.shadowOffsetX = message.shadowOffsetX);
    message.shadowOffsetY !== undefined && (obj.shadowOffsetY = message.shadowOffsetY);
    message.shadowColor !== undefined &&
      (obj.shadowColor = message.shadowColor ? Color3.toJSON(message.shadowColor) : undefined);
    message.hTextAlign !== undefined && (obj.hTextAlign = message.hTextAlign);
    message.vTextAlign !== undefined && (obj.vTextAlign = message.vTextAlign);
    message.width !== undefined && (obj.width = message.width);
    message.height !== undefined && (obj.height = message.height);
    message.paddingTop !== undefined && (obj.paddingTop = message.paddingTop);
    message.paddingRight !== undefined && (obj.paddingRight = message.paddingRight);
    message.paddingBottom !== undefined && (obj.paddingBottom = message.paddingBottom);
    message.paddingLeft !== undefined && (obj.paddingLeft = message.paddingLeft);
    message.billboard !== undefined && (obj.billboard = message.billboard);
    message.visible !== undefined && (obj.visible = message.visible);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentTextShape>, I>>(base?: I): ECS6ComponentTextShape {
    return ECS6ComponentTextShape.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentTextShape>, I>>(
    object: I,
  ): ECS6ComponentTextShape {
    const message = createBaseECS6ComponentTextShape();
    message.outlineWidth = object.outlineWidth ?? undefined;
    message.outlineColor = (object.outlineColor !== undefined && object.outlineColor !== null)
      ? Color3.fromPartial(object.outlineColor)
      : undefined;
    message.color = (object.color !== undefined && object.color !== null)
      ? Color3.fromPartial(object.color)
      : undefined;
    message.fontSize = object.fontSize ?? undefined;
    message.font = object.font ?? undefined;
    message.opacity = object.opacity ?? undefined;
    message.value = object.value ?? undefined;
    message.lineSpacing = object.lineSpacing ?? undefined;
    message.lineCount = object.lineCount ?? undefined;
    message.textWrapping = object.textWrapping ?? undefined;
    message.shadowBlur = object.shadowBlur ?? undefined;
    message.shadowOffsetX = object.shadowOffsetX ?? undefined;
    message.shadowOffsetY = object.shadowOffsetY ?? undefined;
    message.shadowColor = (object.shadowColor !== undefined && object.shadowColor !== null)
      ? Color3.fromPartial(object.shadowColor)
      : undefined;
    message.hTextAlign = object.hTextAlign ?? undefined;
    message.vTextAlign = object.vTextAlign ?? undefined;
    message.width = object.width ?? undefined;
    message.height = object.height ?? undefined;
    message.paddingTop = object.paddingTop ?? undefined;
    message.paddingRight = object.paddingRight ?? undefined;
    message.paddingBottom = object.paddingBottom ?? undefined;
    message.paddingLeft = object.paddingLeft ?? undefined;
    message.billboard = object.billboard ?? undefined;
    message.visible = object.visible ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentMaterial(): ECS6ComponentMaterial {
  return {
    alphaTest: undefined,
    albedoColor: undefined,
    emissiveColor: undefined,
    metallic: undefined,
    roughness: undefined,
    reflectivityColor: undefined,
    directIntensity: undefined,
    microSurface: undefined,
    emissiveIntensity: undefined,
    specularIntensity: undefined,
    albedoTexture: undefined,
    alphaTexture: undefined,
    emissiveTexture: undefined,
    bumpTexture: undefined,
    transparencyMode: undefined,
    castShadows: undefined,
  };
}

export namespace ECS6ComponentMaterial {
  export function encode(message: ECS6ComponentMaterial, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.alphaTest !== undefined) {
      writer.uint32(13).float(message.alphaTest);
    }
    if (message.albedoColor !== undefined) {
      ECS6Color4.encode(message.albedoColor, writer.uint32(18).fork()).ldelim();
    }
    if (message.emissiveColor !== undefined) {
      Color3.encode(message.emissiveColor, writer.uint32(26).fork()).ldelim();
    }
    if (message.metallic !== undefined) {
      writer.uint32(37).float(message.metallic);
    }
    if (message.roughness !== undefined) {
      writer.uint32(45).float(message.roughness);
    }
    if (message.reflectivityColor !== undefined) {
      Color3.encode(message.reflectivityColor, writer.uint32(50).fork()).ldelim();
    }
    if (message.directIntensity !== undefined) {
      writer.uint32(61).float(message.directIntensity);
    }
    if (message.microSurface !== undefined) {
      writer.uint32(69).float(message.microSurface);
    }
    if (message.emissiveIntensity !== undefined) {
      writer.uint32(77).float(message.emissiveIntensity);
    }
    if (message.specularIntensity !== undefined) {
      writer.uint32(85).float(message.specularIntensity);
    }
    if (message.albedoTexture !== undefined) {
      writer.uint32(90).string(message.albedoTexture);
    }
    if (message.alphaTexture !== undefined) {
      writer.uint32(98).string(message.alphaTexture);
    }
    if (message.emissiveTexture !== undefined) {
      writer.uint32(106).string(message.emissiveTexture);
    }
    if (message.bumpTexture !== undefined) {
      writer.uint32(114).string(message.bumpTexture);
    }
    if (message.transparencyMode !== undefined) {
      writer.uint32(125).float(message.transparencyMode);
    }
    if (message.castShadows !== undefined) {
      writer.uint32(128).bool(message.castShadows);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentMaterial {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentMaterial();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.alphaTest = reader.float();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.albedoColor = ECS6Color4.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.emissiveColor = Color3.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.metallic = reader.float();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.roughness = reader.float();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.reflectivityColor = Color3.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 61) {
            break;
          }

          message.directIntensity = reader.float();
          continue;
        case 8:
          if (tag !== 69) {
            break;
          }

          message.microSurface = reader.float();
          continue;
        case 9:
          if (tag !== 77) {
            break;
          }

          message.emissiveIntensity = reader.float();
          continue;
        case 10:
          if (tag !== 85) {
            break;
          }

          message.specularIntensity = reader.float();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.albedoTexture = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.alphaTexture = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.emissiveTexture = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.bumpTexture = reader.string();
          continue;
        case 15:
          if (tag !== 125) {
            break;
          }

          message.transparencyMode = reader.float();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.castShadows = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentMaterial {
    return {
      alphaTest: isSet(object.alphaTest) ? Number(object.alphaTest) : undefined,
      albedoColor: isSet(object.albedoColor) ? ECS6Color4.fromJSON(object.albedoColor) : undefined,
      emissiveColor: isSet(object.emissiveColor) ? Color3.fromJSON(object.emissiveColor) : undefined,
      metallic: isSet(object.metallic) ? Number(object.metallic) : undefined,
      roughness: isSet(object.roughness) ? Number(object.roughness) : undefined,
      reflectivityColor: isSet(object.reflectivityColor) ? Color3.fromJSON(object.reflectivityColor) : undefined,
      directIntensity: isSet(object.directIntensity) ? Number(object.directIntensity) : undefined,
      microSurface: isSet(object.microSurface) ? Number(object.microSurface) : undefined,
      emissiveIntensity: isSet(object.emissiveIntensity) ? Number(object.emissiveIntensity) : undefined,
      specularIntensity: isSet(object.specularIntensity) ? Number(object.specularIntensity) : undefined,
      albedoTexture: isSet(object.albedoTexture) ? String(object.albedoTexture) : undefined,
      alphaTexture: isSet(object.alphaTexture) ? String(object.alphaTexture) : undefined,
      emissiveTexture: isSet(object.emissiveTexture) ? String(object.emissiveTexture) : undefined,
      bumpTexture: isSet(object.bumpTexture) ? String(object.bumpTexture) : undefined,
      transparencyMode: isSet(object.transparencyMode) ? Number(object.transparencyMode) : undefined,
      castShadows: isSet(object.castShadows) ? Boolean(object.castShadows) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentMaterial): unknown {
    const obj: any = {};
    message.alphaTest !== undefined && (obj.alphaTest = message.alphaTest);
    message.albedoColor !== undefined &&
      (obj.albedoColor = message.albedoColor ? ECS6Color4.toJSON(message.albedoColor) : undefined);
    message.emissiveColor !== undefined &&
      (obj.emissiveColor = message.emissiveColor ? Color3.toJSON(message.emissiveColor) : undefined);
    message.metallic !== undefined && (obj.metallic = message.metallic);
    message.roughness !== undefined && (obj.roughness = message.roughness);
    message.reflectivityColor !== undefined &&
      (obj.reflectivityColor = message.reflectivityColor ? Color3.toJSON(message.reflectivityColor) : undefined);
    message.directIntensity !== undefined && (obj.directIntensity = message.directIntensity);
    message.microSurface !== undefined && (obj.microSurface = message.microSurface);
    message.emissiveIntensity !== undefined && (obj.emissiveIntensity = message.emissiveIntensity);
    message.specularIntensity !== undefined && (obj.specularIntensity = message.specularIntensity);
    message.albedoTexture !== undefined && (obj.albedoTexture = message.albedoTexture);
    message.alphaTexture !== undefined && (obj.alphaTexture = message.alphaTexture);
    message.emissiveTexture !== undefined && (obj.emissiveTexture = message.emissiveTexture);
    message.bumpTexture !== undefined && (obj.bumpTexture = message.bumpTexture);
    message.transparencyMode !== undefined && (obj.transparencyMode = message.transparencyMode);
    message.castShadows !== undefined && (obj.castShadows = message.castShadows);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentMaterial>, I>>(base?: I): ECS6ComponentMaterial {
    return ECS6ComponentMaterial.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentMaterial>, I>>(
    object: I,
  ): ECS6ComponentMaterial {
    const message = createBaseECS6ComponentMaterial();
    message.alphaTest = object.alphaTest ?? undefined;
    message.albedoColor = (object.albedoColor !== undefined && object.albedoColor !== null)
      ? ECS6Color4.fromPartial(object.albedoColor)
      : undefined;
    message.emissiveColor = (object.emissiveColor !== undefined && object.emissiveColor !== null)
      ? Color3.fromPartial(object.emissiveColor)
      : undefined;
    message.metallic = object.metallic ?? undefined;
    message.roughness = object.roughness ?? undefined;
    message.reflectivityColor = (object.reflectivityColor !== undefined && object.reflectivityColor !== null)
      ? Color3.fromPartial(object.reflectivityColor)
      : undefined;
    message.directIntensity = object.directIntensity ?? undefined;
    message.microSurface = object.microSurface ?? undefined;
    message.emissiveIntensity = object.emissiveIntensity ?? undefined;
    message.specularIntensity = object.specularIntensity ?? undefined;
    message.albedoTexture = object.albedoTexture ?? undefined;
    message.alphaTexture = object.alphaTexture ?? undefined;
    message.emissiveTexture = object.emissiveTexture ?? undefined;
    message.bumpTexture = object.bumpTexture ?? undefined;
    message.transparencyMode = object.transparencyMode ?? undefined;
    message.castShadows = object.castShadows ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentBasicMaterial(): ECS6ComponentBasicMaterial {
  return { alphaTest: undefined, texture: undefined, castShadows: undefined };
}

export namespace ECS6ComponentBasicMaterial {
  export function encode(message: ECS6ComponentBasicMaterial, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.alphaTest !== undefined) {
      writer.uint32(13).float(message.alphaTest);
    }
    if (message.texture !== undefined) {
      writer.uint32(18).string(message.texture);
    }
    if (message.castShadows !== undefined) {
      writer.uint32(24).bool(message.castShadows);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentBasicMaterial {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentBasicMaterial();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.alphaTest = reader.float();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.texture = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.castShadows = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentBasicMaterial {
    return {
      alphaTest: isSet(object.alphaTest) ? Number(object.alphaTest) : undefined,
      texture: isSet(object.texture) ? String(object.texture) : undefined,
      castShadows: isSet(object.castShadows) ? Boolean(object.castShadows) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentBasicMaterial): unknown {
    const obj: any = {};
    message.alphaTest !== undefined && (obj.alphaTest = message.alphaTest);
    message.texture !== undefined && (obj.texture = message.texture);
    message.castShadows !== undefined && (obj.castShadows = message.castShadows);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentBasicMaterial>, I>>(
    base?: I,
  ): ECS6ComponentBasicMaterial {
    return ECS6ComponentBasicMaterial.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentBasicMaterial>, I>>(
    object: I,
  ): ECS6ComponentBasicMaterial {
    const message = createBaseECS6ComponentBasicMaterial();
    message.alphaTest = object.alphaTest ?? undefined;
    message.texture = object.texture ?? undefined;
    message.castShadows = object.castShadows ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentUuidCallback(): ECS6ComponentUuidCallback {
  return {
    button: undefined,
    hoverText: undefined,
    distance: undefined,
    showFeedback: undefined,
    type: undefined,
    uuid: undefined,
  };
}

export namespace ECS6ComponentUuidCallback {
  export function encode(message: ECS6ComponentUuidCallback, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.button !== undefined) {
      writer.uint32(10).string(message.button);
    }
    if (message.hoverText !== undefined) {
      writer.uint32(18).string(message.hoverText);
    }
    if (message.distance !== undefined) {
      writer.uint32(29).float(message.distance);
    }
    if (message.showFeedback !== undefined) {
      writer.uint32(32).bool(message.showFeedback);
    }
    if (message.type !== undefined) {
      writer.uint32(42).string(message.type);
    }
    if (message.uuid !== undefined) {
      writer.uint32(50).string(message.uuid);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentUuidCallback {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentUuidCallback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.button = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hoverText = reader.string();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.distance = reader.float();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.showFeedback = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.type = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.uuid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentUuidCallback {
    return {
      button: isSet(object.button) ? String(object.button) : undefined,
      hoverText: isSet(object.hoverText) ? String(object.hoverText) : undefined,
      distance: isSet(object.distance) ? Number(object.distance) : undefined,
      showFeedback: isSet(object.showFeedback) ? Boolean(object.showFeedback) : undefined,
      type: isSet(object.type) ? String(object.type) : undefined,
      uuid: isSet(object.uuid) ? String(object.uuid) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentUuidCallback): unknown {
    const obj: any = {};
    message.button !== undefined && (obj.button = message.button);
    message.hoverText !== undefined && (obj.hoverText = message.hoverText);
    message.distance !== undefined && (obj.distance = message.distance);
    message.showFeedback !== undefined && (obj.showFeedback = message.showFeedback);
    message.type !== undefined && (obj.type = message.type);
    message.uuid !== undefined && (obj.uuid = message.uuid);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentUuidCallback>, I>>(
    base?: I,
  ): ECS6ComponentUuidCallback {
    return ECS6ComponentUuidCallback.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentUuidCallback>, I>>(
    object: I,
  ): ECS6ComponentUuidCallback {
    const message = createBaseECS6ComponentUuidCallback();
    message.button = object.button ?? undefined;
    message.hoverText = object.hoverText ?? undefined;
    message.distance = object.distance ?? undefined;
    message.showFeedback = object.showFeedback ?? undefined;
    message.type = object.type ?? undefined;
    message.uuid = object.uuid ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentSmartItem(): ECS6ComponentSmartItem {
  return {};
}

export namespace ECS6ComponentSmartItem {
  export function encode(_: ECS6ComponentSmartItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentSmartItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentSmartItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(_: any): ECS6ComponentSmartItem {
    return {};
  }

  export function toJSON(_: ECS6ComponentSmartItem): unknown {
    const obj: any = {};
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentSmartItem>, I>>(base?: I): ECS6ComponentSmartItem {
    return ECS6ComponentSmartItem.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentSmartItem>, I>>(_: I): ECS6ComponentSmartItem {
    const message = createBaseECS6ComponentSmartItem();
    return message;
  }
}

function createBaseECS6ComponentVideoClip(): ECS6ComponentVideoClip {
  return { url: undefined };
}

export namespace ECS6ComponentVideoClip {
  export function encode(message: ECS6ComponentVideoClip, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.url !== undefined) {
      writer.uint32(10).string(message.url);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentVideoClip {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentVideoClip();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentVideoClip {
    return { url: isSet(object.url) ? String(object.url) : undefined };
  }

  export function toJSON(message: ECS6ComponentVideoClip): unknown {
    const obj: any = {};
    message.url !== undefined && (obj.url = message.url);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentVideoClip>, I>>(base?: I): ECS6ComponentVideoClip {
    return ECS6ComponentVideoClip.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentVideoClip>, I>>(
    object: I,
  ): ECS6ComponentVideoClip {
    const message = createBaseECS6ComponentVideoClip();
    message.url = object.url ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentVideoTexture(): ECS6ComponentVideoTexture {
  return {
    samplingMode: undefined,
    wrap: undefined,
    volume: undefined,
    playbackRate: undefined,
    seek: undefined,
    playing: undefined,
    loop: undefined,
    videoClipId: undefined,
  };
}

export namespace ECS6ComponentVideoTexture {
  export function encode(message: ECS6ComponentVideoTexture, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.samplingMode !== undefined) {
      writer.uint32(8).int32(message.samplingMode);
    }
    if (message.wrap !== undefined) {
      writer.uint32(16).int32(message.wrap);
    }
    if (message.volume !== undefined) {
      writer.uint32(29).float(message.volume);
    }
    if (message.playbackRate !== undefined) {
      writer.uint32(37).float(message.playbackRate);
    }
    if (message.seek !== undefined) {
      writer.uint32(45).float(message.seek);
    }
    if (message.playing !== undefined) {
      writer.uint32(48).bool(message.playing);
    }
    if (message.loop !== undefined) {
      writer.uint32(56).bool(message.loop);
    }
    if (message.videoClipId !== undefined) {
      writer.uint32(66).string(message.videoClipId);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentVideoTexture {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentVideoTexture();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.samplingMode = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.wrap = reader.int32();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.volume = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.playbackRate = reader.float();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.seek = reader.float();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.playing = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.loop = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.videoClipId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentVideoTexture {
    return {
      samplingMode: isSet(object.samplingMode) ? Number(object.samplingMode) : undefined,
      wrap: isSet(object.wrap) ? Number(object.wrap) : undefined,
      volume: isSet(object.volume) ? Number(object.volume) : undefined,
      playbackRate: isSet(object.playbackRate) ? Number(object.playbackRate) : undefined,
      seek: isSet(object.seek) ? Number(object.seek) : undefined,
      playing: isSet(object.playing) ? Boolean(object.playing) : undefined,
      loop: isSet(object.loop) ? Boolean(object.loop) : undefined,
      videoClipId: isSet(object.videoClipId) ? String(object.videoClipId) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentVideoTexture): unknown {
    const obj: any = {};
    message.samplingMode !== undefined && (obj.samplingMode = Math.round(message.samplingMode));
    message.wrap !== undefined && (obj.wrap = Math.round(message.wrap));
    message.volume !== undefined && (obj.volume = message.volume);
    message.playbackRate !== undefined && (obj.playbackRate = message.playbackRate);
    message.seek !== undefined && (obj.seek = message.seek);
    message.playing !== undefined && (obj.playing = message.playing);
    message.loop !== undefined && (obj.loop = message.loop);
    message.videoClipId !== undefined && (obj.videoClipId = message.videoClipId);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentVideoTexture>, I>>(
    base?: I,
  ): ECS6ComponentVideoTexture {
    return ECS6ComponentVideoTexture.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentVideoTexture>, I>>(
    object: I,
  ): ECS6ComponentVideoTexture {
    const message = createBaseECS6ComponentVideoTexture();
    message.samplingMode = object.samplingMode ?? undefined;
    message.wrap = object.wrap ?? undefined;
    message.volume = object.volume ?? undefined;
    message.playbackRate = object.playbackRate ?? undefined;
    message.seek = object.seek ?? undefined;
    message.playing = object.playing ?? undefined;
    message.loop = object.loop ?? undefined;
    message.videoClipId = object.videoClipId ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentCameraModeArea(): ECS6ComponentCameraModeArea {
  return { area: undefined, cameraMode: 0 };
}

export namespace ECS6ComponentCameraModeArea {
  export function encode(message: ECS6ComponentCameraModeArea, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.area !== undefined) {
      Area.encode(message.area, writer.uint32(10).fork()).ldelim();
    }
    if (message.cameraMode !== 0) {
      writer.uint32(16).int32(message.cameraMode);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentCameraModeArea {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentCameraModeArea();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.area = Area.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.cameraMode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentCameraModeArea {
    return {
      area: isSet(object.area) ? Area.fromJSON(object.area) : undefined,
      cameraMode: isSet(object.cameraMode) ? eCS6ComponentCameraModeArea_CameraModeFromJSON(object.cameraMode) : 0,
    };
  }

  export function toJSON(message: ECS6ComponentCameraModeArea): unknown {
    const obj: any = {};
    message.area !== undefined && (obj.area = message.area ? Area.toJSON(message.area) : undefined);
    message.cameraMode !== undefined &&
      (obj.cameraMode = eCS6ComponentCameraModeArea_CameraModeToJSON(message.cameraMode));
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentCameraModeArea>, I>>(
    base?: I,
  ): ECS6ComponentCameraModeArea {
    return ECS6ComponentCameraModeArea.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentCameraModeArea>, I>>(
    object: I,
  ): ECS6ComponentCameraModeArea {
    const message = createBaseECS6ComponentCameraModeArea();
    message.area = (object.area !== undefined && object.area !== null) ? Area.fromPartial(object.area) : undefined;
    message.cameraMode = object.cameraMode ?? 0;
    return message;
  }
}

function createBaseECS6ComponentAvatarTexture(): ECS6ComponentAvatarTexture {
  return { samplingMode: undefined, wrap: undefined, hasAlpha: undefined, userId: undefined };
}

export namespace ECS6ComponentAvatarTexture {
  export function encode(message: ECS6ComponentAvatarTexture, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.samplingMode !== undefined) {
      writer.uint32(8).int32(message.samplingMode);
    }
    if (message.wrap !== undefined) {
      writer.uint32(16).int32(message.wrap);
    }
    if (message.hasAlpha !== undefined) {
      writer.uint32(24).bool(message.hasAlpha);
    }
    if (message.userId !== undefined) {
      writer.uint32(34).string(message.userId);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentAvatarTexture {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentAvatarTexture();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.samplingMode = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.wrap = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hasAlpha = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentAvatarTexture {
    return {
      samplingMode: isSet(object.samplingMode) ? Number(object.samplingMode) : undefined,
      wrap: isSet(object.wrap) ? Number(object.wrap) : undefined,
      hasAlpha: isSet(object.hasAlpha) ? Boolean(object.hasAlpha) : undefined,
      userId: isSet(object.userId) ? String(object.userId) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentAvatarTexture): unknown {
    const obj: any = {};
    message.samplingMode !== undefined && (obj.samplingMode = Math.round(message.samplingMode));
    message.wrap !== undefined && (obj.wrap = Math.round(message.wrap));
    message.hasAlpha !== undefined && (obj.hasAlpha = message.hasAlpha);
    message.userId !== undefined && (obj.userId = message.userId);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentAvatarTexture>, I>>(
    base?: I,
  ): ECS6ComponentAvatarTexture {
    return ECS6ComponentAvatarTexture.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentAvatarTexture>, I>>(
    object: I,
  ): ECS6ComponentAvatarTexture {
    const message = createBaseECS6ComponentAvatarTexture();
    message.samplingMode = object.samplingMode ?? undefined;
    message.wrap = object.wrap ?? undefined;
    message.hasAlpha = object.hasAlpha ?? undefined;
    message.userId = object.userId ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentAudioClip(): ECS6ComponentAudioClip {
  return { url: undefined, loop: undefined, loadingCompleteEventId: undefined, volume: undefined };
}

export namespace ECS6ComponentAudioClip {
  export function encode(message: ECS6ComponentAudioClip, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.url !== undefined) {
      writer.uint32(10).string(message.url);
    }
    if (message.loop !== undefined) {
      writer.uint32(16).bool(message.loop);
    }
    if (message.loadingCompleteEventId !== undefined) {
      writer.uint32(26).string(message.loadingCompleteEventId);
    }
    if (message.volume !== undefined) {
      writer.uint32(37).float(message.volume);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentAudioClip {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentAudioClip();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.loop = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.loadingCompleteEventId = reader.string();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.volume = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentAudioClip {
    return {
      url: isSet(object.url) ? String(object.url) : undefined,
      loop: isSet(object.loop) ? Boolean(object.loop) : undefined,
      loadingCompleteEventId: isSet(object.loadingCompleteEventId) ? String(object.loadingCompleteEventId) : undefined,
      volume: isSet(object.volume) ? Number(object.volume) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentAudioClip): unknown {
    const obj: any = {};
    message.url !== undefined && (obj.url = message.url);
    message.loop !== undefined && (obj.loop = message.loop);
    message.loadingCompleteEventId !== undefined && (obj.loadingCompleteEventId = message.loadingCompleteEventId);
    message.volume !== undefined && (obj.volume = message.volume);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentAudioClip>, I>>(base?: I): ECS6ComponentAudioClip {
    return ECS6ComponentAudioClip.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentAudioClip>, I>>(
    object: I,
  ): ECS6ComponentAudioClip {
    const message = createBaseECS6ComponentAudioClip();
    message.url = object.url ?? undefined;
    message.loop = object.loop ?? undefined;
    message.loadingCompleteEventId = object.loadingCompleteEventId ?? undefined;
    message.volume = object.volume ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentAudioSource(): ECS6ComponentAudioSource {
  return {
    audioClipId: undefined,
    loop: undefined,
    volume: undefined,
    playing: undefined,
    pitch: undefined,
    playedAtTimestamp: undefined,
  };
}

export namespace ECS6ComponentAudioSource {
  export function encode(message: ECS6ComponentAudioSource, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.audioClipId !== undefined) {
      writer.uint32(10).string(message.audioClipId);
    }
    if (message.loop !== undefined) {
      writer.uint32(16).bool(message.loop);
    }
    if (message.volume !== undefined) {
      writer.uint32(29).float(message.volume);
    }
    if (message.playing !== undefined) {
      writer.uint32(32).bool(message.playing);
    }
    if (message.pitch !== undefined) {
      writer.uint32(45).float(message.pitch);
    }
    if (message.playedAtTimestamp !== undefined) {
      writer.uint32(48).int32(message.playedAtTimestamp);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentAudioSource {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentAudioSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.audioClipId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.loop = reader.bool();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.volume = reader.float();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.playing = reader.bool();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.pitch = reader.float();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.playedAtTimestamp = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentAudioSource {
    return {
      audioClipId: isSet(object.audioClipId) ? String(object.audioClipId) : undefined,
      loop: isSet(object.loop) ? Boolean(object.loop) : undefined,
      volume: isSet(object.volume) ? Number(object.volume) : undefined,
      playing: isSet(object.playing) ? Boolean(object.playing) : undefined,
      pitch: isSet(object.pitch) ? Number(object.pitch) : undefined,
      playedAtTimestamp: isSet(object.playedAtTimestamp) ? Number(object.playedAtTimestamp) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentAudioSource): unknown {
    const obj: any = {};
    message.audioClipId !== undefined && (obj.audioClipId = message.audioClipId);
    message.loop !== undefined && (obj.loop = message.loop);
    message.volume !== undefined && (obj.volume = message.volume);
    message.playing !== undefined && (obj.playing = message.playing);
    message.pitch !== undefined && (obj.pitch = message.pitch);
    message.playedAtTimestamp !== undefined && (obj.playedAtTimestamp = Math.round(message.playedAtTimestamp));
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentAudioSource>, I>>(
    base?: I,
  ): ECS6ComponentAudioSource {
    return ECS6ComponentAudioSource.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentAudioSource>, I>>(
    object: I,
  ): ECS6ComponentAudioSource {
    const message = createBaseECS6ComponentAudioSource();
    message.audioClipId = object.audioClipId ?? undefined;
    message.loop = object.loop ?? undefined;
    message.volume = object.volume ?? undefined;
    message.playing = object.playing ?? undefined;
    message.pitch = object.pitch ?? undefined;
    message.playedAtTimestamp = object.playedAtTimestamp ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentAudioStream(): ECS6ComponentAudioStream {
  return { url: undefined, playing: undefined, volume: undefined };
}

export namespace ECS6ComponentAudioStream {
  export function encode(message: ECS6ComponentAudioStream, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.url !== undefined) {
      writer.uint32(10).string(message.url);
    }
    if (message.playing !== undefined) {
      writer.uint32(16).bool(message.playing);
    }
    if (message.volume !== undefined) {
      writer.uint32(29).float(message.volume);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentAudioStream {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentAudioStream();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.playing = reader.bool();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.volume = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentAudioStream {
    return {
      url: isSet(object.url) ? String(object.url) : undefined,
      playing: isSet(object.playing) ? Boolean(object.playing) : undefined,
      volume: isSet(object.volume) ? Number(object.volume) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentAudioStream): unknown {
    const obj: any = {};
    message.url !== undefined && (obj.url = message.url);
    message.playing !== undefined && (obj.playing = message.playing);
    message.volume !== undefined && (obj.volume = message.volume);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentAudioStream>, I>>(
    base?: I,
  ): ECS6ComponentAudioStream {
    return ECS6ComponentAudioStream.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentAudioStream>, I>>(
    object: I,
  ): ECS6ComponentAudioStream {
    const message = createBaseECS6ComponentAudioStream();
    message.url = object.url ?? undefined;
    message.playing = object.playing ?? undefined;
    message.volume = object.volume ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentAvatarShape(): ECS6ComponentAvatarShape {
  return {
    id: undefined,
    name: undefined,
    expressionTriggerId: undefined,
    expressionTriggerTimestamp: undefined,
    bodyShape: undefined,
    wearables: [],
    emotes: [],
    skinColor: undefined,
    hairColor: undefined,
    eyeColor: undefined,
    useDummyModel: undefined,
    talking: undefined,
  };
}

export namespace ECS6ComponentAvatarShape {
  export function encode(message: ECS6ComponentAvatarShape, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.expressionTriggerId !== undefined) {
      writer.uint32(26).string(message.expressionTriggerId);
    }
    if (message.expressionTriggerTimestamp !== undefined) {
      writer.uint32(32).int64(message.expressionTriggerTimestamp);
    }
    if (message.bodyShape !== undefined) {
      writer.uint32(42).string(message.bodyShape);
    }
    for (const v of message.wearables) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.emotes) {
      ECS6ComponentAvatarShape_Emote.encode(v!, writer.uint32(58).fork()).ldelim();
    }
    if (message.skinColor !== undefined) {
      ECS6Color4.encode(message.skinColor, writer.uint32(66).fork()).ldelim();
    }
    if (message.hairColor !== undefined) {
      ECS6Color4.encode(message.hairColor, writer.uint32(74).fork()).ldelim();
    }
    if (message.eyeColor !== undefined) {
      ECS6Color4.encode(message.eyeColor, writer.uint32(82).fork()).ldelim();
    }
    if (message.useDummyModel !== undefined) {
      writer.uint32(88).bool(message.useDummyModel);
    }
    if (message.talking !== undefined) {
      writer.uint32(96).bool(message.talking);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentAvatarShape {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentAvatarShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.expressionTriggerId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.expressionTriggerTimestamp = longToNumber(reader.int64() as Long);
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.bodyShape = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.wearables.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.emotes.push(ECS6ComponentAvatarShape_Emote.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.skinColor = ECS6Color4.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.hairColor = ECS6Color4.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.eyeColor = ECS6Color4.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.useDummyModel = reader.bool();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.talking = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentAvatarShape {
    return {
      id: isSet(object.id) ? String(object.id) : undefined,
      name: isSet(object.name) ? String(object.name) : undefined,
      expressionTriggerId: isSet(object.expressionTriggerId) ? String(object.expressionTriggerId) : undefined,
      expressionTriggerTimestamp: isSet(object.expressionTriggerTimestamp)
        ? Number(object.expressionTriggerTimestamp)
        : undefined,
      bodyShape: isSet(object.bodyShape) ? String(object.bodyShape) : undefined,
      wearables: Array.isArray(object?.wearables) ? object.wearables.map((e: any) => String(e)) : [],
      emotes: Array.isArray(object?.emotes)
        ? object.emotes.map((e: any) => ECS6ComponentAvatarShape_Emote.fromJSON(e))
        : [],
      skinColor: isSet(object.skinColor) ? ECS6Color4.fromJSON(object.skinColor) : undefined,
      hairColor: isSet(object.hairColor) ? ECS6Color4.fromJSON(object.hairColor) : undefined,
      eyeColor: isSet(object.eyeColor) ? ECS6Color4.fromJSON(object.eyeColor) : undefined,
      useDummyModel: isSet(object.useDummyModel) ? Boolean(object.useDummyModel) : undefined,
      talking: isSet(object.talking) ? Boolean(object.talking) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentAvatarShape): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.name !== undefined && (obj.name = message.name);
    message.expressionTriggerId !== undefined && (obj.expressionTriggerId = message.expressionTriggerId);
    message.expressionTriggerTimestamp !== undefined &&
      (obj.expressionTriggerTimestamp = Math.round(message.expressionTriggerTimestamp));
    message.bodyShape !== undefined && (obj.bodyShape = message.bodyShape);
    if (message.wearables) {
      obj.wearables = message.wearables.map((e) => e);
    } else {
      obj.wearables = [];
    }
    if (message.emotes) {
      obj.emotes = message.emotes.map((e) => e ? ECS6ComponentAvatarShape_Emote.toJSON(e) : undefined);
    } else {
      obj.emotes = [];
    }
    message.skinColor !== undefined &&
      (obj.skinColor = message.skinColor ? ECS6Color4.toJSON(message.skinColor) : undefined);
    message.hairColor !== undefined &&
      (obj.hairColor = message.hairColor ? ECS6Color4.toJSON(message.hairColor) : undefined);
    message.eyeColor !== undefined &&
      (obj.eyeColor = message.eyeColor ? ECS6Color4.toJSON(message.eyeColor) : undefined);
    message.useDummyModel !== undefined && (obj.useDummyModel = message.useDummyModel);
    message.talking !== undefined && (obj.talking = message.talking);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentAvatarShape>, I>>(
    base?: I,
  ): ECS6ComponentAvatarShape {
    return ECS6ComponentAvatarShape.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentAvatarShape>, I>>(
    object: I,
  ): ECS6ComponentAvatarShape {
    const message = createBaseECS6ComponentAvatarShape();
    message.id = object.id ?? undefined;
    message.name = object.name ?? undefined;
    message.expressionTriggerId = object.expressionTriggerId ?? undefined;
    message.expressionTriggerTimestamp = object.expressionTriggerTimestamp ?? undefined;
    message.bodyShape = object.bodyShape ?? undefined;
    message.wearables = object.wearables?.map((e) => e) || [];
    message.emotes = object.emotes?.map((e) => ECS6ComponentAvatarShape_Emote.fromPartial(e)) || [];
    message.skinColor = (object.skinColor !== undefined && object.skinColor !== null)
      ? ECS6Color4.fromPartial(object.skinColor)
      : undefined;
    message.hairColor = (object.hairColor !== undefined && object.hairColor !== null)
      ? ECS6Color4.fromPartial(object.hairColor)
      : undefined;
    message.eyeColor = (object.eyeColor !== undefined && object.eyeColor !== null)
      ? ECS6Color4.fromPartial(object.eyeColor)
      : undefined;
    message.useDummyModel = object.useDummyModel ?? undefined;
    message.talking = object.talking ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentAvatarShape_Emote(): ECS6ComponentAvatarShape_Emote {
  return { slot: undefined, urn: undefined };
}

export namespace ECS6ComponentAvatarShape_Emote {
  export function encode(
    message: ECS6ComponentAvatarShape_Emote,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.slot !== undefined) {
      writer.uint32(8).int32(message.slot);
    }
    if (message.urn !== undefined) {
      writer.uint32(18).string(message.urn);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentAvatarShape_Emote {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentAvatarShape_Emote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.slot = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.urn = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentAvatarShape_Emote {
    return {
      slot: isSet(object.slot) ? Number(object.slot) : undefined,
      urn: isSet(object.urn) ? String(object.urn) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentAvatarShape_Emote): unknown {
    const obj: any = {};
    message.slot !== undefined && (obj.slot = Math.round(message.slot));
    message.urn !== undefined && (obj.urn = message.urn);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentAvatarShape_Emote>, I>>(
    base?: I,
  ): ECS6ComponentAvatarShape_Emote {
    return ECS6ComponentAvatarShape_Emote.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentAvatarShape_Emote>, I>>(
    object: I,
  ): ECS6ComponentAvatarShape_Emote {
    const message = createBaseECS6ComponentAvatarShape_Emote();
    message.slot = object.slot ?? undefined;
    message.urn = object.urn ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentGizmos(): ECS6ComponentGizmos {
  return {
    position: undefined,
    rotation: undefined,
    scale: undefined,
    cycle: undefined,
    selectedGizmo: undefined,
    localReference: undefined,
  };
}

export namespace ECS6ComponentGizmos {
  export function encode(message: ECS6ComponentGizmos, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.position !== undefined) {
      writer.uint32(8).bool(message.position);
    }
    if (message.rotation !== undefined) {
      writer.uint32(16).bool(message.rotation);
    }
    if (message.scale !== undefined) {
      writer.uint32(24).bool(message.scale);
    }
    if (message.cycle !== undefined) {
      writer.uint32(32).bool(message.cycle);
    }
    if (message.selectedGizmo !== undefined) {
      writer.uint32(42).string(message.selectedGizmo);
    }
    if (message.localReference !== undefined) {
      writer.uint32(48).bool(message.localReference);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentGizmos {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentGizmos();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.position = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.rotation = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.scale = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.cycle = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.selectedGizmo = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.localReference = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentGizmos {
    return {
      position: isSet(object.position) ? Boolean(object.position) : undefined,
      rotation: isSet(object.rotation) ? Boolean(object.rotation) : undefined,
      scale: isSet(object.scale) ? Boolean(object.scale) : undefined,
      cycle: isSet(object.cycle) ? Boolean(object.cycle) : undefined,
      selectedGizmo: isSet(object.selectedGizmo) ? String(object.selectedGizmo) : undefined,
      localReference: isSet(object.localReference) ? Boolean(object.localReference) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentGizmos): unknown {
    const obj: any = {};
    message.position !== undefined && (obj.position = message.position);
    message.rotation !== undefined && (obj.rotation = message.rotation);
    message.scale !== undefined && (obj.scale = message.scale);
    message.cycle !== undefined && (obj.cycle = message.cycle);
    message.selectedGizmo !== undefined && (obj.selectedGizmo = message.selectedGizmo);
    message.localReference !== undefined && (obj.localReference = message.localReference);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentGizmos>, I>>(base?: I): ECS6ComponentGizmos {
    return ECS6ComponentGizmos.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentGizmos>, I>>(object: I): ECS6ComponentGizmos {
    const message = createBaseECS6ComponentGizmos();
    message.position = object.position ?? undefined;
    message.rotation = object.rotation ?? undefined;
    message.scale = object.scale ?? undefined;
    message.cycle = object.cycle ?? undefined;
    message.selectedGizmo = object.selectedGizmo ?? undefined;
    message.localReference = object.localReference ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentUiShape(): ECS6ComponentUiShape {
  return {
    name: undefined,
    visible: undefined,
    opacity: undefined,
    hAlign: undefined,
    vAlign: undefined,
    width: undefined,
    height: undefined,
    positionX: undefined,
    positionY: undefined,
    isPointerBlocker: undefined,
    parentComponent: undefined,
  };
}

export namespace ECS6ComponentUiShape {
  export function encode(message: ECS6ComponentUiShape, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.visible !== undefined) {
      writer.uint32(16).bool(message.visible);
    }
    if (message.opacity !== undefined) {
      writer.uint32(29).float(message.opacity);
    }
    if (message.hAlign !== undefined) {
      writer.uint32(34).string(message.hAlign);
    }
    if (message.vAlign !== undefined) {
      writer.uint32(42).string(message.vAlign);
    }
    if (message.width !== undefined) {
      UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
    }
    if (message.height !== undefined) {
      UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
    }
    if (message.positionX !== undefined) {
      UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
    }
    if (message.positionY !== undefined) {
      UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(80).bool(message.isPointerBlocker);
    }
    if (message.parentComponent !== undefined) {
      writer.uint32(90).string(message.parentComponent);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentUiShape {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentUiShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.opacity = reader.float();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.hAlign = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.vAlign = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.width = UiValue.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.height = UiValue.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.positionX = UiValue.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.positionY = UiValue.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.parentComponent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentUiShape {
    return {
      name: isSet(object.name) ? String(object.name) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
      hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
      vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
      width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
      height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
      positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
      positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentUiShape): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.visible !== undefined && (obj.visible = message.visible);
    message.opacity !== undefined && (obj.opacity = message.opacity);
    message.hAlign !== undefined && (obj.hAlign = message.hAlign);
    message.vAlign !== undefined && (obj.vAlign = message.vAlign);
    message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
    message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
    message.positionX !== undefined &&
      (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
    message.positionY !== undefined &&
      (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentUiShape>, I>>(base?: I): ECS6ComponentUiShape {
    return ECS6ComponentUiShape.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentUiShape>, I>>(object: I): ECS6ComponentUiShape {
    const message = createBaseECS6ComponentUiShape();
    message.name = object.name ?? undefined;
    message.visible = object.visible ?? undefined;
    message.opacity = object.opacity ?? undefined;
    message.hAlign = object.hAlign ?? undefined;
    message.vAlign = object.vAlign ?? undefined;
    message.width = (object.width !== undefined && object.width !== null)
      ? UiValue.fromPartial(object.width)
      : undefined;
    message.height = (object.height !== undefined && object.height !== null)
      ? UiValue.fromPartial(object.height)
      : undefined;
    message.positionX = (object.positionX !== undefined && object.positionX !== null)
      ? UiValue.fromPartial(object.positionX)
      : undefined;
    message.positionY = (object.positionY !== undefined && object.positionY !== null)
      ? UiValue.fromPartial(object.positionY)
      : undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.parentComponent = object.parentComponent ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentUiContainerRect(): ECS6ComponentUiContainerRect {
  return {
    name: undefined,
    visible: undefined,
    opacity: undefined,
    hAlign: undefined,
    vAlign: undefined,
    width: undefined,
    height: undefined,
    positionX: undefined,
    positionY: undefined,
    isPointerBlocker: undefined,
    parentComponent: undefined,
    thickness: undefined,
    color: undefined,
    alignmentUsesSize: undefined,
  };
}

export namespace ECS6ComponentUiContainerRect {
  export function encode(message: ECS6ComponentUiContainerRect, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.visible !== undefined) {
      writer.uint32(16).bool(message.visible);
    }
    if (message.opacity !== undefined) {
      writer.uint32(29).float(message.opacity);
    }
    if (message.hAlign !== undefined) {
      writer.uint32(34).string(message.hAlign);
    }
    if (message.vAlign !== undefined) {
      writer.uint32(42).string(message.vAlign);
    }
    if (message.width !== undefined) {
      UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
    }
    if (message.height !== undefined) {
      UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
    }
    if (message.positionX !== undefined) {
      UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
    }
    if (message.positionY !== undefined) {
      UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(80).bool(message.isPointerBlocker);
    }
    if (message.parentComponent !== undefined) {
      writer.uint32(114).string(message.parentComponent);
    }
    if (message.thickness !== undefined) {
      writer.uint32(93).float(message.thickness);
    }
    if (message.color !== undefined) {
      ECS6Color4.encode(message.color, writer.uint32(98).fork()).ldelim();
    }
    if (message.alignmentUsesSize !== undefined) {
      writer.uint32(104).bool(message.alignmentUsesSize);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentUiContainerRect {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentUiContainerRect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.opacity = reader.float();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.hAlign = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.vAlign = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.width = UiValue.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.height = UiValue.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.positionX = UiValue.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.positionY = UiValue.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.parentComponent = reader.string();
          continue;
        case 11:
          if (tag !== 93) {
            break;
          }

          message.thickness = reader.float();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.color = ECS6Color4.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.alignmentUsesSize = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentUiContainerRect {
    return {
      name: isSet(object.name) ? String(object.name) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
      hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
      vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
      width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
      height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
      positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
      positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
      thickness: isSet(object.thickness) ? Number(object.thickness) : undefined,
      color: isSet(object.color) ? ECS6Color4.fromJSON(object.color) : undefined,
      alignmentUsesSize: isSet(object.alignmentUsesSize) ? Boolean(object.alignmentUsesSize) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentUiContainerRect): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.visible !== undefined && (obj.visible = message.visible);
    message.opacity !== undefined && (obj.opacity = message.opacity);
    message.hAlign !== undefined && (obj.hAlign = message.hAlign);
    message.vAlign !== undefined && (obj.vAlign = message.vAlign);
    message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
    message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
    message.positionX !== undefined &&
      (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
    message.positionY !== undefined &&
      (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
    message.thickness !== undefined && (obj.thickness = message.thickness);
    message.color !== undefined && (obj.color = message.color ? ECS6Color4.toJSON(message.color) : undefined);
    message.alignmentUsesSize !== undefined && (obj.alignmentUsesSize = message.alignmentUsesSize);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentUiContainerRect>, I>>(
    base?: I,
  ): ECS6ComponentUiContainerRect {
    return ECS6ComponentUiContainerRect.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentUiContainerRect>, I>>(
    object: I,
  ): ECS6ComponentUiContainerRect {
    const message = createBaseECS6ComponentUiContainerRect();
    message.name = object.name ?? undefined;
    message.visible = object.visible ?? undefined;
    message.opacity = object.opacity ?? undefined;
    message.hAlign = object.hAlign ?? undefined;
    message.vAlign = object.vAlign ?? undefined;
    message.width = (object.width !== undefined && object.width !== null)
      ? UiValue.fromPartial(object.width)
      : undefined;
    message.height = (object.height !== undefined && object.height !== null)
      ? UiValue.fromPartial(object.height)
      : undefined;
    message.positionX = (object.positionX !== undefined && object.positionX !== null)
      ? UiValue.fromPartial(object.positionX)
      : undefined;
    message.positionY = (object.positionY !== undefined && object.positionY !== null)
      ? UiValue.fromPartial(object.positionY)
      : undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.parentComponent = object.parentComponent ?? undefined;
    message.thickness = object.thickness ?? undefined;
    message.color = (object.color !== undefined && object.color !== null)
      ? ECS6Color4.fromPartial(object.color)
      : undefined;
    message.alignmentUsesSize = object.alignmentUsesSize ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentUiContainerStack(): ECS6ComponentUiContainerStack {
  return {
    name: undefined,
    visible: undefined,
    opacity: undefined,
    hAlign: undefined,
    vAlign: undefined,
    width: undefined,
    height: undefined,
    positionX: undefined,
    positionY: undefined,
    isPointerBlocker: undefined,
    parentComponent: undefined,
    adaptWidth: undefined,
    adaptHeight: undefined,
    color: undefined,
    stackOrientation: undefined,
    spacing: undefined,
  };
}

export namespace ECS6ComponentUiContainerStack {
  export function encode(message: ECS6ComponentUiContainerStack, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.visible !== undefined) {
      writer.uint32(16).bool(message.visible);
    }
    if (message.opacity !== undefined) {
      writer.uint32(29).float(message.opacity);
    }
    if (message.hAlign !== undefined) {
      writer.uint32(34).string(message.hAlign);
    }
    if (message.vAlign !== undefined) {
      writer.uint32(42).string(message.vAlign);
    }
    if (message.width !== undefined) {
      UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
    }
    if (message.height !== undefined) {
      UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
    }
    if (message.positionX !== undefined) {
      UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
    }
    if (message.positionY !== undefined) {
      UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(80).bool(message.isPointerBlocker);
    }
    if (message.parentComponent !== undefined) {
      writer.uint32(130).string(message.parentComponent);
    }
    if (message.adaptWidth !== undefined) {
      writer.uint32(88).bool(message.adaptWidth);
    }
    if (message.adaptHeight !== undefined) {
      writer.uint32(96).bool(message.adaptHeight);
    }
    if (message.color !== undefined) {
      ECS6Color4.encode(message.color, writer.uint32(106).fork()).ldelim();
    }
    if (message.stackOrientation !== undefined) {
      writer.uint32(112).int32(message.stackOrientation);
    }
    if (message.spacing !== undefined) {
      writer.uint32(125).float(message.spacing);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentUiContainerStack {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentUiContainerStack();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.opacity = reader.float();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.hAlign = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.vAlign = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.width = UiValue.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.height = UiValue.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.positionX = UiValue.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.positionY = UiValue.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.parentComponent = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.adaptWidth = reader.bool();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.adaptHeight = reader.bool();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.color = ECS6Color4.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.stackOrientation = reader.int32() as any;
          continue;
        case 15:
          if (tag !== 125) {
            break;
          }

          message.spacing = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentUiContainerStack {
    return {
      name: isSet(object.name) ? String(object.name) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
      hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
      vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
      width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
      height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
      positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
      positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
      adaptWidth: isSet(object.adaptWidth) ? Boolean(object.adaptWidth) : undefined,
      adaptHeight: isSet(object.adaptHeight) ? Boolean(object.adaptHeight) : undefined,
      color: isSet(object.color) ? ECS6Color4.fromJSON(object.color) : undefined,
      stackOrientation: isSet(object.stackOrientation)
        ? eCS6ComponentUiContainerStack_UIStackOrientationFromJSON(object.stackOrientation)
        : undefined,
      spacing: isSet(object.spacing) ? Number(object.spacing) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentUiContainerStack): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.visible !== undefined && (obj.visible = message.visible);
    message.opacity !== undefined && (obj.opacity = message.opacity);
    message.hAlign !== undefined && (obj.hAlign = message.hAlign);
    message.vAlign !== undefined && (obj.vAlign = message.vAlign);
    message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
    message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
    message.positionX !== undefined &&
      (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
    message.positionY !== undefined &&
      (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
    message.adaptWidth !== undefined && (obj.adaptWidth = message.adaptWidth);
    message.adaptHeight !== undefined && (obj.adaptHeight = message.adaptHeight);
    message.color !== undefined && (obj.color = message.color ? ECS6Color4.toJSON(message.color) : undefined);
    message.stackOrientation !== undefined &&
      (obj.stackOrientation = message.stackOrientation !== undefined
        ? eCS6ComponentUiContainerStack_UIStackOrientationToJSON(message.stackOrientation)
        : undefined);
    message.spacing !== undefined && (obj.spacing = message.spacing);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentUiContainerStack>, I>>(
    base?: I,
  ): ECS6ComponentUiContainerStack {
    return ECS6ComponentUiContainerStack.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentUiContainerStack>, I>>(
    object: I,
  ): ECS6ComponentUiContainerStack {
    const message = createBaseECS6ComponentUiContainerStack();
    message.name = object.name ?? undefined;
    message.visible = object.visible ?? undefined;
    message.opacity = object.opacity ?? undefined;
    message.hAlign = object.hAlign ?? undefined;
    message.vAlign = object.vAlign ?? undefined;
    message.width = (object.width !== undefined && object.width !== null)
      ? UiValue.fromPartial(object.width)
      : undefined;
    message.height = (object.height !== undefined && object.height !== null)
      ? UiValue.fromPartial(object.height)
      : undefined;
    message.positionX = (object.positionX !== undefined && object.positionX !== null)
      ? UiValue.fromPartial(object.positionX)
      : undefined;
    message.positionY = (object.positionY !== undefined && object.positionY !== null)
      ? UiValue.fromPartial(object.positionY)
      : undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.parentComponent = object.parentComponent ?? undefined;
    message.adaptWidth = object.adaptWidth ?? undefined;
    message.adaptHeight = object.adaptHeight ?? undefined;
    message.color = (object.color !== undefined && object.color !== null)
      ? ECS6Color4.fromPartial(object.color)
      : undefined;
    message.stackOrientation = object.stackOrientation ?? undefined;
    message.spacing = object.spacing ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentUiButton(): ECS6ComponentUiButton {
  return {
    name: undefined,
    visible: undefined,
    opacity: undefined,
    hAlign: undefined,
    vAlign: undefined,
    width: undefined,
    height: undefined,
    positionX: undefined,
    positionY: undefined,
    isPointerBlocker: undefined,
    parentComponent: undefined,
    fontSize: undefined,
    fontWeight: undefined,
    thickness: undefined,
    cornerRadius: undefined,
    color: undefined,
    background: undefined,
    paddingTop: undefined,
    paddingRight: undefined,
    paddingBottom: undefined,
    paddingLeft: undefined,
    shadowBlur: undefined,
    shadowOffsetX: undefined,
    shadowOffsetY: undefined,
    shadowColor: undefined,
    text: undefined,
  };
}

export namespace ECS6ComponentUiButton {
  export function encode(message: ECS6ComponentUiButton, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.visible !== undefined) {
      writer.uint32(16).bool(message.visible);
    }
    if (message.opacity !== undefined) {
      writer.uint32(29).float(message.opacity);
    }
    if (message.hAlign !== undefined) {
      writer.uint32(34).string(message.hAlign);
    }
    if (message.vAlign !== undefined) {
      writer.uint32(42).string(message.vAlign);
    }
    if (message.width !== undefined) {
      UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
    }
    if (message.height !== undefined) {
      UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
    }
    if (message.positionX !== undefined) {
      UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
    }
    if (message.positionY !== undefined) {
      UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(80).bool(message.isPointerBlocker);
    }
    if (message.parentComponent !== undefined) {
      writer.uint32(210).string(message.parentComponent);
    }
    if (message.fontSize !== undefined) {
      writer.uint32(93).float(message.fontSize);
    }
    if (message.fontWeight !== undefined) {
      writer.uint32(98).string(message.fontWeight);
    }
    if (message.thickness !== undefined) {
      writer.uint32(109).float(message.thickness);
    }
    if (message.cornerRadius !== undefined) {
      writer.uint32(117).float(message.cornerRadius);
    }
    if (message.color !== undefined) {
      ECS6Color4.encode(message.color, writer.uint32(122).fork()).ldelim();
    }
    if (message.background !== undefined) {
      ECS6Color4.encode(message.background, writer.uint32(130).fork()).ldelim();
    }
    if (message.paddingTop !== undefined) {
      writer.uint32(141).float(message.paddingTop);
    }
    if (message.paddingRight !== undefined) {
      writer.uint32(149).float(message.paddingRight);
    }
    if (message.paddingBottom !== undefined) {
      writer.uint32(157).float(message.paddingBottom);
    }
    if (message.paddingLeft !== undefined) {
      writer.uint32(165).float(message.paddingLeft);
    }
    if (message.shadowBlur !== undefined) {
      writer.uint32(173).float(message.shadowBlur);
    }
    if (message.shadowOffsetX !== undefined) {
      writer.uint32(181).float(message.shadowOffsetX);
    }
    if (message.shadowOffsetY !== undefined) {
      writer.uint32(189).float(message.shadowOffsetY);
    }
    if (message.shadowColor !== undefined) {
      ECS6Color4.encode(message.shadowColor, writer.uint32(194).fork()).ldelim();
    }
    if (message.text !== undefined) {
      writer.uint32(202).string(message.text);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentUiButton {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentUiButton();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.opacity = reader.float();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.hAlign = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.vAlign = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.width = UiValue.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.height = UiValue.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.positionX = UiValue.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.positionY = UiValue.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.parentComponent = reader.string();
          continue;
        case 11:
          if (tag !== 93) {
            break;
          }

          message.fontSize = reader.float();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.fontWeight = reader.string();
          continue;
        case 13:
          if (tag !== 109) {
            break;
          }

          message.thickness = reader.float();
          continue;
        case 14:
          if (tag !== 117) {
            break;
          }

          message.cornerRadius = reader.float();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.color = ECS6Color4.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.background = ECS6Color4.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 141) {
            break;
          }

          message.paddingTop = reader.float();
          continue;
        case 18:
          if (tag !== 149) {
            break;
          }

          message.paddingRight = reader.float();
          continue;
        case 19:
          if (tag !== 157) {
            break;
          }

          message.paddingBottom = reader.float();
          continue;
        case 20:
          if (tag !== 165) {
            break;
          }

          message.paddingLeft = reader.float();
          continue;
        case 21:
          if (tag !== 173) {
            break;
          }

          message.shadowBlur = reader.float();
          continue;
        case 22:
          if (tag !== 181) {
            break;
          }

          message.shadowOffsetX = reader.float();
          continue;
        case 23:
          if (tag !== 189) {
            break;
          }

          message.shadowOffsetY = reader.float();
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.shadowColor = ECS6Color4.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.text = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentUiButton {
    return {
      name: isSet(object.name) ? String(object.name) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
      hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
      vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
      width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
      height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
      positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
      positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
      fontSize: isSet(object.fontSize) ? Number(object.fontSize) : undefined,
      fontWeight: isSet(object.fontWeight) ? String(object.fontWeight) : undefined,
      thickness: isSet(object.thickness) ? Number(object.thickness) : undefined,
      cornerRadius: isSet(object.cornerRadius) ? Number(object.cornerRadius) : undefined,
      color: isSet(object.color) ? ECS6Color4.fromJSON(object.color) : undefined,
      background: isSet(object.background) ? ECS6Color4.fromJSON(object.background) : undefined,
      paddingTop: isSet(object.paddingTop) ? Number(object.paddingTop) : undefined,
      paddingRight: isSet(object.paddingRight) ? Number(object.paddingRight) : undefined,
      paddingBottom: isSet(object.paddingBottom) ? Number(object.paddingBottom) : undefined,
      paddingLeft: isSet(object.paddingLeft) ? Number(object.paddingLeft) : undefined,
      shadowBlur: isSet(object.shadowBlur) ? Number(object.shadowBlur) : undefined,
      shadowOffsetX: isSet(object.shadowOffsetX) ? Number(object.shadowOffsetX) : undefined,
      shadowOffsetY: isSet(object.shadowOffsetY) ? Number(object.shadowOffsetY) : undefined,
      shadowColor: isSet(object.shadowColor) ? ECS6Color4.fromJSON(object.shadowColor) : undefined,
      text: isSet(object.text) ? String(object.text) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentUiButton): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.visible !== undefined && (obj.visible = message.visible);
    message.opacity !== undefined && (obj.opacity = message.opacity);
    message.hAlign !== undefined && (obj.hAlign = message.hAlign);
    message.vAlign !== undefined && (obj.vAlign = message.vAlign);
    message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
    message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
    message.positionX !== undefined &&
      (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
    message.positionY !== undefined &&
      (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
    message.fontSize !== undefined && (obj.fontSize = message.fontSize);
    message.fontWeight !== undefined && (obj.fontWeight = message.fontWeight);
    message.thickness !== undefined && (obj.thickness = message.thickness);
    message.cornerRadius !== undefined && (obj.cornerRadius = message.cornerRadius);
    message.color !== undefined && (obj.color = message.color ? ECS6Color4.toJSON(message.color) : undefined);
    message.background !== undefined &&
      (obj.background = message.background ? ECS6Color4.toJSON(message.background) : undefined);
    message.paddingTop !== undefined && (obj.paddingTop = message.paddingTop);
    message.paddingRight !== undefined && (obj.paddingRight = message.paddingRight);
    message.paddingBottom !== undefined && (obj.paddingBottom = message.paddingBottom);
    message.paddingLeft !== undefined && (obj.paddingLeft = message.paddingLeft);
    message.shadowBlur !== undefined && (obj.shadowBlur = message.shadowBlur);
    message.shadowOffsetX !== undefined && (obj.shadowOffsetX = message.shadowOffsetX);
    message.shadowOffsetY !== undefined && (obj.shadowOffsetY = message.shadowOffsetY);
    message.shadowColor !== undefined &&
      (obj.shadowColor = message.shadowColor ? ECS6Color4.toJSON(message.shadowColor) : undefined);
    message.text !== undefined && (obj.text = message.text);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentUiButton>, I>>(base?: I): ECS6ComponentUiButton {
    return ECS6ComponentUiButton.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentUiButton>, I>>(
    object: I,
  ): ECS6ComponentUiButton {
    const message = createBaseECS6ComponentUiButton();
    message.name = object.name ?? undefined;
    message.visible = object.visible ?? undefined;
    message.opacity = object.opacity ?? undefined;
    message.hAlign = object.hAlign ?? undefined;
    message.vAlign = object.vAlign ?? undefined;
    message.width = (object.width !== undefined && object.width !== null)
      ? UiValue.fromPartial(object.width)
      : undefined;
    message.height = (object.height !== undefined && object.height !== null)
      ? UiValue.fromPartial(object.height)
      : undefined;
    message.positionX = (object.positionX !== undefined && object.positionX !== null)
      ? UiValue.fromPartial(object.positionX)
      : undefined;
    message.positionY = (object.positionY !== undefined && object.positionY !== null)
      ? UiValue.fromPartial(object.positionY)
      : undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.parentComponent = object.parentComponent ?? undefined;
    message.fontSize = object.fontSize ?? undefined;
    message.fontWeight = object.fontWeight ?? undefined;
    message.thickness = object.thickness ?? undefined;
    message.cornerRadius = object.cornerRadius ?? undefined;
    message.color = (object.color !== undefined && object.color !== null)
      ? ECS6Color4.fromPartial(object.color)
      : undefined;
    message.background = (object.background !== undefined && object.background !== null)
      ? ECS6Color4.fromPartial(object.background)
      : undefined;
    message.paddingTop = object.paddingTop ?? undefined;
    message.paddingRight = object.paddingRight ?? undefined;
    message.paddingBottom = object.paddingBottom ?? undefined;
    message.paddingLeft = object.paddingLeft ?? undefined;
    message.shadowBlur = object.shadowBlur ?? undefined;
    message.shadowOffsetX = object.shadowOffsetX ?? undefined;
    message.shadowOffsetY = object.shadowOffsetY ?? undefined;
    message.shadowColor = (object.shadowColor !== undefined && object.shadowColor !== null)
      ? ECS6Color4.fromPartial(object.shadowColor)
      : undefined;
    message.text = object.text ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentUiText(): ECS6ComponentUiText {
  return {
    name: undefined,
    visible: undefined,
    opacity: undefined,
    hAlign: undefined,
    vAlign: undefined,
    width: undefined,
    height: undefined,
    positionX: undefined,
    positionY: undefined,
    isPointerBlocker: undefined,
    parentComponent: undefined,
    outlineWidth: undefined,
    outlineColor: undefined,
    color: undefined,
    fontSize: undefined,
    fontAutoSize: undefined,
    font: undefined,
    value: undefined,
    lineSpacing: undefined,
    lineCount: undefined,
    adaptWidth: undefined,
    adaptHeight: undefined,
    textWrapping: undefined,
    shadowBlur: undefined,
    shadowOffsetX: undefined,
    shadowOffsetY: undefined,
    shadowColor: undefined,
    hTextAlign: undefined,
    vTextAlign: undefined,
    paddingTop: undefined,
    paddingRight: undefined,
    paddingBottom: undefined,
    paddingLeft: undefined,
  };
}

export namespace ECS6ComponentUiText {
  export function encode(message: ECS6ComponentUiText, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.visible !== undefined) {
      writer.uint32(16).bool(message.visible);
    }
    if (message.opacity !== undefined) {
      writer.uint32(29).float(message.opacity);
    }
    if (message.hAlign !== undefined) {
      writer.uint32(34).string(message.hAlign);
    }
    if (message.vAlign !== undefined) {
      writer.uint32(42).string(message.vAlign);
    }
    if (message.width !== undefined) {
      UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
    }
    if (message.height !== undefined) {
      UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
    }
    if (message.positionX !== undefined) {
      UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
    }
    if (message.positionY !== undefined) {
      UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(80).bool(message.isPointerBlocker);
    }
    if (message.parentComponent !== undefined) {
      writer.uint32(266).string(message.parentComponent);
    }
    if (message.outlineWidth !== undefined) {
      writer.uint32(93).float(message.outlineWidth);
    }
    if (message.outlineColor !== undefined) {
      ECS6Color4.encode(message.outlineColor, writer.uint32(98).fork()).ldelim();
    }
    if (message.color !== undefined) {
      ECS6Color4.encode(message.color, writer.uint32(106).fork()).ldelim();
    }
    if (message.fontSize !== undefined) {
      writer.uint32(117).float(message.fontSize);
    }
    if (message.fontAutoSize !== undefined) {
      writer.uint32(120).bool(message.fontAutoSize);
    }
    if (message.font !== undefined) {
      writer.uint32(130).string(message.font);
    }
    if (message.value !== undefined) {
      writer.uint32(138).string(message.value);
    }
    if (message.lineSpacing !== undefined) {
      writer.uint32(149).float(message.lineSpacing);
    }
    if (message.lineCount !== undefined) {
      writer.uint32(152).int32(message.lineCount);
    }
    if (message.adaptWidth !== undefined) {
      writer.uint32(160).bool(message.adaptWidth);
    }
    if (message.adaptHeight !== undefined) {
      writer.uint32(168).bool(message.adaptHeight);
    }
    if (message.textWrapping !== undefined) {
      writer.uint32(176).bool(message.textWrapping);
    }
    if (message.shadowBlur !== undefined) {
      writer.uint32(189).float(message.shadowBlur);
    }
    if (message.shadowOffsetX !== undefined) {
      writer.uint32(197).float(message.shadowOffsetX);
    }
    if (message.shadowOffsetY !== undefined) {
      writer.uint32(205).float(message.shadowOffsetY);
    }
    if (message.shadowColor !== undefined) {
      ECS6Color4.encode(message.shadowColor, writer.uint32(210).fork()).ldelim();
    }
    if (message.hTextAlign !== undefined) {
      writer.uint32(218).string(message.hTextAlign);
    }
    if (message.vTextAlign !== undefined) {
      writer.uint32(226).string(message.vTextAlign);
    }
    if (message.paddingTop !== undefined) {
      writer.uint32(237).float(message.paddingTop);
    }
    if (message.paddingRight !== undefined) {
      writer.uint32(245).float(message.paddingRight);
    }
    if (message.paddingBottom !== undefined) {
      writer.uint32(253).float(message.paddingBottom);
    }
    if (message.paddingLeft !== undefined) {
      writer.uint32(261).float(message.paddingLeft);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentUiText {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentUiText();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.opacity = reader.float();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.hAlign = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.vAlign = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.width = UiValue.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.height = UiValue.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.positionX = UiValue.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.positionY = UiValue.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.parentComponent = reader.string();
          continue;
        case 11:
          if (tag !== 93) {
            break;
          }

          message.outlineWidth = reader.float();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.outlineColor = ECS6Color4.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.color = ECS6Color4.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 117) {
            break;
          }

          message.fontSize = reader.float();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.fontAutoSize = reader.bool();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.font = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.value = reader.string();
          continue;
        case 18:
          if (tag !== 149) {
            break;
          }

          message.lineSpacing = reader.float();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.lineCount = reader.int32();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.adaptWidth = reader.bool();
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.adaptHeight = reader.bool();
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.textWrapping = reader.bool();
          continue;
        case 23:
          if (tag !== 189) {
            break;
          }

          message.shadowBlur = reader.float();
          continue;
        case 24:
          if (tag !== 197) {
            break;
          }

          message.shadowOffsetX = reader.float();
          continue;
        case 25:
          if (tag !== 205) {
            break;
          }

          message.shadowOffsetY = reader.float();
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.shadowColor = ECS6Color4.decode(reader, reader.uint32());
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.hTextAlign = reader.string();
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.vTextAlign = reader.string();
          continue;
        case 29:
          if (tag !== 237) {
            break;
          }

          message.paddingTop = reader.float();
          continue;
        case 30:
          if (tag !== 245) {
            break;
          }

          message.paddingRight = reader.float();
          continue;
        case 31:
          if (tag !== 253) {
            break;
          }

          message.paddingBottom = reader.float();
          continue;
        case 32:
          if (tag !== 261) {
            break;
          }

          message.paddingLeft = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentUiText {
    return {
      name: isSet(object.name) ? String(object.name) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
      hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
      vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
      width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
      height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
      positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
      positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
      outlineWidth: isSet(object.outlineWidth) ? Number(object.outlineWidth) : undefined,
      outlineColor: isSet(object.outlineColor) ? ECS6Color4.fromJSON(object.outlineColor) : undefined,
      color: isSet(object.color) ? ECS6Color4.fromJSON(object.color) : undefined,
      fontSize: isSet(object.fontSize) ? Number(object.fontSize) : undefined,
      fontAutoSize: isSet(object.fontAutoSize) ? Boolean(object.fontAutoSize) : undefined,
      font: isSet(object.font) ? String(object.font) : undefined,
      value: isSet(object.value) ? String(object.value) : undefined,
      lineSpacing: isSet(object.lineSpacing) ? Number(object.lineSpacing) : undefined,
      lineCount: isSet(object.lineCount) ? Number(object.lineCount) : undefined,
      adaptWidth: isSet(object.adaptWidth) ? Boolean(object.adaptWidth) : undefined,
      adaptHeight: isSet(object.adaptHeight) ? Boolean(object.adaptHeight) : undefined,
      textWrapping: isSet(object.textWrapping) ? Boolean(object.textWrapping) : undefined,
      shadowBlur: isSet(object.shadowBlur) ? Number(object.shadowBlur) : undefined,
      shadowOffsetX: isSet(object.shadowOffsetX) ? Number(object.shadowOffsetX) : undefined,
      shadowOffsetY: isSet(object.shadowOffsetY) ? Number(object.shadowOffsetY) : undefined,
      shadowColor: isSet(object.shadowColor) ? ECS6Color4.fromJSON(object.shadowColor) : undefined,
      hTextAlign: isSet(object.hTextAlign) ? String(object.hTextAlign) : undefined,
      vTextAlign: isSet(object.vTextAlign) ? String(object.vTextAlign) : undefined,
      paddingTop: isSet(object.paddingTop) ? Number(object.paddingTop) : undefined,
      paddingRight: isSet(object.paddingRight) ? Number(object.paddingRight) : undefined,
      paddingBottom: isSet(object.paddingBottom) ? Number(object.paddingBottom) : undefined,
      paddingLeft: isSet(object.paddingLeft) ? Number(object.paddingLeft) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentUiText): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.visible !== undefined && (obj.visible = message.visible);
    message.opacity !== undefined && (obj.opacity = message.opacity);
    message.hAlign !== undefined && (obj.hAlign = message.hAlign);
    message.vAlign !== undefined && (obj.vAlign = message.vAlign);
    message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
    message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
    message.positionX !== undefined &&
      (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
    message.positionY !== undefined &&
      (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
    message.outlineWidth !== undefined && (obj.outlineWidth = message.outlineWidth);
    message.outlineColor !== undefined &&
      (obj.outlineColor = message.outlineColor ? ECS6Color4.toJSON(message.outlineColor) : undefined);
    message.color !== undefined && (obj.color = message.color ? ECS6Color4.toJSON(message.color) : undefined);
    message.fontSize !== undefined && (obj.fontSize = message.fontSize);
    message.fontAutoSize !== undefined && (obj.fontAutoSize = message.fontAutoSize);
    message.font !== undefined && (obj.font = message.font);
    message.value !== undefined && (obj.value = message.value);
    message.lineSpacing !== undefined && (obj.lineSpacing = message.lineSpacing);
    message.lineCount !== undefined && (obj.lineCount = Math.round(message.lineCount));
    message.adaptWidth !== undefined && (obj.adaptWidth = message.adaptWidth);
    message.adaptHeight !== undefined && (obj.adaptHeight = message.adaptHeight);
    message.textWrapping !== undefined && (obj.textWrapping = message.textWrapping);
    message.shadowBlur !== undefined && (obj.shadowBlur = message.shadowBlur);
    message.shadowOffsetX !== undefined && (obj.shadowOffsetX = message.shadowOffsetX);
    message.shadowOffsetY !== undefined && (obj.shadowOffsetY = message.shadowOffsetY);
    message.shadowColor !== undefined &&
      (obj.shadowColor = message.shadowColor ? ECS6Color4.toJSON(message.shadowColor) : undefined);
    message.hTextAlign !== undefined && (obj.hTextAlign = message.hTextAlign);
    message.vTextAlign !== undefined && (obj.vTextAlign = message.vTextAlign);
    message.paddingTop !== undefined && (obj.paddingTop = message.paddingTop);
    message.paddingRight !== undefined && (obj.paddingRight = message.paddingRight);
    message.paddingBottom !== undefined && (obj.paddingBottom = message.paddingBottom);
    message.paddingLeft !== undefined && (obj.paddingLeft = message.paddingLeft);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentUiText>, I>>(base?: I): ECS6ComponentUiText {
    return ECS6ComponentUiText.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentUiText>, I>>(object: I): ECS6ComponentUiText {
    const message = createBaseECS6ComponentUiText();
    message.name = object.name ?? undefined;
    message.visible = object.visible ?? undefined;
    message.opacity = object.opacity ?? undefined;
    message.hAlign = object.hAlign ?? undefined;
    message.vAlign = object.vAlign ?? undefined;
    message.width = (object.width !== undefined && object.width !== null)
      ? UiValue.fromPartial(object.width)
      : undefined;
    message.height = (object.height !== undefined && object.height !== null)
      ? UiValue.fromPartial(object.height)
      : undefined;
    message.positionX = (object.positionX !== undefined && object.positionX !== null)
      ? UiValue.fromPartial(object.positionX)
      : undefined;
    message.positionY = (object.positionY !== undefined && object.positionY !== null)
      ? UiValue.fromPartial(object.positionY)
      : undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.parentComponent = object.parentComponent ?? undefined;
    message.outlineWidth = object.outlineWidth ?? undefined;
    message.outlineColor = (object.outlineColor !== undefined && object.outlineColor !== null)
      ? ECS6Color4.fromPartial(object.outlineColor)
      : undefined;
    message.color = (object.color !== undefined && object.color !== null)
      ? ECS6Color4.fromPartial(object.color)
      : undefined;
    message.fontSize = object.fontSize ?? undefined;
    message.fontAutoSize = object.fontAutoSize ?? undefined;
    message.font = object.font ?? undefined;
    message.value = object.value ?? undefined;
    message.lineSpacing = object.lineSpacing ?? undefined;
    message.lineCount = object.lineCount ?? undefined;
    message.adaptWidth = object.adaptWidth ?? undefined;
    message.adaptHeight = object.adaptHeight ?? undefined;
    message.textWrapping = object.textWrapping ?? undefined;
    message.shadowBlur = object.shadowBlur ?? undefined;
    message.shadowOffsetX = object.shadowOffsetX ?? undefined;
    message.shadowOffsetY = object.shadowOffsetY ?? undefined;
    message.shadowColor = (object.shadowColor !== undefined && object.shadowColor !== null)
      ? ECS6Color4.fromPartial(object.shadowColor)
      : undefined;
    message.hTextAlign = object.hTextAlign ?? undefined;
    message.vTextAlign = object.vTextAlign ?? undefined;
    message.paddingTop = object.paddingTop ?? undefined;
    message.paddingRight = object.paddingRight ?? undefined;
    message.paddingBottom = object.paddingBottom ?? undefined;
    message.paddingLeft = object.paddingLeft ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentUiInputText(): ECS6ComponentUiInputText {
  return {
    name: undefined,
    visible: undefined,
    opacity: undefined,
    hAlign: undefined,
    vAlign: undefined,
    width: undefined,
    height: undefined,
    positionX: undefined,
    positionY: undefined,
    isPointerBlocker: undefined,
    parentComponent: undefined,
    outlineWidth: undefined,
    outlineColor: undefined,
    color: undefined,
    fontSize: undefined,
    font: undefined,
    value: undefined,
    placeholder: undefined,
    margin: undefined,
    focusedBackground: undefined,
    textWrapping: undefined,
    shadowBlur: undefined,
    shadowOffsetX: undefined,
    shadowOffsetY: undefined,
    shadowColor: undefined,
    hTextAlign: undefined,
    vTextAlign: undefined,
    paddingTop: undefined,
    paddingRight: undefined,
    paddingBottom: undefined,
    paddingLeft: undefined,
    onTextChanged: undefined,
    onFocus: undefined,
    onBlur: undefined,
    onTextSubmit: undefined,
    onChanged: undefined,
  };
}

export namespace ECS6ComponentUiInputText {
  export function encode(message: ECS6ComponentUiInputText, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.visible !== undefined) {
      writer.uint32(16).bool(message.visible);
    }
    if (message.opacity !== undefined) {
      writer.uint32(29).float(message.opacity);
    }
    if (message.hAlign !== undefined) {
      writer.uint32(34).string(message.hAlign);
    }
    if (message.vAlign !== undefined) {
      writer.uint32(42).string(message.vAlign);
    }
    if (message.width !== undefined) {
      UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
    }
    if (message.height !== undefined) {
      UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
    }
    if (message.positionX !== undefined) {
      UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
    }
    if (message.positionY !== undefined) {
      UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(80).bool(message.isPointerBlocker);
    }
    if (message.parentComponent !== undefined) {
      writer.uint32(314).string(message.parentComponent);
    }
    if (message.outlineWidth !== undefined) {
      writer.uint32(93).float(message.outlineWidth);
    }
    if (message.outlineColor !== undefined) {
      ECS6Color4.encode(message.outlineColor, writer.uint32(98).fork()).ldelim();
    }
    if (message.color !== undefined) {
      ECS6Color4.encode(message.color, writer.uint32(106).fork()).ldelim();
    }
    if (message.fontSize !== undefined) {
      writer.uint32(117).float(message.fontSize);
    }
    if (message.font !== undefined) {
      writer.uint32(130).string(message.font);
    }
    if (message.value !== undefined) {
      writer.uint32(138).string(message.value);
    }
    if (message.placeholder !== undefined) {
      writer.uint32(266).string(message.placeholder);
    }
    if (message.margin !== undefined) {
      writer.uint32(277).float(message.margin);
    }
    if (message.focusedBackground !== undefined) {
      ECS6Color4.encode(message.focusedBackground, writer.uint32(282).fork()).ldelim();
    }
    if (message.textWrapping !== undefined) {
      writer.uint32(176).bool(message.textWrapping);
    }
    if (message.shadowBlur !== undefined) {
      writer.uint32(189).float(message.shadowBlur);
    }
    if (message.shadowOffsetX !== undefined) {
      writer.uint32(197).float(message.shadowOffsetX);
    }
    if (message.shadowOffsetY !== undefined) {
      writer.uint32(205).float(message.shadowOffsetY);
    }
    if (message.shadowColor !== undefined) {
      ECS6Color4.encode(message.shadowColor, writer.uint32(210).fork()).ldelim();
    }
    if (message.hTextAlign !== undefined) {
      writer.uint32(218).string(message.hTextAlign);
    }
    if (message.vTextAlign !== undefined) {
      writer.uint32(226).string(message.vTextAlign);
    }
    if (message.paddingTop !== undefined) {
      writer.uint32(237).float(message.paddingTop);
    }
    if (message.paddingRight !== undefined) {
      writer.uint32(245).float(message.paddingRight);
    }
    if (message.paddingBottom !== undefined) {
      writer.uint32(253).float(message.paddingBottom);
    }
    if (message.paddingLeft !== undefined) {
      writer.uint32(261).float(message.paddingLeft);
    }
    if (message.onTextChanged !== undefined) {
      writer.uint32(290).string(message.onTextChanged);
    }
    if (message.onFocus !== undefined) {
      writer.uint32(298).string(message.onFocus);
    }
    if (message.onBlur !== undefined) {
      writer.uint32(306).string(message.onBlur);
    }
    if (message.onTextSubmit !== undefined) {
      writer.uint32(322).string(message.onTextSubmit);
    }
    if (message.onChanged !== undefined) {
      writer.uint32(330).string(message.onChanged);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentUiInputText {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentUiInputText();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.opacity = reader.float();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.hAlign = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.vAlign = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.width = UiValue.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.height = UiValue.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.positionX = UiValue.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.positionY = UiValue.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 39:
          if (tag !== 314) {
            break;
          }

          message.parentComponent = reader.string();
          continue;
        case 11:
          if (tag !== 93) {
            break;
          }

          message.outlineWidth = reader.float();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.outlineColor = ECS6Color4.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.color = ECS6Color4.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 117) {
            break;
          }

          message.fontSize = reader.float();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.font = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.value = reader.string();
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.placeholder = reader.string();
          continue;
        case 34:
          if (tag !== 277) {
            break;
          }

          message.margin = reader.float();
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.focusedBackground = ECS6Color4.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.textWrapping = reader.bool();
          continue;
        case 23:
          if (tag !== 189) {
            break;
          }

          message.shadowBlur = reader.float();
          continue;
        case 24:
          if (tag !== 197) {
            break;
          }

          message.shadowOffsetX = reader.float();
          continue;
        case 25:
          if (tag !== 205) {
            break;
          }

          message.shadowOffsetY = reader.float();
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.shadowColor = ECS6Color4.decode(reader, reader.uint32());
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.hTextAlign = reader.string();
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.vTextAlign = reader.string();
          continue;
        case 29:
          if (tag !== 237) {
            break;
          }

          message.paddingTop = reader.float();
          continue;
        case 30:
          if (tag !== 245) {
            break;
          }

          message.paddingRight = reader.float();
          continue;
        case 31:
          if (tag !== 253) {
            break;
          }

          message.paddingBottom = reader.float();
          continue;
        case 32:
          if (tag !== 261) {
            break;
          }

          message.paddingLeft = reader.float();
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }

          message.onTextChanged = reader.string();
          continue;
        case 37:
          if (tag !== 298) {
            break;
          }

          message.onFocus = reader.string();
          continue;
        case 38:
          if (tag !== 306) {
            break;
          }

          message.onBlur = reader.string();
          continue;
        case 40:
          if (tag !== 322) {
            break;
          }

          message.onTextSubmit = reader.string();
          continue;
        case 41:
          if (tag !== 330) {
            break;
          }

          message.onChanged = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentUiInputText {
    return {
      name: isSet(object.name) ? String(object.name) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
      hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
      vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
      width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
      height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
      positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
      positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
      outlineWidth: isSet(object.outlineWidth) ? Number(object.outlineWidth) : undefined,
      outlineColor: isSet(object.outlineColor) ? ECS6Color4.fromJSON(object.outlineColor) : undefined,
      color: isSet(object.color) ? ECS6Color4.fromJSON(object.color) : undefined,
      fontSize: isSet(object.fontSize) ? Number(object.fontSize) : undefined,
      font: isSet(object.font) ? String(object.font) : undefined,
      value: isSet(object.value) ? String(object.value) : undefined,
      placeholder: isSet(object.placeholder) ? String(object.placeholder) : undefined,
      margin: isSet(object.margin) ? Number(object.margin) : undefined,
      focusedBackground: isSet(object.focusedBackground) ? ECS6Color4.fromJSON(object.focusedBackground) : undefined,
      textWrapping: isSet(object.textWrapping) ? Boolean(object.textWrapping) : undefined,
      shadowBlur: isSet(object.shadowBlur) ? Number(object.shadowBlur) : undefined,
      shadowOffsetX: isSet(object.shadowOffsetX) ? Number(object.shadowOffsetX) : undefined,
      shadowOffsetY: isSet(object.shadowOffsetY) ? Number(object.shadowOffsetY) : undefined,
      shadowColor: isSet(object.shadowColor) ? ECS6Color4.fromJSON(object.shadowColor) : undefined,
      hTextAlign: isSet(object.hTextAlign) ? String(object.hTextAlign) : undefined,
      vTextAlign: isSet(object.vTextAlign) ? String(object.vTextAlign) : undefined,
      paddingTop: isSet(object.paddingTop) ? Number(object.paddingTop) : undefined,
      paddingRight: isSet(object.paddingRight) ? Number(object.paddingRight) : undefined,
      paddingBottom: isSet(object.paddingBottom) ? Number(object.paddingBottom) : undefined,
      paddingLeft: isSet(object.paddingLeft) ? Number(object.paddingLeft) : undefined,
      onTextChanged: isSet(object.onTextChanged) ? String(object.onTextChanged) : undefined,
      onFocus: isSet(object.onFocus) ? String(object.onFocus) : undefined,
      onBlur: isSet(object.onBlur) ? String(object.onBlur) : undefined,
      onTextSubmit: isSet(object.onTextSubmit) ? String(object.onTextSubmit) : undefined,
      onChanged: isSet(object.onChanged) ? String(object.onChanged) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentUiInputText): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.visible !== undefined && (obj.visible = message.visible);
    message.opacity !== undefined && (obj.opacity = message.opacity);
    message.hAlign !== undefined && (obj.hAlign = message.hAlign);
    message.vAlign !== undefined && (obj.vAlign = message.vAlign);
    message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
    message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
    message.positionX !== undefined &&
      (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
    message.positionY !== undefined &&
      (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
    message.outlineWidth !== undefined && (obj.outlineWidth = message.outlineWidth);
    message.outlineColor !== undefined &&
      (obj.outlineColor = message.outlineColor ? ECS6Color4.toJSON(message.outlineColor) : undefined);
    message.color !== undefined && (obj.color = message.color ? ECS6Color4.toJSON(message.color) : undefined);
    message.fontSize !== undefined && (obj.fontSize = message.fontSize);
    message.font !== undefined && (obj.font = message.font);
    message.value !== undefined && (obj.value = message.value);
    message.placeholder !== undefined && (obj.placeholder = message.placeholder);
    message.margin !== undefined && (obj.margin = message.margin);
    message.focusedBackground !== undefined &&
      (obj.focusedBackground = message.focusedBackground ? ECS6Color4.toJSON(message.focusedBackground) : undefined);
    message.textWrapping !== undefined && (obj.textWrapping = message.textWrapping);
    message.shadowBlur !== undefined && (obj.shadowBlur = message.shadowBlur);
    message.shadowOffsetX !== undefined && (obj.shadowOffsetX = message.shadowOffsetX);
    message.shadowOffsetY !== undefined && (obj.shadowOffsetY = message.shadowOffsetY);
    message.shadowColor !== undefined &&
      (obj.shadowColor = message.shadowColor ? ECS6Color4.toJSON(message.shadowColor) : undefined);
    message.hTextAlign !== undefined && (obj.hTextAlign = message.hTextAlign);
    message.vTextAlign !== undefined && (obj.vTextAlign = message.vTextAlign);
    message.paddingTop !== undefined && (obj.paddingTop = message.paddingTop);
    message.paddingRight !== undefined && (obj.paddingRight = message.paddingRight);
    message.paddingBottom !== undefined && (obj.paddingBottom = message.paddingBottom);
    message.paddingLeft !== undefined && (obj.paddingLeft = message.paddingLeft);
    message.onTextChanged !== undefined && (obj.onTextChanged = message.onTextChanged);
    message.onFocus !== undefined && (obj.onFocus = message.onFocus);
    message.onBlur !== undefined && (obj.onBlur = message.onBlur);
    message.onTextSubmit !== undefined && (obj.onTextSubmit = message.onTextSubmit);
    message.onChanged !== undefined && (obj.onChanged = message.onChanged);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentUiInputText>, I>>(
    base?: I,
  ): ECS6ComponentUiInputText {
    return ECS6ComponentUiInputText.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentUiInputText>, I>>(
    object: I,
  ): ECS6ComponentUiInputText {
    const message = createBaseECS6ComponentUiInputText();
    message.name = object.name ?? undefined;
    message.visible = object.visible ?? undefined;
    message.opacity = object.opacity ?? undefined;
    message.hAlign = object.hAlign ?? undefined;
    message.vAlign = object.vAlign ?? undefined;
    message.width = (object.width !== undefined && object.width !== null)
      ? UiValue.fromPartial(object.width)
      : undefined;
    message.height = (object.height !== undefined && object.height !== null)
      ? UiValue.fromPartial(object.height)
      : undefined;
    message.positionX = (object.positionX !== undefined && object.positionX !== null)
      ? UiValue.fromPartial(object.positionX)
      : undefined;
    message.positionY = (object.positionY !== undefined && object.positionY !== null)
      ? UiValue.fromPartial(object.positionY)
      : undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.parentComponent = object.parentComponent ?? undefined;
    message.outlineWidth = object.outlineWidth ?? undefined;
    message.outlineColor = (object.outlineColor !== undefined && object.outlineColor !== null)
      ? ECS6Color4.fromPartial(object.outlineColor)
      : undefined;
    message.color = (object.color !== undefined && object.color !== null)
      ? ECS6Color4.fromPartial(object.color)
      : undefined;
    message.fontSize = object.fontSize ?? undefined;
    message.font = object.font ?? undefined;
    message.value = object.value ?? undefined;
    message.placeholder = object.placeholder ?? undefined;
    message.margin = object.margin ?? undefined;
    message.focusedBackground = (object.focusedBackground !== undefined && object.focusedBackground !== null)
      ? ECS6Color4.fromPartial(object.focusedBackground)
      : undefined;
    message.textWrapping = object.textWrapping ?? undefined;
    message.shadowBlur = object.shadowBlur ?? undefined;
    message.shadowOffsetX = object.shadowOffsetX ?? undefined;
    message.shadowOffsetY = object.shadowOffsetY ?? undefined;
    message.shadowColor = (object.shadowColor !== undefined && object.shadowColor !== null)
      ? ECS6Color4.fromPartial(object.shadowColor)
      : undefined;
    message.hTextAlign = object.hTextAlign ?? undefined;
    message.vTextAlign = object.vTextAlign ?? undefined;
    message.paddingTop = object.paddingTop ?? undefined;
    message.paddingRight = object.paddingRight ?? undefined;
    message.paddingBottom = object.paddingBottom ?? undefined;
    message.paddingLeft = object.paddingLeft ?? undefined;
    message.onTextChanged = object.onTextChanged ?? undefined;
    message.onFocus = object.onFocus ?? undefined;
    message.onBlur = object.onBlur ?? undefined;
    message.onTextSubmit = object.onTextSubmit ?? undefined;
    message.onChanged = object.onChanged ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentUiImage(): ECS6ComponentUiImage {
  return {
    name: undefined,
    visible: undefined,
    opacity: undefined,
    hAlign: undefined,
    vAlign: undefined,
    width: undefined,
    height: undefined,
    positionX: undefined,
    positionY: undefined,
    isPointerBlocker: undefined,
    parentComponent: undefined,
    sourceLeft: undefined,
    sourceTop: undefined,
    sourceWidth: undefined,
    sourceHeight: undefined,
    source: undefined,
    paddingTop: undefined,
    paddingRight: undefined,
    paddingBottom: undefined,
    paddingLeft: undefined,
    sizeInPixels: undefined,
    onClick: undefined,
  };
}

export namespace ECS6ComponentUiImage {
  export function encode(message: ECS6ComponentUiImage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.visible !== undefined) {
      writer.uint32(16).bool(message.visible);
    }
    if (message.opacity !== undefined) {
      writer.uint32(29).float(message.opacity);
    }
    if (message.hAlign !== undefined) {
      writer.uint32(34).string(message.hAlign);
    }
    if (message.vAlign !== undefined) {
      writer.uint32(42).string(message.vAlign);
    }
    if (message.width !== undefined) {
      UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
    }
    if (message.height !== undefined) {
      UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
    }
    if (message.positionX !== undefined) {
      UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
    }
    if (message.positionY !== undefined) {
      UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(80).bool(message.isPointerBlocker);
    }
    if (message.parentComponent !== undefined) {
      writer.uint32(178).string(message.parentComponent);
    }
    if (message.sourceLeft !== undefined) {
      writer.uint32(93).float(message.sourceLeft);
    }
    if (message.sourceTop !== undefined) {
      writer.uint32(101).float(message.sourceTop);
    }
    if (message.sourceWidth !== undefined) {
      writer.uint32(109).float(message.sourceWidth);
    }
    if (message.sourceHeight !== undefined) {
      writer.uint32(117).float(message.sourceHeight);
    }
    if (message.source !== undefined) {
      writer.uint32(122).string(message.source);
    }
    if (message.paddingTop !== undefined) {
      writer.uint32(133).float(message.paddingTop);
    }
    if (message.paddingRight !== undefined) {
      writer.uint32(141).float(message.paddingRight);
    }
    if (message.paddingBottom !== undefined) {
      writer.uint32(149).float(message.paddingBottom);
    }
    if (message.paddingLeft !== undefined) {
      writer.uint32(157).float(message.paddingLeft);
    }
    if (message.sizeInPixels !== undefined) {
      writer.uint32(160).bool(message.sizeInPixels);
    }
    if (message.onClick !== undefined) {
      writer.uint32(170).string(message.onClick);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentUiImage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentUiImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.opacity = reader.float();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.hAlign = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.vAlign = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.width = UiValue.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.height = UiValue.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.positionX = UiValue.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.positionY = UiValue.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.parentComponent = reader.string();
          continue;
        case 11:
          if (tag !== 93) {
            break;
          }

          message.sourceLeft = reader.float();
          continue;
        case 12:
          if (tag !== 101) {
            break;
          }

          message.sourceTop = reader.float();
          continue;
        case 13:
          if (tag !== 109) {
            break;
          }

          message.sourceWidth = reader.float();
          continue;
        case 14:
          if (tag !== 117) {
            break;
          }

          message.sourceHeight = reader.float();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.source = reader.string();
          continue;
        case 16:
          if (tag !== 133) {
            break;
          }

          message.paddingTop = reader.float();
          continue;
        case 17:
          if (tag !== 141) {
            break;
          }

          message.paddingRight = reader.float();
          continue;
        case 18:
          if (tag !== 149) {
            break;
          }

          message.paddingBottom = reader.float();
          continue;
        case 19:
          if (tag !== 157) {
            break;
          }

          message.paddingLeft = reader.float();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.sizeInPixels = reader.bool();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.onClick = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentUiImage {
    return {
      name: isSet(object.name) ? String(object.name) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
      hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
      vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
      width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
      height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
      positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
      positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
      sourceLeft: isSet(object.sourceLeft) ? Number(object.sourceLeft) : undefined,
      sourceTop: isSet(object.sourceTop) ? Number(object.sourceTop) : undefined,
      sourceWidth: isSet(object.sourceWidth) ? Number(object.sourceWidth) : undefined,
      sourceHeight: isSet(object.sourceHeight) ? Number(object.sourceHeight) : undefined,
      source: isSet(object.source) ? String(object.source) : undefined,
      paddingTop: isSet(object.paddingTop) ? Number(object.paddingTop) : undefined,
      paddingRight: isSet(object.paddingRight) ? Number(object.paddingRight) : undefined,
      paddingBottom: isSet(object.paddingBottom) ? Number(object.paddingBottom) : undefined,
      paddingLeft: isSet(object.paddingLeft) ? Number(object.paddingLeft) : undefined,
      sizeInPixels: isSet(object.sizeInPixels) ? Boolean(object.sizeInPixels) : undefined,
      onClick: isSet(object.onClick) ? String(object.onClick) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentUiImage): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.visible !== undefined && (obj.visible = message.visible);
    message.opacity !== undefined && (obj.opacity = message.opacity);
    message.hAlign !== undefined && (obj.hAlign = message.hAlign);
    message.vAlign !== undefined && (obj.vAlign = message.vAlign);
    message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
    message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
    message.positionX !== undefined &&
      (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
    message.positionY !== undefined &&
      (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
    message.sourceLeft !== undefined && (obj.sourceLeft = message.sourceLeft);
    message.sourceTop !== undefined && (obj.sourceTop = message.sourceTop);
    message.sourceWidth !== undefined && (obj.sourceWidth = message.sourceWidth);
    message.sourceHeight !== undefined && (obj.sourceHeight = message.sourceHeight);
    message.source !== undefined && (obj.source = message.source);
    message.paddingTop !== undefined && (obj.paddingTop = message.paddingTop);
    message.paddingRight !== undefined && (obj.paddingRight = message.paddingRight);
    message.paddingBottom !== undefined && (obj.paddingBottom = message.paddingBottom);
    message.paddingLeft !== undefined && (obj.paddingLeft = message.paddingLeft);
    message.sizeInPixels !== undefined && (obj.sizeInPixels = message.sizeInPixels);
    message.onClick !== undefined && (obj.onClick = message.onClick);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentUiImage>, I>>(base?: I): ECS6ComponentUiImage {
    return ECS6ComponentUiImage.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentUiImage>, I>>(object: I): ECS6ComponentUiImage {
    const message = createBaseECS6ComponentUiImage();
    message.name = object.name ?? undefined;
    message.visible = object.visible ?? undefined;
    message.opacity = object.opacity ?? undefined;
    message.hAlign = object.hAlign ?? undefined;
    message.vAlign = object.vAlign ?? undefined;
    message.width = (object.width !== undefined && object.width !== null)
      ? UiValue.fromPartial(object.width)
      : undefined;
    message.height = (object.height !== undefined && object.height !== null)
      ? UiValue.fromPartial(object.height)
      : undefined;
    message.positionX = (object.positionX !== undefined && object.positionX !== null)
      ? UiValue.fromPartial(object.positionX)
      : undefined;
    message.positionY = (object.positionY !== undefined && object.positionY !== null)
      ? UiValue.fromPartial(object.positionY)
      : undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.parentComponent = object.parentComponent ?? undefined;
    message.sourceLeft = object.sourceLeft ?? undefined;
    message.sourceTop = object.sourceTop ?? undefined;
    message.sourceWidth = object.sourceWidth ?? undefined;
    message.sourceHeight = object.sourceHeight ?? undefined;
    message.source = object.source ?? undefined;
    message.paddingTop = object.paddingTop ?? undefined;
    message.paddingRight = object.paddingRight ?? undefined;
    message.paddingBottom = object.paddingBottom ?? undefined;
    message.paddingLeft = object.paddingLeft ?? undefined;
    message.sizeInPixels = object.sizeInPixels ?? undefined;
    message.onClick = object.onClick ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentUiScrollRect(): ECS6ComponentUiScrollRect {
  return {
    name: undefined,
    visible: undefined,
    opacity: undefined,
    hAlign: undefined,
    vAlign: undefined,
    width: undefined,
    height: undefined,
    positionX: undefined,
    positionY: undefined,
    isPointerBlocker: undefined,
    parentComponent: undefined,
    valueX: undefined,
    valueY: undefined,
    backgroundColor: undefined,
    isHorizontal: undefined,
    isVertical: undefined,
    paddingTop: undefined,
    paddingRight: undefined,
    paddingBottom: undefined,
    paddingLeft: undefined,
    onChanged: undefined,
  };
}

export namespace ECS6ComponentUiScrollRect {
  export function encode(message: ECS6ComponentUiScrollRect, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== undefined) {
      writer.uint32(90).string(message.name);
    }
    if (message.visible !== undefined) {
      writer.uint32(96).bool(message.visible);
    }
    if (message.opacity !== undefined) {
      writer.uint32(109).float(message.opacity);
    }
    if (message.hAlign !== undefined) {
      writer.uint32(114).string(message.hAlign);
    }
    if (message.vAlign !== undefined) {
      writer.uint32(122).string(message.vAlign);
    }
    if (message.width !== undefined) {
      UiValue.encode(message.width, writer.uint32(130).fork()).ldelim();
    }
    if (message.height !== undefined) {
      UiValue.encode(message.height, writer.uint32(138).fork()).ldelim();
    }
    if (message.positionX !== undefined) {
      UiValue.encode(message.positionX, writer.uint32(146).fork()).ldelim();
    }
    if (message.positionY !== undefined) {
      UiValue.encode(message.positionY, writer.uint32(154).fork()).ldelim();
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(160).bool(message.isPointerBlocker);
    }
    if (message.parentComponent !== undefined) {
      writer.uint32(170).string(message.parentComponent);
    }
    if (message.valueX !== undefined) {
      writer.uint32(13).float(message.valueX);
    }
    if (message.valueY !== undefined) {
      writer.uint32(21).float(message.valueY);
    }
    if (message.backgroundColor !== undefined) {
      ECS6Color4.encode(message.backgroundColor, writer.uint32(26).fork()).ldelim();
    }
    if (message.isHorizontal !== undefined) {
      writer.uint32(32).bool(message.isHorizontal);
    }
    if (message.isVertical !== undefined) {
      writer.uint32(40).bool(message.isVertical);
    }
    if (message.paddingTop !== undefined) {
      writer.uint32(53).float(message.paddingTop);
    }
    if (message.paddingRight !== undefined) {
      writer.uint32(61).float(message.paddingRight);
    }
    if (message.paddingBottom !== undefined) {
      writer.uint32(69).float(message.paddingBottom);
    }
    if (message.paddingLeft !== undefined) {
      writer.uint32(77).float(message.paddingLeft);
    }
    if (message.onChanged !== undefined) {
      writer.uint32(82).string(message.onChanged);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentUiScrollRect {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentUiScrollRect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 11:
          if (tag !== 90) {
            break;
          }

          message.name = reader.string();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 13:
          if (tag !== 109) {
            break;
          }

          message.opacity = reader.float();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.hAlign = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.vAlign = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.width = UiValue.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.height = UiValue.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.positionX = UiValue.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.positionY = UiValue.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.parentComponent = reader.string();
          continue;
        case 1:
          if (tag !== 13) {
            break;
          }

          message.valueX = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.valueY = reader.float();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.backgroundColor = ECS6Color4.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isHorizontal = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isVertical = reader.bool();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.paddingTop = reader.float();
          continue;
        case 7:
          if (tag !== 61) {
            break;
          }

          message.paddingRight = reader.float();
          continue;
        case 8:
          if (tag !== 69) {
            break;
          }

          message.paddingBottom = reader.float();
          continue;
        case 9:
          if (tag !== 77) {
            break;
          }

          message.paddingLeft = reader.float();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.onChanged = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentUiScrollRect {
    return {
      name: isSet(object.name) ? String(object.name) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
      hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
      vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
      width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
      height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
      positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
      positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
      valueX: isSet(object.valueX) ? Number(object.valueX) : undefined,
      valueY: isSet(object.valueY) ? Number(object.valueY) : undefined,
      backgroundColor: isSet(object.backgroundColor) ? ECS6Color4.fromJSON(object.backgroundColor) : undefined,
      isHorizontal: isSet(object.isHorizontal) ? Boolean(object.isHorizontal) : undefined,
      isVertical: isSet(object.isVertical) ? Boolean(object.isVertical) : undefined,
      paddingTop: isSet(object.paddingTop) ? Number(object.paddingTop) : undefined,
      paddingRight: isSet(object.paddingRight) ? Number(object.paddingRight) : undefined,
      paddingBottom: isSet(object.paddingBottom) ? Number(object.paddingBottom) : undefined,
      paddingLeft: isSet(object.paddingLeft) ? Number(object.paddingLeft) : undefined,
      onChanged: isSet(object.onChanged) ? String(object.onChanged) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentUiScrollRect): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.visible !== undefined && (obj.visible = message.visible);
    message.opacity !== undefined && (obj.opacity = message.opacity);
    message.hAlign !== undefined && (obj.hAlign = message.hAlign);
    message.vAlign !== undefined && (obj.vAlign = message.vAlign);
    message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
    message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
    message.positionX !== undefined &&
      (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
    message.positionY !== undefined &&
      (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
    message.valueX !== undefined && (obj.valueX = message.valueX);
    message.valueY !== undefined && (obj.valueY = message.valueY);
    message.backgroundColor !== undefined &&
      (obj.backgroundColor = message.backgroundColor ? ECS6Color4.toJSON(message.backgroundColor) : undefined);
    message.isHorizontal !== undefined && (obj.isHorizontal = message.isHorizontal);
    message.isVertical !== undefined && (obj.isVertical = message.isVertical);
    message.paddingTop !== undefined && (obj.paddingTop = message.paddingTop);
    message.paddingRight !== undefined && (obj.paddingRight = message.paddingRight);
    message.paddingBottom !== undefined && (obj.paddingBottom = message.paddingBottom);
    message.paddingLeft !== undefined && (obj.paddingLeft = message.paddingLeft);
    message.onChanged !== undefined && (obj.onChanged = message.onChanged);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentUiScrollRect>, I>>(
    base?: I,
  ): ECS6ComponentUiScrollRect {
    return ECS6ComponentUiScrollRect.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentUiScrollRect>, I>>(
    object: I,
  ): ECS6ComponentUiScrollRect {
    const message = createBaseECS6ComponentUiScrollRect();
    message.name = object.name ?? undefined;
    message.visible = object.visible ?? undefined;
    message.opacity = object.opacity ?? undefined;
    message.hAlign = object.hAlign ?? undefined;
    message.vAlign = object.vAlign ?? undefined;
    message.width = (object.width !== undefined && object.width !== null)
      ? UiValue.fromPartial(object.width)
      : undefined;
    message.height = (object.height !== undefined && object.height !== null)
      ? UiValue.fromPartial(object.height)
      : undefined;
    message.positionX = (object.positionX !== undefined && object.positionX !== null)
      ? UiValue.fromPartial(object.positionX)
      : undefined;
    message.positionY = (object.positionY !== undefined && object.positionY !== null)
      ? UiValue.fromPartial(object.positionY)
      : undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.parentComponent = object.parentComponent ?? undefined;
    message.valueX = object.valueX ?? undefined;
    message.valueY = object.valueY ?? undefined;
    message.backgroundColor = (object.backgroundColor !== undefined && object.backgroundColor !== null)
      ? ECS6Color4.fromPartial(object.backgroundColor)
      : undefined;
    message.isHorizontal = object.isHorizontal ?? undefined;
    message.isVertical = object.isVertical ?? undefined;
    message.paddingTop = object.paddingTop ?? undefined;
    message.paddingRight = object.paddingRight ?? undefined;
    message.paddingBottom = object.paddingBottom ?? undefined;
    message.paddingLeft = object.paddingLeft ?? undefined;
    message.onChanged = object.onChanged ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentUiWorldSpaceShape(): ECS6ComponentUiWorldSpaceShape {
  return {
    name: undefined,
    visible: undefined,
    opacity: undefined,
    hAlign: undefined,
    vAlign: undefined,
    width: undefined,
    height: undefined,
    positionX: undefined,
    positionY: undefined,
    isPointerBlocker: undefined,
    parentComponent: undefined,
  };
}

export namespace ECS6ComponentUiWorldSpaceShape {
  export function encode(
    message: ECS6ComponentUiWorldSpaceShape,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.visible !== undefined) {
      writer.uint32(16).bool(message.visible);
    }
    if (message.opacity !== undefined) {
      writer.uint32(29).float(message.opacity);
    }
    if (message.hAlign !== undefined) {
      writer.uint32(34).string(message.hAlign);
    }
    if (message.vAlign !== undefined) {
      writer.uint32(42).string(message.vAlign);
    }
    if (message.width !== undefined) {
      UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
    }
    if (message.height !== undefined) {
      UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
    }
    if (message.positionX !== undefined) {
      UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
    }
    if (message.positionY !== undefined) {
      UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(80).bool(message.isPointerBlocker);
    }
    if (message.parentComponent !== undefined) {
      writer.uint32(90).string(message.parentComponent);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentUiWorldSpaceShape {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentUiWorldSpaceShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.opacity = reader.float();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.hAlign = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.vAlign = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.width = UiValue.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.height = UiValue.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.positionX = UiValue.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.positionY = UiValue.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.parentComponent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentUiWorldSpaceShape {
    return {
      name: isSet(object.name) ? String(object.name) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
      hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
      vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
      width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
      height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
      positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
      positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentUiWorldSpaceShape): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.visible !== undefined && (obj.visible = message.visible);
    message.opacity !== undefined && (obj.opacity = message.opacity);
    message.hAlign !== undefined && (obj.hAlign = message.hAlign);
    message.vAlign !== undefined && (obj.vAlign = message.vAlign);
    message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
    message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
    message.positionX !== undefined &&
      (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
    message.positionY !== undefined &&
      (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentUiWorldSpaceShape>, I>>(
    base?: I,
  ): ECS6ComponentUiWorldSpaceShape {
    return ECS6ComponentUiWorldSpaceShape.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentUiWorldSpaceShape>, I>>(
    object: I,
  ): ECS6ComponentUiWorldSpaceShape {
    const message = createBaseECS6ComponentUiWorldSpaceShape();
    message.name = object.name ?? undefined;
    message.visible = object.visible ?? undefined;
    message.opacity = object.opacity ?? undefined;
    message.hAlign = object.hAlign ?? undefined;
    message.vAlign = object.vAlign ?? undefined;
    message.width = (object.width !== undefined && object.width !== null)
      ? UiValue.fromPartial(object.width)
      : undefined;
    message.height = (object.height !== undefined && object.height !== null)
      ? UiValue.fromPartial(object.height)
      : undefined;
    message.positionX = (object.positionX !== undefined && object.positionX !== null)
      ? UiValue.fromPartial(object.positionX)
      : undefined;
    message.positionY = (object.positionY !== undefined && object.positionY !== null)
      ? UiValue.fromPartial(object.positionY)
      : undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.parentComponent = object.parentComponent ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentUiScreenSpaceShape(): ECS6ComponentUiScreenSpaceShape {
  return {
    name: undefined,
    visible: undefined,
    opacity: undefined,
    hAlign: undefined,
    vAlign: undefined,
    width: undefined,
    height: undefined,
    positionX: undefined,
    positionY: undefined,
    isPointerBlocker: undefined,
    parentComponent: undefined,
  };
}

export namespace ECS6ComponentUiScreenSpaceShape {
  export function encode(
    message: ECS6ComponentUiScreenSpaceShape,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.visible !== undefined) {
      writer.uint32(16).bool(message.visible);
    }
    if (message.opacity !== undefined) {
      writer.uint32(29).float(message.opacity);
    }
    if (message.hAlign !== undefined) {
      writer.uint32(34).string(message.hAlign);
    }
    if (message.vAlign !== undefined) {
      writer.uint32(42).string(message.vAlign);
    }
    if (message.width !== undefined) {
      UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
    }
    if (message.height !== undefined) {
      UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
    }
    if (message.positionX !== undefined) {
      UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
    }
    if (message.positionY !== undefined) {
      UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(80).bool(message.isPointerBlocker);
    }
    if (message.parentComponent !== undefined) {
      writer.uint32(90).string(message.parentComponent);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentUiScreenSpaceShape {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentUiScreenSpaceShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.opacity = reader.float();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.hAlign = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.vAlign = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.width = UiValue.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.height = UiValue.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.positionX = UiValue.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.positionY = UiValue.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.parentComponent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentUiScreenSpaceShape {
    return {
      name: isSet(object.name) ? String(object.name) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
      hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
      vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
      width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
      height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
      positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
      positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentUiScreenSpaceShape): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.visible !== undefined && (obj.visible = message.visible);
    message.opacity !== undefined && (obj.opacity = message.opacity);
    message.hAlign !== undefined && (obj.hAlign = message.hAlign);
    message.vAlign !== undefined && (obj.vAlign = message.vAlign);
    message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
    message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
    message.positionX !== undefined &&
      (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
    message.positionY !== undefined &&
      (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentUiScreenSpaceShape>, I>>(
    base?: I,
  ): ECS6ComponentUiScreenSpaceShape {
    return ECS6ComponentUiScreenSpaceShape.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentUiScreenSpaceShape>, I>>(
    object: I,
  ): ECS6ComponentUiScreenSpaceShape {
    const message = createBaseECS6ComponentUiScreenSpaceShape();
    message.name = object.name ?? undefined;
    message.visible = object.visible ?? undefined;
    message.opacity = object.opacity ?? undefined;
    message.hAlign = object.hAlign ?? undefined;
    message.vAlign = object.vAlign ?? undefined;
    message.width = (object.width !== undefined && object.width !== null)
      ? UiValue.fromPartial(object.width)
      : undefined;
    message.height = (object.height !== undefined && object.height !== null)
      ? UiValue.fromPartial(object.height)
      : undefined;
    message.positionX = (object.positionX !== undefined && object.positionX !== null)
      ? UiValue.fromPartial(object.positionX)
      : undefined;
    message.positionY = (object.positionY !== undefined && object.positionY !== null)
      ? UiValue.fromPartial(object.positionY)
      : undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.parentComponent = object.parentComponent ?? undefined;
    return message;
  }
}

function createBaseECS6ComponentUiFullScreenShape(): ECS6ComponentUiFullScreenShape {
  return {
    name: undefined,
    visible: undefined,
    opacity: undefined,
    hAlign: undefined,
    vAlign: undefined,
    width: undefined,
    height: undefined,
    positionX: undefined,
    positionY: undefined,
    isPointerBlocker: undefined,
    parentComponent: undefined,
  };
}

export namespace ECS6ComponentUiFullScreenShape {
  export function encode(
    message: ECS6ComponentUiFullScreenShape,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.visible !== undefined) {
      writer.uint32(16).bool(message.visible);
    }
    if (message.opacity !== undefined) {
      writer.uint32(29).float(message.opacity);
    }
    if (message.hAlign !== undefined) {
      writer.uint32(34).string(message.hAlign);
    }
    if (message.vAlign !== undefined) {
      writer.uint32(42).string(message.vAlign);
    }
    if (message.width !== undefined) {
      UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
    }
    if (message.height !== undefined) {
      UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
    }
    if (message.positionX !== undefined) {
      UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
    }
    if (message.positionY !== undefined) {
      UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
    }
    if (message.isPointerBlocker !== undefined) {
      writer.uint32(80).bool(message.isPointerBlocker);
    }
    if (message.parentComponent !== undefined) {
      writer.uint32(90).string(message.parentComponent);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): ECS6ComponentUiFullScreenShape {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseECS6ComponentUiFullScreenShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.opacity = reader.float();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.hAlign = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.vAlign = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.width = UiValue.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.height = UiValue.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.positionX = UiValue.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.positionY = UiValue.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.isPointerBlocker = reader.bool();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.parentComponent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): ECS6ComponentUiFullScreenShape {
    return {
      name: isSet(object.name) ? String(object.name) : undefined,
      visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
      opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
      hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
      vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
      width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
      height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
      positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
      positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
      isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
      parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
    };
  }

  export function toJSON(message: ECS6ComponentUiFullScreenShape): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.visible !== undefined && (obj.visible = message.visible);
    message.opacity !== undefined && (obj.opacity = message.opacity);
    message.hAlign !== undefined && (obj.hAlign = message.hAlign);
    message.vAlign !== undefined && (obj.vAlign = message.vAlign);
    message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
    message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
    message.positionX !== undefined &&
      (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
    message.positionY !== undefined &&
      (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
    message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
    message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<ECS6ComponentUiFullScreenShape>, I>>(
    base?: I,
  ): ECS6ComponentUiFullScreenShape {
    return ECS6ComponentUiFullScreenShape.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<ECS6ComponentUiFullScreenShape>, I>>(
    object: I,
  ): ECS6ComponentUiFullScreenShape {
    const message = createBaseECS6ComponentUiFullScreenShape();
    message.name = object.name ?? undefined;
    message.visible = object.visible ?? undefined;
    message.opacity = object.opacity ?? undefined;
    message.hAlign = object.hAlign ?? undefined;
    message.vAlign = object.vAlign ?? undefined;
    message.width = (object.width !== undefined && object.width !== null)
      ? UiValue.fromPartial(object.width)
      : undefined;
    message.height = (object.height !== undefined && object.height !== null)
      ? UiValue.fromPartial(object.height)
      : undefined;
    message.positionX = (object.positionX !== undefined && object.positionX !== null)
      ? UiValue.fromPartial(object.positionX)
      : undefined;
    message.positionY = (object.positionY !== undefined && object.positionY !== null)
      ? UiValue.fromPartial(object.positionY)
      : undefined;
    message.isPointerBlocker = object.isPointerBlocker ?? undefined;
    message.parentComponent = object.parentComponent ?? undefined;
    return message;
  }
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
