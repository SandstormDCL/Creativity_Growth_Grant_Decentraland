/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "decentraland.sdk.development";

export enum UpdateModelType {
  UMT_CHANGE = 0,
  UMT_REMOVE = 1,
  UNRECOGNIZED = -1,
}

export function updateModelTypeFromJSON(object: any): UpdateModelType {
  switch (object) {
    case 0:
    case "UMT_CHANGE":
      return UpdateModelType.UMT_CHANGE;
    case 1:
    case "UMT_REMOVE":
      return UpdateModelType.UMT_REMOVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UpdateModelType.UNRECOGNIZED;
  }
}

export function updateModelTypeToJSON(object: UpdateModelType): string {
  switch (object) {
    case UpdateModelType.UMT_CHANGE:
      return "UMT_CHANGE";
    case UpdateModelType.UMT_REMOVE:
      return "UMT_REMOVE";
    case UpdateModelType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** ts code & main.crdt updates */
export interface UpdateScene {
  sceneId: string;
}

/** .glb & .gltf model udpates */
export interface UpdateModel {
  sceneId: string;
  src: string;
  hash: string;
  type: UpdateModelType;
}

export interface WsSceneMessage {
  message?:
    | { $case: "updateScene"; updateScene: UpdateScene }
    | { $case: "updateModel"; updateModel: UpdateModel }
    | undefined;
}

function createBaseUpdateScene(): UpdateScene {
  return { sceneId: "" };
}

export namespace UpdateScene {
  export function encode(message: UpdateScene, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sceneId !== "") {
      writer.uint32(10).string(message.sceneId);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): UpdateScene {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateScene();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sceneId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): UpdateScene {
    return { sceneId: isSet(object.sceneId) ? String(object.sceneId) : "" };
  }

  export function toJSON(message: UpdateScene): unknown {
    const obj: any = {};
    message.sceneId !== undefined && (obj.sceneId = message.sceneId);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<UpdateScene>, I>>(base?: I): UpdateScene {
    return UpdateScene.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<UpdateScene>, I>>(object: I): UpdateScene {
    const message = createBaseUpdateScene();
    message.sceneId = object.sceneId ?? "";
    return message;
  }
}

function createBaseUpdateModel(): UpdateModel {
  return { sceneId: "", src: "", hash: "", type: 0 };
}

export namespace UpdateModel {
  export function encode(message: UpdateModel, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sceneId !== "") {
      writer.uint32(10).string(message.sceneId);
    }
    if (message.src !== "") {
      writer.uint32(18).string(message.src);
    }
    if (message.hash !== "") {
      writer.uint32(26).string(message.hash);
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): UpdateModel {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sceneId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.src = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hash = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): UpdateModel {
    return {
      sceneId: isSet(object.sceneId) ? String(object.sceneId) : "",
      src: isSet(object.src) ? String(object.src) : "",
      hash: isSet(object.hash) ? String(object.hash) : "",
      type: isSet(object.type) ? updateModelTypeFromJSON(object.type) : 0,
    };
  }

  export function toJSON(message: UpdateModel): unknown {
    const obj: any = {};
    message.sceneId !== undefined && (obj.sceneId = message.sceneId);
    message.src !== undefined && (obj.src = message.src);
    message.hash !== undefined && (obj.hash = message.hash);
    message.type !== undefined && (obj.type = updateModelTypeToJSON(message.type));
    return obj;
  }

  export function create<I extends Exact<DeepPartial<UpdateModel>, I>>(base?: I): UpdateModel {
    return UpdateModel.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<UpdateModel>, I>>(object: I): UpdateModel {
    const message = createBaseUpdateModel();
    message.sceneId = object.sceneId ?? "";
    message.src = object.src ?? "";
    message.hash = object.hash ?? "";
    message.type = object.type ?? 0;
    return message;
  }
}

function createBaseWsSceneMessage(): WsSceneMessage {
  return { message: undefined };
}

export namespace WsSceneMessage {
  export function encode(message: WsSceneMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    switch (message.message?.$case) {
      case "updateScene":
        UpdateScene.encode(message.message.updateScene, writer.uint32(10).fork()).ldelim();
        break;
      case "updateModel":
        UpdateModel.encode(message.message.updateModel, writer.uint32(18).fork()).ldelim();
        break;
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): WsSceneMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWsSceneMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = { $case: "updateScene", updateScene: UpdateScene.decode(reader, reader.uint32()) };
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = { $case: "updateModel", updateModel: UpdateModel.decode(reader, reader.uint32()) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): WsSceneMessage {
    return {
      message: isSet(object.updateScene)
        ? { $case: "updateScene", updateScene: UpdateScene.fromJSON(object.updateScene) }
        : isSet(object.updateModel)
        ? { $case: "updateModel", updateModel: UpdateModel.fromJSON(object.updateModel) }
        : undefined,
    };
  }

  export function toJSON(message: WsSceneMessage): unknown {
    const obj: any = {};
    message.message?.$case === "updateScene" &&
      (obj.updateScene = message.message?.updateScene ? UpdateScene.toJSON(message.message?.updateScene) : undefined);
    message.message?.$case === "updateModel" &&
      (obj.updateModel = message.message?.updateModel ? UpdateModel.toJSON(message.message?.updateModel) : undefined);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<WsSceneMessage>, I>>(base?: I): WsSceneMessage {
    return WsSceneMessage.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<WsSceneMessage>, I>>(object: I): WsSceneMessage {
    const message = createBaseWsSceneMessage();
    if (
      object.message?.$case === "updateScene" &&
      object.message?.updateScene !== undefined &&
      object.message?.updateScene !== null
    ) {
      message.message = { $case: "updateScene", updateScene: UpdateScene.fromPartial(object.message.updateScene) };
    }
    if (
      object.message?.$case === "updateModel" &&
      object.message?.updateModel !== undefined &&
      object.message?.updateModel !== null
    ) {
      message.message = { $case: "updateModel", updateModel: UpdateModel.fromPartial(object.message.updateModel) };
    }
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
