/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "decentraland.sdk.components";

/**
 * The AudioStream component can play external audio clips given a URL, streaming it in real-time.
 *
 * Despite being attached to a particular entity, the sound is not affected by its position.
 */
export interface PBAudioStream {
  /** whether the clip is currently playing */
  playing?:
    | boolean
    | undefined;
  /** the audio volume (default: 1.0) */
  volume?:
    | number
    | undefined;
  /** the audio stream HTTP URL */
  url: string;
}

function createBasePBAudioStream(): PBAudioStream {
  return { playing: undefined, volume: undefined, url: "" };
}

export namespace PBAudioStream {
  export function encode(message: PBAudioStream, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.playing !== undefined) {
      writer.uint32(8).bool(message.playing);
    }
    if (message.volume !== undefined) {
      writer.uint32(21).float(message.volume);
    }
    if (message.url !== "") {
      writer.uint32(26).string(message.url);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBAudioStream {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBAudioStream();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.playing = reader.bool();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.volume = reader.float();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBAudioStream {
    return {
      playing: isSet(object.playing) ? Boolean(object.playing) : undefined,
      volume: isSet(object.volume) ? Number(object.volume) : undefined,
      url: isSet(object.url) ? String(object.url) : "",
    };
  }

  export function toJSON(message: PBAudioStream): unknown {
    const obj: any = {};
    message.playing !== undefined && (obj.playing = message.playing);
    message.volume !== undefined && (obj.volume = message.volume);
    message.url !== undefined && (obj.url = message.url);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBAudioStream>, I>>(base?: I): PBAudioStream {
    return PBAudioStream.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBAudioStream>, I>>(object: I): PBAudioStream {
    const message = createBasePBAudioStream();
    message.playing = object.playing ?? undefined;
    message.volume = object.volume ?? undefined;
    message.url = object.url ?? "";
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
