/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "decentraland.common";

/** Defines indents from respective edges */
export interface BorderRect {
  top: number;
  left: number;
  right: number;
  bottom: number;
}

/** Defines a rect with x, y, width and height */
export interface Rect {
  x: number;
  y: number;
  width: number;
  height: number;
}

function createBaseBorderRect(): BorderRect {
  return { top: 0, left: 0, right: 0, bottom: 0 };
}

export namespace BorderRect {
  export function encode(message: BorderRect, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.top !== 0) {
      writer.uint32(13).float(message.top);
    }
    if (message.left !== 0) {
      writer.uint32(21).float(message.left);
    }
    if (message.right !== 0) {
      writer.uint32(29).float(message.right);
    }
    if (message.bottom !== 0) {
      writer.uint32(37).float(message.bottom);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): BorderRect {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBorderRect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.top = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.left = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.right = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.bottom = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): BorderRect {
    return {
      top: isSet(object.top) ? Number(object.top) : 0,
      left: isSet(object.left) ? Number(object.left) : 0,
      right: isSet(object.right) ? Number(object.right) : 0,
      bottom: isSet(object.bottom) ? Number(object.bottom) : 0,
    };
  }

  export function toJSON(message: BorderRect): unknown {
    const obj: any = {};
    message.top !== undefined && (obj.top = message.top);
    message.left !== undefined && (obj.left = message.left);
    message.right !== undefined && (obj.right = message.right);
    message.bottom !== undefined && (obj.bottom = message.bottom);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<BorderRect>, I>>(base?: I): BorderRect {
    return BorderRect.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<BorderRect>, I>>(object: I): BorderRect {
    const message = createBaseBorderRect();
    message.top = object.top ?? 0;
    message.left = object.left ?? 0;
    message.right = object.right ?? 0;
    message.bottom = object.bottom ?? 0;
    return message;
  }
}

function createBaseRect(): Rect {
  return { x: 0, y: 0, width: 0, height: 0 };
}

export namespace Rect {
  export function encode(message: Rect, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x !== 0) {
      writer.uint32(13).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(21).float(message.y);
    }
    if (message.width !== 0) {
      writer.uint32(29).float(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(37).float(message.height);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): Rect {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.x = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.y = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.width = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.height = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): Rect {
    return {
      x: isSet(object.x) ? Number(object.x) : 0,
      y: isSet(object.y) ? Number(object.y) : 0,
      width: isSet(object.width) ? Number(object.width) : 0,
      height: isSet(object.height) ? Number(object.height) : 0,
    };
  }

  export function toJSON(message: Rect): unknown {
    const obj: any = {};
    message.x !== undefined && (obj.x = message.x);
    message.y !== undefined && (obj.y = message.y);
    message.width !== undefined && (obj.width = message.width);
    message.height !== undefined && (obj.height = message.height);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<Rect>, I>>(base?: I): Rect {
    return Rect.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<Rect>, I>>(object: I): Rect {
    const message = createBaseRect();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
