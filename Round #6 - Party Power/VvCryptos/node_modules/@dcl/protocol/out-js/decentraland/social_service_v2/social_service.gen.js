"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SocialServiceDefinition = exports.FriendshipUpdate = exports.UpsertFriendshipResponse_Accepted = exports.UpsertFriendshipResponse = exports.FriendshipRequestsResponse = exports.UsersResponse = exports.MutualFriendsPayload = exports.UpsertFriendshipPayload = exports.CancelPayload = exports.CancelResponse = exports.DeletePayload = exports.DeleteResponse = exports.RejectPayload = exports.RejectResponse = exports.AcceptPayload = exports.AcceptResponse = exports.Requests = exports.RequestPayload = exports.RequestResponse = exports.User = exports.InternalServerError = exports.InvalidFriendshipAction = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const empty_gen_1 = require("../../google/protobuf/empty.gen");
exports.protobufPackage = "decentraland.social_service_v2";
function createBaseInvalidFriendshipAction() {
    return {};
}
var InvalidFriendshipAction;
(function (InvalidFriendshipAction) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    InvalidFriendshipAction.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInvalidFriendshipAction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    InvalidFriendshipAction.decode = decode;
    function fromJSON(_) {
        return {};
    }
    InvalidFriendshipAction.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    InvalidFriendshipAction.toJSON = toJSON;
    function create(base) {
        return InvalidFriendshipAction.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    InvalidFriendshipAction.create = create;
    function fromPartial(_) {
        const message = createBaseInvalidFriendshipAction();
        return message;
    }
    InvalidFriendshipAction.fromPartial = fromPartial;
})(InvalidFriendshipAction || (exports.InvalidFriendshipAction = InvalidFriendshipAction = {}));
function createBaseInternalServerError() {
    return {};
}
var InternalServerError;
(function (InternalServerError) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    InternalServerError.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInternalServerError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    InternalServerError.decode = decode;
    function fromJSON(_) {
        return {};
    }
    InternalServerError.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    InternalServerError.toJSON = toJSON;
    function create(base) {
        return InternalServerError.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    InternalServerError.create = create;
    function fromPartial(_) {
        const message = createBaseInternalServerError();
        return message;
    }
    InternalServerError.fromPartial = fromPartial;
})(InternalServerError || (exports.InternalServerError = InternalServerError = {}));
function createBaseUser() {
    return { address: "" };
}
var User;
(function (User) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    }
    User.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    User.decode = decode;
    function fromJSON(object) {
        return { address: isSet(object.address) ? String(object.address) : "" };
    }
    User.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        return obj;
    }
    User.toJSON = toJSON;
    function create(base) {
        return User.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    User.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseUser();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    User.fromPartial = fromPartial;
})(User || (exports.User = User = {}));
function createBaseRequestResponse() {
    return { user: undefined, createdAt: 0, message: undefined };
}
var RequestResponse;
(function (RequestResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        if (message.createdAt !== 0) {
            writer.uint32(16).int64(message.createdAt);
        }
        if (message.message !== undefined) {
            writer.uint32(26).string(message.message);
        }
        return writer;
    }
    RequestResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.createdAt = longToNumber(reader.int64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    RequestResponse.decode = decode;
    function fromJSON(object) {
        return {
            user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
            createdAt: isSet(object.createdAt) ? Number(object.createdAt) : 0,
            message: isSet(object.message) ? String(object.message) : undefined,
        };
    }
    RequestResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        message.createdAt !== undefined && (obj.createdAt = Math.round(message.createdAt));
        message.message !== undefined && (obj.message = message.message);
        return obj;
    }
    RequestResponse.toJSON = toJSON;
    function create(base) {
        return RequestResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    RequestResponse.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseRequestResponse();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        message.createdAt = (_a = object.createdAt) !== null && _a !== void 0 ? _a : 0;
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : undefined;
        return message;
    }
    RequestResponse.fromPartial = fromPartial;
})(RequestResponse || (exports.RequestResponse = RequestResponse = {}));
function createBaseRequestPayload() {
    return { user: undefined, message: undefined };
}
var RequestPayload;
(function (RequestPayload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        if (message.message !== undefined) {
            writer.uint32(26).string(message.message);
        }
        return writer;
    }
    RequestPayload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    RequestPayload.decode = decode;
    function fromJSON(object) {
        return {
            user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
            message: isSet(object.message) ? String(object.message) : undefined,
        };
    }
    RequestPayload.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        message.message !== undefined && (obj.message = message.message);
        return obj;
    }
    RequestPayload.toJSON = toJSON;
    function create(base) {
        return RequestPayload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    RequestPayload.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseRequestPayload();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : undefined;
        return message;
    }
    RequestPayload.fromPartial = fromPartial;
})(RequestPayload || (exports.RequestPayload = RequestPayload = {}));
function createBaseRequests() {
    return { requests: [] };
}
var Requests;
(function (Requests) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.requests) {
            RequestResponse.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    Requests.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequests();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.requests.push(RequestResponse.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Requests.decode = decode;
    function fromJSON(object) {
        return {
            requests: Array.isArray(object === null || object === void 0 ? void 0 : object.requests) ? object.requests.map((e) => RequestResponse.fromJSON(e)) : [],
        };
    }
    Requests.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.requests) {
            obj.requests = message.requests.map((e) => e ? RequestResponse.toJSON(e) : undefined);
        }
        else {
            obj.requests = [];
        }
        return obj;
    }
    Requests.toJSON = toJSON;
    function create(base) {
        return Requests.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Requests.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseRequests();
        message.requests = ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => RequestResponse.fromPartial(e))) || [];
        return message;
    }
    Requests.fromPartial = fromPartial;
})(Requests || (exports.Requests = Requests = {}));
function createBaseAcceptResponse() {
    return { user: undefined };
}
var AcceptResponse;
(function (AcceptResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    AcceptResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAcceptResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AcceptResponse.decode = decode;
    function fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    }
    AcceptResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        return obj;
    }
    AcceptResponse.toJSON = toJSON;
    function create(base) {
        return AcceptResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AcceptResponse.create = create;
    function fromPartial(object) {
        const message = createBaseAcceptResponse();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    }
    AcceptResponse.fromPartial = fromPartial;
})(AcceptResponse || (exports.AcceptResponse = AcceptResponse = {}));
function createBaseAcceptPayload() {
    return { user: undefined };
}
var AcceptPayload;
(function (AcceptPayload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    AcceptPayload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAcceptPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AcceptPayload.decode = decode;
    function fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    }
    AcceptPayload.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        return obj;
    }
    AcceptPayload.toJSON = toJSON;
    function create(base) {
        return AcceptPayload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AcceptPayload.create = create;
    function fromPartial(object) {
        const message = createBaseAcceptPayload();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    }
    AcceptPayload.fromPartial = fromPartial;
})(AcceptPayload || (exports.AcceptPayload = AcceptPayload = {}));
function createBaseRejectResponse() {
    return { user: undefined };
}
var RejectResponse;
(function (RejectResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    RejectResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRejectResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    RejectResponse.decode = decode;
    function fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    }
    RejectResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        return obj;
    }
    RejectResponse.toJSON = toJSON;
    function create(base) {
        return RejectResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    RejectResponse.create = create;
    function fromPartial(object) {
        const message = createBaseRejectResponse();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    }
    RejectResponse.fromPartial = fromPartial;
})(RejectResponse || (exports.RejectResponse = RejectResponse = {}));
function createBaseRejectPayload() {
    return { user: undefined };
}
var RejectPayload;
(function (RejectPayload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    RejectPayload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRejectPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    RejectPayload.decode = decode;
    function fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    }
    RejectPayload.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        return obj;
    }
    RejectPayload.toJSON = toJSON;
    function create(base) {
        return RejectPayload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    RejectPayload.create = create;
    function fromPartial(object) {
        const message = createBaseRejectPayload();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    }
    RejectPayload.fromPartial = fromPartial;
})(RejectPayload || (exports.RejectPayload = RejectPayload = {}));
function createBaseDeleteResponse() {
    return { user: undefined };
}
var DeleteResponse;
(function (DeleteResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    DeleteResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    DeleteResponse.decode = decode;
    function fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    }
    DeleteResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        return obj;
    }
    DeleteResponse.toJSON = toJSON;
    function create(base) {
        return DeleteResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    DeleteResponse.create = create;
    function fromPartial(object) {
        const message = createBaseDeleteResponse();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    }
    DeleteResponse.fromPartial = fromPartial;
})(DeleteResponse || (exports.DeleteResponse = DeleteResponse = {}));
function createBaseDeletePayload() {
    return { user: undefined };
}
var DeletePayload;
(function (DeletePayload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    DeletePayload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeletePayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    DeletePayload.decode = decode;
    function fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    }
    DeletePayload.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        return obj;
    }
    DeletePayload.toJSON = toJSON;
    function create(base) {
        return DeletePayload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    DeletePayload.create = create;
    function fromPartial(object) {
        const message = createBaseDeletePayload();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    }
    DeletePayload.fromPartial = fromPartial;
})(DeletePayload || (exports.DeletePayload = DeletePayload = {}));
function createBaseCancelResponse() {
    return { user: undefined };
}
var CancelResponse;
(function (CancelResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    CancelResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCancelResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    CancelResponse.decode = decode;
    function fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    }
    CancelResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        return obj;
    }
    CancelResponse.toJSON = toJSON;
    function create(base) {
        return CancelResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    CancelResponse.create = create;
    function fromPartial(object) {
        const message = createBaseCancelResponse();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    }
    CancelResponse.fromPartial = fromPartial;
})(CancelResponse || (exports.CancelResponse = CancelResponse = {}));
function createBaseCancelPayload() {
    return { user: undefined };
}
var CancelPayload;
(function (CancelPayload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    CancelPayload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCancelPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    CancelPayload.decode = decode;
    function fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    }
    CancelPayload.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        return obj;
    }
    CancelPayload.toJSON = toJSON;
    function create(base) {
        return CancelPayload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    CancelPayload.create = create;
    function fromPartial(object) {
        const message = createBaseCancelPayload();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    }
    CancelPayload.fromPartial = fromPartial;
})(CancelPayload || (exports.CancelPayload = CancelPayload = {}));
function createBaseUpsertFriendshipPayload() {
    return { action: undefined };
}
var UpsertFriendshipPayload;
(function (UpsertFriendshipPayload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.action) === null || _a === void 0 ? void 0 : _a.$case) {
            case "request":
                RequestPayload.encode(message.action.request, writer.uint32(10).fork()).ldelim();
                break;
            case "accept":
                AcceptPayload.encode(message.action.accept, writer.uint32(18).fork()).ldelim();
                break;
            case "reject":
                RejectPayload.encode(message.action.reject, writer.uint32(34).fork()).ldelim();
                break;
            case "delete":
                DeletePayload.encode(message.action.delete, writer.uint32(42).fork()).ldelim();
                break;
            case "cancel":
                CancelPayload.encode(message.action.cancel, writer.uint32(50).fork()).ldelim();
                break;
        }
        return writer;
    }
    UpsertFriendshipPayload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpsertFriendshipPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.action = { $case: "request", request: RequestPayload.decode(reader, reader.uint32()) };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.action = { $case: "accept", accept: AcceptPayload.decode(reader, reader.uint32()) };
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.action = { $case: "reject", reject: RejectPayload.decode(reader, reader.uint32()) };
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.action = { $case: "delete", delete: DeletePayload.decode(reader, reader.uint32()) };
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.action = { $case: "cancel", cancel: CancelPayload.decode(reader, reader.uint32()) };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    UpsertFriendshipPayload.decode = decode;
    function fromJSON(object) {
        return {
            action: isSet(object.request)
                ? { $case: "request", request: RequestPayload.fromJSON(object.request) }
                : isSet(object.accept)
                    ? { $case: "accept", accept: AcceptPayload.fromJSON(object.accept) }
                    : isSet(object.reject)
                        ? { $case: "reject", reject: RejectPayload.fromJSON(object.reject) }
                        : isSet(object.delete)
                            ? { $case: "delete", delete: DeletePayload.fromJSON(object.delete) }
                            : isSet(object.cancel)
                                ? { $case: "cancel", cancel: CancelPayload.fromJSON(object.cancel) }
                                : undefined,
        };
    }
    UpsertFriendshipPayload.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const obj = {};
        ((_a = message.action) === null || _a === void 0 ? void 0 : _a.$case) === "request" &&
            (obj.request = ((_b = message.action) === null || _b === void 0 ? void 0 : _b.request) ? RequestPayload.toJSON((_c = message.action) === null || _c === void 0 ? void 0 : _c.request) : undefined);
        ((_d = message.action) === null || _d === void 0 ? void 0 : _d.$case) === "accept" &&
            (obj.accept = ((_e = message.action) === null || _e === void 0 ? void 0 : _e.accept) ? AcceptPayload.toJSON((_f = message.action) === null || _f === void 0 ? void 0 : _f.accept) : undefined);
        ((_g = message.action) === null || _g === void 0 ? void 0 : _g.$case) === "reject" &&
            (obj.reject = ((_h = message.action) === null || _h === void 0 ? void 0 : _h.reject) ? RejectPayload.toJSON((_j = message.action) === null || _j === void 0 ? void 0 : _j.reject) : undefined);
        ((_k = message.action) === null || _k === void 0 ? void 0 : _k.$case) === "delete" &&
            (obj.delete = ((_l = message.action) === null || _l === void 0 ? void 0 : _l.delete) ? DeletePayload.toJSON((_m = message.action) === null || _m === void 0 ? void 0 : _m.delete) : undefined);
        ((_o = message.action) === null || _o === void 0 ? void 0 : _o.$case) === "cancel" &&
            (obj.cancel = ((_p = message.action) === null || _p === void 0 ? void 0 : _p.cancel) ? CancelPayload.toJSON((_q = message.action) === null || _q === void 0 ? void 0 : _q.cancel) : undefined);
        return obj;
    }
    UpsertFriendshipPayload.toJSON = toJSON;
    function create(base) {
        return UpsertFriendshipPayload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    UpsertFriendshipPayload.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const message = createBaseUpsertFriendshipPayload();
        if (((_a = object.action) === null || _a === void 0 ? void 0 : _a.$case) === "request" && ((_b = object.action) === null || _b === void 0 ? void 0 : _b.request) !== undefined && ((_c = object.action) === null || _c === void 0 ? void 0 : _c.request) !== null) {
            message.action = { $case: "request", request: RequestPayload.fromPartial(object.action.request) };
        }
        if (((_d = object.action) === null || _d === void 0 ? void 0 : _d.$case) === "accept" && ((_e = object.action) === null || _e === void 0 ? void 0 : _e.accept) !== undefined && ((_f = object.action) === null || _f === void 0 ? void 0 : _f.accept) !== null) {
            message.action = { $case: "accept", accept: AcceptPayload.fromPartial(object.action.accept) };
        }
        if (((_g = object.action) === null || _g === void 0 ? void 0 : _g.$case) === "reject" && ((_h = object.action) === null || _h === void 0 ? void 0 : _h.reject) !== undefined && ((_j = object.action) === null || _j === void 0 ? void 0 : _j.reject) !== null) {
            message.action = { $case: "reject", reject: RejectPayload.fromPartial(object.action.reject) };
        }
        if (((_k = object.action) === null || _k === void 0 ? void 0 : _k.$case) === "delete" && ((_l = object.action) === null || _l === void 0 ? void 0 : _l.delete) !== undefined && ((_m = object.action) === null || _m === void 0 ? void 0 : _m.delete) !== null) {
            message.action = { $case: "delete", delete: DeletePayload.fromPartial(object.action.delete) };
        }
        if (((_o = object.action) === null || _o === void 0 ? void 0 : _o.$case) === "cancel" && ((_p = object.action) === null || _p === void 0 ? void 0 : _p.cancel) !== undefined && ((_q = object.action) === null || _q === void 0 ? void 0 : _q.cancel) !== null) {
            message.action = { $case: "cancel", cancel: CancelPayload.fromPartial(object.action.cancel) };
        }
        return message;
    }
    UpsertFriendshipPayload.fromPartial = fromPartial;
})(UpsertFriendshipPayload || (exports.UpsertFriendshipPayload = UpsertFriendshipPayload = {}));
function createBaseMutualFriendsPayload() {
    return { user: undefined };
}
var MutualFriendsPayload;
(function (MutualFriendsPayload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    MutualFriendsPayload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMutualFriendsPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    MutualFriendsPayload.decode = decode;
    function fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    }
    MutualFriendsPayload.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        return obj;
    }
    MutualFriendsPayload.toJSON = toJSON;
    function create(base) {
        return MutualFriendsPayload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    MutualFriendsPayload.create = create;
    function fromPartial(object) {
        const message = createBaseMutualFriendsPayload();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    }
    MutualFriendsPayload.fromPartial = fromPartial;
})(MutualFriendsPayload || (exports.MutualFriendsPayload = MutualFriendsPayload = {}));
function createBaseUsersResponse() {
    return { users: [] };
}
var UsersResponse;
(function (UsersResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.users) {
            User.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    UsersResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUsersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.users.push(User.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    UsersResponse.decode = decode;
    function fromJSON(object) {
        return { users: Array.isArray(object === null || object === void 0 ? void 0 : object.users) ? object.users.map((e) => User.fromJSON(e)) : [] };
    }
    UsersResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.users) {
            obj.users = message.users.map((e) => e ? User.toJSON(e) : undefined);
        }
        else {
            obj.users = [];
        }
        return obj;
    }
    UsersResponse.toJSON = toJSON;
    function create(base) {
        return UsersResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    UsersResponse.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseUsersResponse();
        message.users = ((_a = object.users) === null || _a === void 0 ? void 0 : _a.map((e) => User.fromPartial(e))) || [];
        return message;
    }
    UsersResponse.fromPartial = fromPartial;
})(UsersResponse || (exports.UsersResponse = UsersResponse = {}));
function createBaseFriendshipRequestsResponse() {
    return { response: undefined };
}
var FriendshipRequestsResponse;
(function (FriendshipRequestsResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) {
            case "requests":
                Requests.encode(message.response.requests, writer.uint32(10).fork()).ldelim();
                break;
            case "internalServerError":
                InternalServerError.encode(message.response.internalServerError, writer.uint32(18).fork()).ldelim();
                break;
        }
        return writer;
    }
    FriendshipRequestsResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFriendshipRequestsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.response = { $case: "requests", requests: Requests.decode(reader, reader.uint32()) };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = {
                        $case: "internalServerError",
                        internalServerError: InternalServerError.decode(reader, reader.uint32()),
                    };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    FriendshipRequestsResponse.decode = decode;
    function fromJSON(object) {
        return {
            response: isSet(object.requests)
                ? { $case: "requests", requests: Requests.fromJSON(object.requests) }
                : isSet(object.internalServerError)
                    ? {
                        $case: "internalServerError",
                        internalServerError: InternalServerError.fromJSON(object.internalServerError),
                    }
                    : undefined,
        };
    }
    FriendshipRequestsResponse.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f;
        const obj = {};
        ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) === "requests" &&
            (obj.requests = ((_b = message.response) === null || _b === void 0 ? void 0 : _b.requests) ? Requests.toJSON((_c = message.response) === null || _c === void 0 ? void 0 : _c.requests) : undefined);
        ((_d = message.response) === null || _d === void 0 ? void 0 : _d.$case) === "internalServerError" &&
            (obj.internalServerError = ((_e = message.response) === null || _e === void 0 ? void 0 : _e.internalServerError)
                ? InternalServerError.toJSON((_f = message.response) === null || _f === void 0 ? void 0 : _f.internalServerError)
                : undefined);
        return obj;
    }
    FriendshipRequestsResponse.toJSON = toJSON;
    function create(base) {
        return FriendshipRequestsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    FriendshipRequestsResponse.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseFriendshipRequestsResponse();
        if (((_a = object.response) === null || _a === void 0 ? void 0 : _a.$case) === "requests" &&
            ((_b = object.response) === null || _b === void 0 ? void 0 : _b.requests) !== undefined &&
            ((_c = object.response) === null || _c === void 0 ? void 0 : _c.requests) !== null) {
            message.response = { $case: "requests", requests: Requests.fromPartial(object.response.requests) };
        }
        if (((_d = object.response) === null || _d === void 0 ? void 0 : _d.$case) === "internalServerError" &&
            ((_e = object.response) === null || _e === void 0 ? void 0 : _e.internalServerError) !== undefined &&
            ((_f = object.response) === null || _f === void 0 ? void 0 : _f.internalServerError) !== null) {
            message.response = {
                $case: "internalServerError",
                internalServerError: InternalServerError.fromPartial(object.response.internalServerError),
            };
        }
        return message;
    }
    FriendshipRequestsResponse.fromPartial = fromPartial;
})(FriendshipRequestsResponse || (exports.FriendshipRequestsResponse = FriendshipRequestsResponse = {}));
function createBaseUpsertFriendshipResponse() {
    return { response: undefined };
}
var UpsertFriendshipResponse;
(function (UpsertFriendshipResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) {
            case "accepted":
                UpsertFriendshipResponse_Accepted.encode(message.response.accepted, writer.uint32(10).fork()).ldelim();
                break;
            case "invalidFriendshipAction":
                InvalidFriendshipAction.encode(message.response.invalidFriendshipAction, writer.uint32(18).fork()).ldelim();
                break;
            case "internalServerError":
                InternalServerError.encode(message.response.internalServerError, writer.uint32(26).fork()).ldelim();
                break;
        }
        return writer;
    }
    UpsertFriendshipResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpsertFriendshipResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.response = {
                        $case: "accepted",
                        accepted: UpsertFriendshipResponse_Accepted.decode(reader, reader.uint32()),
                    };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = {
                        $case: "invalidFriendshipAction",
                        invalidFriendshipAction: InvalidFriendshipAction.decode(reader, reader.uint32()),
                    };
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.response = {
                        $case: "internalServerError",
                        internalServerError: InternalServerError.decode(reader, reader.uint32()),
                    };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    UpsertFriendshipResponse.decode = decode;
    function fromJSON(object) {
        return {
            response: isSet(object.accepted)
                ? { $case: "accepted", accepted: UpsertFriendshipResponse_Accepted.fromJSON(object.accepted) }
                : isSet(object.invalidFriendshipAction)
                    ? {
                        $case: "invalidFriendshipAction",
                        invalidFriendshipAction: InvalidFriendshipAction.fromJSON(object.invalidFriendshipAction),
                    }
                    : isSet(object.internalServerError)
                        ? {
                            $case: "internalServerError",
                            internalServerError: InternalServerError.fromJSON(object.internalServerError),
                        }
                        : undefined,
        };
    }
    UpsertFriendshipResponse.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const obj = {};
        ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) === "accepted" &&
            (obj.accepted = ((_b = message.response) === null || _b === void 0 ? void 0 : _b.accepted)
                ? UpsertFriendshipResponse_Accepted.toJSON((_c = message.response) === null || _c === void 0 ? void 0 : _c.accepted)
                : undefined);
        ((_d = message.response) === null || _d === void 0 ? void 0 : _d.$case) === "invalidFriendshipAction" &&
            (obj.invalidFriendshipAction = ((_e = message.response) === null || _e === void 0 ? void 0 : _e.invalidFriendshipAction)
                ? InvalidFriendshipAction.toJSON((_f = message.response) === null || _f === void 0 ? void 0 : _f.invalidFriendshipAction)
                : undefined);
        ((_g = message.response) === null || _g === void 0 ? void 0 : _g.$case) === "internalServerError" &&
            (obj.internalServerError = ((_h = message.response) === null || _h === void 0 ? void 0 : _h.internalServerError)
                ? InternalServerError.toJSON((_j = message.response) === null || _j === void 0 ? void 0 : _j.internalServerError)
                : undefined);
        return obj;
    }
    UpsertFriendshipResponse.toJSON = toJSON;
    function create(base) {
        return UpsertFriendshipResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    UpsertFriendshipResponse.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseUpsertFriendshipResponse();
        if (((_a = object.response) === null || _a === void 0 ? void 0 : _a.$case) === "accepted" &&
            ((_b = object.response) === null || _b === void 0 ? void 0 : _b.accepted) !== undefined &&
            ((_c = object.response) === null || _c === void 0 ? void 0 : _c.accepted) !== null) {
            message.response = {
                $case: "accepted",
                accepted: UpsertFriendshipResponse_Accepted.fromPartial(object.response.accepted),
            };
        }
        if (((_d = object.response) === null || _d === void 0 ? void 0 : _d.$case) === "invalidFriendshipAction" &&
            ((_e = object.response) === null || _e === void 0 ? void 0 : _e.invalidFriendshipAction) !== undefined &&
            ((_f = object.response) === null || _f === void 0 ? void 0 : _f.invalidFriendshipAction) !== null) {
            message.response = {
                $case: "invalidFriendshipAction",
                invalidFriendshipAction: InvalidFriendshipAction.fromPartial(object.response.invalidFriendshipAction),
            };
        }
        if (((_g = object.response) === null || _g === void 0 ? void 0 : _g.$case) === "internalServerError" &&
            ((_h = object.response) === null || _h === void 0 ? void 0 : _h.internalServerError) !== undefined &&
            ((_j = object.response) === null || _j === void 0 ? void 0 : _j.internalServerError) !== null) {
            message.response = {
                $case: "internalServerError",
                internalServerError: InternalServerError.fromPartial(object.response.internalServerError),
            };
        }
        return message;
    }
    UpsertFriendshipResponse.fromPartial = fromPartial;
})(UpsertFriendshipResponse || (exports.UpsertFriendshipResponse = UpsertFriendshipResponse = {}));
function createBaseUpsertFriendshipResponse_Accepted() {
    return {};
}
var UpsertFriendshipResponse_Accepted;
(function (UpsertFriendshipResponse_Accepted) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    UpsertFriendshipResponse_Accepted.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpsertFriendshipResponse_Accepted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    UpsertFriendshipResponse_Accepted.decode = decode;
    function fromJSON(_) {
        return {};
    }
    UpsertFriendshipResponse_Accepted.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    UpsertFriendshipResponse_Accepted.toJSON = toJSON;
    function create(base) {
        return UpsertFriendshipResponse_Accepted.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    UpsertFriendshipResponse_Accepted.create = create;
    function fromPartial(_) {
        const message = createBaseUpsertFriendshipResponse_Accepted();
        return message;
    }
    UpsertFriendshipResponse_Accepted.fromPartial = fromPartial;
})(UpsertFriendshipResponse_Accepted || (exports.UpsertFriendshipResponse_Accepted = UpsertFriendshipResponse_Accepted = {}));
function createBaseFriendshipUpdate() {
    return { update: undefined };
}
var FriendshipUpdate;
(function (FriendshipUpdate) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.update) === null || _a === void 0 ? void 0 : _a.$case) {
            case "request":
                RequestResponse.encode(message.update.request, writer.uint32(10).fork()).ldelim();
                break;
            case "accept":
                AcceptResponse.encode(message.update.accept, writer.uint32(18).fork()).ldelim();
                break;
            case "reject":
                RejectResponse.encode(message.update.reject, writer.uint32(34).fork()).ldelim();
                break;
            case "delete":
                DeleteResponse.encode(message.update.delete, writer.uint32(42).fork()).ldelim();
                break;
            case "cancel":
                CancelResponse.encode(message.update.cancel, writer.uint32(50).fork()).ldelim();
                break;
        }
        return writer;
    }
    FriendshipUpdate.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFriendshipUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.update = { $case: "request", request: RequestResponse.decode(reader, reader.uint32()) };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.update = { $case: "accept", accept: AcceptResponse.decode(reader, reader.uint32()) };
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.update = { $case: "reject", reject: RejectResponse.decode(reader, reader.uint32()) };
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.update = { $case: "delete", delete: DeleteResponse.decode(reader, reader.uint32()) };
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.update = { $case: "cancel", cancel: CancelResponse.decode(reader, reader.uint32()) };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    FriendshipUpdate.decode = decode;
    function fromJSON(object) {
        return {
            update: isSet(object.request)
                ? { $case: "request", request: RequestResponse.fromJSON(object.request) }
                : isSet(object.accept)
                    ? { $case: "accept", accept: AcceptResponse.fromJSON(object.accept) }
                    : isSet(object.reject)
                        ? { $case: "reject", reject: RejectResponse.fromJSON(object.reject) }
                        : isSet(object.delete)
                            ? { $case: "delete", delete: DeleteResponse.fromJSON(object.delete) }
                            : isSet(object.cancel)
                                ? { $case: "cancel", cancel: CancelResponse.fromJSON(object.cancel) }
                                : undefined,
        };
    }
    FriendshipUpdate.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const obj = {};
        ((_a = message.update) === null || _a === void 0 ? void 0 : _a.$case) === "request" &&
            (obj.request = ((_b = message.update) === null || _b === void 0 ? void 0 : _b.request) ? RequestResponse.toJSON((_c = message.update) === null || _c === void 0 ? void 0 : _c.request) : undefined);
        ((_d = message.update) === null || _d === void 0 ? void 0 : _d.$case) === "accept" &&
            (obj.accept = ((_e = message.update) === null || _e === void 0 ? void 0 : _e.accept) ? AcceptResponse.toJSON((_f = message.update) === null || _f === void 0 ? void 0 : _f.accept) : undefined);
        ((_g = message.update) === null || _g === void 0 ? void 0 : _g.$case) === "reject" &&
            (obj.reject = ((_h = message.update) === null || _h === void 0 ? void 0 : _h.reject) ? RejectResponse.toJSON((_j = message.update) === null || _j === void 0 ? void 0 : _j.reject) : undefined);
        ((_k = message.update) === null || _k === void 0 ? void 0 : _k.$case) === "delete" &&
            (obj.delete = ((_l = message.update) === null || _l === void 0 ? void 0 : _l.delete) ? DeleteResponse.toJSON((_m = message.update) === null || _m === void 0 ? void 0 : _m.delete) : undefined);
        ((_o = message.update) === null || _o === void 0 ? void 0 : _o.$case) === "cancel" &&
            (obj.cancel = ((_p = message.update) === null || _p === void 0 ? void 0 : _p.cancel) ? CancelResponse.toJSON((_q = message.update) === null || _q === void 0 ? void 0 : _q.cancel) : undefined);
        return obj;
    }
    FriendshipUpdate.toJSON = toJSON;
    function create(base) {
        return FriendshipUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    FriendshipUpdate.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const message = createBaseFriendshipUpdate();
        if (((_a = object.update) === null || _a === void 0 ? void 0 : _a.$case) === "request" && ((_b = object.update) === null || _b === void 0 ? void 0 : _b.request) !== undefined && ((_c = object.update) === null || _c === void 0 ? void 0 : _c.request) !== null) {
            message.update = { $case: "request", request: RequestResponse.fromPartial(object.update.request) };
        }
        if (((_d = object.update) === null || _d === void 0 ? void 0 : _d.$case) === "accept" && ((_e = object.update) === null || _e === void 0 ? void 0 : _e.accept) !== undefined && ((_f = object.update) === null || _f === void 0 ? void 0 : _f.accept) !== null) {
            message.update = { $case: "accept", accept: AcceptResponse.fromPartial(object.update.accept) };
        }
        if (((_g = object.update) === null || _g === void 0 ? void 0 : _g.$case) === "reject" && ((_h = object.update) === null || _h === void 0 ? void 0 : _h.reject) !== undefined && ((_j = object.update) === null || _j === void 0 ? void 0 : _j.reject) !== null) {
            message.update = { $case: "reject", reject: RejectResponse.fromPartial(object.update.reject) };
        }
        if (((_k = object.update) === null || _k === void 0 ? void 0 : _k.$case) === "delete" && ((_l = object.update) === null || _l === void 0 ? void 0 : _l.delete) !== undefined && ((_m = object.update) === null || _m === void 0 ? void 0 : _m.delete) !== null) {
            message.update = { $case: "delete", delete: DeleteResponse.fromPartial(object.update.delete) };
        }
        if (((_o = object.update) === null || _o === void 0 ? void 0 : _o.$case) === "cancel" && ((_p = object.update) === null || _p === void 0 ? void 0 : _p.cancel) !== undefined && ((_q = object.update) === null || _q === void 0 ? void 0 : _q.cancel) !== null) {
            message.update = { $case: "cancel", cancel: CancelResponse.fromPartial(object.update.cancel) };
        }
        return message;
    }
    FriendshipUpdate.fromPartial = fromPartial;
})(FriendshipUpdate || (exports.FriendshipUpdate = FriendshipUpdate = {}));
exports.SocialServiceDefinition = {
    name: "SocialService",
    fullName: "decentraland.social_service_v2.SocialService",
    methods: {
        /** Get the list of friends for the authenticated user */
        getFriends: {
            name: "GetFriends",
            requestType: empty_gen_1.Empty,
            requestStream: false,
            responseType: UsersResponse,
            responseStream: true,
            options: {},
        },
        /** Get the list of mutual friends between the authenticated user and the one in the parameter */
        getMutualFriends: {
            name: "GetMutualFriends",
            requestType: MutualFriendsPayload,
            requestStream: false,
            responseType: UsersResponse,
            responseStream: true,
            options: {},
        },
        /** Get the pending friendship requests for the authenticated user */
        getPendingFriendshipRequests: {
            name: "GetPendingFriendshipRequests",
            requestType: empty_gen_1.Empty,
            requestStream: false,
            responseType: FriendshipRequestsResponse,
            responseStream: false,
            options: {},
        },
        /** Get the sent friendship requests for the authenticated user */
        getSentFriendshipRequests: {
            name: "GetSentFriendshipRequests",
            requestType: empty_gen_1.Empty,
            requestStream: false,
            responseType: FriendshipRequestsResponse,
            responseStream: false,
            options: {},
        },
        /** Create or update friendship status: REQUEST, ACCEPT, REJECT, CANCEL, DELETE */
        upsertFriendship: {
            name: "UpsertFriendship",
            requestType: UpsertFriendshipPayload,
            requestStream: false,
            responseType: UpsertFriendshipResponse,
            responseStream: false,
            options: {},
        },
        /** Subscribe to updates of friendship status: REQUEST, ACCEPT, REJECT, CANCEL, DELETE */
        subscribeToFriendshipUpdates: {
            name: "SubscribeToFriendshipUpdates",
            requestType: empty_gen_1.Empty,
            requestStream: false,
            responseType: FriendshipUpdate,
            responseStream: true,
            options: {},
        },
    },
};
const tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=social_service.gen.js.map