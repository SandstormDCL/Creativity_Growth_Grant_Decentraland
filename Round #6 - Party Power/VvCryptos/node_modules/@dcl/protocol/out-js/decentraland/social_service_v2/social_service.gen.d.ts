import _m0 from "protobufjs/minimal";
import { Empty } from "../../google/protobuf/empty.gen";
export declare const protobufPackage = "decentraland.social_service_v2";
export interface InvalidFriendshipAction {
}
export interface InternalServerError {
}
export interface User {
    address: string;
}
export interface RequestResponse {
    user: User | undefined;
    createdAt: number;
    message?: string | undefined;
}
export interface RequestPayload {
    user: User | undefined;
    message?: string | undefined;
}
export interface Requests {
    requests: RequestResponse[];
}
export interface AcceptResponse {
    user: User | undefined;
}
export interface AcceptPayload {
    user: User | undefined;
}
export interface RejectResponse {
    user: User | undefined;
}
export interface RejectPayload {
    user: User | undefined;
}
export interface DeleteResponse {
    user: User | undefined;
}
export interface DeletePayload {
    user: User | undefined;
}
export interface CancelResponse {
    user: User | undefined;
}
export interface CancelPayload {
    user: User | undefined;
}
export interface UpsertFriendshipPayload {
    action?: {
        $case: "request";
        request: RequestPayload;
    } | {
        $case: "accept";
        accept: AcceptPayload;
    } | {
        $case: "reject";
        reject: RejectPayload;
    } | {
        $case: "delete";
        delete: DeletePayload;
    } | {
        $case: "cancel";
        cancel: CancelPayload;
    } | undefined;
}
export interface MutualFriendsPayload {
    user: User | undefined;
}
export interface UsersResponse {
    users: User[];
}
export interface FriendshipRequestsResponse {
    response?: {
        $case: "requests";
        requests: Requests;
    } | {
        $case: "internalServerError";
        internalServerError: InternalServerError;
    } | undefined;
}
export interface UpsertFriendshipResponse {
    response?: {
        $case: "accepted";
        accepted: UpsertFriendshipResponse_Accepted;
    } | {
        $case: "invalidFriendshipAction";
        invalidFriendshipAction: InvalidFriendshipAction;
    } | {
        $case: "internalServerError";
        internalServerError: InternalServerError;
    } | undefined;
}
export interface UpsertFriendshipResponse_Accepted {
}
export interface FriendshipUpdate {
    update?: {
        $case: "request";
        request: RequestResponse;
    } | {
        $case: "accept";
        accept: AcceptResponse;
    } | {
        $case: "reject";
        reject: RejectResponse;
    } | {
        $case: "delete";
        delete: DeleteResponse;
    } | {
        $case: "cancel";
        cancel: CancelResponse;
    } | undefined;
}
export declare namespace InvalidFriendshipAction {
    function encode(_: InvalidFriendshipAction, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): InvalidFriendshipAction;
    function fromJSON(_: any): InvalidFriendshipAction;
    function toJSON(_: InvalidFriendshipAction): unknown;
    function create<I extends Exact<DeepPartial<InvalidFriendshipAction>, I>>(base?: I): InvalidFriendshipAction;
    function fromPartial<I extends Exact<DeepPartial<InvalidFriendshipAction>, I>>(_: I): InvalidFriendshipAction;
}
export declare namespace InternalServerError {
    function encode(_: InternalServerError, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): InternalServerError;
    function fromJSON(_: any): InternalServerError;
    function toJSON(_: InternalServerError): unknown;
    function create<I extends Exact<DeepPartial<InternalServerError>, I>>(base?: I): InternalServerError;
    function fromPartial<I extends Exact<DeepPartial<InternalServerError>, I>>(_: I): InternalServerError;
}
export declare namespace User {
    function encode(message: User, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): User;
    function fromJSON(object: any): User;
    function toJSON(message: User): unknown;
    function create<I extends Exact<DeepPartial<User>, I>>(base?: I): User;
    function fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User;
}
export declare namespace RequestResponse {
    function encode(message: RequestResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): RequestResponse;
    function fromJSON(object: any): RequestResponse;
    function toJSON(message: RequestResponse): unknown;
    function create<I extends Exact<DeepPartial<RequestResponse>, I>>(base?: I): RequestResponse;
    function fromPartial<I extends Exact<DeepPartial<RequestResponse>, I>>(object: I): RequestResponse;
}
export declare namespace RequestPayload {
    function encode(message: RequestPayload, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): RequestPayload;
    function fromJSON(object: any): RequestPayload;
    function toJSON(message: RequestPayload): unknown;
    function create<I extends Exact<DeepPartial<RequestPayload>, I>>(base?: I): RequestPayload;
    function fromPartial<I extends Exact<DeepPartial<RequestPayload>, I>>(object: I): RequestPayload;
}
export declare namespace Requests {
    function encode(message: Requests, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): Requests;
    function fromJSON(object: any): Requests;
    function toJSON(message: Requests): unknown;
    function create<I extends Exact<DeepPartial<Requests>, I>>(base?: I): Requests;
    function fromPartial<I extends Exact<DeepPartial<Requests>, I>>(object: I): Requests;
}
export declare namespace AcceptResponse {
    function encode(message: AcceptResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): AcceptResponse;
    function fromJSON(object: any): AcceptResponse;
    function toJSON(message: AcceptResponse): unknown;
    function create<I extends Exact<DeepPartial<AcceptResponse>, I>>(base?: I): AcceptResponse;
    function fromPartial<I extends Exact<DeepPartial<AcceptResponse>, I>>(object: I): AcceptResponse;
}
export declare namespace AcceptPayload {
    function encode(message: AcceptPayload, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): AcceptPayload;
    function fromJSON(object: any): AcceptPayload;
    function toJSON(message: AcceptPayload): unknown;
    function create<I extends Exact<DeepPartial<AcceptPayload>, I>>(base?: I): AcceptPayload;
    function fromPartial<I extends Exact<DeepPartial<AcceptPayload>, I>>(object: I): AcceptPayload;
}
export declare namespace RejectResponse {
    function encode(message: RejectResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): RejectResponse;
    function fromJSON(object: any): RejectResponse;
    function toJSON(message: RejectResponse): unknown;
    function create<I extends Exact<DeepPartial<RejectResponse>, I>>(base?: I): RejectResponse;
    function fromPartial<I extends Exact<DeepPartial<RejectResponse>, I>>(object: I): RejectResponse;
}
export declare namespace RejectPayload {
    function encode(message: RejectPayload, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): RejectPayload;
    function fromJSON(object: any): RejectPayload;
    function toJSON(message: RejectPayload): unknown;
    function create<I extends Exact<DeepPartial<RejectPayload>, I>>(base?: I): RejectPayload;
    function fromPartial<I extends Exact<DeepPartial<RejectPayload>, I>>(object: I): RejectPayload;
}
export declare namespace DeleteResponse {
    function encode(message: DeleteResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): DeleteResponse;
    function fromJSON(object: any): DeleteResponse;
    function toJSON(message: DeleteResponse): unknown;
    function create<I extends Exact<DeepPartial<DeleteResponse>, I>>(base?: I): DeleteResponse;
    function fromPartial<I extends Exact<DeepPartial<DeleteResponse>, I>>(object: I): DeleteResponse;
}
export declare namespace DeletePayload {
    function encode(message: DeletePayload, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): DeletePayload;
    function fromJSON(object: any): DeletePayload;
    function toJSON(message: DeletePayload): unknown;
    function create<I extends Exact<DeepPartial<DeletePayload>, I>>(base?: I): DeletePayload;
    function fromPartial<I extends Exact<DeepPartial<DeletePayload>, I>>(object: I): DeletePayload;
}
export declare namespace CancelResponse {
    function encode(message: CancelResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): CancelResponse;
    function fromJSON(object: any): CancelResponse;
    function toJSON(message: CancelResponse): unknown;
    function create<I extends Exact<DeepPartial<CancelResponse>, I>>(base?: I): CancelResponse;
    function fromPartial<I extends Exact<DeepPartial<CancelResponse>, I>>(object: I): CancelResponse;
}
export declare namespace CancelPayload {
    function encode(message: CancelPayload, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): CancelPayload;
    function fromJSON(object: any): CancelPayload;
    function toJSON(message: CancelPayload): unknown;
    function create<I extends Exact<DeepPartial<CancelPayload>, I>>(base?: I): CancelPayload;
    function fromPartial<I extends Exact<DeepPartial<CancelPayload>, I>>(object: I): CancelPayload;
}
export declare namespace UpsertFriendshipPayload {
    function encode(message: UpsertFriendshipPayload, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): UpsertFriendshipPayload;
    function fromJSON(object: any): UpsertFriendshipPayload;
    function toJSON(message: UpsertFriendshipPayload): unknown;
    function create<I extends Exact<DeepPartial<UpsertFriendshipPayload>, I>>(base?: I): UpsertFriendshipPayload;
    function fromPartial<I extends Exact<DeepPartial<UpsertFriendshipPayload>, I>>(object: I): UpsertFriendshipPayload;
}
export declare namespace MutualFriendsPayload {
    function encode(message: MutualFriendsPayload, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): MutualFriendsPayload;
    function fromJSON(object: any): MutualFriendsPayload;
    function toJSON(message: MutualFriendsPayload): unknown;
    function create<I extends Exact<DeepPartial<MutualFriendsPayload>, I>>(base?: I): MutualFriendsPayload;
    function fromPartial<I extends Exact<DeepPartial<MutualFriendsPayload>, I>>(object: I): MutualFriendsPayload;
}
export declare namespace UsersResponse {
    function encode(message: UsersResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): UsersResponse;
    function fromJSON(object: any): UsersResponse;
    function toJSON(message: UsersResponse): unknown;
    function create<I extends Exact<DeepPartial<UsersResponse>, I>>(base?: I): UsersResponse;
    function fromPartial<I extends Exact<DeepPartial<UsersResponse>, I>>(object: I): UsersResponse;
}
export declare namespace FriendshipRequestsResponse {
    function encode(message: FriendshipRequestsResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): FriendshipRequestsResponse;
    function fromJSON(object: any): FriendshipRequestsResponse;
    function toJSON(message: FriendshipRequestsResponse): unknown;
    function create<I extends Exact<DeepPartial<FriendshipRequestsResponse>, I>>(base?: I): FriendshipRequestsResponse;
    function fromPartial<I extends Exact<DeepPartial<FriendshipRequestsResponse>, I>>(object: I): FriendshipRequestsResponse;
}
export declare namespace UpsertFriendshipResponse {
    function encode(message: UpsertFriendshipResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): UpsertFriendshipResponse;
    function fromJSON(object: any): UpsertFriendshipResponse;
    function toJSON(message: UpsertFriendshipResponse): unknown;
    function create<I extends Exact<DeepPartial<UpsertFriendshipResponse>, I>>(base?: I): UpsertFriendshipResponse;
    function fromPartial<I extends Exact<DeepPartial<UpsertFriendshipResponse>, I>>(object: I): UpsertFriendshipResponse;
}
export declare namespace UpsertFriendshipResponse_Accepted {
    function encode(_: UpsertFriendshipResponse_Accepted, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): UpsertFriendshipResponse_Accepted;
    function fromJSON(_: any): UpsertFriendshipResponse_Accepted;
    function toJSON(_: UpsertFriendshipResponse_Accepted): unknown;
    function create<I extends Exact<DeepPartial<UpsertFriendshipResponse_Accepted>, I>>(base?: I): UpsertFriendshipResponse_Accepted;
    function fromPartial<I extends Exact<DeepPartial<UpsertFriendshipResponse_Accepted>, I>>(_: I): UpsertFriendshipResponse_Accepted;
}
export declare namespace FriendshipUpdate {
    function encode(message: FriendshipUpdate, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): FriendshipUpdate;
    function fromJSON(object: any): FriendshipUpdate;
    function toJSON(message: FriendshipUpdate): unknown;
    function create<I extends Exact<DeepPartial<FriendshipUpdate>, I>>(base?: I): FriendshipUpdate;
    function fromPartial<I extends Exact<DeepPartial<FriendshipUpdate>, I>>(object: I): FriendshipUpdate;
}
export type SocialServiceDefinition = typeof SocialServiceDefinition;
export declare const SocialServiceDefinition: {
    readonly name: "SocialService";
    readonly fullName: "decentraland.social_service_v2.SocialService";
    readonly methods: {
        /** Get the list of friends for the authenticated user */
        readonly getFriends: {
            readonly name: "GetFriends";
            readonly requestType: typeof Empty;
            readonly requestStream: false;
            readonly responseType: typeof UsersResponse;
            readonly responseStream: true;
            readonly options: {};
        };
        /** Get the list of mutual friends between the authenticated user and the one in the parameter */
        readonly getMutualFriends: {
            readonly name: "GetMutualFriends";
            readonly requestType: typeof MutualFriendsPayload;
            readonly requestStream: false;
            readonly responseType: typeof UsersResponse;
            readonly responseStream: true;
            readonly options: {};
        };
        /** Get the pending friendship requests for the authenticated user */
        readonly getPendingFriendshipRequests: {
            readonly name: "GetPendingFriendshipRequests";
            readonly requestType: typeof Empty;
            readonly requestStream: false;
            readonly responseType: typeof FriendshipRequestsResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** Get the sent friendship requests for the authenticated user */
        readonly getSentFriendshipRequests: {
            readonly name: "GetSentFriendshipRequests";
            readonly requestType: typeof Empty;
            readonly requestStream: false;
            readonly responseType: typeof FriendshipRequestsResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** Create or update friendship status: REQUEST, ACCEPT, REJECT, CANCEL, DELETE */
        readonly upsertFriendship: {
            readonly name: "UpsertFriendship";
            readonly requestType: typeof UpsertFriendshipPayload;
            readonly requestStream: false;
            readonly responseType: typeof UpsertFriendshipResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** Subscribe to updates of friendship status: REQUEST, ACCEPT, REJECT, CANCEL, DELETE */
        readonly subscribeToFriendshipUpdates: {
            readonly name: "SubscribeToFriendshipUpdates";
            readonly requestType: typeof Empty;
            readonly requestStream: false;
            readonly responseType: typeof FriendshipUpdate;
            readonly responseStream: true;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
