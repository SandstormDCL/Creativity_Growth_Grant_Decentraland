"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AboutResponse_BffInfo = exports.AboutResponse_CommsInfo = exports.AboutResponse_LambdasInfo = exports.AboutResponse_ContentInfo = exports.AboutResponse_AboutConfiguration = exports.AboutResponse_SkyboxConfiguration = exports.AboutResponse_MapConfiguration_ParcelView = exports.AboutResponse_MapConfiguration_ImageViewWithZoomLevel = exports.AboutResponse_MapConfiguration = exports.AboutResponse_MinimapConfiguration = exports.AboutResponse = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const border_rect_gen_1 = require("../common/border_rect.gen");
const vectors_gen_1 = require("../common/vectors.gen");
exports.protobufPackage = "decentraland.realm";
function createBaseAboutResponse() {
    return {
        healthy: false,
        configurations: undefined,
        content: undefined,
        comms: undefined,
        lambdas: undefined,
        bff: undefined,
        acceptingUsers: false,
    };
}
var AboutResponse;
(function (AboutResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.healthy === true) {
            writer.uint32(8).bool(message.healthy);
        }
        if (message.configurations !== undefined) {
            AboutResponse_AboutConfiguration.encode(message.configurations, writer.uint32(18).fork()).ldelim();
        }
        if (message.content !== undefined) {
            AboutResponse_ContentInfo.encode(message.content, writer.uint32(26).fork()).ldelim();
        }
        if (message.comms !== undefined) {
            AboutResponse_CommsInfo.encode(message.comms, writer.uint32(34).fork()).ldelim();
        }
        if (message.lambdas !== undefined) {
            AboutResponse_LambdasInfo.encode(message.lambdas, writer.uint32(42).fork()).ldelim();
        }
        if (message.bff !== undefined) {
            AboutResponse_BffInfo.encode(message.bff, writer.uint32(50).fork()).ldelim();
        }
        if (message.acceptingUsers === true) {
            writer.uint32(56).bool(message.acceptingUsers);
        }
        return writer;
    }
    AboutResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAboutResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.healthy = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.configurations = AboutResponse_AboutConfiguration.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.content = AboutResponse_ContentInfo.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.comms = AboutResponse_CommsInfo.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.lambdas = AboutResponse_LambdasInfo.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.bff = AboutResponse_BffInfo.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.acceptingUsers = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AboutResponse.decode = decode;
    function fromJSON(object) {
        return {
            healthy: isSet(object.healthy) ? Boolean(object.healthy) : false,
            configurations: isSet(object.configurations)
                ? AboutResponse_AboutConfiguration.fromJSON(object.configurations)
                : undefined,
            content: isSet(object.content) ? AboutResponse_ContentInfo.fromJSON(object.content) : undefined,
            comms: isSet(object.comms) ? AboutResponse_CommsInfo.fromJSON(object.comms) : undefined,
            lambdas: isSet(object.lambdas) ? AboutResponse_LambdasInfo.fromJSON(object.lambdas) : undefined,
            bff: isSet(object.bff) ? AboutResponse_BffInfo.fromJSON(object.bff) : undefined,
            acceptingUsers: isSet(object.acceptingUsers) ? Boolean(object.acceptingUsers) : false,
        };
    }
    AboutResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.healthy !== undefined && (obj.healthy = message.healthy);
        message.configurations !== undefined &&
            (obj.configurations = message.configurations
                ? AboutResponse_AboutConfiguration.toJSON(message.configurations)
                : undefined);
        message.content !== undefined &&
            (obj.content = message.content ? AboutResponse_ContentInfo.toJSON(message.content) : undefined);
        message.comms !== undefined &&
            (obj.comms = message.comms ? AboutResponse_CommsInfo.toJSON(message.comms) : undefined);
        message.lambdas !== undefined &&
            (obj.lambdas = message.lambdas ? AboutResponse_LambdasInfo.toJSON(message.lambdas) : undefined);
        message.bff !== undefined && (obj.bff = message.bff ? AboutResponse_BffInfo.toJSON(message.bff) : undefined);
        message.acceptingUsers !== undefined && (obj.acceptingUsers = message.acceptingUsers);
        return obj;
    }
    AboutResponse.toJSON = toJSON;
    function create(base) {
        return AboutResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AboutResponse.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseAboutResponse();
        message.healthy = (_a = object.healthy) !== null && _a !== void 0 ? _a : false;
        message.configurations = (object.configurations !== undefined && object.configurations !== null)
            ? AboutResponse_AboutConfiguration.fromPartial(object.configurations)
            : undefined;
        message.content = (object.content !== undefined && object.content !== null)
            ? AboutResponse_ContentInfo.fromPartial(object.content)
            : undefined;
        message.comms = (object.comms !== undefined && object.comms !== null)
            ? AboutResponse_CommsInfo.fromPartial(object.comms)
            : undefined;
        message.lambdas = (object.lambdas !== undefined && object.lambdas !== null)
            ? AboutResponse_LambdasInfo.fromPartial(object.lambdas)
            : undefined;
        message.bff = (object.bff !== undefined && object.bff !== null)
            ? AboutResponse_BffInfo.fromPartial(object.bff)
            : undefined;
        message.acceptingUsers = (_b = object.acceptingUsers) !== null && _b !== void 0 ? _b : false;
        return message;
    }
    AboutResponse.fromPartial = fromPartial;
})(AboutResponse || (exports.AboutResponse = AboutResponse = {}));
function createBaseAboutResponse_MinimapConfiguration() {
    return {};
}
var AboutResponse_MinimapConfiguration;
(function (AboutResponse_MinimapConfiguration) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    AboutResponse_MinimapConfiguration.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAboutResponse_MinimapConfiguration();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AboutResponse_MinimapConfiguration.decode = decode;
    function fromJSON(_) {
        return {};
    }
    AboutResponse_MinimapConfiguration.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    AboutResponse_MinimapConfiguration.toJSON = toJSON;
    function create(base) {
        return AboutResponse_MinimapConfiguration.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AboutResponse_MinimapConfiguration.create = create;
    function fromPartial(_) {
        const message = createBaseAboutResponse_MinimapConfiguration();
        return message;
    }
    AboutResponse_MinimapConfiguration.fromPartial = fromPartial;
})(AboutResponse_MinimapConfiguration || (exports.AboutResponse_MinimapConfiguration = AboutResponse_MinimapConfiguration = {}));
function createBaseAboutResponse_MapConfiguration() {
    return {
        minimapEnabled: false,
        sizes: [],
        satelliteView: undefined,
        parcelView: undefined,
        thumbnailView: undefined,
    };
}
var AboutResponse_MapConfiguration;
(function (AboutResponse_MapConfiguration) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.minimapEnabled === true) {
            writer.uint32(8).bool(message.minimapEnabled);
        }
        for (const v of message.sizes) {
            border_rect_gen_1.BorderRect.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.satelliteView !== undefined) {
            AboutResponse_MapConfiguration_ImageViewWithZoomLevel.encode(message.satelliteView, writer.uint32(42).fork())
                .ldelim();
        }
        if (message.parcelView !== undefined) {
            AboutResponse_MapConfiguration_ParcelView.encode(message.parcelView, writer.uint32(50).fork()).ldelim();
        }
        if (message.thumbnailView !== undefined) {
            AboutResponse_MapConfiguration_ImageViewWithZoomLevel.encode(message.thumbnailView, writer.uint32(58).fork())
                .ldelim();
        }
        return writer;
    }
    AboutResponse_MapConfiguration.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAboutResponse_MapConfiguration();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.minimapEnabled = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.sizes.push(border_rect_gen_1.BorderRect.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.satelliteView = AboutResponse_MapConfiguration_ImageViewWithZoomLevel.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.parcelView = AboutResponse_MapConfiguration_ParcelView.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.thumbnailView = AboutResponse_MapConfiguration_ImageViewWithZoomLevel.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AboutResponse_MapConfiguration.decode = decode;
    function fromJSON(object) {
        return {
            minimapEnabled: isSet(object.minimapEnabled) ? Boolean(object.minimapEnabled) : false,
            sizes: Array.isArray(object === null || object === void 0 ? void 0 : object.sizes) ? object.sizes.map((e) => border_rect_gen_1.BorderRect.fromJSON(e)) : [],
            satelliteView: isSet(object.satelliteView)
                ? AboutResponse_MapConfiguration_ImageViewWithZoomLevel.fromJSON(object.satelliteView)
                : undefined,
            parcelView: isSet(object.parcelView)
                ? AboutResponse_MapConfiguration_ParcelView.fromJSON(object.parcelView)
                : undefined,
            thumbnailView: isSet(object.thumbnailView)
                ? AboutResponse_MapConfiguration_ImageViewWithZoomLevel.fromJSON(object.thumbnailView)
                : undefined,
        };
    }
    AboutResponse_MapConfiguration.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.minimapEnabled !== undefined && (obj.minimapEnabled = message.minimapEnabled);
        if (message.sizes) {
            obj.sizes = message.sizes.map((e) => e ? border_rect_gen_1.BorderRect.toJSON(e) : undefined);
        }
        else {
            obj.sizes = [];
        }
        message.satelliteView !== undefined &&
            (obj.satelliteView = message.satelliteView
                ? AboutResponse_MapConfiguration_ImageViewWithZoomLevel.toJSON(message.satelliteView)
                : undefined);
        message.parcelView !== undefined &&
            (obj.parcelView = message.parcelView
                ? AboutResponse_MapConfiguration_ParcelView.toJSON(message.parcelView)
                : undefined);
        message.thumbnailView !== undefined &&
            (obj.thumbnailView = message.thumbnailView
                ? AboutResponse_MapConfiguration_ImageViewWithZoomLevel.toJSON(message.thumbnailView)
                : undefined);
        return obj;
    }
    AboutResponse_MapConfiguration.toJSON = toJSON;
    function create(base) {
        return AboutResponse_MapConfiguration.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AboutResponse_MapConfiguration.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseAboutResponse_MapConfiguration();
        message.minimapEnabled = (_a = object.minimapEnabled) !== null && _a !== void 0 ? _a : false;
        message.sizes = ((_b = object.sizes) === null || _b === void 0 ? void 0 : _b.map((e) => border_rect_gen_1.BorderRect.fromPartial(e))) || [];
        message.satelliteView = (object.satelliteView !== undefined && object.satelliteView !== null)
            ? AboutResponse_MapConfiguration_ImageViewWithZoomLevel.fromPartial(object.satelliteView)
            : undefined;
        message.parcelView = (object.parcelView !== undefined && object.parcelView !== null)
            ? AboutResponse_MapConfiguration_ParcelView.fromPartial(object.parcelView)
            : undefined;
        message.thumbnailView = (object.thumbnailView !== undefined && object.thumbnailView !== null)
            ? AboutResponse_MapConfiguration_ImageViewWithZoomLevel.fromPartial(object.thumbnailView)
            : undefined;
        return message;
    }
    AboutResponse_MapConfiguration.fromPartial = fromPartial;
})(AboutResponse_MapConfiguration || (exports.AboutResponse_MapConfiguration = AboutResponse_MapConfiguration = {}));
function createBaseAboutResponse_MapConfiguration_ImageViewWithZoomLevel() {
    return { version: "", baseUrl: undefined, suffixUrl: undefined, topLeftOffset: undefined };
}
var AboutResponse_MapConfiguration_ImageViewWithZoomLevel;
(function (AboutResponse_MapConfiguration_ImageViewWithZoomLevel) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        if (message.baseUrl !== undefined) {
            writer.uint32(18).string(message.baseUrl);
        }
        if (message.suffixUrl !== undefined) {
            writer.uint32(26).string(message.suffixUrl);
        }
        if (message.topLeftOffset !== undefined) {
            vectors_gen_1.Vector2.encode(message.topLeftOffset, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    }
    AboutResponse_MapConfiguration_ImageViewWithZoomLevel.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAboutResponse_MapConfiguration_ImageViewWithZoomLevel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.baseUrl = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.suffixUrl = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.topLeftOffset = vectors_gen_1.Vector2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AboutResponse_MapConfiguration_ImageViewWithZoomLevel.decode = decode;
    function fromJSON(object) {
        return {
            version: isSet(object.version) ? String(object.version) : "",
            baseUrl: isSet(object.baseUrl) ? String(object.baseUrl) : undefined,
            suffixUrl: isSet(object.suffixUrl) ? String(object.suffixUrl) : undefined,
            topLeftOffset: isSet(object.topLeftOffset) ? vectors_gen_1.Vector2.fromJSON(object.topLeftOffset) : undefined,
        };
    }
    AboutResponse_MapConfiguration_ImageViewWithZoomLevel.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.version !== undefined && (obj.version = message.version);
        message.baseUrl !== undefined && (obj.baseUrl = message.baseUrl);
        message.suffixUrl !== undefined && (obj.suffixUrl = message.suffixUrl);
        message.topLeftOffset !== undefined &&
            (obj.topLeftOffset = message.topLeftOffset ? vectors_gen_1.Vector2.toJSON(message.topLeftOffset) : undefined);
        return obj;
    }
    AboutResponse_MapConfiguration_ImageViewWithZoomLevel.toJSON = toJSON;
    function create(base) {
        return AboutResponse_MapConfiguration_ImageViewWithZoomLevel.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AboutResponse_MapConfiguration_ImageViewWithZoomLevel.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAboutResponse_MapConfiguration_ImageViewWithZoomLevel();
        message.version = (_a = object.version) !== null && _a !== void 0 ? _a : "";
        message.baseUrl = (_b = object.baseUrl) !== null && _b !== void 0 ? _b : undefined;
        message.suffixUrl = (_c = object.suffixUrl) !== null && _c !== void 0 ? _c : undefined;
        message.topLeftOffset = (object.topLeftOffset !== undefined && object.topLeftOffset !== null)
            ? vectors_gen_1.Vector2.fromPartial(object.topLeftOffset)
            : undefined;
        return message;
    }
    AboutResponse_MapConfiguration_ImageViewWithZoomLevel.fromPartial = fromPartial;
})(AboutResponse_MapConfiguration_ImageViewWithZoomLevel || (exports.AboutResponse_MapConfiguration_ImageViewWithZoomLevel = AboutResponse_MapConfiguration_ImageViewWithZoomLevel = {}));
function createBaseAboutResponse_MapConfiguration_ParcelView() {
    return { version: "", imageUrl: undefined };
}
var AboutResponse_MapConfiguration_ParcelView;
(function (AboutResponse_MapConfiguration_ParcelView) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        if (message.imageUrl !== undefined) {
            writer.uint32(18).string(message.imageUrl);
        }
        return writer;
    }
    AboutResponse_MapConfiguration_ParcelView.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAboutResponse_MapConfiguration_ParcelView();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.imageUrl = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AboutResponse_MapConfiguration_ParcelView.decode = decode;
    function fromJSON(object) {
        return {
            version: isSet(object.version) ? String(object.version) : "",
            imageUrl: isSet(object.imageUrl) ? String(object.imageUrl) : undefined,
        };
    }
    AboutResponse_MapConfiguration_ParcelView.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.version !== undefined && (obj.version = message.version);
        message.imageUrl !== undefined && (obj.imageUrl = message.imageUrl);
        return obj;
    }
    AboutResponse_MapConfiguration_ParcelView.toJSON = toJSON;
    function create(base) {
        return AboutResponse_MapConfiguration_ParcelView.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AboutResponse_MapConfiguration_ParcelView.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseAboutResponse_MapConfiguration_ParcelView();
        message.version = (_a = object.version) !== null && _a !== void 0 ? _a : "";
        message.imageUrl = (_b = object.imageUrl) !== null && _b !== void 0 ? _b : undefined;
        return message;
    }
    AboutResponse_MapConfiguration_ParcelView.fromPartial = fromPartial;
})(AboutResponse_MapConfiguration_ParcelView || (exports.AboutResponse_MapConfiguration_ParcelView = AboutResponse_MapConfiguration_ParcelView = {}));
function createBaseAboutResponse_SkyboxConfiguration() {
    return { fixedHour: undefined };
}
var AboutResponse_SkyboxConfiguration;
(function (AboutResponse_SkyboxConfiguration) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.fixedHour !== undefined) {
            writer.uint32(13).float(message.fixedHour);
        }
        return writer;
    }
    AboutResponse_SkyboxConfiguration.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAboutResponse_SkyboxConfiguration();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.fixedHour = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AboutResponse_SkyboxConfiguration.decode = decode;
    function fromJSON(object) {
        return { fixedHour: isSet(object.fixedHour) ? Number(object.fixedHour) : undefined };
    }
    AboutResponse_SkyboxConfiguration.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.fixedHour !== undefined && (obj.fixedHour = message.fixedHour);
        return obj;
    }
    AboutResponse_SkyboxConfiguration.toJSON = toJSON;
    function create(base) {
        return AboutResponse_SkyboxConfiguration.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AboutResponse_SkyboxConfiguration.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseAboutResponse_SkyboxConfiguration();
        message.fixedHour = (_a = object.fixedHour) !== null && _a !== void 0 ? _a : undefined;
        return message;
    }
    AboutResponse_SkyboxConfiguration.fromPartial = fromPartial;
})(AboutResponse_SkyboxConfiguration || (exports.AboutResponse_SkyboxConfiguration = AboutResponse_SkyboxConfiguration = {}));
function createBaseAboutResponse_AboutConfiguration() {
    return {
        realmName: undefined,
        networkId: 0,
        globalScenesUrn: [],
        scenesUrn: [],
        skybox: undefined,
        cityLoaderContentServer: undefined,
        map: undefined,
    };
}
var AboutResponse_AboutConfiguration;
(function (AboutResponse_AboutConfiguration) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.realmName !== undefined) {
            writer.uint32(10).string(message.realmName);
        }
        if (message.networkId !== 0) {
            writer.uint32(16).uint32(message.networkId);
        }
        for (const v of message.globalScenesUrn) {
            writer.uint32(26).string(v);
        }
        for (const v of message.scenesUrn) {
            writer.uint32(34).string(v);
        }
        if (message.skybox !== undefined) {
            AboutResponse_SkyboxConfiguration.encode(message.skybox, writer.uint32(50).fork()).ldelim();
        }
        if (message.cityLoaderContentServer !== undefined) {
            writer.uint32(58).string(message.cityLoaderContentServer);
        }
        if (message.map !== undefined) {
            AboutResponse_MapConfiguration.encode(message.map, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    }
    AboutResponse_AboutConfiguration.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAboutResponse_AboutConfiguration();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.realmName = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.networkId = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.globalScenesUrn.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.scenesUrn.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.skybox = AboutResponse_SkyboxConfiguration.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.cityLoaderContentServer = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.map = AboutResponse_MapConfiguration.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AboutResponse_AboutConfiguration.decode = decode;
    function fromJSON(object) {
        return {
            realmName: isSet(object.realmName) ? String(object.realmName) : undefined,
            networkId: isSet(object.networkId) ? Number(object.networkId) : 0,
            globalScenesUrn: Array.isArray(object === null || object === void 0 ? void 0 : object.globalScenesUrn) ? object.globalScenesUrn.map((e) => String(e)) : [],
            scenesUrn: Array.isArray(object === null || object === void 0 ? void 0 : object.scenesUrn) ? object.scenesUrn.map((e) => String(e)) : [],
            skybox: isSet(object.skybox) ? AboutResponse_SkyboxConfiguration.fromJSON(object.skybox) : undefined,
            cityLoaderContentServer: isSet(object.cityLoaderContentServer)
                ? String(object.cityLoaderContentServer)
                : undefined,
            map: isSet(object.map) ? AboutResponse_MapConfiguration.fromJSON(object.map) : undefined,
        };
    }
    AboutResponse_AboutConfiguration.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.realmName !== undefined && (obj.realmName = message.realmName);
        message.networkId !== undefined && (obj.networkId = Math.round(message.networkId));
        if (message.globalScenesUrn) {
            obj.globalScenesUrn = message.globalScenesUrn.map((e) => e);
        }
        else {
            obj.globalScenesUrn = [];
        }
        if (message.scenesUrn) {
            obj.scenesUrn = message.scenesUrn.map((e) => e);
        }
        else {
            obj.scenesUrn = [];
        }
        message.skybox !== undefined &&
            (obj.skybox = message.skybox ? AboutResponse_SkyboxConfiguration.toJSON(message.skybox) : undefined);
        message.cityLoaderContentServer !== undefined && (obj.cityLoaderContentServer = message.cityLoaderContentServer);
        message.map !== undefined &&
            (obj.map = message.map ? AboutResponse_MapConfiguration.toJSON(message.map) : undefined);
        return obj;
    }
    AboutResponse_AboutConfiguration.toJSON = toJSON;
    function create(base) {
        return AboutResponse_AboutConfiguration.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AboutResponse_AboutConfiguration.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseAboutResponse_AboutConfiguration();
        message.realmName = (_a = object.realmName) !== null && _a !== void 0 ? _a : undefined;
        message.networkId = (_b = object.networkId) !== null && _b !== void 0 ? _b : 0;
        message.globalScenesUrn = ((_c = object.globalScenesUrn) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.scenesUrn = ((_d = object.scenesUrn) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.skybox = (object.skybox !== undefined && object.skybox !== null)
            ? AboutResponse_SkyboxConfiguration.fromPartial(object.skybox)
            : undefined;
        message.cityLoaderContentServer = (_e = object.cityLoaderContentServer) !== null && _e !== void 0 ? _e : undefined;
        message.map = (object.map !== undefined && object.map !== null)
            ? AboutResponse_MapConfiguration.fromPartial(object.map)
            : undefined;
        return message;
    }
    AboutResponse_AboutConfiguration.fromPartial = fromPartial;
})(AboutResponse_AboutConfiguration || (exports.AboutResponse_AboutConfiguration = AboutResponse_AboutConfiguration = {}));
function createBaseAboutResponse_ContentInfo() {
    return { healthy: false, version: undefined, commitHash: undefined, publicUrl: "" };
}
var AboutResponse_ContentInfo;
(function (AboutResponse_ContentInfo) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.healthy === true) {
            writer.uint32(8).bool(message.healthy);
        }
        if (message.version !== undefined) {
            writer.uint32(18).string(message.version);
        }
        if (message.commitHash !== undefined) {
            writer.uint32(26).string(message.commitHash);
        }
        if (message.publicUrl !== "") {
            writer.uint32(34).string(message.publicUrl);
        }
        return writer;
    }
    AboutResponse_ContentInfo.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAboutResponse_ContentInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.healthy = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.commitHash = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.publicUrl = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AboutResponse_ContentInfo.decode = decode;
    function fromJSON(object) {
        return {
            healthy: isSet(object.healthy) ? Boolean(object.healthy) : false,
            version: isSet(object.version) ? String(object.version) : undefined,
            commitHash: isSet(object.commitHash) ? String(object.commitHash) : undefined,
            publicUrl: isSet(object.publicUrl) ? String(object.publicUrl) : "",
        };
    }
    AboutResponse_ContentInfo.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.healthy !== undefined && (obj.healthy = message.healthy);
        message.version !== undefined && (obj.version = message.version);
        message.commitHash !== undefined && (obj.commitHash = message.commitHash);
        message.publicUrl !== undefined && (obj.publicUrl = message.publicUrl);
        return obj;
    }
    AboutResponse_ContentInfo.toJSON = toJSON;
    function create(base) {
        return AboutResponse_ContentInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AboutResponse_ContentInfo.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseAboutResponse_ContentInfo();
        message.healthy = (_a = object.healthy) !== null && _a !== void 0 ? _a : false;
        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : undefined;
        message.commitHash = (_c = object.commitHash) !== null && _c !== void 0 ? _c : undefined;
        message.publicUrl = (_d = object.publicUrl) !== null && _d !== void 0 ? _d : "";
        return message;
    }
    AboutResponse_ContentInfo.fromPartial = fromPartial;
})(AboutResponse_ContentInfo || (exports.AboutResponse_ContentInfo = AboutResponse_ContentInfo = {}));
function createBaseAboutResponse_LambdasInfo() {
    return { healthy: false, version: undefined, commitHash: undefined, publicUrl: "" };
}
var AboutResponse_LambdasInfo;
(function (AboutResponse_LambdasInfo) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.healthy === true) {
            writer.uint32(8).bool(message.healthy);
        }
        if (message.version !== undefined) {
            writer.uint32(18).string(message.version);
        }
        if (message.commitHash !== undefined) {
            writer.uint32(26).string(message.commitHash);
        }
        if (message.publicUrl !== "") {
            writer.uint32(34).string(message.publicUrl);
        }
        return writer;
    }
    AboutResponse_LambdasInfo.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAboutResponse_LambdasInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.healthy = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.commitHash = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.publicUrl = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AboutResponse_LambdasInfo.decode = decode;
    function fromJSON(object) {
        return {
            healthy: isSet(object.healthy) ? Boolean(object.healthy) : false,
            version: isSet(object.version) ? String(object.version) : undefined,
            commitHash: isSet(object.commitHash) ? String(object.commitHash) : undefined,
            publicUrl: isSet(object.publicUrl) ? String(object.publicUrl) : "",
        };
    }
    AboutResponse_LambdasInfo.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.healthy !== undefined && (obj.healthy = message.healthy);
        message.version !== undefined && (obj.version = message.version);
        message.commitHash !== undefined && (obj.commitHash = message.commitHash);
        message.publicUrl !== undefined && (obj.publicUrl = message.publicUrl);
        return obj;
    }
    AboutResponse_LambdasInfo.toJSON = toJSON;
    function create(base) {
        return AboutResponse_LambdasInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AboutResponse_LambdasInfo.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseAboutResponse_LambdasInfo();
        message.healthy = (_a = object.healthy) !== null && _a !== void 0 ? _a : false;
        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : undefined;
        message.commitHash = (_c = object.commitHash) !== null && _c !== void 0 ? _c : undefined;
        message.publicUrl = (_d = object.publicUrl) !== null && _d !== void 0 ? _d : "";
        return message;
    }
    AboutResponse_LambdasInfo.fromPartial = fromPartial;
})(AboutResponse_LambdasInfo || (exports.AboutResponse_LambdasInfo = AboutResponse_LambdasInfo = {}));
function createBaseAboutResponse_CommsInfo() {
    return {
        healthy: false,
        version: undefined,
        commitHash: undefined,
        publicUrl: undefined,
        protocol: "",
        usersCount: undefined,
        fixedAdapter: undefined,
    };
}
var AboutResponse_CommsInfo;
(function (AboutResponse_CommsInfo) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.healthy === true) {
            writer.uint32(8).bool(message.healthy);
        }
        if (message.version !== undefined) {
            writer.uint32(18).string(message.version);
        }
        if (message.commitHash !== undefined) {
            writer.uint32(26).string(message.commitHash);
        }
        if (message.publicUrl !== undefined) {
            writer.uint32(34).string(message.publicUrl);
        }
        if (message.protocol !== "") {
            writer.uint32(402).string(message.protocol);
        }
        if (message.usersCount !== undefined) {
            writer.uint32(408).int32(message.usersCount);
        }
        if (message.fixedAdapter !== undefined) {
            writer.uint32(418).string(message.fixedAdapter);
        }
        return writer;
    }
    AboutResponse_CommsInfo.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAboutResponse_CommsInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.healthy = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.commitHash = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.publicUrl = reader.string();
                    continue;
                case 50:
                    if (tag !== 402) {
                        break;
                    }
                    message.protocol = reader.string();
                    continue;
                case 51:
                    if (tag !== 408) {
                        break;
                    }
                    message.usersCount = reader.int32();
                    continue;
                case 52:
                    if (tag !== 418) {
                        break;
                    }
                    message.fixedAdapter = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AboutResponse_CommsInfo.decode = decode;
    function fromJSON(object) {
        return {
            healthy: isSet(object.healthy) ? Boolean(object.healthy) : false,
            version: isSet(object.version) ? String(object.version) : undefined,
            commitHash: isSet(object.commitHash) ? String(object.commitHash) : undefined,
            publicUrl: isSet(object.publicUrl) ? String(object.publicUrl) : undefined,
            protocol: isSet(object.protocol) ? String(object.protocol) : "",
            usersCount: isSet(object.usersCount) ? Number(object.usersCount) : undefined,
            fixedAdapter: isSet(object.fixedAdapter) ? String(object.fixedAdapter) : undefined,
        };
    }
    AboutResponse_CommsInfo.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.healthy !== undefined && (obj.healthy = message.healthy);
        message.version !== undefined && (obj.version = message.version);
        message.commitHash !== undefined && (obj.commitHash = message.commitHash);
        message.publicUrl !== undefined && (obj.publicUrl = message.publicUrl);
        message.protocol !== undefined && (obj.protocol = message.protocol);
        message.usersCount !== undefined && (obj.usersCount = Math.round(message.usersCount));
        message.fixedAdapter !== undefined && (obj.fixedAdapter = message.fixedAdapter);
        return obj;
    }
    AboutResponse_CommsInfo.toJSON = toJSON;
    function create(base) {
        return AboutResponse_CommsInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AboutResponse_CommsInfo.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseAboutResponse_CommsInfo();
        message.healthy = (_a = object.healthy) !== null && _a !== void 0 ? _a : false;
        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : undefined;
        message.commitHash = (_c = object.commitHash) !== null && _c !== void 0 ? _c : undefined;
        message.publicUrl = (_d = object.publicUrl) !== null && _d !== void 0 ? _d : undefined;
        message.protocol = (_e = object.protocol) !== null && _e !== void 0 ? _e : "";
        message.usersCount = (_f = object.usersCount) !== null && _f !== void 0 ? _f : undefined;
        message.fixedAdapter = (_g = object.fixedAdapter) !== null && _g !== void 0 ? _g : undefined;
        return message;
    }
    AboutResponse_CommsInfo.fromPartial = fromPartial;
})(AboutResponse_CommsInfo || (exports.AboutResponse_CommsInfo = AboutResponse_CommsInfo = {}));
function createBaseAboutResponse_BffInfo() {
    return {
        healthy: false,
        version: undefined,
        commitHash: undefined,
        publicUrl: "",
        userCount: undefined,
        protocolVersion: undefined,
    };
}
var AboutResponse_BffInfo;
(function (AboutResponse_BffInfo) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.healthy === true) {
            writer.uint32(8).bool(message.healthy);
        }
        if (message.version !== undefined) {
            writer.uint32(18).string(message.version);
        }
        if (message.commitHash !== undefined) {
            writer.uint32(26).string(message.commitHash);
        }
        if (message.publicUrl !== "") {
            writer.uint32(34).string(message.publicUrl);
        }
        if (message.userCount !== undefined) {
            writer.uint32(408).int32(message.userCount);
        }
        if (message.protocolVersion !== undefined) {
            writer.uint32(418).string(message.protocolVersion);
        }
        return writer;
    }
    AboutResponse_BffInfo.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAboutResponse_BffInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.healthy = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.commitHash = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.publicUrl = reader.string();
                    continue;
                case 51:
                    if (tag !== 408) {
                        break;
                    }
                    message.userCount = reader.int32();
                    continue;
                case 52:
                    if (tag !== 418) {
                        break;
                    }
                    message.protocolVersion = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AboutResponse_BffInfo.decode = decode;
    function fromJSON(object) {
        return {
            healthy: isSet(object.healthy) ? Boolean(object.healthy) : false,
            version: isSet(object.version) ? String(object.version) : undefined,
            commitHash: isSet(object.commitHash) ? String(object.commitHash) : undefined,
            publicUrl: isSet(object.publicUrl) ? String(object.publicUrl) : "",
            userCount: isSet(object.userCount) ? Number(object.userCount) : undefined,
            protocolVersion: isSet(object.protocolVersion) ? String(object.protocolVersion) : undefined,
        };
    }
    AboutResponse_BffInfo.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.healthy !== undefined && (obj.healthy = message.healthy);
        message.version !== undefined && (obj.version = message.version);
        message.commitHash !== undefined && (obj.commitHash = message.commitHash);
        message.publicUrl !== undefined && (obj.publicUrl = message.publicUrl);
        message.userCount !== undefined && (obj.userCount = Math.round(message.userCount));
        message.protocolVersion !== undefined && (obj.protocolVersion = message.protocolVersion);
        return obj;
    }
    AboutResponse_BffInfo.toJSON = toJSON;
    function create(base) {
        return AboutResponse_BffInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AboutResponse_BffInfo.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseAboutResponse_BffInfo();
        message.healthy = (_a = object.healthy) !== null && _a !== void 0 ? _a : false;
        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : undefined;
        message.commitHash = (_c = object.commitHash) !== null && _c !== void 0 ? _c : undefined;
        message.publicUrl = (_d = object.publicUrl) !== null && _d !== void 0 ? _d : "";
        message.userCount = (_e = object.userCount) !== null && _e !== void 0 ? _e : undefined;
        message.protocolVersion = (_f = object.protocolVersion) !== null && _f !== void 0 ? _f : undefined;
        return message;
    }
    AboutResponse_BffInfo.fromPartial = fromPartial;
})(AboutResponse_BffInfo || (exports.AboutResponse_BffInfo = AboutResponse_BffInfo = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=about.gen.js.map