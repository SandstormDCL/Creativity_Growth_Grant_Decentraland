import _m0 from "protobufjs/minimal";
import { BorderRect } from "../common/border_rect.gen";
import { Vector2 } from "../common/vectors.gen";
export declare const protobufPackage = "decentraland.realm";
export interface AboutResponse {
    healthy: boolean;
    configurations: AboutResponse_AboutConfiguration | undefined;
    content: AboutResponse_ContentInfo | undefined;
    comms: AboutResponse_CommsInfo | undefined;
    lambdas: AboutResponse_LambdasInfo | undefined;
    bff?: AboutResponse_BffInfo | undefined;
    acceptingUsers: boolean;
}
/**
 * @deprecated This message was never used but it's still here for compatibility reasons
 * The reserved keyword is not working for all the toolset we have, so in the meanwhile it keeps commented
 */
export interface AboutResponse_MinimapConfiguration {
}
export interface AboutResponse_MapConfiguration {
    /** whether the minimap should be rendered */
    minimapEnabled: boolean;
    /**
     * the union of all rects here represents the places where that MAY have scenes
     *  - all the other parcels are considered as empty, up to the explorer to decide if they're walkable or not
     *  - the contained square is determined by points:
     *    - top-left      with  minX, maxY
     *    - bottom-left   with  minX, minY
     *    - top-right     with  maxX, maxY
     *    - bottom-right  with  maxX, maxY
     *  Note: the coordinate system used is the Cartesian coordinate system, where the y-axis increases upwards,
     *    not the screen coordinate system, where the origin is at the top-left corner and the y-axis increases downwards.
     */
    sizes: BorderRect[];
    satelliteView?: AboutResponse_MapConfiguration_ImageViewWithZoomLevel | undefined;
    parcelView?: AboutResponse_MapConfiguration_ParcelView | undefined;
    thumbnailView?: AboutResponse_MapConfiguration_ImageViewWithZoomLevel | undefined;
}
/**
 * ImageViewWithZoomLevel uses a description to render the minimap
 *  using different images with different zoom levels.
 * When `version='v1'`:
 * - The description allows the explorer to form the URL:
 *  url(x,y,zoom_level) = `{base_url}/{zoom_level}/{x},{y}{suffix_url}`
 * - The given URL is for an image where the pixel `0,0` for the image `0,0` always
 *    points to the top-left contained square.
 * - The `zoom_level=1` is to a ratio of 3.2 pixel per parcel, this means in a 32x32 pixel square
 *    you get 10x10 parcels.
 * - Each increase of zoom level, double the ratio pixel per parcels.
 */
export interface AboutResponse_MapConfiguration_ImageViewWithZoomLevel {
    /** options: ['v1'] */
    version: string;
    baseUrl?: string | undefined;
    suffixUrl?: string | undefined;
    topLeftOffset?: Vector2 | undefined;
}
/**
 * ParcelView uses a description to render the minimap
 *  using a image where each pixel is a parcel and each pixel
 *  has the metadata to make a representation (using a shader or image-generation client-side)
 * When `version='v1'`:
 *  - The pixel `0,0` is the top-left contained square
 *  - The image has to be at least of contained square pixels size
 *  - The metadata inside each pixel follows the generated with the atlas server https://github.com/decentraland/atlas-server/blob/af371f2a59745a1f50b0b0b2382984288c4ae891/src/adapters/mini-map-renderer.ts#L27
 */
export interface AboutResponse_MapConfiguration_ParcelView {
    /** options: `v1` */
    version: string;
    imageUrl?: string | undefined;
}
export interface AboutResponse_SkyboxConfiguration {
    /** only one value at a time */
    fixedHour?: number | undefined;
}
export interface AboutResponse_AboutConfiguration {
    realmName?: string | undefined;
    networkId: number;
    globalScenesUrn: string[];
    scenesUrn: string[];
    skybox?: AboutResponse_SkyboxConfiguration | undefined;
    /**
     * A content server to be used to load the parcels around the user. Uses the POST /entities/active endpoint
     * to continously fetch the parcels around the users. if null, then the default content server will be used
     * if == "" then the city_loader will be disabled and the scenes_urn will be used to load the world
     */
    cityLoaderContentServer?: string | undefined;
    map?: AboutResponse_MapConfiguration | undefined;
}
export interface AboutResponse_ContentInfo {
    /** common properties */
    healthy: boolean;
    version?: string | undefined;
    commitHash?: string | undefined;
    publicUrl: string;
}
export interface AboutResponse_LambdasInfo {
    /** common properties */
    healthy: boolean;
    version?: string | undefined;
    commitHash?: string | undefined;
    publicUrl: string;
}
export interface AboutResponse_CommsInfo {
    /** common properties */
    healthy: boolean;
    version?: string | undefined;
    commitHash?: string | undefined;
    publicUrl?: string | undefined;
    /** specific properties */
    protocol: string;
    usersCount?: number | undefined;
    fixedAdapter?: string | undefined;
}
export interface AboutResponse_BffInfo {
    /** common properties */
    healthy: boolean;
    version?: string | undefined;
    commitHash?: string | undefined;
    publicUrl: string;
    /** specific properties */
    userCount?: number | undefined;
    protocolVersion?: string | undefined;
}
export declare namespace AboutResponse {
    function encode(message: AboutResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse;
    function fromJSON(object: any): AboutResponse;
    function toJSON(message: AboutResponse): unknown;
    function create<I extends Exact<DeepPartial<AboutResponse>, I>>(base?: I): AboutResponse;
    function fromPartial<I extends Exact<DeepPartial<AboutResponse>, I>>(object: I): AboutResponse;
}
export declare namespace AboutResponse_MinimapConfiguration {
    function encode(_: AboutResponse_MinimapConfiguration, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse_MinimapConfiguration;
    function fromJSON(_: any): AboutResponse_MinimapConfiguration;
    function toJSON(_: AboutResponse_MinimapConfiguration): unknown;
    function create<I extends Exact<DeepPartial<AboutResponse_MinimapConfiguration>, I>>(base?: I): AboutResponse_MinimapConfiguration;
    function fromPartial<I extends Exact<DeepPartial<AboutResponse_MinimapConfiguration>, I>>(_: I): AboutResponse_MinimapConfiguration;
}
export declare namespace AboutResponse_MapConfiguration {
    function encode(message: AboutResponse_MapConfiguration, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse_MapConfiguration;
    function fromJSON(object: any): AboutResponse_MapConfiguration;
    function toJSON(message: AboutResponse_MapConfiguration): unknown;
    function create<I extends Exact<DeepPartial<AboutResponse_MapConfiguration>, I>>(base?: I): AboutResponse_MapConfiguration;
    function fromPartial<I extends Exact<DeepPartial<AboutResponse_MapConfiguration>, I>>(object: I): AboutResponse_MapConfiguration;
}
export declare namespace AboutResponse_MapConfiguration_ImageViewWithZoomLevel {
    function encode(message: AboutResponse_MapConfiguration_ImageViewWithZoomLevel, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse_MapConfiguration_ImageViewWithZoomLevel;
    function fromJSON(object: any): AboutResponse_MapConfiguration_ImageViewWithZoomLevel;
    function toJSON(message: AboutResponse_MapConfiguration_ImageViewWithZoomLevel): unknown;
    function create<I extends Exact<DeepPartial<AboutResponse_MapConfiguration_ImageViewWithZoomLevel>, I>>(base?: I): AboutResponse_MapConfiguration_ImageViewWithZoomLevel;
    function fromPartial<I extends Exact<DeepPartial<AboutResponse_MapConfiguration_ImageViewWithZoomLevel>, I>>(object: I): AboutResponse_MapConfiguration_ImageViewWithZoomLevel;
}
export declare namespace AboutResponse_MapConfiguration_ParcelView {
    function encode(message: AboutResponse_MapConfiguration_ParcelView, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse_MapConfiguration_ParcelView;
    function fromJSON(object: any): AboutResponse_MapConfiguration_ParcelView;
    function toJSON(message: AboutResponse_MapConfiguration_ParcelView): unknown;
    function create<I extends Exact<DeepPartial<AboutResponse_MapConfiguration_ParcelView>, I>>(base?: I): AboutResponse_MapConfiguration_ParcelView;
    function fromPartial<I extends Exact<DeepPartial<AboutResponse_MapConfiguration_ParcelView>, I>>(object: I): AboutResponse_MapConfiguration_ParcelView;
}
export declare namespace AboutResponse_SkyboxConfiguration {
    function encode(message: AboutResponse_SkyboxConfiguration, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse_SkyboxConfiguration;
    function fromJSON(object: any): AboutResponse_SkyboxConfiguration;
    function toJSON(message: AboutResponse_SkyboxConfiguration): unknown;
    function create<I extends Exact<DeepPartial<AboutResponse_SkyboxConfiguration>, I>>(base?: I): AboutResponse_SkyboxConfiguration;
    function fromPartial<I extends Exact<DeepPartial<AboutResponse_SkyboxConfiguration>, I>>(object: I): AboutResponse_SkyboxConfiguration;
}
export declare namespace AboutResponse_AboutConfiguration {
    function encode(message: AboutResponse_AboutConfiguration, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse_AboutConfiguration;
    function fromJSON(object: any): AboutResponse_AboutConfiguration;
    function toJSON(message: AboutResponse_AboutConfiguration): unknown;
    function create<I extends Exact<DeepPartial<AboutResponse_AboutConfiguration>, I>>(base?: I): AboutResponse_AboutConfiguration;
    function fromPartial<I extends Exact<DeepPartial<AboutResponse_AboutConfiguration>, I>>(object: I): AboutResponse_AboutConfiguration;
}
export declare namespace AboutResponse_ContentInfo {
    function encode(message: AboutResponse_ContentInfo, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse_ContentInfo;
    function fromJSON(object: any): AboutResponse_ContentInfo;
    function toJSON(message: AboutResponse_ContentInfo): unknown;
    function create<I extends Exact<DeepPartial<AboutResponse_ContentInfo>, I>>(base?: I): AboutResponse_ContentInfo;
    function fromPartial<I extends Exact<DeepPartial<AboutResponse_ContentInfo>, I>>(object: I): AboutResponse_ContentInfo;
}
export declare namespace AboutResponse_LambdasInfo {
    function encode(message: AboutResponse_LambdasInfo, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse_LambdasInfo;
    function fromJSON(object: any): AboutResponse_LambdasInfo;
    function toJSON(message: AboutResponse_LambdasInfo): unknown;
    function create<I extends Exact<DeepPartial<AboutResponse_LambdasInfo>, I>>(base?: I): AboutResponse_LambdasInfo;
    function fromPartial<I extends Exact<DeepPartial<AboutResponse_LambdasInfo>, I>>(object: I): AboutResponse_LambdasInfo;
}
export declare namespace AboutResponse_CommsInfo {
    function encode(message: AboutResponse_CommsInfo, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse_CommsInfo;
    function fromJSON(object: any): AboutResponse_CommsInfo;
    function toJSON(message: AboutResponse_CommsInfo): unknown;
    function create<I extends Exact<DeepPartial<AboutResponse_CommsInfo>, I>>(base?: I): AboutResponse_CommsInfo;
    function fromPartial<I extends Exact<DeepPartial<AboutResponse_CommsInfo>, I>>(object: I): AboutResponse_CommsInfo;
}
export declare namespace AboutResponse_BffInfo {
    function encode(message: AboutResponse_BffInfo, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse_BffInfo;
    function fromJSON(object: any): AboutResponse_BffInfo;
    function toJSON(message: AboutResponse_BffInfo): unknown;
    function create<I extends Exact<DeepPartial<AboutResponse_BffInfo>, I>>(base?: I): AboutResponse_BffInfo;
    function fromPartial<I extends Exact<DeepPartial<AboutResponse_BffInfo>, I>>(object: I): AboutResponse_BffInfo;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
