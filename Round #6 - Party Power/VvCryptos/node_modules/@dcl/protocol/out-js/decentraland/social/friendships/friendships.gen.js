"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FriendshipsServiceDefinition = exports.SubscribeFriendshipEventsUpdatesResponse = exports.UpdateFriendshipResponse = exports.RequestEventsResponse = exports.UsersResponse = exports.InternalServerError = exports.TooManyRequestsError = exports.ForbiddenError = exports.UnauthorizedError = exports.BadRequestError = exports.Payload = exports.MutualFriendsPayload = exports.UpdateFriendshipPayload = exports.CancelPayload = exports.CancelResponse = exports.DeletePayload = exports.DeleteResponse = exports.RejectPayload = exports.RejectResponse = exports.AcceptPayload = exports.AcceptResponse = exports.RequestEvents = exports.Requests = exports.RequestPayload = exports.RequestResponse = exports.Users = exports.User = exports.FriendshipEventPayload = exports.FriendshipEventResponses = exports.FriendshipEventResponse = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.social.friendships";
function createBaseFriendshipEventResponse() {
    return { body: undefined };
}
var FriendshipEventResponse;
(function (FriendshipEventResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.body) === null || _a === void 0 ? void 0 : _a.$case) {
            case "request":
                RequestResponse.encode(message.body.request, writer.uint32(10).fork()).ldelim();
                break;
            case "accept":
                AcceptResponse.encode(message.body.accept, writer.uint32(18).fork()).ldelim();
                break;
            case "reject":
                RejectResponse.encode(message.body.reject, writer.uint32(34).fork()).ldelim();
                break;
            case "delete":
                DeleteResponse.encode(message.body.delete, writer.uint32(42).fork()).ldelim();
                break;
            case "cancel":
                CancelResponse.encode(message.body.cancel, writer.uint32(50).fork()).ldelim();
                break;
        }
        return writer;
    }
    FriendshipEventResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFriendshipEventResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.body = { $case: "request", request: RequestResponse.decode(reader, reader.uint32()) };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.body = { $case: "accept", accept: AcceptResponse.decode(reader, reader.uint32()) };
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.body = { $case: "reject", reject: RejectResponse.decode(reader, reader.uint32()) };
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.body = { $case: "delete", delete: DeleteResponse.decode(reader, reader.uint32()) };
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.body = { $case: "cancel", cancel: CancelResponse.decode(reader, reader.uint32()) };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    FriendshipEventResponse.decode = decode;
    function fromJSON(object) {
        return {
            body: isSet(object.request)
                ? { $case: "request", request: RequestResponse.fromJSON(object.request) }
                : isSet(object.accept)
                    ? { $case: "accept", accept: AcceptResponse.fromJSON(object.accept) }
                    : isSet(object.reject)
                        ? { $case: "reject", reject: RejectResponse.fromJSON(object.reject) }
                        : isSet(object.delete)
                            ? { $case: "delete", delete: DeleteResponse.fromJSON(object.delete) }
                            : isSet(object.cancel)
                                ? { $case: "cancel", cancel: CancelResponse.fromJSON(object.cancel) }
                                : undefined,
        };
    }
    FriendshipEventResponse.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const obj = {};
        ((_a = message.body) === null || _a === void 0 ? void 0 : _a.$case) === "request" &&
            (obj.request = ((_b = message.body) === null || _b === void 0 ? void 0 : _b.request) ? RequestResponse.toJSON((_c = message.body) === null || _c === void 0 ? void 0 : _c.request) : undefined);
        ((_d = message.body) === null || _d === void 0 ? void 0 : _d.$case) === "accept" &&
            (obj.accept = ((_e = message.body) === null || _e === void 0 ? void 0 : _e.accept) ? AcceptResponse.toJSON((_f = message.body) === null || _f === void 0 ? void 0 : _f.accept) : undefined);
        ((_g = message.body) === null || _g === void 0 ? void 0 : _g.$case) === "reject" &&
            (obj.reject = ((_h = message.body) === null || _h === void 0 ? void 0 : _h.reject) ? RejectResponse.toJSON((_j = message.body) === null || _j === void 0 ? void 0 : _j.reject) : undefined);
        ((_k = message.body) === null || _k === void 0 ? void 0 : _k.$case) === "delete" &&
            (obj.delete = ((_l = message.body) === null || _l === void 0 ? void 0 : _l.delete) ? DeleteResponse.toJSON((_m = message.body) === null || _m === void 0 ? void 0 : _m.delete) : undefined);
        ((_o = message.body) === null || _o === void 0 ? void 0 : _o.$case) === "cancel" &&
            (obj.cancel = ((_p = message.body) === null || _p === void 0 ? void 0 : _p.cancel) ? CancelResponse.toJSON((_q = message.body) === null || _q === void 0 ? void 0 : _q.cancel) : undefined);
        return obj;
    }
    FriendshipEventResponse.toJSON = toJSON;
    function create(base) {
        return FriendshipEventResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    FriendshipEventResponse.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const message = createBaseFriendshipEventResponse();
        if (((_a = object.body) === null || _a === void 0 ? void 0 : _a.$case) === "request" && ((_b = object.body) === null || _b === void 0 ? void 0 : _b.request) !== undefined && ((_c = object.body) === null || _c === void 0 ? void 0 : _c.request) !== null) {
            message.body = { $case: "request", request: RequestResponse.fromPartial(object.body.request) };
        }
        if (((_d = object.body) === null || _d === void 0 ? void 0 : _d.$case) === "accept" && ((_e = object.body) === null || _e === void 0 ? void 0 : _e.accept) !== undefined && ((_f = object.body) === null || _f === void 0 ? void 0 : _f.accept) !== null) {
            message.body = { $case: "accept", accept: AcceptResponse.fromPartial(object.body.accept) };
        }
        if (((_g = object.body) === null || _g === void 0 ? void 0 : _g.$case) === "reject" && ((_h = object.body) === null || _h === void 0 ? void 0 : _h.reject) !== undefined && ((_j = object.body) === null || _j === void 0 ? void 0 : _j.reject) !== null) {
            message.body = { $case: "reject", reject: RejectResponse.fromPartial(object.body.reject) };
        }
        if (((_k = object.body) === null || _k === void 0 ? void 0 : _k.$case) === "delete" && ((_l = object.body) === null || _l === void 0 ? void 0 : _l.delete) !== undefined && ((_m = object.body) === null || _m === void 0 ? void 0 : _m.delete) !== null) {
            message.body = { $case: "delete", delete: DeleteResponse.fromPartial(object.body.delete) };
        }
        if (((_o = object.body) === null || _o === void 0 ? void 0 : _o.$case) === "cancel" && ((_p = object.body) === null || _p === void 0 ? void 0 : _p.cancel) !== undefined && ((_q = object.body) === null || _q === void 0 ? void 0 : _q.cancel) !== null) {
            message.body = { $case: "cancel", cancel: CancelResponse.fromPartial(object.body.cancel) };
        }
        return message;
    }
    FriendshipEventResponse.fromPartial = fromPartial;
})(FriendshipEventResponse || (exports.FriendshipEventResponse = FriendshipEventResponse = {}));
function createBaseFriendshipEventResponses() {
    return { responses: [] };
}
var FriendshipEventResponses;
(function (FriendshipEventResponses) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.responses) {
            FriendshipEventResponse.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    FriendshipEventResponses.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFriendshipEventResponses();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.responses.push(FriendshipEventResponse.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    FriendshipEventResponses.decode = decode;
    function fromJSON(object) {
        return {
            responses: Array.isArray(object === null || object === void 0 ? void 0 : object.responses)
                ? object.responses.map((e) => FriendshipEventResponse.fromJSON(e))
                : [],
        };
    }
    FriendshipEventResponses.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.responses) {
            obj.responses = message.responses.map((e) => e ? FriendshipEventResponse.toJSON(e) : undefined);
        }
        else {
            obj.responses = [];
        }
        return obj;
    }
    FriendshipEventResponses.toJSON = toJSON;
    function create(base) {
        return FriendshipEventResponses.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    FriendshipEventResponses.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseFriendshipEventResponses();
        message.responses = ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => FriendshipEventResponse.fromPartial(e))) || [];
        return message;
    }
    FriendshipEventResponses.fromPartial = fromPartial;
})(FriendshipEventResponses || (exports.FriendshipEventResponses = FriendshipEventResponses = {}));
function createBaseFriendshipEventPayload() {
    return { body: undefined };
}
var FriendshipEventPayload;
(function (FriendshipEventPayload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.body) === null || _a === void 0 ? void 0 : _a.$case) {
            case "request":
                RequestPayload.encode(message.body.request, writer.uint32(10).fork()).ldelim();
                break;
            case "accept":
                AcceptPayload.encode(message.body.accept, writer.uint32(18).fork()).ldelim();
                break;
            case "reject":
                RejectPayload.encode(message.body.reject, writer.uint32(34).fork()).ldelim();
                break;
            case "delete":
                DeletePayload.encode(message.body.delete, writer.uint32(42).fork()).ldelim();
                break;
            case "cancel":
                CancelPayload.encode(message.body.cancel, writer.uint32(50).fork()).ldelim();
                break;
        }
        return writer;
    }
    FriendshipEventPayload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFriendshipEventPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.body = { $case: "request", request: RequestPayload.decode(reader, reader.uint32()) };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.body = { $case: "accept", accept: AcceptPayload.decode(reader, reader.uint32()) };
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.body = { $case: "reject", reject: RejectPayload.decode(reader, reader.uint32()) };
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.body = { $case: "delete", delete: DeletePayload.decode(reader, reader.uint32()) };
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.body = { $case: "cancel", cancel: CancelPayload.decode(reader, reader.uint32()) };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    FriendshipEventPayload.decode = decode;
    function fromJSON(object) {
        return {
            body: isSet(object.request)
                ? { $case: "request", request: RequestPayload.fromJSON(object.request) }
                : isSet(object.accept)
                    ? { $case: "accept", accept: AcceptPayload.fromJSON(object.accept) }
                    : isSet(object.reject)
                        ? { $case: "reject", reject: RejectPayload.fromJSON(object.reject) }
                        : isSet(object.delete)
                            ? { $case: "delete", delete: DeletePayload.fromJSON(object.delete) }
                            : isSet(object.cancel)
                                ? { $case: "cancel", cancel: CancelPayload.fromJSON(object.cancel) }
                                : undefined,
        };
    }
    FriendshipEventPayload.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const obj = {};
        ((_a = message.body) === null || _a === void 0 ? void 0 : _a.$case) === "request" &&
            (obj.request = ((_b = message.body) === null || _b === void 0 ? void 0 : _b.request) ? RequestPayload.toJSON((_c = message.body) === null || _c === void 0 ? void 0 : _c.request) : undefined);
        ((_d = message.body) === null || _d === void 0 ? void 0 : _d.$case) === "accept" &&
            (obj.accept = ((_e = message.body) === null || _e === void 0 ? void 0 : _e.accept) ? AcceptPayload.toJSON((_f = message.body) === null || _f === void 0 ? void 0 : _f.accept) : undefined);
        ((_g = message.body) === null || _g === void 0 ? void 0 : _g.$case) === "reject" &&
            (obj.reject = ((_h = message.body) === null || _h === void 0 ? void 0 : _h.reject) ? RejectPayload.toJSON((_j = message.body) === null || _j === void 0 ? void 0 : _j.reject) : undefined);
        ((_k = message.body) === null || _k === void 0 ? void 0 : _k.$case) === "delete" &&
            (obj.delete = ((_l = message.body) === null || _l === void 0 ? void 0 : _l.delete) ? DeletePayload.toJSON((_m = message.body) === null || _m === void 0 ? void 0 : _m.delete) : undefined);
        ((_o = message.body) === null || _o === void 0 ? void 0 : _o.$case) === "cancel" &&
            (obj.cancel = ((_p = message.body) === null || _p === void 0 ? void 0 : _p.cancel) ? CancelPayload.toJSON((_q = message.body) === null || _q === void 0 ? void 0 : _q.cancel) : undefined);
        return obj;
    }
    FriendshipEventPayload.toJSON = toJSON;
    function create(base) {
        return FriendshipEventPayload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    FriendshipEventPayload.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const message = createBaseFriendshipEventPayload();
        if (((_a = object.body) === null || _a === void 0 ? void 0 : _a.$case) === "request" && ((_b = object.body) === null || _b === void 0 ? void 0 : _b.request) !== undefined && ((_c = object.body) === null || _c === void 0 ? void 0 : _c.request) !== null) {
            message.body = { $case: "request", request: RequestPayload.fromPartial(object.body.request) };
        }
        if (((_d = object.body) === null || _d === void 0 ? void 0 : _d.$case) === "accept" && ((_e = object.body) === null || _e === void 0 ? void 0 : _e.accept) !== undefined && ((_f = object.body) === null || _f === void 0 ? void 0 : _f.accept) !== null) {
            message.body = { $case: "accept", accept: AcceptPayload.fromPartial(object.body.accept) };
        }
        if (((_g = object.body) === null || _g === void 0 ? void 0 : _g.$case) === "reject" && ((_h = object.body) === null || _h === void 0 ? void 0 : _h.reject) !== undefined && ((_j = object.body) === null || _j === void 0 ? void 0 : _j.reject) !== null) {
            message.body = { $case: "reject", reject: RejectPayload.fromPartial(object.body.reject) };
        }
        if (((_k = object.body) === null || _k === void 0 ? void 0 : _k.$case) === "delete" && ((_l = object.body) === null || _l === void 0 ? void 0 : _l.delete) !== undefined && ((_m = object.body) === null || _m === void 0 ? void 0 : _m.delete) !== null) {
            message.body = { $case: "delete", delete: DeletePayload.fromPartial(object.body.delete) };
        }
        if (((_o = object.body) === null || _o === void 0 ? void 0 : _o.$case) === "cancel" && ((_p = object.body) === null || _p === void 0 ? void 0 : _p.cancel) !== undefined && ((_q = object.body) === null || _q === void 0 ? void 0 : _q.cancel) !== null) {
            message.body = { $case: "cancel", cancel: CancelPayload.fromPartial(object.body.cancel) };
        }
        return message;
    }
    FriendshipEventPayload.fromPartial = fromPartial;
})(FriendshipEventPayload || (exports.FriendshipEventPayload = FriendshipEventPayload = {}));
function createBaseUser() {
    return { address: "" };
}
var User;
(function (User) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    }
    User.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    User.decode = decode;
    function fromJSON(object) {
        return { address: isSet(object.address) ? String(object.address) : "" };
    }
    User.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        return obj;
    }
    User.toJSON = toJSON;
    function create(base) {
        return User.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    User.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseUser();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    User.fromPartial = fromPartial;
})(User || (exports.User = User = {}));
function createBaseUsers() {
    return { users: [] };
}
var Users;
(function (Users) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.users) {
            User.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    Users.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUsers();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.users.push(User.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Users.decode = decode;
    function fromJSON(object) {
        return { users: Array.isArray(object === null || object === void 0 ? void 0 : object.users) ? object.users.map((e) => User.fromJSON(e)) : [] };
    }
    Users.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.users) {
            obj.users = message.users.map((e) => e ? User.toJSON(e) : undefined);
        }
        else {
            obj.users = [];
        }
        return obj;
    }
    Users.toJSON = toJSON;
    function create(base) {
        return Users.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Users.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseUsers();
        message.users = ((_a = object.users) === null || _a === void 0 ? void 0 : _a.map((e) => User.fromPartial(e))) || [];
        return message;
    }
    Users.fromPartial = fromPartial;
})(Users || (exports.Users = Users = {}));
function createBaseRequestResponse() {
    return { user: undefined, createdAt: 0, message: undefined };
}
var RequestResponse;
(function (RequestResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        if (message.createdAt !== 0) {
            writer.uint32(16).int64(message.createdAt);
        }
        if (message.message !== undefined) {
            writer.uint32(26).string(message.message);
        }
        return writer;
    }
    RequestResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.createdAt = longToNumber(reader.int64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    RequestResponse.decode = decode;
    function fromJSON(object) {
        return {
            user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
            createdAt: isSet(object.createdAt) ? Number(object.createdAt) : 0,
            message: isSet(object.message) ? String(object.message) : undefined,
        };
    }
    RequestResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        message.createdAt !== undefined && (obj.createdAt = Math.round(message.createdAt));
        message.message !== undefined && (obj.message = message.message);
        return obj;
    }
    RequestResponse.toJSON = toJSON;
    function create(base) {
        return RequestResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    RequestResponse.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseRequestResponse();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        message.createdAt = (_a = object.createdAt) !== null && _a !== void 0 ? _a : 0;
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : undefined;
        return message;
    }
    RequestResponse.fromPartial = fromPartial;
})(RequestResponse || (exports.RequestResponse = RequestResponse = {}));
function createBaseRequestPayload() {
    return { user: undefined, message: undefined };
}
var RequestPayload;
(function (RequestPayload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        if (message.message !== undefined) {
            writer.uint32(26).string(message.message);
        }
        return writer;
    }
    RequestPayload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    RequestPayload.decode = decode;
    function fromJSON(object) {
        return {
            user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
            message: isSet(object.message) ? String(object.message) : undefined,
        };
    }
    RequestPayload.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        message.message !== undefined && (obj.message = message.message);
        return obj;
    }
    RequestPayload.toJSON = toJSON;
    function create(base) {
        return RequestPayload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    RequestPayload.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseRequestPayload();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : undefined;
        return message;
    }
    RequestPayload.fromPartial = fromPartial;
})(RequestPayload || (exports.RequestPayload = RequestPayload = {}));
function createBaseRequests() {
    return { total: 0, items: [] };
}
var Requests;
(function (Requests) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.total !== 0) {
            writer.uint32(8).int64(message.total);
        }
        for (const v of message.items) {
            RequestResponse.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    Requests.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequests();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.total = longToNumber(reader.int64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.items.push(RequestResponse.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Requests.decode = decode;
    function fromJSON(object) {
        return {
            total: isSet(object.total) ? Number(object.total) : 0,
            items: Array.isArray(object === null || object === void 0 ? void 0 : object.items) ? object.items.map((e) => RequestResponse.fromJSON(e)) : [],
        };
    }
    Requests.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.total !== undefined && (obj.total = Math.round(message.total));
        if (message.items) {
            obj.items = message.items.map((e) => e ? RequestResponse.toJSON(e) : undefined);
        }
        else {
            obj.items = [];
        }
        return obj;
    }
    Requests.toJSON = toJSON;
    function create(base) {
        return Requests.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Requests.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseRequests();
        message.total = (_a = object.total) !== null && _a !== void 0 ? _a : 0;
        message.items = ((_b = object.items) === null || _b === void 0 ? void 0 : _b.map((e) => RequestResponse.fromPartial(e))) || [];
        return message;
    }
    Requests.fromPartial = fromPartial;
})(Requests || (exports.Requests = Requests = {}));
function createBaseRequestEvents() {
    return { outgoing: undefined, incoming: undefined };
}
var RequestEvents;
(function (RequestEvents) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.outgoing !== undefined) {
            Requests.encode(message.outgoing, writer.uint32(10).fork()).ldelim();
        }
        if (message.incoming !== undefined) {
            Requests.encode(message.incoming, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    RequestEvents.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestEvents();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.outgoing = Requests.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.incoming = Requests.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    RequestEvents.decode = decode;
    function fromJSON(object) {
        return {
            outgoing: isSet(object.outgoing) ? Requests.fromJSON(object.outgoing) : undefined,
            incoming: isSet(object.incoming) ? Requests.fromJSON(object.incoming) : undefined,
        };
    }
    RequestEvents.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.outgoing !== undefined && (obj.outgoing = message.outgoing ? Requests.toJSON(message.outgoing) : undefined);
        message.incoming !== undefined && (obj.incoming = message.incoming ? Requests.toJSON(message.incoming) : undefined);
        return obj;
    }
    RequestEvents.toJSON = toJSON;
    function create(base) {
        return RequestEvents.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    RequestEvents.create = create;
    function fromPartial(object) {
        const message = createBaseRequestEvents();
        message.outgoing = (object.outgoing !== undefined && object.outgoing !== null)
            ? Requests.fromPartial(object.outgoing)
            : undefined;
        message.incoming = (object.incoming !== undefined && object.incoming !== null)
            ? Requests.fromPartial(object.incoming)
            : undefined;
        return message;
    }
    RequestEvents.fromPartial = fromPartial;
})(RequestEvents || (exports.RequestEvents = RequestEvents = {}));
function createBaseAcceptResponse() {
    return { user: undefined };
}
var AcceptResponse;
(function (AcceptResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    AcceptResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAcceptResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AcceptResponse.decode = decode;
    function fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    }
    AcceptResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        return obj;
    }
    AcceptResponse.toJSON = toJSON;
    function create(base) {
        return AcceptResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AcceptResponse.create = create;
    function fromPartial(object) {
        const message = createBaseAcceptResponse();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    }
    AcceptResponse.fromPartial = fromPartial;
})(AcceptResponse || (exports.AcceptResponse = AcceptResponse = {}));
function createBaseAcceptPayload() {
    return { user: undefined };
}
var AcceptPayload;
(function (AcceptPayload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    AcceptPayload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAcceptPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AcceptPayload.decode = decode;
    function fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    }
    AcceptPayload.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        return obj;
    }
    AcceptPayload.toJSON = toJSON;
    function create(base) {
        return AcceptPayload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AcceptPayload.create = create;
    function fromPartial(object) {
        const message = createBaseAcceptPayload();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    }
    AcceptPayload.fromPartial = fromPartial;
})(AcceptPayload || (exports.AcceptPayload = AcceptPayload = {}));
function createBaseRejectResponse() {
    return { user: undefined };
}
var RejectResponse;
(function (RejectResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    RejectResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRejectResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    RejectResponse.decode = decode;
    function fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    }
    RejectResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        return obj;
    }
    RejectResponse.toJSON = toJSON;
    function create(base) {
        return RejectResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    RejectResponse.create = create;
    function fromPartial(object) {
        const message = createBaseRejectResponse();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    }
    RejectResponse.fromPartial = fromPartial;
})(RejectResponse || (exports.RejectResponse = RejectResponse = {}));
function createBaseRejectPayload() {
    return { user: undefined };
}
var RejectPayload;
(function (RejectPayload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    RejectPayload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRejectPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    RejectPayload.decode = decode;
    function fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    }
    RejectPayload.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        return obj;
    }
    RejectPayload.toJSON = toJSON;
    function create(base) {
        return RejectPayload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    RejectPayload.create = create;
    function fromPartial(object) {
        const message = createBaseRejectPayload();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    }
    RejectPayload.fromPartial = fromPartial;
})(RejectPayload || (exports.RejectPayload = RejectPayload = {}));
function createBaseDeleteResponse() {
    return { user: undefined };
}
var DeleteResponse;
(function (DeleteResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    DeleteResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    DeleteResponse.decode = decode;
    function fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    }
    DeleteResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        return obj;
    }
    DeleteResponse.toJSON = toJSON;
    function create(base) {
        return DeleteResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    DeleteResponse.create = create;
    function fromPartial(object) {
        const message = createBaseDeleteResponse();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    }
    DeleteResponse.fromPartial = fromPartial;
})(DeleteResponse || (exports.DeleteResponse = DeleteResponse = {}));
function createBaseDeletePayload() {
    return { user: undefined };
}
var DeletePayload;
(function (DeletePayload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    DeletePayload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeletePayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    DeletePayload.decode = decode;
    function fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    }
    DeletePayload.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        return obj;
    }
    DeletePayload.toJSON = toJSON;
    function create(base) {
        return DeletePayload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    DeletePayload.create = create;
    function fromPartial(object) {
        const message = createBaseDeletePayload();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    }
    DeletePayload.fromPartial = fromPartial;
})(DeletePayload || (exports.DeletePayload = DeletePayload = {}));
function createBaseCancelResponse() {
    return { user: undefined };
}
var CancelResponse;
(function (CancelResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    CancelResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCancelResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    CancelResponse.decode = decode;
    function fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    }
    CancelResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        return obj;
    }
    CancelResponse.toJSON = toJSON;
    function create(base) {
        return CancelResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    CancelResponse.create = create;
    function fromPartial(object) {
        const message = createBaseCancelResponse();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    }
    CancelResponse.fromPartial = fromPartial;
})(CancelResponse || (exports.CancelResponse = CancelResponse = {}));
function createBaseCancelPayload() {
    return { user: undefined };
}
var CancelPayload;
(function (CancelPayload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    CancelPayload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCancelPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    CancelPayload.decode = decode;
    function fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    }
    CancelPayload.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        return obj;
    }
    CancelPayload.toJSON = toJSON;
    function create(base) {
        return CancelPayload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    CancelPayload.create = create;
    function fromPartial(object) {
        const message = createBaseCancelPayload();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    }
    CancelPayload.fromPartial = fromPartial;
})(CancelPayload || (exports.CancelPayload = CancelPayload = {}));
function createBaseUpdateFriendshipPayload() {
    return { event: undefined, authToken: undefined };
}
var UpdateFriendshipPayload;
(function (UpdateFriendshipPayload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.event !== undefined) {
            FriendshipEventPayload.encode(message.event, writer.uint32(10).fork()).ldelim();
        }
        if (message.authToken !== undefined) {
            Payload.encode(message.authToken, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    UpdateFriendshipPayload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateFriendshipPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.event = FriendshipEventPayload.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.authToken = Payload.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    UpdateFriendshipPayload.decode = decode;
    function fromJSON(object) {
        return {
            event: isSet(object.event) ? FriendshipEventPayload.fromJSON(object.event) : undefined,
            authToken: isSet(object.authToken) ? Payload.fromJSON(object.authToken) : undefined,
        };
    }
    UpdateFriendshipPayload.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.event !== undefined &&
            (obj.event = message.event ? FriendshipEventPayload.toJSON(message.event) : undefined);
        message.authToken !== undefined &&
            (obj.authToken = message.authToken ? Payload.toJSON(message.authToken) : undefined);
        return obj;
    }
    UpdateFriendshipPayload.toJSON = toJSON;
    function create(base) {
        return UpdateFriendshipPayload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    UpdateFriendshipPayload.create = create;
    function fromPartial(object) {
        const message = createBaseUpdateFriendshipPayload();
        message.event = (object.event !== undefined && object.event !== null)
            ? FriendshipEventPayload.fromPartial(object.event)
            : undefined;
        message.authToken = (object.authToken !== undefined && object.authToken !== null)
            ? Payload.fromPartial(object.authToken)
            : undefined;
        return message;
    }
    UpdateFriendshipPayload.fromPartial = fromPartial;
})(UpdateFriendshipPayload || (exports.UpdateFriendshipPayload = UpdateFriendshipPayload = {}));
function createBaseMutualFriendsPayload() {
    return { user: undefined, authToken: undefined };
}
var MutualFriendsPayload;
(function (MutualFriendsPayload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        if (message.authToken !== undefined) {
            Payload.encode(message.authToken, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    MutualFriendsPayload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMutualFriendsPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.authToken = Payload.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    MutualFriendsPayload.decode = decode;
    function fromJSON(object) {
        return {
            user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
            authToken: isSet(object.authToken) ? Payload.fromJSON(object.authToken) : undefined,
        };
    }
    MutualFriendsPayload.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user ? User.toJSON(message.user) : undefined);
        message.authToken !== undefined &&
            (obj.authToken = message.authToken ? Payload.toJSON(message.authToken) : undefined);
        return obj;
    }
    MutualFriendsPayload.toJSON = toJSON;
    function create(base) {
        return MutualFriendsPayload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    MutualFriendsPayload.create = create;
    function fromPartial(object) {
        const message = createBaseMutualFriendsPayload();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        message.authToken = (object.authToken !== undefined && object.authToken !== null)
            ? Payload.fromPartial(object.authToken)
            : undefined;
        return message;
    }
    MutualFriendsPayload.fromPartial = fromPartial;
})(MutualFriendsPayload || (exports.MutualFriendsPayload = MutualFriendsPayload = {}));
function createBasePayload() {
    return { synapseToken: undefined };
}
var Payload;
(function (Payload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.synapseToken !== undefined) {
            writer.uint32(10).string(message.synapseToken);
        }
        return writer;
    }
    Payload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.synapseToken = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Payload.decode = decode;
    function fromJSON(object) {
        return { synapseToken: isSet(object.synapseToken) ? String(object.synapseToken) : undefined };
    }
    Payload.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.synapseToken !== undefined && (obj.synapseToken = message.synapseToken);
        return obj;
    }
    Payload.toJSON = toJSON;
    function create(base) {
        return Payload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Payload.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBasePayload();
        message.synapseToken = (_a = object.synapseToken) !== null && _a !== void 0 ? _a : undefined;
        return message;
    }
    Payload.fromPartial = fromPartial;
})(Payload || (exports.Payload = Payload = {}));
function createBaseBadRequestError() {
    return { message: "" };
}
var BadRequestError;
(function (BadRequestError) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    }
    BadRequestError.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBadRequestError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    BadRequestError.decode = decode;
    function fromJSON(object) {
        return { message: isSet(object.message) ? String(object.message) : "" };
    }
    BadRequestError.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.message !== undefined && (obj.message = message.message);
        return obj;
    }
    BadRequestError.toJSON = toJSON;
    function create(base) {
        return BadRequestError.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    BadRequestError.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseBadRequestError();
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    BadRequestError.fromPartial = fromPartial;
})(BadRequestError || (exports.BadRequestError = BadRequestError = {}));
function createBaseUnauthorizedError() {
    return { message: "" };
}
var UnauthorizedError;
(function (UnauthorizedError) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    }
    UnauthorizedError.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnauthorizedError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    UnauthorizedError.decode = decode;
    function fromJSON(object) {
        return { message: isSet(object.message) ? String(object.message) : "" };
    }
    UnauthorizedError.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.message !== undefined && (obj.message = message.message);
        return obj;
    }
    UnauthorizedError.toJSON = toJSON;
    function create(base) {
        return UnauthorizedError.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    UnauthorizedError.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseUnauthorizedError();
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    UnauthorizedError.fromPartial = fromPartial;
})(UnauthorizedError || (exports.UnauthorizedError = UnauthorizedError = {}));
function createBaseForbiddenError() {
    return { message: "" };
}
var ForbiddenError;
(function (ForbiddenError) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    }
    ForbiddenError.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseForbiddenError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ForbiddenError.decode = decode;
    function fromJSON(object) {
        return { message: isSet(object.message) ? String(object.message) : "" };
    }
    ForbiddenError.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.message !== undefined && (obj.message = message.message);
        return obj;
    }
    ForbiddenError.toJSON = toJSON;
    function create(base) {
        return ForbiddenError.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ForbiddenError.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseForbiddenError();
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    ForbiddenError.fromPartial = fromPartial;
})(ForbiddenError || (exports.ForbiddenError = ForbiddenError = {}));
function createBaseTooManyRequestsError() {
    return { message: "" };
}
var TooManyRequestsError;
(function (TooManyRequestsError) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    }
    TooManyRequestsError.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTooManyRequestsError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    TooManyRequestsError.decode = decode;
    function fromJSON(object) {
        return { message: isSet(object.message) ? String(object.message) : "" };
    }
    TooManyRequestsError.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.message !== undefined && (obj.message = message.message);
        return obj;
    }
    TooManyRequestsError.toJSON = toJSON;
    function create(base) {
        return TooManyRequestsError.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    TooManyRequestsError.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseTooManyRequestsError();
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    TooManyRequestsError.fromPartial = fromPartial;
})(TooManyRequestsError || (exports.TooManyRequestsError = TooManyRequestsError = {}));
function createBaseInternalServerError() {
    return { message: "" };
}
var InternalServerError;
(function (InternalServerError) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    }
    InternalServerError.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInternalServerError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    InternalServerError.decode = decode;
    function fromJSON(object) {
        return { message: isSet(object.message) ? String(object.message) : "" };
    }
    InternalServerError.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.message !== undefined && (obj.message = message.message);
        return obj;
    }
    InternalServerError.toJSON = toJSON;
    function create(base) {
        return InternalServerError.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    InternalServerError.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseInternalServerError();
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    InternalServerError.fromPartial = fromPartial;
})(InternalServerError || (exports.InternalServerError = InternalServerError = {}));
function createBaseUsersResponse() {
    return { response: undefined };
}
var UsersResponse;
(function (UsersResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) {
            case "users":
                Users.encode(message.response.users, writer.uint32(10).fork()).ldelim();
                break;
            case "internalServerError":
                InternalServerError.encode(message.response.internalServerError, writer.uint32(18).fork()).ldelim();
                break;
            case "unauthorizedError":
                UnauthorizedError.encode(message.response.unauthorizedError, writer.uint32(26).fork()).ldelim();
                break;
            case "forbiddenError":
                ForbiddenError.encode(message.response.forbiddenError, writer.uint32(34).fork()).ldelim();
                break;
            case "tooManyRequestsError":
                TooManyRequestsError.encode(message.response.tooManyRequestsError, writer.uint32(42).fork()).ldelim();
                break;
            case "badRequestError":
                BadRequestError.encode(message.response.badRequestError, writer.uint32(50).fork()).ldelim();
                break;
        }
        return writer;
    }
    UsersResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUsersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.response = { $case: "users", users: Users.decode(reader, reader.uint32()) };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = {
                        $case: "internalServerError",
                        internalServerError: InternalServerError.decode(reader, reader.uint32()),
                    };
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.response = {
                        $case: "unauthorizedError",
                        unauthorizedError: UnauthorizedError.decode(reader, reader.uint32()),
                    };
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.response = {
                        $case: "forbiddenError",
                        forbiddenError: ForbiddenError.decode(reader, reader.uint32()),
                    };
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.response = {
                        $case: "tooManyRequestsError",
                        tooManyRequestsError: TooManyRequestsError.decode(reader, reader.uint32()),
                    };
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.response = {
                        $case: "badRequestError",
                        badRequestError: BadRequestError.decode(reader, reader.uint32()),
                    };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    UsersResponse.decode = decode;
    function fromJSON(object) {
        return {
            response: isSet(object.users)
                ? { $case: "users", users: Users.fromJSON(object.users) }
                : isSet(object.internalServerError)
                    ? {
                        $case: "internalServerError",
                        internalServerError: InternalServerError.fromJSON(object.internalServerError),
                    }
                    : isSet(object.unauthorizedError)
                        ? { $case: "unauthorizedError", unauthorizedError: UnauthorizedError.fromJSON(object.unauthorizedError) }
                        : isSet(object.forbiddenError)
                            ? { $case: "forbiddenError", forbiddenError: ForbiddenError.fromJSON(object.forbiddenError) }
                            : isSet(object.tooManyRequestsError)
                                ? {
                                    $case: "tooManyRequestsError",
                                    tooManyRequestsError: TooManyRequestsError.fromJSON(object.tooManyRequestsError),
                                }
                                : isSet(object.badRequestError)
                                    ? { $case: "badRequestError", badRequestError: BadRequestError.fromJSON(object.badRequestError) }
                                    : undefined,
        };
    }
    UsersResponse.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        const obj = {};
        ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) === "users" &&
            (obj.users = ((_b = message.response) === null || _b === void 0 ? void 0 : _b.users) ? Users.toJSON((_c = message.response) === null || _c === void 0 ? void 0 : _c.users) : undefined);
        ((_d = message.response) === null || _d === void 0 ? void 0 : _d.$case) === "internalServerError" &&
            (obj.internalServerError = ((_e = message.response) === null || _e === void 0 ? void 0 : _e.internalServerError)
                ? InternalServerError.toJSON((_f = message.response) === null || _f === void 0 ? void 0 : _f.internalServerError)
                : undefined);
        ((_g = message.response) === null || _g === void 0 ? void 0 : _g.$case) === "unauthorizedError" &&
            (obj.unauthorizedError = ((_h = message.response) === null || _h === void 0 ? void 0 : _h.unauthorizedError)
                ? UnauthorizedError.toJSON((_j = message.response) === null || _j === void 0 ? void 0 : _j.unauthorizedError)
                : undefined);
        ((_k = message.response) === null || _k === void 0 ? void 0 : _k.$case) === "forbiddenError" &&
            (obj.forbiddenError = ((_l = message.response) === null || _l === void 0 ? void 0 : _l.forbiddenError)
                ? ForbiddenError.toJSON((_m = message.response) === null || _m === void 0 ? void 0 : _m.forbiddenError)
                : undefined);
        ((_o = message.response) === null || _o === void 0 ? void 0 : _o.$case) === "tooManyRequestsError" &&
            (obj.tooManyRequestsError = ((_p = message.response) === null || _p === void 0 ? void 0 : _p.tooManyRequestsError)
                ? TooManyRequestsError.toJSON((_q = message.response) === null || _q === void 0 ? void 0 : _q.tooManyRequestsError)
                : undefined);
        ((_r = message.response) === null || _r === void 0 ? void 0 : _r.$case) === "badRequestError" &&
            (obj.badRequestError = ((_s = message.response) === null || _s === void 0 ? void 0 : _s.badRequestError)
                ? BadRequestError.toJSON((_t = message.response) === null || _t === void 0 ? void 0 : _t.badRequestError)
                : undefined);
        return obj;
    }
    UsersResponse.toJSON = toJSON;
    function create(base) {
        return UsersResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    UsersResponse.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        const message = createBaseUsersResponse();
        if (((_a = object.response) === null || _a === void 0 ? void 0 : _a.$case) === "users" && ((_b = object.response) === null || _b === void 0 ? void 0 : _b.users) !== undefined && ((_c = object.response) === null || _c === void 0 ? void 0 : _c.users) !== null) {
            message.response = { $case: "users", users: Users.fromPartial(object.response.users) };
        }
        if (((_d = object.response) === null || _d === void 0 ? void 0 : _d.$case) === "internalServerError" &&
            ((_e = object.response) === null || _e === void 0 ? void 0 : _e.internalServerError) !== undefined &&
            ((_f = object.response) === null || _f === void 0 ? void 0 : _f.internalServerError) !== null) {
            message.response = {
                $case: "internalServerError",
                internalServerError: InternalServerError.fromPartial(object.response.internalServerError),
            };
        }
        if (((_g = object.response) === null || _g === void 0 ? void 0 : _g.$case) === "unauthorizedError" &&
            ((_h = object.response) === null || _h === void 0 ? void 0 : _h.unauthorizedError) !== undefined &&
            ((_j = object.response) === null || _j === void 0 ? void 0 : _j.unauthorizedError) !== null) {
            message.response = {
                $case: "unauthorizedError",
                unauthorizedError: UnauthorizedError.fromPartial(object.response.unauthorizedError),
            };
        }
        if (((_k = object.response) === null || _k === void 0 ? void 0 : _k.$case) === "forbiddenError" &&
            ((_l = object.response) === null || _l === void 0 ? void 0 : _l.forbiddenError) !== undefined &&
            ((_m = object.response) === null || _m === void 0 ? void 0 : _m.forbiddenError) !== null) {
            message.response = {
                $case: "forbiddenError",
                forbiddenError: ForbiddenError.fromPartial(object.response.forbiddenError),
            };
        }
        if (((_o = object.response) === null || _o === void 0 ? void 0 : _o.$case) === "tooManyRequestsError" &&
            ((_p = object.response) === null || _p === void 0 ? void 0 : _p.tooManyRequestsError) !== undefined &&
            ((_q = object.response) === null || _q === void 0 ? void 0 : _q.tooManyRequestsError) !== null) {
            message.response = {
                $case: "tooManyRequestsError",
                tooManyRequestsError: TooManyRequestsError.fromPartial(object.response.tooManyRequestsError),
            };
        }
        if (((_r = object.response) === null || _r === void 0 ? void 0 : _r.$case) === "badRequestError" &&
            ((_s = object.response) === null || _s === void 0 ? void 0 : _s.badRequestError) !== undefined &&
            ((_t = object.response) === null || _t === void 0 ? void 0 : _t.badRequestError) !== null) {
            message.response = {
                $case: "badRequestError",
                badRequestError: BadRequestError.fromPartial(object.response.badRequestError),
            };
        }
        return message;
    }
    UsersResponse.fromPartial = fromPartial;
})(UsersResponse || (exports.UsersResponse = UsersResponse = {}));
function createBaseRequestEventsResponse() {
    return { response: undefined };
}
var RequestEventsResponse;
(function (RequestEventsResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) {
            case "events":
                RequestEvents.encode(message.response.events, writer.uint32(10).fork()).ldelim();
                break;
            case "internalServerError":
                InternalServerError.encode(message.response.internalServerError, writer.uint32(18).fork()).ldelim();
                break;
            case "unauthorizedError":
                UnauthorizedError.encode(message.response.unauthorizedError, writer.uint32(26).fork()).ldelim();
                break;
            case "forbiddenError":
                ForbiddenError.encode(message.response.forbiddenError, writer.uint32(34).fork()).ldelim();
                break;
            case "tooManyRequestsError":
                TooManyRequestsError.encode(message.response.tooManyRequestsError, writer.uint32(42).fork()).ldelim();
                break;
        }
        return writer;
    }
    RequestEventsResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.response = { $case: "events", events: RequestEvents.decode(reader, reader.uint32()) };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = {
                        $case: "internalServerError",
                        internalServerError: InternalServerError.decode(reader, reader.uint32()),
                    };
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.response = {
                        $case: "unauthorizedError",
                        unauthorizedError: UnauthorizedError.decode(reader, reader.uint32()),
                    };
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.response = {
                        $case: "forbiddenError",
                        forbiddenError: ForbiddenError.decode(reader, reader.uint32()),
                    };
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.response = {
                        $case: "tooManyRequestsError",
                        tooManyRequestsError: TooManyRequestsError.decode(reader, reader.uint32()),
                    };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    RequestEventsResponse.decode = decode;
    function fromJSON(object) {
        return {
            response: isSet(object.events)
                ? { $case: "events", events: RequestEvents.fromJSON(object.events) }
                : isSet(object.internalServerError)
                    ? {
                        $case: "internalServerError",
                        internalServerError: InternalServerError.fromJSON(object.internalServerError),
                    }
                    : isSet(object.unauthorizedError)
                        ? { $case: "unauthorizedError", unauthorizedError: UnauthorizedError.fromJSON(object.unauthorizedError) }
                        : isSet(object.forbiddenError)
                            ? { $case: "forbiddenError", forbiddenError: ForbiddenError.fromJSON(object.forbiddenError) }
                            : isSet(object.tooManyRequestsError)
                                ? {
                                    $case: "tooManyRequestsError",
                                    tooManyRequestsError: TooManyRequestsError.fromJSON(object.tooManyRequestsError),
                                }
                                : undefined,
        };
    }
    RequestEventsResponse.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const obj = {};
        ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) === "events" &&
            (obj.events = ((_b = message.response) === null || _b === void 0 ? void 0 : _b.events) ? RequestEvents.toJSON((_c = message.response) === null || _c === void 0 ? void 0 : _c.events) : undefined);
        ((_d = message.response) === null || _d === void 0 ? void 0 : _d.$case) === "internalServerError" &&
            (obj.internalServerError = ((_e = message.response) === null || _e === void 0 ? void 0 : _e.internalServerError)
                ? InternalServerError.toJSON((_f = message.response) === null || _f === void 0 ? void 0 : _f.internalServerError)
                : undefined);
        ((_g = message.response) === null || _g === void 0 ? void 0 : _g.$case) === "unauthorizedError" &&
            (obj.unauthorizedError = ((_h = message.response) === null || _h === void 0 ? void 0 : _h.unauthorizedError)
                ? UnauthorizedError.toJSON((_j = message.response) === null || _j === void 0 ? void 0 : _j.unauthorizedError)
                : undefined);
        ((_k = message.response) === null || _k === void 0 ? void 0 : _k.$case) === "forbiddenError" &&
            (obj.forbiddenError = ((_l = message.response) === null || _l === void 0 ? void 0 : _l.forbiddenError)
                ? ForbiddenError.toJSON((_m = message.response) === null || _m === void 0 ? void 0 : _m.forbiddenError)
                : undefined);
        ((_o = message.response) === null || _o === void 0 ? void 0 : _o.$case) === "tooManyRequestsError" &&
            (obj.tooManyRequestsError = ((_p = message.response) === null || _p === void 0 ? void 0 : _p.tooManyRequestsError)
                ? TooManyRequestsError.toJSON((_q = message.response) === null || _q === void 0 ? void 0 : _q.tooManyRequestsError)
                : undefined);
        return obj;
    }
    RequestEventsResponse.toJSON = toJSON;
    function create(base) {
        return RequestEventsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    RequestEventsResponse.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const message = createBaseRequestEventsResponse();
        if (((_a = object.response) === null || _a === void 0 ? void 0 : _a.$case) === "events" && ((_b = object.response) === null || _b === void 0 ? void 0 : _b.events) !== undefined && ((_c = object.response) === null || _c === void 0 ? void 0 : _c.events) !== null) {
            message.response = { $case: "events", events: RequestEvents.fromPartial(object.response.events) };
        }
        if (((_d = object.response) === null || _d === void 0 ? void 0 : _d.$case) === "internalServerError" &&
            ((_e = object.response) === null || _e === void 0 ? void 0 : _e.internalServerError) !== undefined &&
            ((_f = object.response) === null || _f === void 0 ? void 0 : _f.internalServerError) !== null) {
            message.response = {
                $case: "internalServerError",
                internalServerError: InternalServerError.fromPartial(object.response.internalServerError),
            };
        }
        if (((_g = object.response) === null || _g === void 0 ? void 0 : _g.$case) === "unauthorizedError" &&
            ((_h = object.response) === null || _h === void 0 ? void 0 : _h.unauthorizedError) !== undefined &&
            ((_j = object.response) === null || _j === void 0 ? void 0 : _j.unauthorizedError) !== null) {
            message.response = {
                $case: "unauthorizedError",
                unauthorizedError: UnauthorizedError.fromPartial(object.response.unauthorizedError),
            };
        }
        if (((_k = object.response) === null || _k === void 0 ? void 0 : _k.$case) === "forbiddenError" &&
            ((_l = object.response) === null || _l === void 0 ? void 0 : _l.forbiddenError) !== undefined &&
            ((_m = object.response) === null || _m === void 0 ? void 0 : _m.forbiddenError) !== null) {
            message.response = {
                $case: "forbiddenError",
                forbiddenError: ForbiddenError.fromPartial(object.response.forbiddenError),
            };
        }
        if (((_o = object.response) === null || _o === void 0 ? void 0 : _o.$case) === "tooManyRequestsError" &&
            ((_p = object.response) === null || _p === void 0 ? void 0 : _p.tooManyRequestsError) !== undefined &&
            ((_q = object.response) === null || _q === void 0 ? void 0 : _q.tooManyRequestsError) !== null) {
            message.response = {
                $case: "tooManyRequestsError",
                tooManyRequestsError: TooManyRequestsError.fromPartial(object.response.tooManyRequestsError),
            };
        }
        return message;
    }
    RequestEventsResponse.fromPartial = fromPartial;
})(RequestEventsResponse || (exports.RequestEventsResponse = RequestEventsResponse = {}));
function createBaseUpdateFriendshipResponse() {
    return { response: undefined };
}
var UpdateFriendshipResponse;
(function (UpdateFriendshipResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) {
            case "event":
                FriendshipEventResponse.encode(message.response.event, writer.uint32(10).fork()).ldelim();
                break;
            case "internalServerError":
                InternalServerError.encode(message.response.internalServerError, writer.uint32(18).fork()).ldelim();
                break;
            case "unauthorizedError":
                UnauthorizedError.encode(message.response.unauthorizedError, writer.uint32(26).fork()).ldelim();
                break;
            case "forbiddenError":
                ForbiddenError.encode(message.response.forbiddenError, writer.uint32(34).fork()).ldelim();
                break;
            case "tooManyRequestsError":
                TooManyRequestsError.encode(message.response.tooManyRequestsError, writer.uint32(42).fork()).ldelim();
                break;
            case "badRequestError":
                BadRequestError.encode(message.response.badRequestError, writer.uint32(50).fork()).ldelim();
                break;
        }
        return writer;
    }
    UpdateFriendshipResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateFriendshipResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.response = { $case: "event", event: FriendshipEventResponse.decode(reader, reader.uint32()) };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = {
                        $case: "internalServerError",
                        internalServerError: InternalServerError.decode(reader, reader.uint32()),
                    };
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.response = {
                        $case: "unauthorizedError",
                        unauthorizedError: UnauthorizedError.decode(reader, reader.uint32()),
                    };
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.response = {
                        $case: "forbiddenError",
                        forbiddenError: ForbiddenError.decode(reader, reader.uint32()),
                    };
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.response = {
                        $case: "tooManyRequestsError",
                        tooManyRequestsError: TooManyRequestsError.decode(reader, reader.uint32()),
                    };
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.response = {
                        $case: "badRequestError",
                        badRequestError: BadRequestError.decode(reader, reader.uint32()),
                    };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    UpdateFriendshipResponse.decode = decode;
    function fromJSON(object) {
        return {
            response: isSet(object.event)
                ? { $case: "event", event: FriendshipEventResponse.fromJSON(object.event) }
                : isSet(object.internalServerError)
                    ? {
                        $case: "internalServerError",
                        internalServerError: InternalServerError.fromJSON(object.internalServerError),
                    }
                    : isSet(object.unauthorizedError)
                        ? { $case: "unauthorizedError", unauthorizedError: UnauthorizedError.fromJSON(object.unauthorizedError) }
                        : isSet(object.forbiddenError)
                            ? { $case: "forbiddenError", forbiddenError: ForbiddenError.fromJSON(object.forbiddenError) }
                            : isSet(object.tooManyRequestsError)
                                ? {
                                    $case: "tooManyRequestsError",
                                    tooManyRequestsError: TooManyRequestsError.fromJSON(object.tooManyRequestsError),
                                }
                                : isSet(object.badRequestError)
                                    ? { $case: "badRequestError", badRequestError: BadRequestError.fromJSON(object.badRequestError) }
                                    : undefined,
        };
    }
    UpdateFriendshipResponse.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        const obj = {};
        ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) === "event" &&
            (obj.event = ((_b = message.response) === null || _b === void 0 ? void 0 : _b.event) ? FriendshipEventResponse.toJSON((_c = message.response) === null || _c === void 0 ? void 0 : _c.event) : undefined);
        ((_d = message.response) === null || _d === void 0 ? void 0 : _d.$case) === "internalServerError" &&
            (obj.internalServerError = ((_e = message.response) === null || _e === void 0 ? void 0 : _e.internalServerError)
                ? InternalServerError.toJSON((_f = message.response) === null || _f === void 0 ? void 0 : _f.internalServerError)
                : undefined);
        ((_g = message.response) === null || _g === void 0 ? void 0 : _g.$case) === "unauthorizedError" &&
            (obj.unauthorizedError = ((_h = message.response) === null || _h === void 0 ? void 0 : _h.unauthorizedError)
                ? UnauthorizedError.toJSON((_j = message.response) === null || _j === void 0 ? void 0 : _j.unauthorizedError)
                : undefined);
        ((_k = message.response) === null || _k === void 0 ? void 0 : _k.$case) === "forbiddenError" &&
            (obj.forbiddenError = ((_l = message.response) === null || _l === void 0 ? void 0 : _l.forbiddenError)
                ? ForbiddenError.toJSON((_m = message.response) === null || _m === void 0 ? void 0 : _m.forbiddenError)
                : undefined);
        ((_o = message.response) === null || _o === void 0 ? void 0 : _o.$case) === "tooManyRequestsError" &&
            (obj.tooManyRequestsError = ((_p = message.response) === null || _p === void 0 ? void 0 : _p.tooManyRequestsError)
                ? TooManyRequestsError.toJSON((_q = message.response) === null || _q === void 0 ? void 0 : _q.tooManyRequestsError)
                : undefined);
        ((_r = message.response) === null || _r === void 0 ? void 0 : _r.$case) === "badRequestError" &&
            (obj.badRequestError = ((_s = message.response) === null || _s === void 0 ? void 0 : _s.badRequestError)
                ? BadRequestError.toJSON((_t = message.response) === null || _t === void 0 ? void 0 : _t.badRequestError)
                : undefined);
        return obj;
    }
    UpdateFriendshipResponse.toJSON = toJSON;
    function create(base) {
        return UpdateFriendshipResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    UpdateFriendshipResponse.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        const message = createBaseUpdateFriendshipResponse();
        if (((_a = object.response) === null || _a === void 0 ? void 0 : _a.$case) === "event" && ((_b = object.response) === null || _b === void 0 ? void 0 : _b.event) !== undefined && ((_c = object.response) === null || _c === void 0 ? void 0 : _c.event) !== null) {
            message.response = { $case: "event", event: FriendshipEventResponse.fromPartial(object.response.event) };
        }
        if (((_d = object.response) === null || _d === void 0 ? void 0 : _d.$case) === "internalServerError" &&
            ((_e = object.response) === null || _e === void 0 ? void 0 : _e.internalServerError) !== undefined &&
            ((_f = object.response) === null || _f === void 0 ? void 0 : _f.internalServerError) !== null) {
            message.response = {
                $case: "internalServerError",
                internalServerError: InternalServerError.fromPartial(object.response.internalServerError),
            };
        }
        if (((_g = object.response) === null || _g === void 0 ? void 0 : _g.$case) === "unauthorizedError" &&
            ((_h = object.response) === null || _h === void 0 ? void 0 : _h.unauthorizedError) !== undefined &&
            ((_j = object.response) === null || _j === void 0 ? void 0 : _j.unauthorizedError) !== null) {
            message.response = {
                $case: "unauthorizedError",
                unauthorizedError: UnauthorizedError.fromPartial(object.response.unauthorizedError),
            };
        }
        if (((_k = object.response) === null || _k === void 0 ? void 0 : _k.$case) === "forbiddenError" &&
            ((_l = object.response) === null || _l === void 0 ? void 0 : _l.forbiddenError) !== undefined &&
            ((_m = object.response) === null || _m === void 0 ? void 0 : _m.forbiddenError) !== null) {
            message.response = {
                $case: "forbiddenError",
                forbiddenError: ForbiddenError.fromPartial(object.response.forbiddenError),
            };
        }
        if (((_o = object.response) === null || _o === void 0 ? void 0 : _o.$case) === "tooManyRequestsError" &&
            ((_p = object.response) === null || _p === void 0 ? void 0 : _p.tooManyRequestsError) !== undefined &&
            ((_q = object.response) === null || _q === void 0 ? void 0 : _q.tooManyRequestsError) !== null) {
            message.response = {
                $case: "tooManyRequestsError",
                tooManyRequestsError: TooManyRequestsError.fromPartial(object.response.tooManyRequestsError),
            };
        }
        if (((_r = object.response) === null || _r === void 0 ? void 0 : _r.$case) === "badRequestError" &&
            ((_s = object.response) === null || _s === void 0 ? void 0 : _s.badRequestError) !== undefined &&
            ((_t = object.response) === null || _t === void 0 ? void 0 : _t.badRequestError) !== null) {
            message.response = {
                $case: "badRequestError",
                badRequestError: BadRequestError.fromPartial(object.response.badRequestError),
            };
        }
        return message;
    }
    UpdateFriendshipResponse.fromPartial = fromPartial;
})(UpdateFriendshipResponse || (exports.UpdateFriendshipResponse = UpdateFriendshipResponse = {}));
function createBaseSubscribeFriendshipEventsUpdatesResponse() {
    return { response: undefined };
}
var SubscribeFriendshipEventsUpdatesResponse;
(function (SubscribeFriendshipEventsUpdatesResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) {
            case "events":
                FriendshipEventResponses.encode(message.response.events, writer.uint32(10).fork()).ldelim();
                break;
            case "internalServerError":
                InternalServerError.encode(message.response.internalServerError, writer.uint32(18).fork()).ldelim();
                break;
            case "unauthorizedError":
                UnauthorizedError.encode(message.response.unauthorizedError, writer.uint32(26).fork()).ldelim();
                break;
            case "forbiddenError":
                ForbiddenError.encode(message.response.forbiddenError, writer.uint32(34).fork()).ldelim();
                break;
            case "tooManyRequestsError":
                TooManyRequestsError.encode(message.response.tooManyRequestsError, writer.uint32(42).fork()).ldelim();
                break;
        }
        return writer;
    }
    SubscribeFriendshipEventsUpdatesResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubscribeFriendshipEventsUpdatesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.response = { $case: "events", events: FriendshipEventResponses.decode(reader, reader.uint32()) };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = {
                        $case: "internalServerError",
                        internalServerError: InternalServerError.decode(reader, reader.uint32()),
                    };
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.response = {
                        $case: "unauthorizedError",
                        unauthorizedError: UnauthorizedError.decode(reader, reader.uint32()),
                    };
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.response = {
                        $case: "forbiddenError",
                        forbiddenError: ForbiddenError.decode(reader, reader.uint32()),
                    };
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.response = {
                        $case: "tooManyRequestsError",
                        tooManyRequestsError: TooManyRequestsError.decode(reader, reader.uint32()),
                    };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    SubscribeFriendshipEventsUpdatesResponse.decode = decode;
    function fromJSON(object) {
        return {
            response: isSet(object.events)
                ? { $case: "events", events: FriendshipEventResponses.fromJSON(object.events) }
                : isSet(object.internalServerError)
                    ? {
                        $case: "internalServerError",
                        internalServerError: InternalServerError.fromJSON(object.internalServerError),
                    }
                    : isSet(object.unauthorizedError)
                        ? { $case: "unauthorizedError", unauthorizedError: UnauthorizedError.fromJSON(object.unauthorizedError) }
                        : isSet(object.forbiddenError)
                            ? { $case: "forbiddenError", forbiddenError: ForbiddenError.fromJSON(object.forbiddenError) }
                            : isSet(object.tooManyRequestsError)
                                ? {
                                    $case: "tooManyRequestsError",
                                    tooManyRequestsError: TooManyRequestsError.fromJSON(object.tooManyRequestsError),
                                }
                                : undefined,
        };
    }
    SubscribeFriendshipEventsUpdatesResponse.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const obj = {};
        ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) === "events" &&
            (obj.events = ((_b = message.response) === null || _b === void 0 ? void 0 : _b.events) ? FriendshipEventResponses.toJSON((_c = message.response) === null || _c === void 0 ? void 0 : _c.events) : undefined);
        ((_d = message.response) === null || _d === void 0 ? void 0 : _d.$case) === "internalServerError" &&
            (obj.internalServerError = ((_e = message.response) === null || _e === void 0 ? void 0 : _e.internalServerError)
                ? InternalServerError.toJSON((_f = message.response) === null || _f === void 0 ? void 0 : _f.internalServerError)
                : undefined);
        ((_g = message.response) === null || _g === void 0 ? void 0 : _g.$case) === "unauthorizedError" &&
            (obj.unauthorizedError = ((_h = message.response) === null || _h === void 0 ? void 0 : _h.unauthorizedError)
                ? UnauthorizedError.toJSON((_j = message.response) === null || _j === void 0 ? void 0 : _j.unauthorizedError)
                : undefined);
        ((_k = message.response) === null || _k === void 0 ? void 0 : _k.$case) === "forbiddenError" &&
            (obj.forbiddenError = ((_l = message.response) === null || _l === void 0 ? void 0 : _l.forbiddenError)
                ? ForbiddenError.toJSON((_m = message.response) === null || _m === void 0 ? void 0 : _m.forbiddenError)
                : undefined);
        ((_o = message.response) === null || _o === void 0 ? void 0 : _o.$case) === "tooManyRequestsError" &&
            (obj.tooManyRequestsError = ((_p = message.response) === null || _p === void 0 ? void 0 : _p.tooManyRequestsError)
                ? TooManyRequestsError.toJSON((_q = message.response) === null || _q === void 0 ? void 0 : _q.tooManyRequestsError)
                : undefined);
        return obj;
    }
    SubscribeFriendshipEventsUpdatesResponse.toJSON = toJSON;
    function create(base) {
        return SubscribeFriendshipEventsUpdatesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    SubscribeFriendshipEventsUpdatesResponse.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const message = createBaseSubscribeFriendshipEventsUpdatesResponse();
        if (((_a = object.response) === null || _a === void 0 ? void 0 : _a.$case) === "events" && ((_b = object.response) === null || _b === void 0 ? void 0 : _b.events) !== undefined && ((_c = object.response) === null || _c === void 0 ? void 0 : _c.events) !== null) {
            message.response = { $case: "events", events: FriendshipEventResponses.fromPartial(object.response.events) };
        }
        if (((_d = object.response) === null || _d === void 0 ? void 0 : _d.$case) === "internalServerError" &&
            ((_e = object.response) === null || _e === void 0 ? void 0 : _e.internalServerError) !== undefined &&
            ((_f = object.response) === null || _f === void 0 ? void 0 : _f.internalServerError) !== null) {
            message.response = {
                $case: "internalServerError",
                internalServerError: InternalServerError.fromPartial(object.response.internalServerError),
            };
        }
        if (((_g = object.response) === null || _g === void 0 ? void 0 : _g.$case) === "unauthorizedError" &&
            ((_h = object.response) === null || _h === void 0 ? void 0 : _h.unauthorizedError) !== undefined &&
            ((_j = object.response) === null || _j === void 0 ? void 0 : _j.unauthorizedError) !== null) {
            message.response = {
                $case: "unauthorizedError",
                unauthorizedError: UnauthorizedError.fromPartial(object.response.unauthorizedError),
            };
        }
        if (((_k = object.response) === null || _k === void 0 ? void 0 : _k.$case) === "forbiddenError" &&
            ((_l = object.response) === null || _l === void 0 ? void 0 : _l.forbiddenError) !== undefined &&
            ((_m = object.response) === null || _m === void 0 ? void 0 : _m.forbiddenError) !== null) {
            message.response = {
                $case: "forbiddenError",
                forbiddenError: ForbiddenError.fromPartial(object.response.forbiddenError),
            };
        }
        if (((_o = object.response) === null || _o === void 0 ? void 0 : _o.$case) === "tooManyRequestsError" &&
            ((_p = object.response) === null || _p === void 0 ? void 0 : _p.tooManyRequestsError) !== undefined &&
            ((_q = object.response) === null || _q === void 0 ? void 0 : _q.tooManyRequestsError) !== null) {
            message.response = {
                $case: "tooManyRequestsError",
                tooManyRequestsError: TooManyRequestsError.fromPartial(object.response.tooManyRequestsError),
            };
        }
        return message;
    }
    SubscribeFriendshipEventsUpdatesResponse.fromPartial = fromPartial;
})(SubscribeFriendshipEventsUpdatesResponse || (exports.SubscribeFriendshipEventsUpdatesResponse = SubscribeFriendshipEventsUpdatesResponse = {}));
exports.FriendshipsServiceDefinition = {
    name: "FriendshipsService",
    fullName: "decentraland.social.friendships.FriendshipsService",
    methods: {
        /** Get the list of friends for the authenticated user */
        getFriends: {
            name: "GetFriends",
            requestType: Payload,
            requestStream: false,
            responseType: UsersResponse,
            responseStream: true,
            options: {},
        },
        /** Get the list of mutual friends between the authenticated user and the one in the parameter */
        getMutualFriends: {
            name: "GetMutualFriends",
            requestType: MutualFriendsPayload,
            requestStream: false,
            responseType: UsersResponse,
            responseStream: true,
            options: {},
        },
        /** Get the list of request events for the authenticated user */
        getRequestEvents: {
            name: "GetRequestEvents",
            requestType: Payload,
            requestStream: false,
            responseType: RequestEventsResponse,
            responseStream: false,
            options: {},
        },
        /** Update friendship status: REQUEST, ACCEPT, REJECT, CANCEL, DELETE */
        updateFriendshipEvent: {
            name: "UpdateFriendshipEvent",
            requestType: UpdateFriendshipPayload,
            requestStream: false,
            responseType: UpdateFriendshipResponse,
            responseStream: false,
            options: {},
        },
        /** Subscribe to updates of friendship status: REQUEST, ACCEPT, REJECT, CANCEL, DELETE */
        subscribeFriendshipEventsUpdates: {
            name: "SubscribeFriendshipEventsUpdates",
            requestType: Payload,
            requestStream: false,
            responseType: SubscribeFriendshipEventsUpdatesResponse,
            responseStream: true,
            options: {},
        },
    },
};
const tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=friendships.gen.js.map