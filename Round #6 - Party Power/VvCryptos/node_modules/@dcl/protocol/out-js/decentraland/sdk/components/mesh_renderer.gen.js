"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBMeshRenderer_SphereMesh = exports.PBMeshRenderer_PlaneMesh = exports.PBMeshRenderer_CylinderMesh = exports.PBMeshRenderer_BoxMesh = exports.PBMeshRenderer = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.sdk.components";
function createBasePBMeshRenderer() {
    return { mesh: undefined };
}
var PBMeshRenderer;
(function (PBMeshRenderer) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.mesh) === null || _a === void 0 ? void 0 : _a.$case) {
            case "box":
                PBMeshRenderer_BoxMesh.encode(message.mesh.box, writer.uint32(10).fork()).ldelim();
                break;
            case "sphere":
                PBMeshRenderer_SphereMesh.encode(message.mesh.sphere, writer.uint32(18).fork()).ldelim();
                break;
            case "cylinder":
                PBMeshRenderer_CylinderMesh.encode(message.mesh.cylinder, writer.uint32(26).fork()).ldelim();
                break;
            case "plane":
                PBMeshRenderer_PlaneMesh.encode(message.mesh.plane, writer.uint32(34).fork()).ldelim();
                break;
        }
        return writer;
    }
    PBMeshRenderer.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBMeshRenderer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.mesh = { $case: "box", box: PBMeshRenderer_BoxMesh.decode(reader, reader.uint32()) };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.mesh = { $case: "sphere", sphere: PBMeshRenderer_SphereMesh.decode(reader, reader.uint32()) };
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.mesh = { $case: "cylinder", cylinder: PBMeshRenderer_CylinderMesh.decode(reader, reader.uint32()) };
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.mesh = { $case: "plane", plane: PBMeshRenderer_PlaneMesh.decode(reader, reader.uint32()) };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBMeshRenderer.decode = decode;
    function fromJSON(object) {
        return {
            mesh: isSet(object.box)
                ? { $case: "box", box: PBMeshRenderer_BoxMesh.fromJSON(object.box) }
                : isSet(object.sphere)
                    ? { $case: "sphere", sphere: PBMeshRenderer_SphereMesh.fromJSON(object.sphere) }
                    : isSet(object.cylinder)
                        ? { $case: "cylinder", cylinder: PBMeshRenderer_CylinderMesh.fromJSON(object.cylinder) }
                        : isSet(object.plane)
                            ? { $case: "plane", plane: PBMeshRenderer_PlaneMesh.fromJSON(object.plane) }
                            : undefined,
        };
    }
    PBMeshRenderer.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const obj = {};
        ((_a = message.mesh) === null || _a === void 0 ? void 0 : _a.$case) === "box" &&
            (obj.box = ((_b = message.mesh) === null || _b === void 0 ? void 0 : _b.box) ? PBMeshRenderer_BoxMesh.toJSON((_c = message.mesh) === null || _c === void 0 ? void 0 : _c.box) : undefined);
        ((_d = message.mesh) === null || _d === void 0 ? void 0 : _d.$case) === "sphere" &&
            (obj.sphere = ((_e = message.mesh) === null || _e === void 0 ? void 0 : _e.sphere) ? PBMeshRenderer_SphereMesh.toJSON((_f = message.mesh) === null || _f === void 0 ? void 0 : _f.sphere) : undefined);
        ((_g = message.mesh) === null || _g === void 0 ? void 0 : _g.$case) === "cylinder" &&
            (obj.cylinder = ((_h = message.mesh) === null || _h === void 0 ? void 0 : _h.cylinder) ? PBMeshRenderer_CylinderMesh.toJSON((_j = message.mesh) === null || _j === void 0 ? void 0 : _j.cylinder) : undefined);
        ((_k = message.mesh) === null || _k === void 0 ? void 0 : _k.$case) === "plane" &&
            (obj.plane = ((_l = message.mesh) === null || _l === void 0 ? void 0 : _l.plane) ? PBMeshRenderer_PlaneMesh.toJSON((_m = message.mesh) === null || _m === void 0 ? void 0 : _m.plane) : undefined);
        return obj;
    }
    PBMeshRenderer.toJSON = toJSON;
    function create(base) {
        return PBMeshRenderer.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBMeshRenderer.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const message = createBasePBMeshRenderer();
        if (((_a = object.mesh) === null || _a === void 0 ? void 0 : _a.$case) === "box" && ((_b = object.mesh) === null || _b === void 0 ? void 0 : _b.box) !== undefined && ((_c = object.mesh) === null || _c === void 0 ? void 0 : _c.box) !== null) {
            message.mesh = { $case: "box", box: PBMeshRenderer_BoxMesh.fromPartial(object.mesh.box) };
        }
        if (((_d = object.mesh) === null || _d === void 0 ? void 0 : _d.$case) === "sphere" && ((_e = object.mesh) === null || _e === void 0 ? void 0 : _e.sphere) !== undefined && ((_f = object.mesh) === null || _f === void 0 ? void 0 : _f.sphere) !== null) {
            message.mesh = { $case: "sphere", sphere: PBMeshRenderer_SphereMesh.fromPartial(object.mesh.sphere) };
        }
        if (((_g = object.mesh) === null || _g === void 0 ? void 0 : _g.$case) === "cylinder" && ((_h = object.mesh) === null || _h === void 0 ? void 0 : _h.cylinder) !== undefined && ((_j = object.mesh) === null || _j === void 0 ? void 0 : _j.cylinder) !== null) {
            message.mesh = { $case: "cylinder", cylinder: PBMeshRenderer_CylinderMesh.fromPartial(object.mesh.cylinder) };
        }
        if (((_k = object.mesh) === null || _k === void 0 ? void 0 : _k.$case) === "plane" && ((_l = object.mesh) === null || _l === void 0 ? void 0 : _l.plane) !== undefined && ((_m = object.mesh) === null || _m === void 0 ? void 0 : _m.plane) !== null) {
            message.mesh = { $case: "plane", plane: PBMeshRenderer_PlaneMesh.fromPartial(object.mesh.plane) };
        }
        return message;
    }
    PBMeshRenderer.fromPartial = fromPartial;
})(PBMeshRenderer || (exports.PBMeshRenderer = PBMeshRenderer = {}));
function createBasePBMeshRenderer_BoxMesh() {
    return { uvs: [] };
}
var PBMeshRenderer_BoxMesh;
(function (PBMeshRenderer_BoxMesh) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.uvs) {
            writer.float(v);
        }
        writer.ldelim();
        return writer;
    }
    PBMeshRenderer_BoxMesh.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBMeshRenderer_BoxMesh();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag === 13) {
                        message.uvs.push(reader.float());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.uvs.push(reader.float());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBMeshRenderer_BoxMesh.decode = decode;
    function fromJSON(object) {
        return { uvs: Array.isArray(object === null || object === void 0 ? void 0 : object.uvs) ? object.uvs.map((e) => Number(e)) : [] };
    }
    PBMeshRenderer_BoxMesh.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.uvs) {
            obj.uvs = message.uvs.map((e) => e);
        }
        else {
            obj.uvs = [];
        }
        return obj;
    }
    PBMeshRenderer_BoxMesh.toJSON = toJSON;
    function create(base) {
        return PBMeshRenderer_BoxMesh.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBMeshRenderer_BoxMesh.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBasePBMeshRenderer_BoxMesh();
        message.uvs = ((_a = object.uvs) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    }
    PBMeshRenderer_BoxMesh.fromPartial = fromPartial;
})(PBMeshRenderer_BoxMesh || (exports.PBMeshRenderer_BoxMesh = PBMeshRenderer_BoxMesh = {}));
function createBasePBMeshRenderer_CylinderMesh() {
    return { radiusTop: undefined, radiusBottom: undefined };
}
var PBMeshRenderer_CylinderMesh;
(function (PBMeshRenderer_CylinderMesh) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.radiusTop !== undefined) {
            writer.uint32(13).float(message.radiusTop);
        }
        if (message.radiusBottom !== undefined) {
            writer.uint32(21).float(message.radiusBottom);
        }
        return writer;
    }
    PBMeshRenderer_CylinderMesh.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBMeshRenderer_CylinderMesh();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.radiusTop = reader.float();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.radiusBottom = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBMeshRenderer_CylinderMesh.decode = decode;
    function fromJSON(object) {
        return {
            radiusTop: isSet(object.radiusTop) ? Number(object.radiusTop) : undefined,
            radiusBottom: isSet(object.radiusBottom) ? Number(object.radiusBottom) : undefined,
        };
    }
    PBMeshRenderer_CylinderMesh.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.radiusTop !== undefined && (obj.radiusTop = message.radiusTop);
        message.radiusBottom !== undefined && (obj.radiusBottom = message.radiusBottom);
        return obj;
    }
    PBMeshRenderer_CylinderMesh.toJSON = toJSON;
    function create(base) {
        return PBMeshRenderer_CylinderMesh.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBMeshRenderer_CylinderMesh.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBasePBMeshRenderer_CylinderMesh();
        message.radiusTop = (_a = object.radiusTop) !== null && _a !== void 0 ? _a : undefined;
        message.radiusBottom = (_b = object.radiusBottom) !== null && _b !== void 0 ? _b : undefined;
        return message;
    }
    PBMeshRenderer_CylinderMesh.fromPartial = fromPartial;
})(PBMeshRenderer_CylinderMesh || (exports.PBMeshRenderer_CylinderMesh = PBMeshRenderer_CylinderMesh = {}));
function createBasePBMeshRenderer_PlaneMesh() {
    return { uvs: [] };
}
var PBMeshRenderer_PlaneMesh;
(function (PBMeshRenderer_PlaneMesh) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.uvs) {
            writer.float(v);
        }
        writer.ldelim();
        return writer;
    }
    PBMeshRenderer_PlaneMesh.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBMeshRenderer_PlaneMesh();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag === 13) {
                        message.uvs.push(reader.float());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.uvs.push(reader.float());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBMeshRenderer_PlaneMesh.decode = decode;
    function fromJSON(object) {
        return { uvs: Array.isArray(object === null || object === void 0 ? void 0 : object.uvs) ? object.uvs.map((e) => Number(e)) : [] };
    }
    PBMeshRenderer_PlaneMesh.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.uvs) {
            obj.uvs = message.uvs.map((e) => e);
        }
        else {
            obj.uvs = [];
        }
        return obj;
    }
    PBMeshRenderer_PlaneMesh.toJSON = toJSON;
    function create(base) {
        return PBMeshRenderer_PlaneMesh.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBMeshRenderer_PlaneMesh.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBasePBMeshRenderer_PlaneMesh();
        message.uvs = ((_a = object.uvs) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    }
    PBMeshRenderer_PlaneMesh.fromPartial = fromPartial;
})(PBMeshRenderer_PlaneMesh || (exports.PBMeshRenderer_PlaneMesh = PBMeshRenderer_PlaneMesh = {}));
function createBasePBMeshRenderer_SphereMesh() {
    return {};
}
var PBMeshRenderer_SphereMesh;
(function (PBMeshRenderer_SphereMesh) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    PBMeshRenderer_SphereMesh.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBMeshRenderer_SphereMesh();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBMeshRenderer_SphereMesh.decode = decode;
    function fromJSON(_) {
        return {};
    }
    PBMeshRenderer_SphereMesh.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    PBMeshRenderer_SphereMesh.toJSON = toJSON;
    function create(base) {
        return PBMeshRenderer_SphereMesh.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBMeshRenderer_SphereMesh.create = create;
    function fromPartial(_) {
        const message = createBasePBMeshRenderer_SphereMesh();
        return message;
    }
    PBMeshRenderer_SphereMesh.fromPartial = fromPartial;
})(PBMeshRenderer_SphereMesh || (exports.PBMeshRenderer_SphereMesh = PBMeshRenderer_SphereMesh = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=mesh_renderer.gen.js.map