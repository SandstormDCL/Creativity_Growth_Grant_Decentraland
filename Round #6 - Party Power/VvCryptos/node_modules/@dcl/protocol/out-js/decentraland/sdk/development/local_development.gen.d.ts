import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.sdk.development";
export declare enum UpdateModelType {
    UMT_CHANGE = 0,
    UMT_REMOVE = 1,
    UNRECOGNIZED = -1
}
export declare function updateModelTypeFromJSON(object: any): UpdateModelType;
export declare function updateModelTypeToJSON(object: UpdateModelType): string;
/** ts code & main.crdt updates */
export interface UpdateScene {
    sceneId: string;
}
/** .glb & .gltf model udpates */
export interface UpdateModel {
    sceneId: string;
    src: string;
    hash: string;
    type: UpdateModelType;
}
export interface WsSceneMessage {
    message?: {
        $case: "updateScene";
        updateScene: UpdateScene;
    } | {
        $case: "updateModel";
        updateModel: UpdateModel;
    } | undefined;
}
export declare namespace UpdateScene {
    function encode(message: UpdateScene, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): UpdateScene;
    function fromJSON(object: any): UpdateScene;
    function toJSON(message: UpdateScene): unknown;
    function create<I extends Exact<DeepPartial<UpdateScene>, I>>(base?: I): UpdateScene;
    function fromPartial<I extends Exact<DeepPartial<UpdateScene>, I>>(object: I): UpdateScene;
}
export declare namespace UpdateModel {
    function encode(message: UpdateModel, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): UpdateModel;
    function fromJSON(object: any): UpdateModel;
    function toJSON(message: UpdateModel): unknown;
    function create<I extends Exact<DeepPartial<UpdateModel>, I>>(base?: I): UpdateModel;
    function fromPartial<I extends Exact<DeepPartial<UpdateModel>, I>>(object: I): UpdateModel;
}
export declare namespace WsSceneMessage {
    function encode(message: WsSceneMessage, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): WsSceneMessage;
    function fromJSON(object: any): WsSceneMessage;
    function toJSON(message: WsSceneMessage): unknown;
    function create<I extends Exact<DeepPartial<WsSceneMessage>, I>>(base?: I): WsSceneMessage;
    function fromPartial<I extends Exact<DeepPartial<WsSceneMessage>, I>>(object: I): WsSceneMessage;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
