"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ECS6ComponentUiScrollRect = exports.ECS6ComponentUiImage = exports.ECS6ComponentUiInputText = exports.ECS6ComponentUiText = exports.ECS6ComponentUiButton = exports.ECS6ComponentUiContainerStack = exports.ECS6ComponentUiContainerRect = exports.ECS6ComponentUiShape = exports.ECS6ComponentGizmos = exports.ECS6ComponentAvatarShape_Emote = exports.ECS6ComponentAvatarShape = exports.ECS6ComponentAudioStream = exports.ECS6ComponentAudioSource = exports.ECS6ComponentAudioClip = exports.ECS6ComponentAvatarTexture = exports.ECS6ComponentCameraModeArea = exports.ECS6ComponentVideoTexture = exports.ECS6ComponentVideoClip = exports.ECS6ComponentSmartItem = exports.ECS6ComponentUuidCallback = exports.ECS6ComponentBasicMaterial = exports.ECS6ComponentMaterial = exports.ECS6ComponentTextShape = exports.ECS6ComponentFont = exports.ECS6ComponentObjShape = exports.ECS6ComponentAnimator_AnimationState = exports.ECS6ComponentAnimator = exports.ECS6ComponentTexture = exports.ECS6ComponentNftShape = exports.ECS6ComponentGltfShape = exports.ECS6ComponentCylinderShape = exports.ECS6ComponentConeShape = exports.ECS6ComponentPlaneShape = exports.ECS6ComponentCircleShape = exports.ECS6ComponentSphereShape = exports.ECS6ComponentBoxShape = exports.ECS6ComponentBillboard = exports.ECS6ComponentAttachToAvatar = exports.ECS6ComponentTransform = exports.ECS6ComponentAvatarModifierArea = exports.UiValue = exports.Area = exports.ECS6Color4 = exports.ECS6ComponentUiContainerStack_UIStackOrientation = exports.ECS6ComponentCameraModeArea_CameraMode = exports.ECS6ComponentVideoTexture_VideoStatus = exports.ECS6ComponentNftShape_PictureFrameStyle = exports.ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId = exports.UiValue_UiValueType = exports.protobufPackage = void 0;
exports.ECS6ComponentUiFullScreenShape = exports.ECS6ComponentUiScreenSpaceShape = exports.ECS6ComponentUiWorldSpaceShape = void 0;
exports.uiValue_UiValueTypeFromJSON = uiValue_UiValueTypeFromJSON;
exports.uiValue_UiValueTypeToJSON = uiValue_UiValueTypeToJSON;
exports.eCS6ComponentAttachToAvatar_AttachToAvatarAnchorPointIdFromJSON = eCS6ComponentAttachToAvatar_AttachToAvatarAnchorPointIdFromJSON;
exports.eCS6ComponentAttachToAvatar_AttachToAvatarAnchorPointIdToJSON = eCS6ComponentAttachToAvatar_AttachToAvatarAnchorPointIdToJSON;
exports.eCS6ComponentNftShape_PictureFrameStyleFromJSON = eCS6ComponentNftShape_PictureFrameStyleFromJSON;
exports.eCS6ComponentNftShape_PictureFrameStyleToJSON = eCS6ComponentNftShape_PictureFrameStyleToJSON;
exports.eCS6ComponentVideoTexture_VideoStatusFromJSON = eCS6ComponentVideoTexture_VideoStatusFromJSON;
exports.eCS6ComponentVideoTexture_VideoStatusToJSON = eCS6ComponentVideoTexture_VideoStatusToJSON;
exports.eCS6ComponentCameraModeArea_CameraModeFromJSON = eCS6ComponentCameraModeArea_CameraModeFromJSON;
exports.eCS6ComponentCameraModeArea_CameraModeToJSON = eCS6ComponentCameraModeArea_CameraModeToJSON;
exports.eCS6ComponentUiContainerStack_UIStackOrientationFromJSON = eCS6ComponentUiContainerStack_UIStackOrientationFromJSON;
exports.eCS6ComponentUiContainerStack_UIStackOrientationToJSON = eCS6ComponentUiContainerStack_UIStackOrientationToJSON;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const colors_gen_1 = require("../../common/colors.gen");
const vectors_gen_1 = require("../../common/vectors.gen");
exports.protobufPackage = "decentraland.sdk.ecs6";
var UiValue_UiValueType;
(function (UiValue_UiValueType) {
    UiValue_UiValueType[UiValue_UiValueType["UVT_PERCENT"] = 0] = "UVT_PERCENT";
    UiValue_UiValueType[UiValue_UiValueType["PIXELS"] = 1] = "PIXELS";
    UiValue_UiValueType[UiValue_UiValueType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(UiValue_UiValueType || (exports.UiValue_UiValueType = UiValue_UiValueType = {}));
function uiValue_UiValueTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "UVT_PERCENT":
            return UiValue_UiValueType.UVT_PERCENT;
        case 1:
        case "PIXELS":
            return UiValue_UiValueType.PIXELS;
        case -1:
        case "UNRECOGNIZED":
        default:
            return UiValue_UiValueType.UNRECOGNIZED;
    }
}
function uiValue_UiValueTypeToJSON(object) {
    switch (object) {
        case UiValue_UiValueType.UVT_PERCENT:
            return "UVT_PERCENT";
        case UiValue_UiValueType.PIXELS:
            return "PIXELS";
        case UiValue_UiValueType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId;
(function (ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId) {
    ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId[ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId["ATAAP_POSITION"] = 0] = "ATAAP_POSITION";
    ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId[ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId["ATAAP_NAME_TAG"] = 1] = "ATAAP_NAME_TAG";
    ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId[ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId["ATAAP_LEFT_HAND"] = 2] = "ATAAP_LEFT_HAND";
    ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId[ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId["ATAAP_RIGHT_HAND"] = 3] = "ATAAP_RIGHT_HAND";
    ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId[ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId || (exports.ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId = ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId = {}));
function eCS6ComponentAttachToAvatar_AttachToAvatarAnchorPointIdFromJSON(object) {
    switch (object) {
        case 0:
        case "ATAAP_POSITION":
            return ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.ATAAP_POSITION;
        case 1:
        case "ATAAP_NAME_TAG":
            return ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.ATAAP_NAME_TAG;
        case 2:
        case "ATAAP_LEFT_HAND":
            return ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.ATAAP_LEFT_HAND;
        case 3:
        case "ATAAP_RIGHT_HAND":
            return ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.ATAAP_RIGHT_HAND;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.UNRECOGNIZED;
    }
}
function eCS6ComponentAttachToAvatar_AttachToAvatarAnchorPointIdToJSON(object) {
    switch (object) {
        case ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.ATAAP_POSITION:
            return "ATAAP_POSITION";
        case ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.ATAAP_NAME_TAG:
            return "ATAAP_NAME_TAG";
        case ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.ATAAP_LEFT_HAND:
            return "ATAAP_LEFT_HAND";
        case ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.ATAAP_RIGHT_HAND:
            return "ATAAP_RIGHT_HAND";
        case ECS6ComponentAttachToAvatar_AttachToAvatarAnchorPointId.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var ECS6ComponentNftShape_PictureFrameStyle;
(function (ECS6ComponentNftShape_PictureFrameStyle) {
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_CLASSIC"] = 0] = "PFS_CLASSIC";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_BAROQUE_ORNAMENT"] = 1] = "PFS_BAROQUE_ORNAMENT";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_DIAMOND_ORNAMENT"] = 2] = "PFS_DIAMOND_ORNAMENT";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_MINIMAL_WIDE"] = 3] = "PFS_MINIMAL_WIDE";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_MINIMAL_GREY"] = 4] = "PFS_MINIMAL_GREY";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_BLOCKY"] = 5] = "PFS_BLOCKY";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_GOLD_EDGES"] = 6] = "PFS_GOLD_EDGES";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_GOLD_CARVED"] = 7] = "PFS_GOLD_CARVED";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_GOLD_WIDE"] = 8] = "PFS_GOLD_WIDE";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_GOLD_ROUNDED"] = 9] = "PFS_GOLD_ROUNDED";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_METAL_MEDIUM"] = 10] = "PFS_METAL_MEDIUM";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_METAL_WIDE"] = 11] = "PFS_METAL_WIDE";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_METAL_SLIM"] = 12] = "PFS_METAL_SLIM";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_METAL_ROUNDED"] = 13] = "PFS_METAL_ROUNDED";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_PINS"] = 14] = "PFS_PINS";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_MINIMAL_BLACK"] = 15] = "PFS_MINIMAL_BLACK";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_MINIMAL_WHITE"] = 16] = "PFS_MINIMAL_WHITE";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_TAPE"] = 17] = "PFS_TAPE";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_WOOD_SLIM"] = 18] = "PFS_WOOD_SLIM";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_WOOD_WIDE"] = 19] = "PFS_WOOD_WIDE";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_WOOD_TWIGS"] = 20] = "PFS_WOOD_TWIGS";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_CANVAS"] = 21] = "PFS_CANVAS";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["PFS_NONE"] = 22] = "PFS_NONE";
    ECS6ComponentNftShape_PictureFrameStyle[ECS6ComponentNftShape_PictureFrameStyle["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ECS6ComponentNftShape_PictureFrameStyle || (exports.ECS6ComponentNftShape_PictureFrameStyle = ECS6ComponentNftShape_PictureFrameStyle = {}));
function eCS6ComponentNftShape_PictureFrameStyleFromJSON(object) {
    switch (object) {
        case 0:
        case "PFS_CLASSIC":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_CLASSIC;
        case 1:
        case "PFS_BAROQUE_ORNAMENT":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_BAROQUE_ORNAMENT;
        case 2:
        case "PFS_DIAMOND_ORNAMENT":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_DIAMOND_ORNAMENT;
        case 3:
        case "PFS_MINIMAL_WIDE":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_MINIMAL_WIDE;
        case 4:
        case "PFS_MINIMAL_GREY":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_MINIMAL_GREY;
        case 5:
        case "PFS_BLOCKY":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_BLOCKY;
        case 6:
        case "PFS_GOLD_EDGES":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_GOLD_EDGES;
        case 7:
        case "PFS_GOLD_CARVED":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_GOLD_CARVED;
        case 8:
        case "PFS_GOLD_WIDE":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_GOLD_WIDE;
        case 9:
        case "PFS_GOLD_ROUNDED":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_GOLD_ROUNDED;
        case 10:
        case "PFS_METAL_MEDIUM":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_METAL_MEDIUM;
        case 11:
        case "PFS_METAL_WIDE":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_METAL_WIDE;
        case 12:
        case "PFS_METAL_SLIM":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_METAL_SLIM;
        case 13:
        case "PFS_METAL_ROUNDED":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_METAL_ROUNDED;
        case 14:
        case "PFS_PINS":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_PINS;
        case 15:
        case "PFS_MINIMAL_BLACK":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_MINIMAL_BLACK;
        case 16:
        case "PFS_MINIMAL_WHITE":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_MINIMAL_WHITE;
        case 17:
        case "PFS_TAPE":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_TAPE;
        case 18:
        case "PFS_WOOD_SLIM":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_WOOD_SLIM;
        case 19:
        case "PFS_WOOD_WIDE":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_WOOD_WIDE;
        case 20:
        case "PFS_WOOD_TWIGS":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_WOOD_TWIGS;
        case 21:
        case "PFS_CANVAS":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_CANVAS;
        case 22:
        case "PFS_NONE":
            return ECS6ComponentNftShape_PictureFrameStyle.PFS_NONE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ECS6ComponentNftShape_PictureFrameStyle.UNRECOGNIZED;
    }
}
function eCS6ComponentNftShape_PictureFrameStyleToJSON(object) {
    switch (object) {
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_CLASSIC:
            return "PFS_CLASSIC";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_BAROQUE_ORNAMENT:
            return "PFS_BAROQUE_ORNAMENT";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_DIAMOND_ORNAMENT:
            return "PFS_DIAMOND_ORNAMENT";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_MINIMAL_WIDE:
            return "PFS_MINIMAL_WIDE";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_MINIMAL_GREY:
            return "PFS_MINIMAL_GREY";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_BLOCKY:
            return "PFS_BLOCKY";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_GOLD_EDGES:
            return "PFS_GOLD_EDGES";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_GOLD_CARVED:
            return "PFS_GOLD_CARVED";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_GOLD_WIDE:
            return "PFS_GOLD_WIDE";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_GOLD_ROUNDED:
            return "PFS_GOLD_ROUNDED";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_METAL_MEDIUM:
            return "PFS_METAL_MEDIUM";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_METAL_WIDE:
            return "PFS_METAL_WIDE";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_METAL_SLIM:
            return "PFS_METAL_SLIM";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_METAL_ROUNDED:
            return "PFS_METAL_ROUNDED";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_PINS:
            return "PFS_PINS";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_MINIMAL_BLACK:
            return "PFS_MINIMAL_BLACK";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_MINIMAL_WHITE:
            return "PFS_MINIMAL_WHITE";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_TAPE:
            return "PFS_TAPE";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_WOOD_SLIM:
            return "PFS_WOOD_SLIM";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_WOOD_WIDE:
            return "PFS_WOOD_WIDE";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_WOOD_TWIGS:
            return "PFS_WOOD_TWIGS";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_CANVAS:
            return "PFS_CANVAS";
        case ECS6ComponentNftShape_PictureFrameStyle.PFS_NONE:
            return "PFS_NONE";
        case ECS6ComponentNftShape_PictureFrameStyle.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var ECS6ComponentVideoTexture_VideoStatus;
(function (ECS6ComponentVideoTexture_VideoStatus) {
    ECS6ComponentVideoTexture_VideoStatus[ECS6ComponentVideoTexture_VideoStatus["NONE"] = 0] = "NONE";
    ECS6ComponentVideoTexture_VideoStatus[ECS6ComponentVideoTexture_VideoStatus["ERROR"] = 1] = "ERROR";
    ECS6ComponentVideoTexture_VideoStatus[ECS6ComponentVideoTexture_VideoStatus["LOADING"] = 2] = "LOADING";
    ECS6ComponentVideoTexture_VideoStatus[ECS6ComponentVideoTexture_VideoStatus["READY"] = 3] = "READY";
    ECS6ComponentVideoTexture_VideoStatus[ECS6ComponentVideoTexture_VideoStatus["PLAYING"] = 4] = "PLAYING";
    ECS6ComponentVideoTexture_VideoStatus[ECS6ComponentVideoTexture_VideoStatus["BUFFERING"] = 5] = "BUFFERING";
    ECS6ComponentVideoTexture_VideoStatus[ECS6ComponentVideoTexture_VideoStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ECS6ComponentVideoTexture_VideoStatus || (exports.ECS6ComponentVideoTexture_VideoStatus = ECS6ComponentVideoTexture_VideoStatus = {}));
function eCS6ComponentVideoTexture_VideoStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "NONE":
            return ECS6ComponentVideoTexture_VideoStatus.NONE;
        case 1:
        case "ERROR":
            return ECS6ComponentVideoTexture_VideoStatus.ERROR;
        case 2:
        case "LOADING":
            return ECS6ComponentVideoTexture_VideoStatus.LOADING;
        case 3:
        case "READY":
            return ECS6ComponentVideoTexture_VideoStatus.READY;
        case 4:
        case "PLAYING":
            return ECS6ComponentVideoTexture_VideoStatus.PLAYING;
        case 5:
        case "BUFFERING":
            return ECS6ComponentVideoTexture_VideoStatus.BUFFERING;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ECS6ComponentVideoTexture_VideoStatus.UNRECOGNIZED;
    }
}
function eCS6ComponentVideoTexture_VideoStatusToJSON(object) {
    switch (object) {
        case ECS6ComponentVideoTexture_VideoStatus.NONE:
            return "NONE";
        case ECS6ComponentVideoTexture_VideoStatus.ERROR:
            return "ERROR";
        case ECS6ComponentVideoTexture_VideoStatus.LOADING:
            return "LOADING";
        case ECS6ComponentVideoTexture_VideoStatus.READY:
            return "READY";
        case ECS6ComponentVideoTexture_VideoStatus.PLAYING:
            return "PLAYING";
        case ECS6ComponentVideoTexture_VideoStatus.BUFFERING:
            return "BUFFERING";
        case ECS6ComponentVideoTexture_VideoStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var ECS6ComponentCameraModeArea_CameraMode;
(function (ECS6ComponentCameraModeArea_CameraMode) {
    ECS6ComponentCameraModeArea_CameraMode[ECS6ComponentCameraModeArea_CameraMode["CM_FIRST_PERSON"] = 0] = "CM_FIRST_PERSON";
    ECS6ComponentCameraModeArea_CameraMode[ECS6ComponentCameraModeArea_CameraMode["CM_THIRD_PERSON"] = 1] = "CM_THIRD_PERSON";
    ECS6ComponentCameraModeArea_CameraMode[ECS6ComponentCameraModeArea_CameraMode["CM_BUILDING_TOOL_GOD_MODE"] = 2] = "CM_BUILDING_TOOL_GOD_MODE";
    ECS6ComponentCameraModeArea_CameraMode[ECS6ComponentCameraModeArea_CameraMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ECS6ComponentCameraModeArea_CameraMode || (exports.ECS6ComponentCameraModeArea_CameraMode = ECS6ComponentCameraModeArea_CameraMode = {}));
function eCS6ComponentCameraModeArea_CameraModeFromJSON(object) {
    switch (object) {
        case 0:
        case "CM_FIRST_PERSON":
            return ECS6ComponentCameraModeArea_CameraMode.CM_FIRST_PERSON;
        case 1:
        case "CM_THIRD_PERSON":
            return ECS6ComponentCameraModeArea_CameraMode.CM_THIRD_PERSON;
        case 2:
        case "CM_BUILDING_TOOL_GOD_MODE":
            return ECS6ComponentCameraModeArea_CameraMode.CM_BUILDING_TOOL_GOD_MODE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ECS6ComponentCameraModeArea_CameraMode.UNRECOGNIZED;
    }
}
function eCS6ComponentCameraModeArea_CameraModeToJSON(object) {
    switch (object) {
        case ECS6ComponentCameraModeArea_CameraMode.CM_FIRST_PERSON:
            return "CM_FIRST_PERSON";
        case ECS6ComponentCameraModeArea_CameraMode.CM_THIRD_PERSON:
            return "CM_THIRD_PERSON";
        case ECS6ComponentCameraModeArea_CameraMode.CM_BUILDING_TOOL_GOD_MODE:
            return "CM_BUILDING_TOOL_GOD_MODE";
        case ECS6ComponentCameraModeArea_CameraMode.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var ECS6ComponentUiContainerStack_UIStackOrientation;
(function (ECS6ComponentUiContainerStack_UIStackOrientation) {
    ECS6ComponentUiContainerStack_UIStackOrientation[ECS6ComponentUiContainerStack_UIStackOrientation["VERTICAL"] = 0] = "VERTICAL";
    ECS6ComponentUiContainerStack_UIStackOrientation[ECS6ComponentUiContainerStack_UIStackOrientation["HORIZONTAL"] = 1] = "HORIZONTAL";
    ECS6ComponentUiContainerStack_UIStackOrientation[ECS6ComponentUiContainerStack_UIStackOrientation["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ECS6ComponentUiContainerStack_UIStackOrientation || (exports.ECS6ComponentUiContainerStack_UIStackOrientation = ECS6ComponentUiContainerStack_UIStackOrientation = {}));
function eCS6ComponentUiContainerStack_UIStackOrientationFromJSON(object) {
    switch (object) {
        case 0:
        case "VERTICAL":
            return ECS6ComponentUiContainerStack_UIStackOrientation.VERTICAL;
        case 1:
        case "HORIZONTAL":
            return ECS6ComponentUiContainerStack_UIStackOrientation.HORIZONTAL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ECS6ComponentUiContainerStack_UIStackOrientation.UNRECOGNIZED;
    }
}
function eCS6ComponentUiContainerStack_UIStackOrientationToJSON(object) {
    switch (object) {
        case ECS6ComponentUiContainerStack_UIStackOrientation.VERTICAL:
            return "VERTICAL";
        case ECS6ComponentUiContainerStack_UIStackOrientation.HORIZONTAL:
            return "HORIZONTAL";
        case ECS6ComponentUiContainerStack_UIStackOrientation.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseECS6Color4() {
    return { r: 0, g: 0, b: 0, a: undefined };
}
var ECS6Color4;
(function (ECS6Color4) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.r !== 0) {
            writer.uint32(13).float(message.r);
        }
        if (message.g !== 0) {
            writer.uint32(21).float(message.g);
        }
        if (message.b !== 0) {
            writer.uint32(29).float(message.b);
        }
        if (message.a !== undefined) {
            writer.uint32(37).float(message.a);
        }
        return writer;
    }
    ECS6Color4.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6Color4();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.r = reader.float();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.g = reader.float();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.b = reader.float();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.a = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6Color4.decode = decode;
    function fromJSON(object) {
        return {
            r: isSet(object.r) ? Number(object.r) : 0,
            g: isSet(object.g) ? Number(object.g) : 0,
            b: isSet(object.b) ? Number(object.b) : 0,
            a: isSet(object.a) ? Number(object.a) : undefined,
        };
    }
    ECS6Color4.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.r !== undefined && (obj.r = message.r);
        message.g !== undefined && (obj.g = message.g);
        message.b !== undefined && (obj.b = message.b);
        message.a !== undefined && (obj.a = message.a);
        return obj;
    }
    ECS6Color4.toJSON = toJSON;
    function create(base) {
        return ECS6Color4.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6Color4.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseECS6Color4();
        message.r = (_a = object.r) !== null && _a !== void 0 ? _a : 0;
        message.g = (_b = object.g) !== null && _b !== void 0 ? _b : 0;
        message.b = (_c = object.b) !== null && _c !== void 0 ? _c : 0;
        message.a = (_d = object.a) !== null && _d !== void 0 ? _d : undefined;
        return message;
    }
    ECS6Color4.fromPartial = fromPartial;
})(ECS6Color4 || (exports.ECS6Color4 = ECS6Color4 = {}));
function createBaseArea() {
    return { box: undefined };
}
var Area;
(function (Area) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.box !== undefined) {
            vectors_gen_1.Vector3.encode(message.box, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    Area.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseArea();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.box = vectors_gen_1.Vector3.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Area.decode = decode;
    function fromJSON(object) {
        return { box: isSet(object.box) ? vectors_gen_1.Vector3.fromJSON(object.box) : undefined };
    }
    Area.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.box !== undefined && (obj.box = message.box ? vectors_gen_1.Vector3.toJSON(message.box) : undefined);
        return obj;
    }
    Area.toJSON = toJSON;
    function create(base) {
        return Area.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Area.create = create;
    function fromPartial(object) {
        const message = createBaseArea();
        message.box = (object.box !== undefined && object.box !== null) ? vectors_gen_1.Vector3.fromPartial(object.box) : undefined;
        return message;
    }
    Area.fromPartial = fromPartial;
})(Area || (exports.Area = Area = {}));
function createBaseUiValue() {
    return { value: undefined, type: undefined };
}
var UiValue;
(function (UiValue) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.value !== undefined) {
            writer.uint32(13).float(message.value);
        }
        if (message.type !== undefined) {
            writer.uint32(16).int32(message.type);
        }
        return writer;
    }
    UiValue.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUiValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.value = reader.float();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    UiValue.decode = decode;
    function fromJSON(object) {
        return {
            value: isSet(object.value) ? Number(object.value) : undefined,
            type: isSet(object.type) ? uiValue_UiValueTypeFromJSON(object.type) : undefined,
        };
    }
    UiValue.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.value !== undefined && (obj.value = message.value);
        message.type !== undefined &&
            (obj.type = message.type !== undefined ? uiValue_UiValueTypeToJSON(message.type) : undefined);
        return obj;
    }
    UiValue.toJSON = toJSON;
    function create(base) {
        return UiValue.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    UiValue.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseUiValue();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : undefined;
        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : undefined;
        return message;
    }
    UiValue.fromPartial = fromPartial;
})(UiValue || (exports.UiValue = UiValue = {}));
function createBaseECS6ComponentAvatarModifierArea() {
    return { area: undefined, modifiers: [], excludeIds: [] };
}
var ECS6ComponentAvatarModifierArea;
(function (ECS6ComponentAvatarModifierArea) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.area !== undefined) {
            Area.encode(message.area, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.modifiers) {
            writer.uint32(18).string(v);
        }
        for (const v of message.excludeIds) {
            writer.uint32(26).string(v);
        }
        return writer;
    }
    ECS6ComponentAvatarModifierArea.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentAvatarModifierArea();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.area = Area.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.modifiers.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.excludeIds.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentAvatarModifierArea.decode = decode;
    function fromJSON(object) {
        return {
            area: isSet(object.area) ? Area.fromJSON(object.area) : undefined,
            modifiers: Array.isArray(object === null || object === void 0 ? void 0 : object.modifiers) ? object.modifiers.map((e) => String(e)) : [],
            excludeIds: Array.isArray(object === null || object === void 0 ? void 0 : object.excludeIds) ? object.excludeIds.map((e) => String(e)) : [],
        };
    }
    ECS6ComponentAvatarModifierArea.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.area !== undefined && (obj.area = message.area ? Area.toJSON(message.area) : undefined);
        if (message.modifiers) {
            obj.modifiers = message.modifiers.map((e) => e);
        }
        else {
            obj.modifiers = [];
        }
        if (message.excludeIds) {
            obj.excludeIds = message.excludeIds.map((e) => e);
        }
        else {
            obj.excludeIds = [];
        }
        return obj;
    }
    ECS6ComponentAvatarModifierArea.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentAvatarModifierArea.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentAvatarModifierArea.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseECS6ComponentAvatarModifierArea();
        message.area = (object.area !== undefined && object.area !== null) ? Area.fromPartial(object.area) : undefined;
        message.modifiers = ((_a = object.modifiers) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.excludeIds = ((_b = object.excludeIds) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    }
    ECS6ComponentAvatarModifierArea.fromPartial = fromPartial;
})(ECS6ComponentAvatarModifierArea || (exports.ECS6ComponentAvatarModifierArea = ECS6ComponentAvatarModifierArea = {}));
function createBaseECS6ComponentTransform() {
    return { position: undefined, rotation: undefined, scale: undefined };
}
var ECS6ComponentTransform;
(function (ECS6ComponentTransform) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.position !== undefined) {
            vectors_gen_1.Vector3.encode(message.position, writer.uint32(10).fork()).ldelim();
        }
        if (message.rotation !== undefined) {
            vectors_gen_1.Quaternion.encode(message.rotation, writer.uint32(18).fork()).ldelim();
        }
        if (message.scale !== undefined) {
            vectors_gen_1.Vector3.encode(message.scale, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    }
    ECS6ComponentTransform.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentTransform();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.position = vectors_gen_1.Vector3.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.rotation = vectors_gen_1.Quaternion.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.scale = vectors_gen_1.Vector3.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentTransform.decode = decode;
    function fromJSON(object) {
        return {
            position: isSet(object.position) ? vectors_gen_1.Vector3.fromJSON(object.position) : undefined,
            rotation: isSet(object.rotation) ? vectors_gen_1.Quaternion.fromJSON(object.rotation) : undefined,
            scale: isSet(object.scale) ? vectors_gen_1.Vector3.fromJSON(object.scale) : undefined,
        };
    }
    ECS6ComponentTransform.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.position !== undefined && (obj.position = message.position ? vectors_gen_1.Vector3.toJSON(message.position) : undefined);
        message.rotation !== undefined &&
            (obj.rotation = message.rotation ? vectors_gen_1.Quaternion.toJSON(message.rotation) : undefined);
        message.scale !== undefined && (obj.scale = message.scale ? vectors_gen_1.Vector3.toJSON(message.scale) : undefined);
        return obj;
    }
    ECS6ComponentTransform.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentTransform.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentTransform.create = create;
    function fromPartial(object) {
        const message = createBaseECS6ComponentTransform();
        message.position = (object.position !== undefined && object.position !== null)
            ? vectors_gen_1.Vector3.fromPartial(object.position)
            : undefined;
        message.rotation = (object.rotation !== undefined && object.rotation !== null)
            ? vectors_gen_1.Quaternion.fromPartial(object.rotation)
            : undefined;
        message.scale = (object.scale !== undefined && object.scale !== null)
            ? vectors_gen_1.Vector3.fromPartial(object.scale)
            : undefined;
        return message;
    }
    ECS6ComponentTransform.fromPartial = fromPartial;
})(ECS6ComponentTransform || (exports.ECS6ComponentTransform = ECS6ComponentTransform = {}));
function createBaseECS6ComponentAttachToAvatar() {
    return { avatarId: undefined, anchorPointId: undefined, avatarSceneId: undefined };
}
var ECS6ComponentAttachToAvatar;
(function (ECS6ComponentAttachToAvatar) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.avatarId !== undefined) {
            writer.uint32(10).string(message.avatarId);
        }
        if (message.anchorPointId !== undefined) {
            writer.uint32(16).int32(message.anchorPointId);
        }
        if (message.avatarSceneId !== undefined) {
            writer.uint32(26).string(message.avatarSceneId);
        }
        return writer;
    }
    ECS6ComponentAttachToAvatar.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentAttachToAvatar();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.avatarId = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.anchorPointId = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.avatarSceneId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentAttachToAvatar.decode = decode;
    function fromJSON(object) {
        return {
            avatarId: isSet(object.avatarId) ? String(object.avatarId) : undefined,
            anchorPointId: isSet(object.anchorPointId)
                ? eCS6ComponentAttachToAvatar_AttachToAvatarAnchorPointIdFromJSON(object.anchorPointId)
                : undefined,
            avatarSceneId: isSet(object.avatarSceneId) ? String(object.avatarSceneId) : undefined,
        };
    }
    ECS6ComponentAttachToAvatar.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.avatarId !== undefined && (obj.avatarId = message.avatarId);
        message.anchorPointId !== undefined &&
            (obj.anchorPointId = message.anchorPointId !== undefined
                ? eCS6ComponentAttachToAvatar_AttachToAvatarAnchorPointIdToJSON(message.anchorPointId)
                : undefined);
        message.avatarSceneId !== undefined && (obj.avatarSceneId = message.avatarSceneId);
        return obj;
    }
    ECS6ComponentAttachToAvatar.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentAttachToAvatar.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentAttachToAvatar.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseECS6ComponentAttachToAvatar();
        message.avatarId = (_a = object.avatarId) !== null && _a !== void 0 ? _a : undefined;
        message.anchorPointId = (_b = object.anchorPointId) !== null && _b !== void 0 ? _b : undefined;
        message.avatarSceneId = (_c = object.avatarSceneId) !== null && _c !== void 0 ? _c : undefined;
        return message;
    }
    ECS6ComponentAttachToAvatar.fromPartial = fromPartial;
})(ECS6ComponentAttachToAvatar || (exports.ECS6ComponentAttachToAvatar = ECS6ComponentAttachToAvatar = {}));
function createBaseECS6ComponentBillboard() {
    return { x: undefined, y: undefined, z: undefined };
}
var ECS6ComponentBillboard;
(function (ECS6ComponentBillboard) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.x !== undefined) {
            writer.uint32(8).bool(message.x);
        }
        if (message.y !== undefined) {
            writer.uint32(16).bool(message.y);
        }
        if (message.z !== undefined) {
            writer.uint32(24).bool(message.z);
        }
        return writer;
    }
    ECS6ComponentBillboard.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentBillboard();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.x = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.y = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.z = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentBillboard.decode = decode;
    function fromJSON(object) {
        return {
            x: isSet(object.x) ? Boolean(object.x) : undefined,
            y: isSet(object.y) ? Boolean(object.y) : undefined,
            z: isSet(object.z) ? Boolean(object.z) : undefined,
        };
    }
    ECS6ComponentBillboard.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.x !== undefined && (obj.x = message.x);
        message.y !== undefined && (obj.y = message.y);
        message.z !== undefined && (obj.z = message.z);
        return obj;
    }
    ECS6ComponentBillboard.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentBillboard.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentBillboard.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseECS6ComponentBillboard();
        message.x = (_a = object.x) !== null && _a !== void 0 ? _a : undefined;
        message.y = (_b = object.y) !== null && _b !== void 0 ? _b : undefined;
        message.z = (_c = object.z) !== null && _c !== void 0 ? _c : undefined;
        return message;
    }
    ECS6ComponentBillboard.fromPartial = fromPartial;
})(ECS6ComponentBillboard || (exports.ECS6ComponentBillboard = ECS6ComponentBillboard = {}));
function createBaseECS6ComponentBoxShape() {
    return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined, uvs: [] };
}
var ECS6ComponentBoxShape;
(function (ECS6ComponentBoxShape) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.withCollisions !== undefined) {
            writer.uint32(8).bool(message.withCollisions);
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(16).bool(message.isPointerBlocker);
        }
        if (message.visible !== undefined) {
            writer.uint32(24).bool(message.visible);
        }
        writer.uint32(34).fork();
        for (const v of message.uvs) {
            writer.float(v);
        }
        writer.ldelim();
        return writer;
    }
    ECS6ComponentBoxShape.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentBoxShape();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.withCollisions = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 4:
                    if (tag === 37) {
                        message.uvs.push(reader.float());
                        continue;
                    }
                    if (tag === 34) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.uvs.push(reader.float());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentBoxShape.decode = decode;
    function fromJSON(object) {
        return {
            withCollisions: isSet(object.withCollisions) ? Boolean(object.withCollisions) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            uvs: Array.isArray(object === null || object === void 0 ? void 0 : object.uvs) ? object.uvs.map((e) => Number(e)) : [],
        };
    }
    ECS6ComponentBoxShape.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.withCollisions !== undefined && (obj.withCollisions = message.withCollisions);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.visible !== undefined && (obj.visible = message.visible);
        if (message.uvs) {
            obj.uvs = message.uvs.map((e) => e);
        }
        else {
            obj.uvs = [];
        }
        return obj;
    }
    ECS6ComponentBoxShape.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentBoxShape.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentBoxShape.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseECS6ComponentBoxShape();
        message.withCollisions = (_a = object.withCollisions) !== null && _a !== void 0 ? _a : undefined;
        message.isPointerBlocker = (_b = object.isPointerBlocker) !== null && _b !== void 0 ? _b : undefined;
        message.visible = (_c = object.visible) !== null && _c !== void 0 ? _c : undefined;
        message.uvs = ((_d = object.uvs) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        return message;
    }
    ECS6ComponentBoxShape.fromPartial = fromPartial;
})(ECS6ComponentBoxShape || (exports.ECS6ComponentBoxShape = ECS6ComponentBoxShape = {}));
function createBaseECS6ComponentSphereShape() {
    return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined };
}
var ECS6ComponentSphereShape;
(function (ECS6ComponentSphereShape) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.withCollisions !== undefined) {
            writer.uint32(8).bool(message.withCollisions);
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(16).bool(message.isPointerBlocker);
        }
        if (message.visible !== undefined) {
            writer.uint32(24).bool(message.visible);
        }
        return writer;
    }
    ECS6ComponentSphereShape.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentSphereShape();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.withCollisions = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentSphereShape.decode = decode;
    function fromJSON(object) {
        return {
            withCollisions: isSet(object.withCollisions) ? Boolean(object.withCollisions) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
        };
    }
    ECS6ComponentSphereShape.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.withCollisions !== undefined && (obj.withCollisions = message.withCollisions);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.visible !== undefined && (obj.visible = message.visible);
        return obj;
    }
    ECS6ComponentSphereShape.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentSphereShape.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentSphereShape.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseECS6ComponentSphereShape();
        message.withCollisions = (_a = object.withCollisions) !== null && _a !== void 0 ? _a : undefined;
        message.isPointerBlocker = (_b = object.isPointerBlocker) !== null && _b !== void 0 ? _b : undefined;
        message.visible = (_c = object.visible) !== null && _c !== void 0 ? _c : undefined;
        return message;
    }
    ECS6ComponentSphereShape.fromPartial = fromPartial;
})(ECS6ComponentSphereShape || (exports.ECS6ComponentSphereShape = ECS6ComponentSphereShape = {}));
function createBaseECS6ComponentCircleShape() {
    return {
        withCollisions: undefined,
        isPointerBlocker: undefined,
        visible: undefined,
        segments: undefined,
        arc: undefined,
    };
}
var ECS6ComponentCircleShape;
(function (ECS6ComponentCircleShape) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.withCollisions !== undefined) {
            writer.uint32(8).bool(message.withCollisions);
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(16).bool(message.isPointerBlocker);
        }
        if (message.visible !== undefined) {
            writer.uint32(24).bool(message.visible);
        }
        if (message.segments !== undefined) {
            writer.uint32(37).float(message.segments);
        }
        if (message.arc !== undefined) {
            writer.uint32(45).float(message.arc);
        }
        return writer;
    }
    ECS6ComponentCircleShape.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentCircleShape();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.withCollisions = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.segments = reader.float();
                    continue;
                case 5:
                    if (tag !== 45) {
                        break;
                    }
                    message.arc = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentCircleShape.decode = decode;
    function fromJSON(object) {
        return {
            withCollisions: isSet(object.withCollisions) ? Boolean(object.withCollisions) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            segments: isSet(object.segments) ? Number(object.segments) : undefined,
            arc: isSet(object.arc) ? Number(object.arc) : undefined,
        };
    }
    ECS6ComponentCircleShape.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.withCollisions !== undefined && (obj.withCollisions = message.withCollisions);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.visible !== undefined && (obj.visible = message.visible);
        message.segments !== undefined && (obj.segments = message.segments);
        message.arc !== undefined && (obj.arc = message.arc);
        return obj;
    }
    ECS6ComponentCircleShape.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentCircleShape.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentCircleShape.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseECS6ComponentCircleShape();
        message.withCollisions = (_a = object.withCollisions) !== null && _a !== void 0 ? _a : undefined;
        message.isPointerBlocker = (_b = object.isPointerBlocker) !== null && _b !== void 0 ? _b : undefined;
        message.visible = (_c = object.visible) !== null && _c !== void 0 ? _c : undefined;
        message.segments = (_d = object.segments) !== null && _d !== void 0 ? _d : undefined;
        message.arc = (_e = object.arc) !== null && _e !== void 0 ? _e : undefined;
        return message;
    }
    ECS6ComponentCircleShape.fromPartial = fromPartial;
})(ECS6ComponentCircleShape || (exports.ECS6ComponentCircleShape = ECS6ComponentCircleShape = {}));
function createBaseECS6ComponentPlaneShape() {
    return {
        withCollisions: undefined,
        isPointerBlocker: undefined,
        visible: undefined,
        uvs: [],
        width: undefined,
        height: undefined,
    };
}
var ECS6ComponentPlaneShape;
(function (ECS6ComponentPlaneShape) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.withCollisions !== undefined) {
            writer.uint32(8).bool(message.withCollisions);
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(16).bool(message.isPointerBlocker);
        }
        if (message.visible !== undefined) {
            writer.uint32(24).bool(message.visible);
        }
        writer.uint32(34).fork();
        for (const v of message.uvs) {
            writer.float(v);
        }
        writer.ldelim();
        if (message.width !== undefined) {
            writer.uint32(53).float(message.width);
        }
        if (message.height !== undefined) {
            writer.uint32(61).float(message.height);
        }
        return writer;
    }
    ECS6ComponentPlaneShape.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentPlaneShape();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.withCollisions = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 4:
                    if (tag === 37) {
                        message.uvs.push(reader.float());
                        continue;
                    }
                    if (tag === 34) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.uvs.push(reader.float());
                        }
                        continue;
                    }
                    break;
                case 6:
                    if (tag !== 53) {
                        break;
                    }
                    message.width = reader.float();
                    continue;
                case 7:
                    if (tag !== 61) {
                        break;
                    }
                    message.height = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentPlaneShape.decode = decode;
    function fromJSON(object) {
        return {
            withCollisions: isSet(object.withCollisions) ? Boolean(object.withCollisions) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            uvs: Array.isArray(object === null || object === void 0 ? void 0 : object.uvs) ? object.uvs.map((e) => Number(e)) : [],
            width: isSet(object.width) ? Number(object.width) : undefined,
            height: isSet(object.height) ? Number(object.height) : undefined,
        };
    }
    ECS6ComponentPlaneShape.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.withCollisions !== undefined && (obj.withCollisions = message.withCollisions);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.visible !== undefined && (obj.visible = message.visible);
        if (message.uvs) {
            obj.uvs = message.uvs.map((e) => e);
        }
        else {
            obj.uvs = [];
        }
        message.width !== undefined && (obj.width = message.width);
        message.height !== undefined && (obj.height = message.height);
        return obj;
    }
    ECS6ComponentPlaneShape.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentPlaneShape.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentPlaneShape.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseECS6ComponentPlaneShape();
        message.withCollisions = (_a = object.withCollisions) !== null && _a !== void 0 ? _a : undefined;
        message.isPointerBlocker = (_b = object.isPointerBlocker) !== null && _b !== void 0 ? _b : undefined;
        message.visible = (_c = object.visible) !== null && _c !== void 0 ? _c : undefined;
        message.uvs = ((_d = object.uvs) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.width = (_e = object.width) !== null && _e !== void 0 ? _e : undefined;
        message.height = (_f = object.height) !== null && _f !== void 0 ? _f : undefined;
        return message;
    }
    ECS6ComponentPlaneShape.fromPartial = fromPartial;
})(ECS6ComponentPlaneShape || (exports.ECS6ComponentPlaneShape = ECS6ComponentPlaneShape = {}));
function createBaseECS6ComponentConeShape() {
    return {
        withCollisions: undefined,
        isPointerBlocker: undefined,
        visible: undefined,
        radiusTop: undefined,
        radiusBottom: undefined,
        segmentsHeight: undefined,
        segmentsRadial: undefined,
        openEnded: undefined,
        radius: undefined,
        arc: undefined,
    };
}
var ECS6ComponentConeShape;
(function (ECS6ComponentConeShape) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.withCollisions !== undefined) {
            writer.uint32(8).bool(message.withCollisions);
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(16).bool(message.isPointerBlocker);
        }
        if (message.visible !== undefined) {
            writer.uint32(24).bool(message.visible);
        }
        if (message.radiusTop !== undefined) {
            writer.uint32(37).float(message.radiusTop);
        }
        if (message.radiusBottom !== undefined) {
            writer.uint32(45).float(message.radiusBottom);
        }
        if (message.segmentsHeight !== undefined) {
            writer.uint32(53).float(message.segmentsHeight);
        }
        if (message.segmentsRadial !== undefined) {
            writer.uint32(61).float(message.segmentsRadial);
        }
        if (message.openEnded !== undefined) {
            writer.uint32(64).bool(message.openEnded);
        }
        if (message.radius !== undefined) {
            writer.uint32(77).float(message.radius);
        }
        if (message.arc !== undefined) {
            writer.uint32(85).float(message.arc);
        }
        return writer;
    }
    ECS6ComponentConeShape.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentConeShape();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.withCollisions = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.radiusTop = reader.float();
                    continue;
                case 5:
                    if (tag !== 45) {
                        break;
                    }
                    message.radiusBottom = reader.float();
                    continue;
                case 6:
                    if (tag !== 53) {
                        break;
                    }
                    message.segmentsHeight = reader.float();
                    continue;
                case 7:
                    if (tag !== 61) {
                        break;
                    }
                    message.segmentsRadial = reader.float();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.openEnded = reader.bool();
                    continue;
                case 9:
                    if (tag !== 77) {
                        break;
                    }
                    message.radius = reader.float();
                    continue;
                case 10:
                    if (tag !== 85) {
                        break;
                    }
                    message.arc = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentConeShape.decode = decode;
    function fromJSON(object) {
        return {
            withCollisions: isSet(object.withCollisions) ? Boolean(object.withCollisions) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            radiusTop: isSet(object.radiusTop) ? Number(object.radiusTop) : undefined,
            radiusBottom: isSet(object.radiusBottom) ? Number(object.radiusBottom) : undefined,
            segmentsHeight: isSet(object.segmentsHeight) ? Number(object.segmentsHeight) : undefined,
            segmentsRadial: isSet(object.segmentsRadial) ? Number(object.segmentsRadial) : undefined,
            openEnded: isSet(object.openEnded) ? Boolean(object.openEnded) : undefined,
            radius: isSet(object.radius) ? Number(object.radius) : undefined,
            arc: isSet(object.arc) ? Number(object.arc) : undefined,
        };
    }
    ECS6ComponentConeShape.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.withCollisions !== undefined && (obj.withCollisions = message.withCollisions);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.visible !== undefined && (obj.visible = message.visible);
        message.radiusTop !== undefined && (obj.radiusTop = message.radiusTop);
        message.radiusBottom !== undefined && (obj.radiusBottom = message.radiusBottom);
        message.segmentsHeight !== undefined && (obj.segmentsHeight = message.segmentsHeight);
        message.segmentsRadial !== undefined && (obj.segmentsRadial = message.segmentsRadial);
        message.openEnded !== undefined && (obj.openEnded = message.openEnded);
        message.radius !== undefined && (obj.radius = message.radius);
        message.arc !== undefined && (obj.arc = message.arc);
        return obj;
    }
    ECS6ComponentConeShape.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentConeShape.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentConeShape.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseECS6ComponentConeShape();
        message.withCollisions = (_a = object.withCollisions) !== null && _a !== void 0 ? _a : undefined;
        message.isPointerBlocker = (_b = object.isPointerBlocker) !== null && _b !== void 0 ? _b : undefined;
        message.visible = (_c = object.visible) !== null && _c !== void 0 ? _c : undefined;
        message.radiusTop = (_d = object.radiusTop) !== null && _d !== void 0 ? _d : undefined;
        message.radiusBottom = (_e = object.radiusBottom) !== null && _e !== void 0 ? _e : undefined;
        message.segmentsHeight = (_f = object.segmentsHeight) !== null && _f !== void 0 ? _f : undefined;
        message.segmentsRadial = (_g = object.segmentsRadial) !== null && _g !== void 0 ? _g : undefined;
        message.openEnded = (_h = object.openEnded) !== null && _h !== void 0 ? _h : undefined;
        message.radius = (_j = object.radius) !== null && _j !== void 0 ? _j : undefined;
        message.arc = (_k = object.arc) !== null && _k !== void 0 ? _k : undefined;
        return message;
    }
    ECS6ComponentConeShape.fromPartial = fromPartial;
})(ECS6ComponentConeShape || (exports.ECS6ComponentConeShape = ECS6ComponentConeShape = {}));
function createBaseECS6ComponentCylinderShape() {
    return {
        withCollisions: undefined,
        isPointerBlocker: undefined,
        visible: undefined,
        radiusTop: undefined,
        radiusBottom: undefined,
        segmentsHeight: undefined,
        segmentsRadial: undefined,
        openEnded: undefined,
        radius: undefined,
        arc: undefined,
    };
}
var ECS6ComponentCylinderShape;
(function (ECS6ComponentCylinderShape) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.withCollisions !== undefined) {
            writer.uint32(8).bool(message.withCollisions);
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(16).bool(message.isPointerBlocker);
        }
        if (message.visible !== undefined) {
            writer.uint32(24).bool(message.visible);
        }
        if (message.radiusTop !== undefined) {
            writer.uint32(37).float(message.radiusTop);
        }
        if (message.radiusBottom !== undefined) {
            writer.uint32(45).float(message.radiusBottom);
        }
        if (message.segmentsHeight !== undefined) {
            writer.uint32(53).float(message.segmentsHeight);
        }
        if (message.segmentsRadial !== undefined) {
            writer.uint32(61).float(message.segmentsRadial);
        }
        if (message.openEnded !== undefined) {
            writer.uint32(64).bool(message.openEnded);
        }
        if (message.radius !== undefined) {
            writer.uint32(77).float(message.radius);
        }
        if (message.arc !== undefined) {
            writer.uint32(85).float(message.arc);
        }
        return writer;
    }
    ECS6ComponentCylinderShape.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentCylinderShape();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.withCollisions = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.radiusTop = reader.float();
                    continue;
                case 5:
                    if (tag !== 45) {
                        break;
                    }
                    message.radiusBottom = reader.float();
                    continue;
                case 6:
                    if (tag !== 53) {
                        break;
                    }
                    message.segmentsHeight = reader.float();
                    continue;
                case 7:
                    if (tag !== 61) {
                        break;
                    }
                    message.segmentsRadial = reader.float();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.openEnded = reader.bool();
                    continue;
                case 9:
                    if (tag !== 77) {
                        break;
                    }
                    message.radius = reader.float();
                    continue;
                case 10:
                    if (tag !== 85) {
                        break;
                    }
                    message.arc = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentCylinderShape.decode = decode;
    function fromJSON(object) {
        return {
            withCollisions: isSet(object.withCollisions) ? Boolean(object.withCollisions) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            radiusTop: isSet(object.radiusTop) ? Number(object.radiusTop) : undefined,
            radiusBottom: isSet(object.radiusBottom) ? Number(object.radiusBottom) : undefined,
            segmentsHeight: isSet(object.segmentsHeight) ? Number(object.segmentsHeight) : undefined,
            segmentsRadial: isSet(object.segmentsRadial) ? Number(object.segmentsRadial) : undefined,
            openEnded: isSet(object.openEnded) ? Boolean(object.openEnded) : undefined,
            radius: isSet(object.radius) ? Number(object.radius) : undefined,
            arc: isSet(object.arc) ? Number(object.arc) : undefined,
        };
    }
    ECS6ComponentCylinderShape.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.withCollisions !== undefined && (obj.withCollisions = message.withCollisions);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.visible !== undefined && (obj.visible = message.visible);
        message.radiusTop !== undefined && (obj.radiusTop = message.radiusTop);
        message.radiusBottom !== undefined && (obj.radiusBottom = message.radiusBottom);
        message.segmentsHeight !== undefined && (obj.segmentsHeight = message.segmentsHeight);
        message.segmentsRadial !== undefined && (obj.segmentsRadial = message.segmentsRadial);
        message.openEnded !== undefined && (obj.openEnded = message.openEnded);
        message.radius !== undefined && (obj.radius = message.radius);
        message.arc !== undefined && (obj.arc = message.arc);
        return obj;
    }
    ECS6ComponentCylinderShape.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentCylinderShape.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentCylinderShape.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseECS6ComponentCylinderShape();
        message.withCollisions = (_a = object.withCollisions) !== null && _a !== void 0 ? _a : undefined;
        message.isPointerBlocker = (_b = object.isPointerBlocker) !== null && _b !== void 0 ? _b : undefined;
        message.visible = (_c = object.visible) !== null && _c !== void 0 ? _c : undefined;
        message.radiusTop = (_d = object.radiusTop) !== null && _d !== void 0 ? _d : undefined;
        message.radiusBottom = (_e = object.radiusBottom) !== null && _e !== void 0 ? _e : undefined;
        message.segmentsHeight = (_f = object.segmentsHeight) !== null && _f !== void 0 ? _f : undefined;
        message.segmentsRadial = (_g = object.segmentsRadial) !== null && _g !== void 0 ? _g : undefined;
        message.openEnded = (_h = object.openEnded) !== null && _h !== void 0 ? _h : undefined;
        message.radius = (_j = object.radius) !== null && _j !== void 0 ? _j : undefined;
        message.arc = (_k = object.arc) !== null && _k !== void 0 ? _k : undefined;
        return message;
    }
    ECS6ComponentCylinderShape.fromPartial = fromPartial;
})(ECS6ComponentCylinderShape || (exports.ECS6ComponentCylinderShape = ECS6ComponentCylinderShape = {}));
function createBaseECS6ComponentGltfShape() {
    return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined, src: undefined };
}
var ECS6ComponentGltfShape;
(function (ECS6ComponentGltfShape) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.withCollisions !== undefined) {
            writer.uint32(8).bool(message.withCollisions);
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(16).bool(message.isPointerBlocker);
        }
        if (message.visible !== undefined) {
            writer.uint32(24).bool(message.visible);
        }
        if (message.src !== undefined) {
            writer.uint32(34).string(message.src);
        }
        return writer;
    }
    ECS6ComponentGltfShape.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentGltfShape();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.withCollisions = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.src = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentGltfShape.decode = decode;
    function fromJSON(object) {
        return {
            withCollisions: isSet(object.withCollisions) ? Boolean(object.withCollisions) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            src: isSet(object.src) ? String(object.src) : undefined,
        };
    }
    ECS6ComponentGltfShape.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.withCollisions !== undefined && (obj.withCollisions = message.withCollisions);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.visible !== undefined && (obj.visible = message.visible);
        message.src !== undefined && (obj.src = message.src);
        return obj;
    }
    ECS6ComponentGltfShape.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentGltfShape.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentGltfShape.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseECS6ComponentGltfShape();
        message.withCollisions = (_a = object.withCollisions) !== null && _a !== void 0 ? _a : undefined;
        message.isPointerBlocker = (_b = object.isPointerBlocker) !== null && _b !== void 0 ? _b : undefined;
        message.visible = (_c = object.visible) !== null && _c !== void 0 ? _c : undefined;
        message.src = (_d = object.src) !== null && _d !== void 0 ? _d : undefined;
        return message;
    }
    ECS6ComponentGltfShape.fromPartial = fromPartial;
})(ECS6ComponentGltfShape || (exports.ECS6ComponentGltfShape = ECS6ComponentGltfShape = {}));
function createBaseECS6ComponentNftShape() {
    return {
        withCollisions: undefined,
        isPointerBlocker: undefined,
        visible: undefined,
        src: undefined,
        style: undefined,
        color: undefined,
    };
}
var ECS6ComponentNftShape;
(function (ECS6ComponentNftShape) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.withCollisions !== undefined) {
            writer.uint32(8).bool(message.withCollisions);
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(16).bool(message.isPointerBlocker);
        }
        if (message.visible !== undefined) {
            writer.uint32(24).bool(message.visible);
        }
        if (message.src !== undefined) {
            writer.uint32(34).string(message.src);
        }
        if (message.style !== undefined) {
            writer.uint32(40).int32(message.style);
        }
        if (message.color !== undefined) {
            colors_gen_1.Color3.encode(message.color, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    }
    ECS6ComponentNftShape.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentNftShape();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.withCollisions = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.src = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.style = reader.int32();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.color = colors_gen_1.Color3.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentNftShape.decode = decode;
    function fromJSON(object) {
        return {
            withCollisions: isSet(object.withCollisions) ? Boolean(object.withCollisions) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            src: isSet(object.src) ? String(object.src) : undefined,
            style: isSet(object.style) ? eCS6ComponentNftShape_PictureFrameStyleFromJSON(object.style) : undefined,
            color: isSet(object.color) ? colors_gen_1.Color3.fromJSON(object.color) : undefined,
        };
    }
    ECS6ComponentNftShape.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.withCollisions !== undefined && (obj.withCollisions = message.withCollisions);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.visible !== undefined && (obj.visible = message.visible);
        message.src !== undefined && (obj.src = message.src);
        message.style !== undefined &&
            (obj.style = message.style !== undefined
                ? eCS6ComponentNftShape_PictureFrameStyleToJSON(message.style)
                : undefined);
        message.color !== undefined && (obj.color = message.color ? colors_gen_1.Color3.toJSON(message.color) : undefined);
        return obj;
    }
    ECS6ComponentNftShape.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentNftShape.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentNftShape.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseECS6ComponentNftShape();
        message.withCollisions = (_a = object.withCollisions) !== null && _a !== void 0 ? _a : undefined;
        message.isPointerBlocker = (_b = object.isPointerBlocker) !== null && _b !== void 0 ? _b : undefined;
        message.visible = (_c = object.visible) !== null && _c !== void 0 ? _c : undefined;
        message.src = (_d = object.src) !== null && _d !== void 0 ? _d : undefined;
        message.style = (_e = object.style) !== null && _e !== void 0 ? _e : undefined;
        message.color = (object.color !== undefined && object.color !== null)
            ? colors_gen_1.Color3.fromPartial(object.color)
            : undefined;
        return message;
    }
    ECS6ComponentNftShape.fromPartial = fromPartial;
})(ECS6ComponentNftShape || (exports.ECS6ComponentNftShape = ECS6ComponentNftShape = {}));
function createBaseECS6ComponentTexture() {
    return { src: undefined, samplingMode: undefined, wrap: undefined, hasAlpha: undefined };
}
var ECS6ComponentTexture;
(function (ECS6ComponentTexture) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.src !== undefined) {
            writer.uint32(10).string(message.src);
        }
        if (message.samplingMode !== undefined) {
            writer.uint32(16).int32(message.samplingMode);
        }
        if (message.wrap !== undefined) {
            writer.uint32(24).int32(message.wrap);
        }
        if (message.hasAlpha !== undefined) {
            writer.uint32(32).bool(message.hasAlpha);
        }
        return writer;
    }
    ECS6ComponentTexture.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentTexture();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.src = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.samplingMode = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.wrap = reader.int32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.hasAlpha = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentTexture.decode = decode;
    function fromJSON(object) {
        return {
            src: isSet(object.src) ? String(object.src) : undefined,
            samplingMode: isSet(object.samplingMode) ? Number(object.samplingMode) : undefined,
            wrap: isSet(object.wrap) ? Number(object.wrap) : undefined,
            hasAlpha: isSet(object.hasAlpha) ? Boolean(object.hasAlpha) : undefined,
        };
    }
    ECS6ComponentTexture.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.src !== undefined && (obj.src = message.src);
        message.samplingMode !== undefined && (obj.samplingMode = Math.round(message.samplingMode));
        message.wrap !== undefined && (obj.wrap = Math.round(message.wrap));
        message.hasAlpha !== undefined && (obj.hasAlpha = message.hasAlpha);
        return obj;
    }
    ECS6ComponentTexture.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentTexture.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentTexture.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseECS6ComponentTexture();
        message.src = (_a = object.src) !== null && _a !== void 0 ? _a : undefined;
        message.samplingMode = (_b = object.samplingMode) !== null && _b !== void 0 ? _b : undefined;
        message.wrap = (_c = object.wrap) !== null && _c !== void 0 ? _c : undefined;
        message.hasAlpha = (_d = object.hasAlpha) !== null && _d !== void 0 ? _d : undefined;
        return message;
    }
    ECS6ComponentTexture.fromPartial = fromPartial;
})(ECS6ComponentTexture || (exports.ECS6ComponentTexture = ECS6ComponentTexture = {}));
function createBaseECS6ComponentAnimator() {
    return { states: [] };
}
var ECS6ComponentAnimator;
(function (ECS6ComponentAnimator) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.states) {
            ECS6ComponentAnimator_AnimationState.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    ECS6ComponentAnimator.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentAnimator();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.states.push(ECS6ComponentAnimator_AnimationState.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentAnimator.decode = decode;
    function fromJSON(object) {
        return {
            states: Array.isArray(object === null || object === void 0 ? void 0 : object.states)
                ? object.states.map((e) => ECS6ComponentAnimator_AnimationState.fromJSON(e))
                : [],
        };
    }
    ECS6ComponentAnimator.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.states) {
            obj.states = message.states.map((e) => e ? ECS6ComponentAnimator_AnimationState.toJSON(e) : undefined);
        }
        else {
            obj.states = [];
        }
        return obj;
    }
    ECS6ComponentAnimator.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentAnimator.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentAnimator.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseECS6ComponentAnimator();
        message.states = ((_a = object.states) === null || _a === void 0 ? void 0 : _a.map((e) => ECS6ComponentAnimator_AnimationState.fromPartial(e))) || [];
        return message;
    }
    ECS6ComponentAnimator.fromPartial = fromPartial;
})(ECS6ComponentAnimator || (exports.ECS6ComponentAnimator = ECS6ComponentAnimator = {}));
function createBaseECS6ComponentAnimator_AnimationState() {
    return {
        clip: undefined,
        looping: undefined,
        weight: undefined,
        playing: undefined,
        shouldReset: undefined,
        speed: undefined,
        name: undefined,
    };
}
var ECS6ComponentAnimator_AnimationState;
(function (ECS6ComponentAnimator_AnimationState) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clip !== undefined) {
            writer.uint32(10).string(message.clip);
        }
        if (message.looping !== undefined) {
            writer.uint32(16).bool(message.looping);
        }
        if (message.weight !== undefined) {
            writer.uint32(29).float(message.weight);
        }
        if (message.playing !== undefined) {
            writer.uint32(32).bool(message.playing);
        }
        if (message.shouldReset !== undefined) {
            writer.uint32(40).bool(message.shouldReset);
        }
        if (message.speed !== undefined) {
            writer.uint32(53).float(message.speed);
        }
        if (message.name !== undefined) {
            writer.uint32(58).string(message.name);
        }
        return writer;
    }
    ECS6ComponentAnimator_AnimationState.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentAnimator_AnimationState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clip = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.looping = reader.bool();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.weight = reader.float();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.playing = reader.bool();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.shouldReset = reader.bool();
                    continue;
                case 6:
                    if (tag !== 53) {
                        break;
                    }
                    message.speed = reader.float();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentAnimator_AnimationState.decode = decode;
    function fromJSON(object) {
        return {
            clip: isSet(object.clip) ? String(object.clip) : undefined,
            looping: isSet(object.looping) ? Boolean(object.looping) : undefined,
            weight: isSet(object.weight) ? Number(object.weight) : undefined,
            playing: isSet(object.playing) ? Boolean(object.playing) : undefined,
            shouldReset: isSet(object.shouldReset) ? Boolean(object.shouldReset) : undefined,
            speed: isSet(object.speed) ? Number(object.speed) : undefined,
            name: isSet(object.name) ? String(object.name) : undefined,
        };
    }
    ECS6ComponentAnimator_AnimationState.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.clip !== undefined && (obj.clip = message.clip);
        message.looping !== undefined && (obj.looping = message.looping);
        message.weight !== undefined && (obj.weight = message.weight);
        message.playing !== undefined && (obj.playing = message.playing);
        message.shouldReset !== undefined && (obj.shouldReset = message.shouldReset);
        message.speed !== undefined && (obj.speed = message.speed);
        message.name !== undefined && (obj.name = message.name);
        return obj;
    }
    ECS6ComponentAnimator_AnimationState.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentAnimator_AnimationState.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentAnimator_AnimationState.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseECS6ComponentAnimator_AnimationState();
        message.clip = (_a = object.clip) !== null && _a !== void 0 ? _a : undefined;
        message.looping = (_b = object.looping) !== null && _b !== void 0 ? _b : undefined;
        message.weight = (_c = object.weight) !== null && _c !== void 0 ? _c : undefined;
        message.playing = (_d = object.playing) !== null && _d !== void 0 ? _d : undefined;
        message.shouldReset = (_e = object.shouldReset) !== null && _e !== void 0 ? _e : undefined;
        message.speed = (_f = object.speed) !== null && _f !== void 0 ? _f : undefined;
        message.name = (_g = object.name) !== null && _g !== void 0 ? _g : undefined;
        return message;
    }
    ECS6ComponentAnimator_AnimationState.fromPartial = fromPartial;
})(ECS6ComponentAnimator_AnimationState || (exports.ECS6ComponentAnimator_AnimationState = ECS6ComponentAnimator_AnimationState = {}));
function createBaseECS6ComponentObjShape() {
    return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined, src: undefined };
}
var ECS6ComponentObjShape;
(function (ECS6ComponentObjShape) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.withCollisions !== undefined) {
            writer.uint32(8).bool(message.withCollisions);
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(16).bool(message.isPointerBlocker);
        }
        if (message.visible !== undefined) {
            writer.uint32(24).bool(message.visible);
        }
        if (message.src !== undefined) {
            writer.uint32(34).string(message.src);
        }
        return writer;
    }
    ECS6ComponentObjShape.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentObjShape();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.withCollisions = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.src = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentObjShape.decode = decode;
    function fromJSON(object) {
        return {
            withCollisions: isSet(object.withCollisions) ? Boolean(object.withCollisions) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            src: isSet(object.src) ? String(object.src) : undefined,
        };
    }
    ECS6ComponentObjShape.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.withCollisions !== undefined && (obj.withCollisions = message.withCollisions);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.visible !== undefined && (obj.visible = message.visible);
        message.src !== undefined && (obj.src = message.src);
        return obj;
    }
    ECS6ComponentObjShape.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentObjShape.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentObjShape.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseECS6ComponentObjShape();
        message.withCollisions = (_a = object.withCollisions) !== null && _a !== void 0 ? _a : undefined;
        message.isPointerBlocker = (_b = object.isPointerBlocker) !== null && _b !== void 0 ? _b : undefined;
        message.visible = (_c = object.visible) !== null && _c !== void 0 ? _c : undefined;
        message.src = (_d = object.src) !== null && _d !== void 0 ? _d : undefined;
        return message;
    }
    ECS6ComponentObjShape.fromPartial = fromPartial;
})(ECS6ComponentObjShape || (exports.ECS6ComponentObjShape = ECS6ComponentObjShape = {}));
function createBaseECS6ComponentFont() {
    return { src: undefined };
}
var ECS6ComponentFont;
(function (ECS6ComponentFont) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.src !== undefined) {
            writer.uint32(10).string(message.src);
        }
        return writer;
    }
    ECS6ComponentFont.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentFont();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.src = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentFont.decode = decode;
    function fromJSON(object) {
        return { src: isSet(object.src) ? String(object.src) : undefined };
    }
    ECS6ComponentFont.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.src !== undefined && (obj.src = message.src);
        return obj;
    }
    ECS6ComponentFont.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentFont.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentFont.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseECS6ComponentFont();
        message.src = (_a = object.src) !== null && _a !== void 0 ? _a : undefined;
        return message;
    }
    ECS6ComponentFont.fromPartial = fromPartial;
})(ECS6ComponentFont || (exports.ECS6ComponentFont = ECS6ComponentFont = {}));
function createBaseECS6ComponentTextShape() {
    return {
        outlineWidth: undefined,
        outlineColor: undefined,
        color: undefined,
        fontSize: undefined,
        font: undefined,
        opacity: undefined,
        value: undefined,
        lineSpacing: undefined,
        lineCount: undefined,
        textWrapping: undefined,
        shadowBlur: undefined,
        shadowOffsetX: undefined,
        shadowOffsetY: undefined,
        shadowColor: undefined,
        hTextAlign: undefined,
        vTextAlign: undefined,
        width: undefined,
        height: undefined,
        paddingTop: undefined,
        paddingRight: undefined,
        paddingBottom: undefined,
        paddingLeft: undefined,
        billboard: undefined,
        visible: undefined,
    };
}
var ECS6ComponentTextShape;
(function (ECS6ComponentTextShape) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.outlineWidth !== undefined) {
            writer.uint32(13).float(message.outlineWidth);
        }
        if (message.outlineColor !== undefined) {
            colors_gen_1.Color3.encode(message.outlineColor, writer.uint32(18).fork()).ldelim();
        }
        if (message.color !== undefined) {
            colors_gen_1.Color3.encode(message.color, writer.uint32(26).fork()).ldelim();
        }
        if (message.fontSize !== undefined) {
            writer.uint32(37).float(message.fontSize);
        }
        if (message.font !== undefined) {
            writer.uint32(42).string(message.font);
        }
        if (message.opacity !== undefined) {
            writer.uint32(53).float(message.opacity);
        }
        if (message.value !== undefined) {
            writer.uint32(58).string(message.value);
        }
        if (message.lineSpacing !== undefined) {
            writer.uint32(66).string(message.lineSpacing);
        }
        if (message.lineCount !== undefined) {
            writer.uint32(72).int32(message.lineCount);
        }
        if (message.textWrapping !== undefined) {
            writer.uint32(80).bool(message.textWrapping);
        }
        if (message.shadowBlur !== undefined) {
            writer.uint32(93).float(message.shadowBlur);
        }
        if (message.shadowOffsetX !== undefined) {
            writer.uint32(101).float(message.shadowOffsetX);
        }
        if (message.shadowOffsetY !== undefined) {
            writer.uint32(109).float(message.shadowOffsetY);
        }
        if (message.shadowColor !== undefined) {
            colors_gen_1.Color3.encode(message.shadowColor, writer.uint32(114).fork()).ldelim();
        }
        if (message.hTextAlign !== undefined) {
            writer.uint32(122).string(message.hTextAlign);
        }
        if (message.vTextAlign !== undefined) {
            writer.uint32(130).string(message.vTextAlign);
        }
        if (message.width !== undefined) {
            writer.uint32(141).float(message.width);
        }
        if (message.height !== undefined) {
            writer.uint32(149).float(message.height);
        }
        if (message.paddingTop !== undefined) {
            writer.uint32(157).float(message.paddingTop);
        }
        if (message.paddingRight !== undefined) {
            writer.uint32(165).float(message.paddingRight);
        }
        if (message.paddingBottom !== undefined) {
            writer.uint32(173).float(message.paddingBottom);
        }
        if (message.paddingLeft !== undefined) {
            writer.uint32(181).float(message.paddingLeft);
        }
        if (message.billboard !== undefined) {
            writer.uint32(184).bool(message.billboard);
        }
        if (message.visible !== undefined) {
            writer.uint32(192).bool(message.visible);
        }
        return writer;
    }
    ECS6ComponentTextShape.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentTextShape();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.outlineWidth = reader.float();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.outlineColor = colors_gen_1.Color3.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.color = colors_gen_1.Color3.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.fontSize = reader.float();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.font = reader.string();
                    continue;
                case 6:
                    if (tag !== 53) {
                        break;
                    }
                    message.opacity = reader.float();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.lineSpacing = reader.string();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.lineCount = reader.int32();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.textWrapping = reader.bool();
                    continue;
                case 11:
                    if (tag !== 93) {
                        break;
                    }
                    message.shadowBlur = reader.float();
                    continue;
                case 12:
                    if (tag !== 101) {
                        break;
                    }
                    message.shadowOffsetX = reader.float();
                    continue;
                case 13:
                    if (tag !== 109) {
                        break;
                    }
                    message.shadowOffsetY = reader.float();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.shadowColor = colors_gen_1.Color3.decode(reader, reader.uint32());
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.hTextAlign = reader.string();
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.vTextAlign = reader.string();
                    continue;
                case 17:
                    if (tag !== 141) {
                        break;
                    }
                    message.width = reader.float();
                    continue;
                case 18:
                    if (tag !== 149) {
                        break;
                    }
                    message.height = reader.float();
                    continue;
                case 19:
                    if (tag !== 157) {
                        break;
                    }
                    message.paddingTop = reader.float();
                    continue;
                case 20:
                    if (tag !== 165) {
                        break;
                    }
                    message.paddingRight = reader.float();
                    continue;
                case 21:
                    if (tag !== 173) {
                        break;
                    }
                    message.paddingBottom = reader.float();
                    continue;
                case 22:
                    if (tag !== 181) {
                        break;
                    }
                    message.paddingLeft = reader.float();
                    continue;
                case 23:
                    if (tag !== 184) {
                        break;
                    }
                    message.billboard = reader.bool();
                    continue;
                case 24:
                    if (tag !== 192) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentTextShape.decode = decode;
    function fromJSON(object) {
        return {
            outlineWidth: isSet(object.outlineWidth) ? Number(object.outlineWidth) : undefined,
            outlineColor: isSet(object.outlineColor) ? colors_gen_1.Color3.fromJSON(object.outlineColor) : undefined,
            color: isSet(object.color) ? colors_gen_1.Color3.fromJSON(object.color) : undefined,
            fontSize: isSet(object.fontSize) ? Number(object.fontSize) : undefined,
            font: isSet(object.font) ? String(object.font) : undefined,
            opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
            value: isSet(object.value) ? String(object.value) : undefined,
            lineSpacing: isSet(object.lineSpacing) ? String(object.lineSpacing) : undefined,
            lineCount: isSet(object.lineCount) ? Number(object.lineCount) : undefined,
            textWrapping: isSet(object.textWrapping) ? Boolean(object.textWrapping) : undefined,
            shadowBlur: isSet(object.shadowBlur) ? Number(object.shadowBlur) : undefined,
            shadowOffsetX: isSet(object.shadowOffsetX) ? Number(object.shadowOffsetX) : undefined,
            shadowOffsetY: isSet(object.shadowOffsetY) ? Number(object.shadowOffsetY) : undefined,
            shadowColor: isSet(object.shadowColor) ? colors_gen_1.Color3.fromJSON(object.shadowColor) : undefined,
            hTextAlign: isSet(object.hTextAlign) ? String(object.hTextAlign) : undefined,
            vTextAlign: isSet(object.vTextAlign) ? String(object.vTextAlign) : undefined,
            width: isSet(object.width) ? Number(object.width) : undefined,
            height: isSet(object.height) ? Number(object.height) : undefined,
            paddingTop: isSet(object.paddingTop) ? Number(object.paddingTop) : undefined,
            paddingRight: isSet(object.paddingRight) ? Number(object.paddingRight) : undefined,
            paddingBottom: isSet(object.paddingBottom) ? Number(object.paddingBottom) : undefined,
            paddingLeft: isSet(object.paddingLeft) ? Number(object.paddingLeft) : undefined,
            billboard: isSet(object.billboard) ? Boolean(object.billboard) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
        };
    }
    ECS6ComponentTextShape.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.outlineWidth !== undefined && (obj.outlineWidth = message.outlineWidth);
        message.outlineColor !== undefined &&
            (obj.outlineColor = message.outlineColor ? colors_gen_1.Color3.toJSON(message.outlineColor) : undefined);
        message.color !== undefined && (obj.color = message.color ? colors_gen_1.Color3.toJSON(message.color) : undefined);
        message.fontSize !== undefined && (obj.fontSize = message.fontSize);
        message.font !== undefined && (obj.font = message.font);
        message.opacity !== undefined && (obj.opacity = message.opacity);
        message.value !== undefined && (obj.value = message.value);
        message.lineSpacing !== undefined && (obj.lineSpacing = message.lineSpacing);
        message.lineCount !== undefined && (obj.lineCount = Math.round(message.lineCount));
        message.textWrapping !== undefined && (obj.textWrapping = message.textWrapping);
        message.shadowBlur !== undefined && (obj.shadowBlur = message.shadowBlur);
        message.shadowOffsetX !== undefined && (obj.shadowOffsetX = message.shadowOffsetX);
        message.shadowOffsetY !== undefined && (obj.shadowOffsetY = message.shadowOffsetY);
        message.shadowColor !== undefined &&
            (obj.shadowColor = message.shadowColor ? colors_gen_1.Color3.toJSON(message.shadowColor) : undefined);
        message.hTextAlign !== undefined && (obj.hTextAlign = message.hTextAlign);
        message.vTextAlign !== undefined && (obj.vTextAlign = message.vTextAlign);
        message.width !== undefined && (obj.width = message.width);
        message.height !== undefined && (obj.height = message.height);
        message.paddingTop !== undefined && (obj.paddingTop = message.paddingTop);
        message.paddingRight !== undefined && (obj.paddingRight = message.paddingRight);
        message.paddingBottom !== undefined && (obj.paddingBottom = message.paddingBottom);
        message.paddingLeft !== undefined && (obj.paddingLeft = message.paddingLeft);
        message.billboard !== undefined && (obj.billboard = message.billboard);
        message.visible !== undefined && (obj.visible = message.visible);
        return obj;
    }
    ECS6ComponentTextShape.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentTextShape.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentTextShape.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
        const message = createBaseECS6ComponentTextShape();
        message.outlineWidth = (_a = object.outlineWidth) !== null && _a !== void 0 ? _a : undefined;
        message.outlineColor = (object.outlineColor !== undefined && object.outlineColor !== null)
            ? colors_gen_1.Color3.fromPartial(object.outlineColor)
            : undefined;
        message.color = (object.color !== undefined && object.color !== null)
            ? colors_gen_1.Color3.fromPartial(object.color)
            : undefined;
        message.fontSize = (_b = object.fontSize) !== null && _b !== void 0 ? _b : undefined;
        message.font = (_c = object.font) !== null && _c !== void 0 ? _c : undefined;
        message.opacity = (_d = object.opacity) !== null && _d !== void 0 ? _d : undefined;
        message.value = (_e = object.value) !== null && _e !== void 0 ? _e : undefined;
        message.lineSpacing = (_f = object.lineSpacing) !== null && _f !== void 0 ? _f : undefined;
        message.lineCount = (_g = object.lineCount) !== null && _g !== void 0 ? _g : undefined;
        message.textWrapping = (_h = object.textWrapping) !== null && _h !== void 0 ? _h : undefined;
        message.shadowBlur = (_j = object.shadowBlur) !== null && _j !== void 0 ? _j : undefined;
        message.shadowOffsetX = (_k = object.shadowOffsetX) !== null && _k !== void 0 ? _k : undefined;
        message.shadowOffsetY = (_l = object.shadowOffsetY) !== null && _l !== void 0 ? _l : undefined;
        message.shadowColor = (object.shadowColor !== undefined && object.shadowColor !== null)
            ? colors_gen_1.Color3.fromPartial(object.shadowColor)
            : undefined;
        message.hTextAlign = (_m = object.hTextAlign) !== null && _m !== void 0 ? _m : undefined;
        message.vTextAlign = (_o = object.vTextAlign) !== null && _o !== void 0 ? _o : undefined;
        message.width = (_p = object.width) !== null && _p !== void 0 ? _p : undefined;
        message.height = (_q = object.height) !== null && _q !== void 0 ? _q : undefined;
        message.paddingTop = (_r = object.paddingTop) !== null && _r !== void 0 ? _r : undefined;
        message.paddingRight = (_s = object.paddingRight) !== null && _s !== void 0 ? _s : undefined;
        message.paddingBottom = (_t = object.paddingBottom) !== null && _t !== void 0 ? _t : undefined;
        message.paddingLeft = (_u = object.paddingLeft) !== null && _u !== void 0 ? _u : undefined;
        message.billboard = (_v = object.billboard) !== null && _v !== void 0 ? _v : undefined;
        message.visible = (_w = object.visible) !== null && _w !== void 0 ? _w : undefined;
        return message;
    }
    ECS6ComponentTextShape.fromPartial = fromPartial;
})(ECS6ComponentTextShape || (exports.ECS6ComponentTextShape = ECS6ComponentTextShape = {}));
function createBaseECS6ComponentMaterial() {
    return {
        alphaTest: undefined,
        albedoColor: undefined,
        emissiveColor: undefined,
        metallic: undefined,
        roughness: undefined,
        reflectivityColor: undefined,
        directIntensity: undefined,
        microSurface: undefined,
        emissiveIntensity: undefined,
        specularIntensity: undefined,
        albedoTexture: undefined,
        alphaTexture: undefined,
        emissiveTexture: undefined,
        bumpTexture: undefined,
        transparencyMode: undefined,
        castShadows: undefined,
    };
}
var ECS6ComponentMaterial;
(function (ECS6ComponentMaterial) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.alphaTest !== undefined) {
            writer.uint32(13).float(message.alphaTest);
        }
        if (message.albedoColor !== undefined) {
            ECS6Color4.encode(message.albedoColor, writer.uint32(18).fork()).ldelim();
        }
        if (message.emissiveColor !== undefined) {
            colors_gen_1.Color3.encode(message.emissiveColor, writer.uint32(26).fork()).ldelim();
        }
        if (message.metallic !== undefined) {
            writer.uint32(37).float(message.metallic);
        }
        if (message.roughness !== undefined) {
            writer.uint32(45).float(message.roughness);
        }
        if (message.reflectivityColor !== undefined) {
            colors_gen_1.Color3.encode(message.reflectivityColor, writer.uint32(50).fork()).ldelim();
        }
        if (message.directIntensity !== undefined) {
            writer.uint32(61).float(message.directIntensity);
        }
        if (message.microSurface !== undefined) {
            writer.uint32(69).float(message.microSurface);
        }
        if (message.emissiveIntensity !== undefined) {
            writer.uint32(77).float(message.emissiveIntensity);
        }
        if (message.specularIntensity !== undefined) {
            writer.uint32(85).float(message.specularIntensity);
        }
        if (message.albedoTexture !== undefined) {
            writer.uint32(90).string(message.albedoTexture);
        }
        if (message.alphaTexture !== undefined) {
            writer.uint32(98).string(message.alphaTexture);
        }
        if (message.emissiveTexture !== undefined) {
            writer.uint32(106).string(message.emissiveTexture);
        }
        if (message.bumpTexture !== undefined) {
            writer.uint32(114).string(message.bumpTexture);
        }
        if (message.transparencyMode !== undefined) {
            writer.uint32(125).float(message.transparencyMode);
        }
        if (message.castShadows !== undefined) {
            writer.uint32(128).bool(message.castShadows);
        }
        return writer;
    }
    ECS6ComponentMaterial.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentMaterial();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.alphaTest = reader.float();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.albedoColor = ECS6Color4.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.emissiveColor = colors_gen_1.Color3.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.metallic = reader.float();
                    continue;
                case 5:
                    if (tag !== 45) {
                        break;
                    }
                    message.roughness = reader.float();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.reflectivityColor = colors_gen_1.Color3.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 61) {
                        break;
                    }
                    message.directIntensity = reader.float();
                    continue;
                case 8:
                    if (tag !== 69) {
                        break;
                    }
                    message.microSurface = reader.float();
                    continue;
                case 9:
                    if (tag !== 77) {
                        break;
                    }
                    message.emissiveIntensity = reader.float();
                    continue;
                case 10:
                    if (tag !== 85) {
                        break;
                    }
                    message.specularIntensity = reader.float();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.albedoTexture = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.alphaTexture = reader.string();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.emissiveTexture = reader.string();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.bumpTexture = reader.string();
                    continue;
                case 15:
                    if (tag !== 125) {
                        break;
                    }
                    message.transparencyMode = reader.float();
                    continue;
                case 16:
                    if (tag !== 128) {
                        break;
                    }
                    message.castShadows = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentMaterial.decode = decode;
    function fromJSON(object) {
        return {
            alphaTest: isSet(object.alphaTest) ? Number(object.alphaTest) : undefined,
            albedoColor: isSet(object.albedoColor) ? ECS6Color4.fromJSON(object.albedoColor) : undefined,
            emissiveColor: isSet(object.emissiveColor) ? colors_gen_1.Color3.fromJSON(object.emissiveColor) : undefined,
            metallic: isSet(object.metallic) ? Number(object.metallic) : undefined,
            roughness: isSet(object.roughness) ? Number(object.roughness) : undefined,
            reflectivityColor: isSet(object.reflectivityColor) ? colors_gen_1.Color3.fromJSON(object.reflectivityColor) : undefined,
            directIntensity: isSet(object.directIntensity) ? Number(object.directIntensity) : undefined,
            microSurface: isSet(object.microSurface) ? Number(object.microSurface) : undefined,
            emissiveIntensity: isSet(object.emissiveIntensity) ? Number(object.emissiveIntensity) : undefined,
            specularIntensity: isSet(object.specularIntensity) ? Number(object.specularIntensity) : undefined,
            albedoTexture: isSet(object.albedoTexture) ? String(object.albedoTexture) : undefined,
            alphaTexture: isSet(object.alphaTexture) ? String(object.alphaTexture) : undefined,
            emissiveTexture: isSet(object.emissiveTexture) ? String(object.emissiveTexture) : undefined,
            bumpTexture: isSet(object.bumpTexture) ? String(object.bumpTexture) : undefined,
            transparencyMode: isSet(object.transparencyMode) ? Number(object.transparencyMode) : undefined,
            castShadows: isSet(object.castShadows) ? Boolean(object.castShadows) : undefined,
        };
    }
    ECS6ComponentMaterial.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.alphaTest !== undefined && (obj.alphaTest = message.alphaTest);
        message.albedoColor !== undefined &&
            (obj.albedoColor = message.albedoColor ? ECS6Color4.toJSON(message.albedoColor) : undefined);
        message.emissiveColor !== undefined &&
            (obj.emissiveColor = message.emissiveColor ? colors_gen_1.Color3.toJSON(message.emissiveColor) : undefined);
        message.metallic !== undefined && (obj.metallic = message.metallic);
        message.roughness !== undefined && (obj.roughness = message.roughness);
        message.reflectivityColor !== undefined &&
            (obj.reflectivityColor = message.reflectivityColor ? colors_gen_1.Color3.toJSON(message.reflectivityColor) : undefined);
        message.directIntensity !== undefined && (obj.directIntensity = message.directIntensity);
        message.microSurface !== undefined && (obj.microSurface = message.microSurface);
        message.emissiveIntensity !== undefined && (obj.emissiveIntensity = message.emissiveIntensity);
        message.specularIntensity !== undefined && (obj.specularIntensity = message.specularIntensity);
        message.albedoTexture !== undefined && (obj.albedoTexture = message.albedoTexture);
        message.alphaTexture !== undefined && (obj.alphaTexture = message.alphaTexture);
        message.emissiveTexture !== undefined && (obj.emissiveTexture = message.emissiveTexture);
        message.bumpTexture !== undefined && (obj.bumpTexture = message.bumpTexture);
        message.transparencyMode !== undefined && (obj.transparencyMode = message.transparencyMode);
        message.castShadows !== undefined && (obj.castShadows = message.castShadows);
        return obj;
    }
    ECS6ComponentMaterial.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentMaterial.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentMaterial.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseECS6ComponentMaterial();
        message.alphaTest = (_a = object.alphaTest) !== null && _a !== void 0 ? _a : undefined;
        message.albedoColor = (object.albedoColor !== undefined && object.albedoColor !== null)
            ? ECS6Color4.fromPartial(object.albedoColor)
            : undefined;
        message.emissiveColor = (object.emissiveColor !== undefined && object.emissiveColor !== null)
            ? colors_gen_1.Color3.fromPartial(object.emissiveColor)
            : undefined;
        message.metallic = (_b = object.metallic) !== null && _b !== void 0 ? _b : undefined;
        message.roughness = (_c = object.roughness) !== null && _c !== void 0 ? _c : undefined;
        message.reflectivityColor = (object.reflectivityColor !== undefined && object.reflectivityColor !== null)
            ? colors_gen_1.Color3.fromPartial(object.reflectivityColor)
            : undefined;
        message.directIntensity = (_d = object.directIntensity) !== null && _d !== void 0 ? _d : undefined;
        message.microSurface = (_e = object.microSurface) !== null && _e !== void 0 ? _e : undefined;
        message.emissiveIntensity = (_f = object.emissiveIntensity) !== null && _f !== void 0 ? _f : undefined;
        message.specularIntensity = (_g = object.specularIntensity) !== null && _g !== void 0 ? _g : undefined;
        message.albedoTexture = (_h = object.albedoTexture) !== null && _h !== void 0 ? _h : undefined;
        message.alphaTexture = (_j = object.alphaTexture) !== null && _j !== void 0 ? _j : undefined;
        message.emissiveTexture = (_k = object.emissiveTexture) !== null && _k !== void 0 ? _k : undefined;
        message.bumpTexture = (_l = object.bumpTexture) !== null && _l !== void 0 ? _l : undefined;
        message.transparencyMode = (_m = object.transparencyMode) !== null && _m !== void 0 ? _m : undefined;
        message.castShadows = (_o = object.castShadows) !== null && _o !== void 0 ? _o : undefined;
        return message;
    }
    ECS6ComponentMaterial.fromPartial = fromPartial;
})(ECS6ComponentMaterial || (exports.ECS6ComponentMaterial = ECS6ComponentMaterial = {}));
function createBaseECS6ComponentBasicMaterial() {
    return { alphaTest: undefined, texture: undefined, castShadows: undefined };
}
var ECS6ComponentBasicMaterial;
(function (ECS6ComponentBasicMaterial) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.alphaTest !== undefined) {
            writer.uint32(13).float(message.alphaTest);
        }
        if (message.texture !== undefined) {
            writer.uint32(18).string(message.texture);
        }
        if (message.castShadows !== undefined) {
            writer.uint32(24).bool(message.castShadows);
        }
        return writer;
    }
    ECS6ComponentBasicMaterial.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentBasicMaterial();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.alphaTest = reader.float();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.texture = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.castShadows = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentBasicMaterial.decode = decode;
    function fromJSON(object) {
        return {
            alphaTest: isSet(object.alphaTest) ? Number(object.alphaTest) : undefined,
            texture: isSet(object.texture) ? String(object.texture) : undefined,
            castShadows: isSet(object.castShadows) ? Boolean(object.castShadows) : undefined,
        };
    }
    ECS6ComponentBasicMaterial.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.alphaTest !== undefined && (obj.alphaTest = message.alphaTest);
        message.texture !== undefined && (obj.texture = message.texture);
        message.castShadows !== undefined && (obj.castShadows = message.castShadows);
        return obj;
    }
    ECS6ComponentBasicMaterial.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentBasicMaterial.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentBasicMaterial.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseECS6ComponentBasicMaterial();
        message.alphaTest = (_a = object.alphaTest) !== null && _a !== void 0 ? _a : undefined;
        message.texture = (_b = object.texture) !== null && _b !== void 0 ? _b : undefined;
        message.castShadows = (_c = object.castShadows) !== null && _c !== void 0 ? _c : undefined;
        return message;
    }
    ECS6ComponentBasicMaterial.fromPartial = fromPartial;
})(ECS6ComponentBasicMaterial || (exports.ECS6ComponentBasicMaterial = ECS6ComponentBasicMaterial = {}));
function createBaseECS6ComponentUuidCallback() {
    return {
        button: undefined,
        hoverText: undefined,
        distance: undefined,
        showFeedback: undefined,
        type: undefined,
        uuid: undefined,
    };
}
var ECS6ComponentUuidCallback;
(function (ECS6ComponentUuidCallback) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.button !== undefined) {
            writer.uint32(10).string(message.button);
        }
        if (message.hoverText !== undefined) {
            writer.uint32(18).string(message.hoverText);
        }
        if (message.distance !== undefined) {
            writer.uint32(29).float(message.distance);
        }
        if (message.showFeedback !== undefined) {
            writer.uint32(32).bool(message.showFeedback);
        }
        if (message.type !== undefined) {
            writer.uint32(42).string(message.type);
        }
        if (message.uuid !== undefined) {
            writer.uint32(50).string(message.uuid);
        }
        return writer;
    }
    ECS6ComponentUuidCallback.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentUuidCallback();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.button = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.hoverText = reader.string();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.distance = reader.float();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.showFeedback = reader.bool();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.uuid = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentUuidCallback.decode = decode;
    function fromJSON(object) {
        return {
            button: isSet(object.button) ? String(object.button) : undefined,
            hoverText: isSet(object.hoverText) ? String(object.hoverText) : undefined,
            distance: isSet(object.distance) ? Number(object.distance) : undefined,
            showFeedback: isSet(object.showFeedback) ? Boolean(object.showFeedback) : undefined,
            type: isSet(object.type) ? String(object.type) : undefined,
            uuid: isSet(object.uuid) ? String(object.uuid) : undefined,
        };
    }
    ECS6ComponentUuidCallback.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.button !== undefined && (obj.button = message.button);
        message.hoverText !== undefined && (obj.hoverText = message.hoverText);
        message.distance !== undefined && (obj.distance = message.distance);
        message.showFeedback !== undefined && (obj.showFeedback = message.showFeedback);
        message.type !== undefined && (obj.type = message.type);
        message.uuid !== undefined && (obj.uuid = message.uuid);
        return obj;
    }
    ECS6ComponentUuidCallback.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentUuidCallback.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentUuidCallback.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseECS6ComponentUuidCallback();
        message.button = (_a = object.button) !== null && _a !== void 0 ? _a : undefined;
        message.hoverText = (_b = object.hoverText) !== null && _b !== void 0 ? _b : undefined;
        message.distance = (_c = object.distance) !== null && _c !== void 0 ? _c : undefined;
        message.showFeedback = (_d = object.showFeedback) !== null && _d !== void 0 ? _d : undefined;
        message.type = (_e = object.type) !== null && _e !== void 0 ? _e : undefined;
        message.uuid = (_f = object.uuid) !== null && _f !== void 0 ? _f : undefined;
        return message;
    }
    ECS6ComponentUuidCallback.fromPartial = fromPartial;
})(ECS6ComponentUuidCallback || (exports.ECS6ComponentUuidCallback = ECS6ComponentUuidCallback = {}));
function createBaseECS6ComponentSmartItem() {
    return {};
}
var ECS6ComponentSmartItem;
(function (ECS6ComponentSmartItem) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    ECS6ComponentSmartItem.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentSmartItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentSmartItem.decode = decode;
    function fromJSON(_) {
        return {};
    }
    ECS6ComponentSmartItem.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    ECS6ComponentSmartItem.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentSmartItem.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentSmartItem.create = create;
    function fromPartial(_) {
        const message = createBaseECS6ComponentSmartItem();
        return message;
    }
    ECS6ComponentSmartItem.fromPartial = fromPartial;
})(ECS6ComponentSmartItem || (exports.ECS6ComponentSmartItem = ECS6ComponentSmartItem = {}));
function createBaseECS6ComponentVideoClip() {
    return { url: undefined };
}
var ECS6ComponentVideoClip;
(function (ECS6ComponentVideoClip) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.url !== undefined) {
            writer.uint32(10).string(message.url);
        }
        return writer;
    }
    ECS6ComponentVideoClip.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentVideoClip();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentVideoClip.decode = decode;
    function fromJSON(object) {
        return { url: isSet(object.url) ? String(object.url) : undefined };
    }
    ECS6ComponentVideoClip.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.url !== undefined && (obj.url = message.url);
        return obj;
    }
    ECS6ComponentVideoClip.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentVideoClip.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentVideoClip.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseECS6ComponentVideoClip();
        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : undefined;
        return message;
    }
    ECS6ComponentVideoClip.fromPartial = fromPartial;
})(ECS6ComponentVideoClip || (exports.ECS6ComponentVideoClip = ECS6ComponentVideoClip = {}));
function createBaseECS6ComponentVideoTexture() {
    return {
        samplingMode: undefined,
        wrap: undefined,
        volume: undefined,
        playbackRate: undefined,
        seek: undefined,
        playing: undefined,
        loop: undefined,
        videoClipId: undefined,
    };
}
var ECS6ComponentVideoTexture;
(function (ECS6ComponentVideoTexture) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.samplingMode !== undefined) {
            writer.uint32(8).int32(message.samplingMode);
        }
        if (message.wrap !== undefined) {
            writer.uint32(16).int32(message.wrap);
        }
        if (message.volume !== undefined) {
            writer.uint32(29).float(message.volume);
        }
        if (message.playbackRate !== undefined) {
            writer.uint32(37).float(message.playbackRate);
        }
        if (message.seek !== undefined) {
            writer.uint32(45).float(message.seek);
        }
        if (message.playing !== undefined) {
            writer.uint32(48).bool(message.playing);
        }
        if (message.loop !== undefined) {
            writer.uint32(56).bool(message.loop);
        }
        if (message.videoClipId !== undefined) {
            writer.uint32(66).string(message.videoClipId);
        }
        return writer;
    }
    ECS6ComponentVideoTexture.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentVideoTexture();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.samplingMode = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.wrap = reader.int32();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.volume = reader.float();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.playbackRate = reader.float();
                    continue;
                case 5:
                    if (tag !== 45) {
                        break;
                    }
                    message.seek = reader.float();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.playing = reader.bool();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.loop = reader.bool();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.videoClipId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentVideoTexture.decode = decode;
    function fromJSON(object) {
        return {
            samplingMode: isSet(object.samplingMode) ? Number(object.samplingMode) : undefined,
            wrap: isSet(object.wrap) ? Number(object.wrap) : undefined,
            volume: isSet(object.volume) ? Number(object.volume) : undefined,
            playbackRate: isSet(object.playbackRate) ? Number(object.playbackRate) : undefined,
            seek: isSet(object.seek) ? Number(object.seek) : undefined,
            playing: isSet(object.playing) ? Boolean(object.playing) : undefined,
            loop: isSet(object.loop) ? Boolean(object.loop) : undefined,
            videoClipId: isSet(object.videoClipId) ? String(object.videoClipId) : undefined,
        };
    }
    ECS6ComponentVideoTexture.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.samplingMode !== undefined && (obj.samplingMode = Math.round(message.samplingMode));
        message.wrap !== undefined && (obj.wrap = Math.round(message.wrap));
        message.volume !== undefined && (obj.volume = message.volume);
        message.playbackRate !== undefined && (obj.playbackRate = message.playbackRate);
        message.seek !== undefined && (obj.seek = message.seek);
        message.playing !== undefined && (obj.playing = message.playing);
        message.loop !== undefined && (obj.loop = message.loop);
        message.videoClipId !== undefined && (obj.videoClipId = message.videoClipId);
        return obj;
    }
    ECS6ComponentVideoTexture.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentVideoTexture.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentVideoTexture.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseECS6ComponentVideoTexture();
        message.samplingMode = (_a = object.samplingMode) !== null && _a !== void 0 ? _a : undefined;
        message.wrap = (_b = object.wrap) !== null && _b !== void 0 ? _b : undefined;
        message.volume = (_c = object.volume) !== null && _c !== void 0 ? _c : undefined;
        message.playbackRate = (_d = object.playbackRate) !== null && _d !== void 0 ? _d : undefined;
        message.seek = (_e = object.seek) !== null && _e !== void 0 ? _e : undefined;
        message.playing = (_f = object.playing) !== null && _f !== void 0 ? _f : undefined;
        message.loop = (_g = object.loop) !== null && _g !== void 0 ? _g : undefined;
        message.videoClipId = (_h = object.videoClipId) !== null && _h !== void 0 ? _h : undefined;
        return message;
    }
    ECS6ComponentVideoTexture.fromPartial = fromPartial;
})(ECS6ComponentVideoTexture || (exports.ECS6ComponentVideoTexture = ECS6ComponentVideoTexture = {}));
function createBaseECS6ComponentCameraModeArea() {
    return { area: undefined, cameraMode: 0 };
}
var ECS6ComponentCameraModeArea;
(function (ECS6ComponentCameraModeArea) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.area !== undefined) {
            Area.encode(message.area, writer.uint32(10).fork()).ldelim();
        }
        if (message.cameraMode !== 0) {
            writer.uint32(16).int32(message.cameraMode);
        }
        return writer;
    }
    ECS6ComponentCameraModeArea.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentCameraModeArea();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.area = Area.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.cameraMode = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentCameraModeArea.decode = decode;
    function fromJSON(object) {
        return {
            area: isSet(object.area) ? Area.fromJSON(object.area) : undefined,
            cameraMode: isSet(object.cameraMode) ? eCS6ComponentCameraModeArea_CameraModeFromJSON(object.cameraMode) : 0,
        };
    }
    ECS6ComponentCameraModeArea.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.area !== undefined && (obj.area = message.area ? Area.toJSON(message.area) : undefined);
        message.cameraMode !== undefined &&
            (obj.cameraMode = eCS6ComponentCameraModeArea_CameraModeToJSON(message.cameraMode));
        return obj;
    }
    ECS6ComponentCameraModeArea.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentCameraModeArea.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentCameraModeArea.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseECS6ComponentCameraModeArea();
        message.area = (object.area !== undefined && object.area !== null) ? Area.fromPartial(object.area) : undefined;
        message.cameraMode = (_a = object.cameraMode) !== null && _a !== void 0 ? _a : 0;
        return message;
    }
    ECS6ComponentCameraModeArea.fromPartial = fromPartial;
})(ECS6ComponentCameraModeArea || (exports.ECS6ComponentCameraModeArea = ECS6ComponentCameraModeArea = {}));
function createBaseECS6ComponentAvatarTexture() {
    return { samplingMode: undefined, wrap: undefined, hasAlpha: undefined, userId: undefined };
}
var ECS6ComponentAvatarTexture;
(function (ECS6ComponentAvatarTexture) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.samplingMode !== undefined) {
            writer.uint32(8).int32(message.samplingMode);
        }
        if (message.wrap !== undefined) {
            writer.uint32(16).int32(message.wrap);
        }
        if (message.hasAlpha !== undefined) {
            writer.uint32(24).bool(message.hasAlpha);
        }
        if (message.userId !== undefined) {
            writer.uint32(34).string(message.userId);
        }
        return writer;
    }
    ECS6ComponentAvatarTexture.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentAvatarTexture();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.samplingMode = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.wrap = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.hasAlpha = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentAvatarTexture.decode = decode;
    function fromJSON(object) {
        return {
            samplingMode: isSet(object.samplingMode) ? Number(object.samplingMode) : undefined,
            wrap: isSet(object.wrap) ? Number(object.wrap) : undefined,
            hasAlpha: isSet(object.hasAlpha) ? Boolean(object.hasAlpha) : undefined,
            userId: isSet(object.userId) ? String(object.userId) : undefined,
        };
    }
    ECS6ComponentAvatarTexture.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.samplingMode !== undefined && (obj.samplingMode = Math.round(message.samplingMode));
        message.wrap !== undefined && (obj.wrap = Math.round(message.wrap));
        message.hasAlpha !== undefined && (obj.hasAlpha = message.hasAlpha);
        message.userId !== undefined && (obj.userId = message.userId);
        return obj;
    }
    ECS6ComponentAvatarTexture.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentAvatarTexture.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentAvatarTexture.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseECS6ComponentAvatarTexture();
        message.samplingMode = (_a = object.samplingMode) !== null && _a !== void 0 ? _a : undefined;
        message.wrap = (_b = object.wrap) !== null && _b !== void 0 ? _b : undefined;
        message.hasAlpha = (_c = object.hasAlpha) !== null && _c !== void 0 ? _c : undefined;
        message.userId = (_d = object.userId) !== null && _d !== void 0 ? _d : undefined;
        return message;
    }
    ECS6ComponentAvatarTexture.fromPartial = fromPartial;
})(ECS6ComponentAvatarTexture || (exports.ECS6ComponentAvatarTexture = ECS6ComponentAvatarTexture = {}));
function createBaseECS6ComponentAudioClip() {
    return { url: undefined, loop: undefined, loadingCompleteEventId: undefined, volume: undefined };
}
var ECS6ComponentAudioClip;
(function (ECS6ComponentAudioClip) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.url !== undefined) {
            writer.uint32(10).string(message.url);
        }
        if (message.loop !== undefined) {
            writer.uint32(16).bool(message.loop);
        }
        if (message.loadingCompleteEventId !== undefined) {
            writer.uint32(26).string(message.loadingCompleteEventId);
        }
        if (message.volume !== undefined) {
            writer.uint32(37).float(message.volume);
        }
        return writer;
    }
    ECS6ComponentAudioClip.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentAudioClip();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.loop = reader.bool();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.loadingCompleteEventId = reader.string();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.volume = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentAudioClip.decode = decode;
    function fromJSON(object) {
        return {
            url: isSet(object.url) ? String(object.url) : undefined,
            loop: isSet(object.loop) ? Boolean(object.loop) : undefined,
            loadingCompleteEventId: isSet(object.loadingCompleteEventId) ? String(object.loadingCompleteEventId) : undefined,
            volume: isSet(object.volume) ? Number(object.volume) : undefined,
        };
    }
    ECS6ComponentAudioClip.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.url !== undefined && (obj.url = message.url);
        message.loop !== undefined && (obj.loop = message.loop);
        message.loadingCompleteEventId !== undefined && (obj.loadingCompleteEventId = message.loadingCompleteEventId);
        message.volume !== undefined && (obj.volume = message.volume);
        return obj;
    }
    ECS6ComponentAudioClip.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentAudioClip.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentAudioClip.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseECS6ComponentAudioClip();
        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : undefined;
        message.loop = (_b = object.loop) !== null && _b !== void 0 ? _b : undefined;
        message.loadingCompleteEventId = (_c = object.loadingCompleteEventId) !== null && _c !== void 0 ? _c : undefined;
        message.volume = (_d = object.volume) !== null && _d !== void 0 ? _d : undefined;
        return message;
    }
    ECS6ComponentAudioClip.fromPartial = fromPartial;
})(ECS6ComponentAudioClip || (exports.ECS6ComponentAudioClip = ECS6ComponentAudioClip = {}));
function createBaseECS6ComponentAudioSource() {
    return {
        audioClipId: undefined,
        loop: undefined,
        volume: undefined,
        playing: undefined,
        pitch: undefined,
        playedAtTimestamp: undefined,
    };
}
var ECS6ComponentAudioSource;
(function (ECS6ComponentAudioSource) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.audioClipId !== undefined) {
            writer.uint32(10).string(message.audioClipId);
        }
        if (message.loop !== undefined) {
            writer.uint32(16).bool(message.loop);
        }
        if (message.volume !== undefined) {
            writer.uint32(29).float(message.volume);
        }
        if (message.playing !== undefined) {
            writer.uint32(32).bool(message.playing);
        }
        if (message.pitch !== undefined) {
            writer.uint32(45).float(message.pitch);
        }
        if (message.playedAtTimestamp !== undefined) {
            writer.uint32(48).int32(message.playedAtTimestamp);
        }
        return writer;
    }
    ECS6ComponentAudioSource.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentAudioSource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.audioClipId = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.loop = reader.bool();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.volume = reader.float();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.playing = reader.bool();
                    continue;
                case 5:
                    if (tag !== 45) {
                        break;
                    }
                    message.pitch = reader.float();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.playedAtTimestamp = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentAudioSource.decode = decode;
    function fromJSON(object) {
        return {
            audioClipId: isSet(object.audioClipId) ? String(object.audioClipId) : undefined,
            loop: isSet(object.loop) ? Boolean(object.loop) : undefined,
            volume: isSet(object.volume) ? Number(object.volume) : undefined,
            playing: isSet(object.playing) ? Boolean(object.playing) : undefined,
            pitch: isSet(object.pitch) ? Number(object.pitch) : undefined,
            playedAtTimestamp: isSet(object.playedAtTimestamp) ? Number(object.playedAtTimestamp) : undefined,
        };
    }
    ECS6ComponentAudioSource.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.audioClipId !== undefined && (obj.audioClipId = message.audioClipId);
        message.loop !== undefined && (obj.loop = message.loop);
        message.volume !== undefined && (obj.volume = message.volume);
        message.playing !== undefined && (obj.playing = message.playing);
        message.pitch !== undefined && (obj.pitch = message.pitch);
        message.playedAtTimestamp !== undefined && (obj.playedAtTimestamp = Math.round(message.playedAtTimestamp));
        return obj;
    }
    ECS6ComponentAudioSource.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentAudioSource.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentAudioSource.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseECS6ComponentAudioSource();
        message.audioClipId = (_a = object.audioClipId) !== null && _a !== void 0 ? _a : undefined;
        message.loop = (_b = object.loop) !== null && _b !== void 0 ? _b : undefined;
        message.volume = (_c = object.volume) !== null && _c !== void 0 ? _c : undefined;
        message.playing = (_d = object.playing) !== null && _d !== void 0 ? _d : undefined;
        message.pitch = (_e = object.pitch) !== null && _e !== void 0 ? _e : undefined;
        message.playedAtTimestamp = (_f = object.playedAtTimestamp) !== null && _f !== void 0 ? _f : undefined;
        return message;
    }
    ECS6ComponentAudioSource.fromPartial = fromPartial;
})(ECS6ComponentAudioSource || (exports.ECS6ComponentAudioSource = ECS6ComponentAudioSource = {}));
function createBaseECS6ComponentAudioStream() {
    return { url: undefined, playing: undefined, volume: undefined };
}
var ECS6ComponentAudioStream;
(function (ECS6ComponentAudioStream) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.url !== undefined) {
            writer.uint32(10).string(message.url);
        }
        if (message.playing !== undefined) {
            writer.uint32(16).bool(message.playing);
        }
        if (message.volume !== undefined) {
            writer.uint32(29).float(message.volume);
        }
        return writer;
    }
    ECS6ComponentAudioStream.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentAudioStream();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.playing = reader.bool();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.volume = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentAudioStream.decode = decode;
    function fromJSON(object) {
        return {
            url: isSet(object.url) ? String(object.url) : undefined,
            playing: isSet(object.playing) ? Boolean(object.playing) : undefined,
            volume: isSet(object.volume) ? Number(object.volume) : undefined,
        };
    }
    ECS6ComponentAudioStream.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.url !== undefined && (obj.url = message.url);
        message.playing !== undefined && (obj.playing = message.playing);
        message.volume !== undefined && (obj.volume = message.volume);
        return obj;
    }
    ECS6ComponentAudioStream.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentAudioStream.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentAudioStream.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseECS6ComponentAudioStream();
        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : undefined;
        message.playing = (_b = object.playing) !== null && _b !== void 0 ? _b : undefined;
        message.volume = (_c = object.volume) !== null && _c !== void 0 ? _c : undefined;
        return message;
    }
    ECS6ComponentAudioStream.fromPartial = fromPartial;
})(ECS6ComponentAudioStream || (exports.ECS6ComponentAudioStream = ECS6ComponentAudioStream = {}));
function createBaseECS6ComponentAvatarShape() {
    return {
        id: undefined,
        name: undefined,
        expressionTriggerId: undefined,
        expressionTriggerTimestamp: undefined,
        bodyShape: undefined,
        wearables: [],
        emotes: [],
        skinColor: undefined,
        hairColor: undefined,
        eyeColor: undefined,
        useDummyModel: undefined,
        talking: undefined,
    };
}
var ECS6ComponentAvatarShape;
(function (ECS6ComponentAvatarShape) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== undefined) {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== undefined) {
            writer.uint32(18).string(message.name);
        }
        if (message.expressionTriggerId !== undefined) {
            writer.uint32(26).string(message.expressionTriggerId);
        }
        if (message.expressionTriggerTimestamp !== undefined) {
            writer.uint32(32).int64(message.expressionTriggerTimestamp);
        }
        if (message.bodyShape !== undefined) {
            writer.uint32(42).string(message.bodyShape);
        }
        for (const v of message.wearables) {
            writer.uint32(50).string(v);
        }
        for (const v of message.emotes) {
            ECS6ComponentAvatarShape_Emote.encode(v, writer.uint32(58).fork()).ldelim();
        }
        if (message.skinColor !== undefined) {
            ECS6Color4.encode(message.skinColor, writer.uint32(66).fork()).ldelim();
        }
        if (message.hairColor !== undefined) {
            ECS6Color4.encode(message.hairColor, writer.uint32(74).fork()).ldelim();
        }
        if (message.eyeColor !== undefined) {
            ECS6Color4.encode(message.eyeColor, writer.uint32(82).fork()).ldelim();
        }
        if (message.useDummyModel !== undefined) {
            writer.uint32(88).bool(message.useDummyModel);
        }
        if (message.talking !== undefined) {
            writer.uint32(96).bool(message.talking);
        }
        return writer;
    }
    ECS6ComponentAvatarShape.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentAvatarShape();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.expressionTriggerId = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.expressionTriggerTimestamp = longToNumber(reader.int64());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.bodyShape = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.wearables.push(reader.string());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.emotes.push(ECS6ComponentAvatarShape_Emote.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.skinColor = ECS6Color4.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.hairColor = ECS6Color4.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.eyeColor = ECS6Color4.decode(reader, reader.uint32());
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.useDummyModel = reader.bool();
                    continue;
                case 12:
                    if (tag !== 96) {
                        break;
                    }
                    message.talking = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentAvatarShape.decode = decode;
    function fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : undefined,
            name: isSet(object.name) ? String(object.name) : undefined,
            expressionTriggerId: isSet(object.expressionTriggerId) ? String(object.expressionTriggerId) : undefined,
            expressionTriggerTimestamp: isSet(object.expressionTriggerTimestamp)
                ? Number(object.expressionTriggerTimestamp)
                : undefined,
            bodyShape: isSet(object.bodyShape) ? String(object.bodyShape) : undefined,
            wearables: Array.isArray(object === null || object === void 0 ? void 0 : object.wearables) ? object.wearables.map((e) => String(e)) : [],
            emotes: Array.isArray(object === null || object === void 0 ? void 0 : object.emotes)
                ? object.emotes.map((e) => ECS6ComponentAvatarShape_Emote.fromJSON(e))
                : [],
            skinColor: isSet(object.skinColor) ? ECS6Color4.fromJSON(object.skinColor) : undefined,
            hairColor: isSet(object.hairColor) ? ECS6Color4.fromJSON(object.hairColor) : undefined,
            eyeColor: isSet(object.eyeColor) ? ECS6Color4.fromJSON(object.eyeColor) : undefined,
            useDummyModel: isSet(object.useDummyModel) ? Boolean(object.useDummyModel) : undefined,
            talking: isSet(object.talking) ? Boolean(object.talking) : undefined,
        };
    }
    ECS6ComponentAvatarShape.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.name !== undefined && (obj.name = message.name);
        message.expressionTriggerId !== undefined && (obj.expressionTriggerId = message.expressionTriggerId);
        message.expressionTriggerTimestamp !== undefined &&
            (obj.expressionTriggerTimestamp = Math.round(message.expressionTriggerTimestamp));
        message.bodyShape !== undefined && (obj.bodyShape = message.bodyShape);
        if (message.wearables) {
            obj.wearables = message.wearables.map((e) => e);
        }
        else {
            obj.wearables = [];
        }
        if (message.emotes) {
            obj.emotes = message.emotes.map((e) => e ? ECS6ComponentAvatarShape_Emote.toJSON(e) : undefined);
        }
        else {
            obj.emotes = [];
        }
        message.skinColor !== undefined &&
            (obj.skinColor = message.skinColor ? ECS6Color4.toJSON(message.skinColor) : undefined);
        message.hairColor !== undefined &&
            (obj.hairColor = message.hairColor ? ECS6Color4.toJSON(message.hairColor) : undefined);
        message.eyeColor !== undefined &&
            (obj.eyeColor = message.eyeColor ? ECS6Color4.toJSON(message.eyeColor) : undefined);
        message.useDummyModel !== undefined && (obj.useDummyModel = message.useDummyModel);
        message.talking !== undefined && (obj.talking = message.talking);
        return obj;
    }
    ECS6ComponentAvatarShape.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentAvatarShape.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentAvatarShape.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseECS6ComponentAvatarShape();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : undefined;
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : undefined;
        message.expressionTriggerId = (_c = object.expressionTriggerId) !== null && _c !== void 0 ? _c : undefined;
        message.expressionTriggerTimestamp = (_d = object.expressionTriggerTimestamp) !== null && _d !== void 0 ? _d : undefined;
        message.bodyShape = (_e = object.bodyShape) !== null && _e !== void 0 ? _e : undefined;
        message.wearables = ((_f = object.wearables) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.emotes = ((_g = object.emotes) === null || _g === void 0 ? void 0 : _g.map((e) => ECS6ComponentAvatarShape_Emote.fromPartial(e))) || [];
        message.skinColor = (object.skinColor !== undefined && object.skinColor !== null)
            ? ECS6Color4.fromPartial(object.skinColor)
            : undefined;
        message.hairColor = (object.hairColor !== undefined && object.hairColor !== null)
            ? ECS6Color4.fromPartial(object.hairColor)
            : undefined;
        message.eyeColor = (object.eyeColor !== undefined && object.eyeColor !== null)
            ? ECS6Color4.fromPartial(object.eyeColor)
            : undefined;
        message.useDummyModel = (_h = object.useDummyModel) !== null && _h !== void 0 ? _h : undefined;
        message.talking = (_j = object.talking) !== null && _j !== void 0 ? _j : undefined;
        return message;
    }
    ECS6ComponentAvatarShape.fromPartial = fromPartial;
})(ECS6ComponentAvatarShape || (exports.ECS6ComponentAvatarShape = ECS6ComponentAvatarShape = {}));
function createBaseECS6ComponentAvatarShape_Emote() {
    return { slot: undefined, urn: undefined };
}
var ECS6ComponentAvatarShape_Emote;
(function (ECS6ComponentAvatarShape_Emote) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.slot !== undefined) {
            writer.uint32(8).int32(message.slot);
        }
        if (message.urn !== undefined) {
            writer.uint32(18).string(message.urn);
        }
        return writer;
    }
    ECS6ComponentAvatarShape_Emote.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentAvatarShape_Emote();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.slot = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.urn = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentAvatarShape_Emote.decode = decode;
    function fromJSON(object) {
        return {
            slot: isSet(object.slot) ? Number(object.slot) : undefined,
            urn: isSet(object.urn) ? String(object.urn) : undefined,
        };
    }
    ECS6ComponentAvatarShape_Emote.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.slot !== undefined && (obj.slot = Math.round(message.slot));
        message.urn !== undefined && (obj.urn = message.urn);
        return obj;
    }
    ECS6ComponentAvatarShape_Emote.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentAvatarShape_Emote.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentAvatarShape_Emote.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseECS6ComponentAvatarShape_Emote();
        message.slot = (_a = object.slot) !== null && _a !== void 0 ? _a : undefined;
        message.urn = (_b = object.urn) !== null && _b !== void 0 ? _b : undefined;
        return message;
    }
    ECS6ComponentAvatarShape_Emote.fromPartial = fromPartial;
})(ECS6ComponentAvatarShape_Emote || (exports.ECS6ComponentAvatarShape_Emote = ECS6ComponentAvatarShape_Emote = {}));
function createBaseECS6ComponentGizmos() {
    return {
        position: undefined,
        rotation: undefined,
        scale: undefined,
        cycle: undefined,
        selectedGizmo: undefined,
        localReference: undefined,
    };
}
var ECS6ComponentGizmos;
(function (ECS6ComponentGizmos) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.position !== undefined) {
            writer.uint32(8).bool(message.position);
        }
        if (message.rotation !== undefined) {
            writer.uint32(16).bool(message.rotation);
        }
        if (message.scale !== undefined) {
            writer.uint32(24).bool(message.scale);
        }
        if (message.cycle !== undefined) {
            writer.uint32(32).bool(message.cycle);
        }
        if (message.selectedGizmo !== undefined) {
            writer.uint32(42).string(message.selectedGizmo);
        }
        if (message.localReference !== undefined) {
            writer.uint32(48).bool(message.localReference);
        }
        return writer;
    }
    ECS6ComponentGizmos.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentGizmos();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.position = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.rotation = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.scale = reader.bool();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.cycle = reader.bool();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.selectedGizmo = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.localReference = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentGizmos.decode = decode;
    function fromJSON(object) {
        return {
            position: isSet(object.position) ? Boolean(object.position) : undefined,
            rotation: isSet(object.rotation) ? Boolean(object.rotation) : undefined,
            scale: isSet(object.scale) ? Boolean(object.scale) : undefined,
            cycle: isSet(object.cycle) ? Boolean(object.cycle) : undefined,
            selectedGizmo: isSet(object.selectedGizmo) ? String(object.selectedGizmo) : undefined,
            localReference: isSet(object.localReference) ? Boolean(object.localReference) : undefined,
        };
    }
    ECS6ComponentGizmos.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.position !== undefined && (obj.position = message.position);
        message.rotation !== undefined && (obj.rotation = message.rotation);
        message.scale !== undefined && (obj.scale = message.scale);
        message.cycle !== undefined && (obj.cycle = message.cycle);
        message.selectedGizmo !== undefined && (obj.selectedGizmo = message.selectedGizmo);
        message.localReference !== undefined && (obj.localReference = message.localReference);
        return obj;
    }
    ECS6ComponentGizmos.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentGizmos.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentGizmos.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseECS6ComponentGizmos();
        message.position = (_a = object.position) !== null && _a !== void 0 ? _a : undefined;
        message.rotation = (_b = object.rotation) !== null && _b !== void 0 ? _b : undefined;
        message.scale = (_c = object.scale) !== null && _c !== void 0 ? _c : undefined;
        message.cycle = (_d = object.cycle) !== null && _d !== void 0 ? _d : undefined;
        message.selectedGizmo = (_e = object.selectedGizmo) !== null && _e !== void 0 ? _e : undefined;
        message.localReference = (_f = object.localReference) !== null && _f !== void 0 ? _f : undefined;
        return message;
    }
    ECS6ComponentGizmos.fromPartial = fromPartial;
})(ECS6ComponentGizmos || (exports.ECS6ComponentGizmos = ECS6ComponentGizmos = {}));
function createBaseECS6ComponentUiShape() {
    return {
        name: undefined,
        visible: undefined,
        opacity: undefined,
        hAlign: undefined,
        vAlign: undefined,
        width: undefined,
        height: undefined,
        positionX: undefined,
        positionY: undefined,
        isPointerBlocker: undefined,
        parentComponent: undefined,
    };
}
var ECS6ComponentUiShape;
(function (ECS6ComponentUiShape) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== undefined) {
            writer.uint32(10).string(message.name);
        }
        if (message.visible !== undefined) {
            writer.uint32(16).bool(message.visible);
        }
        if (message.opacity !== undefined) {
            writer.uint32(29).float(message.opacity);
        }
        if (message.hAlign !== undefined) {
            writer.uint32(34).string(message.hAlign);
        }
        if (message.vAlign !== undefined) {
            writer.uint32(42).string(message.vAlign);
        }
        if (message.width !== undefined) {
            UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
        }
        if (message.height !== undefined) {
            UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
        }
        if (message.positionX !== undefined) {
            UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
        }
        if (message.positionY !== undefined) {
            UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(80).bool(message.isPointerBlocker);
        }
        if (message.parentComponent !== undefined) {
            writer.uint32(90).string(message.parentComponent);
        }
        return writer;
    }
    ECS6ComponentUiShape.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentUiShape();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.opacity = reader.float();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.hAlign = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.vAlign = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.width = UiValue.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.height = UiValue.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.positionX = UiValue.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.positionY = UiValue.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.parentComponent = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentUiShape.decode = decode;
    function fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
            hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
            vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
            width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
            height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
            positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
            positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
        };
    }
    ECS6ComponentUiShape.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.visible !== undefined && (obj.visible = message.visible);
        message.opacity !== undefined && (obj.opacity = message.opacity);
        message.hAlign !== undefined && (obj.hAlign = message.hAlign);
        message.vAlign !== undefined && (obj.vAlign = message.vAlign);
        message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
        message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
        message.positionX !== undefined &&
            (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
        message.positionY !== undefined &&
            (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
        return obj;
    }
    ECS6ComponentUiShape.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentUiShape.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentUiShape.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseECS6ComponentUiShape();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : undefined;
        message.visible = (_b = object.visible) !== null && _b !== void 0 ? _b : undefined;
        message.opacity = (_c = object.opacity) !== null && _c !== void 0 ? _c : undefined;
        message.hAlign = (_d = object.hAlign) !== null && _d !== void 0 ? _d : undefined;
        message.vAlign = (_e = object.vAlign) !== null && _e !== void 0 ? _e : undefined;
        message.width = (object.width !== undefined && object.width !== null)
            ? UiValue.fromPartial(object.width)
            : undefined;
        message.height = (object.height !== undefined && object.height !== null)
            ? UiValue.fromPartial(object.height)
            : undefined;
        message.positionX = (object.positionX !== undefined && object.positionX !== null)
            ? UiValue.fromPartial(object.positionX)
            : undefined;
        message.positionY = (object.positionY !== undefined && object.positionY !== null)
            ? UiValue.fromPartial(object.positionY)
            : undefined;
        message.isPointerBlocker = (_f = object.isPointerBlocker) !== null && _f !== void 0 ? _f : undefined;
        message.parentComponent = (_g = object.parentComponent) !== null && _g !== void 0 ? _g : undefined;
        return message;
    }
    ECS6ComponentUiShape.fromPartial = fromPartial;
})(ECS6ComponentUiShape || (exports.ECS6ComponentUiShape = ECS6ComponentUiShape = {}));
function createBaseECS6ComponentUiContainerRect() {
    return {
        name: undefined,
        visible: undefined,
        opacity: undefined,
        hAlign: undefined,
        vAlign: undefined,
        width: undefined,
        height: undefined,
        positionX: undefined,
        positionY: undefined,
        isPointerBlocker: undefined,
        parentComponent: undefined,
        thickness: undefined,
        color: undefined,
        alignmentUsesSize: undefined,
    };
}
var ECS6ComponentUiContainerRect;
(function (ECS6ComponentUiContainerRect) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== undefined) {
            writer.uint32(10).string(message.name);
        }
        if (message.visible !== undefined) {
            writer.uint32(16).bool(message.visible);
        }
        if (message.opacity !== undefined) {
            writer.uint32(29).float(message.opacity);
        }
        if (message.hAlign !== undefined) {
            writer.uint32(34).string(message.hAlign);
        }
        if (message.vAlign !== undefined) {
            writer.uint32(42).string(message.vAlign);
        }
        if (message.width !== undefined) {
            UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
        }
        if (message.height !== undefined) {
            UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
        }
        if (message.positionX !== undefined) {
            UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
        }
        if (message.positionY !== undefined) {
            UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(80).bool(message.isPointerBlocker);
        }
        if (message.parentComponent !== undefined) {
            writer.uint32(114).string(message.parentComponent);
        }
        if (message.thickness !== undefined) {
            writer.uint32(93).float(message.thickness);
        }
        if (message.color !== undefined) {
            ECS6Color4.encode(message.color, writer.uint32(98).fork()).ldelim();
        }
        if (message.alignmentUsesSize !== undefined) {
            writer.uint32(104).bool(message.alignmentUsesSize);
        }
        return writer;
    }
    ECS6ComponentUiContainerRect.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentUiContainerRect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.opacity = reader.float();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.hAlign = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.vAlign = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.width = UiValue.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.height = UiValue.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.positionX = UiValue.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.positionY = UiValue.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.parentComponent = reader.string();
                    continue;
                case 11:
                    if (tag !== 93) {
                        break;
                    }
                    message.thickness = reader.float();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.color = ECS6Color4.decode(reader, reader.uint32());
                    continue;
                case 13:
                    if (tag !== 104) {
                        break;
                    }
                    message.alignmentUsesSize = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentUiContainerRect.decode = decode;
    function fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
            hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
            vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
            width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
            height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
            positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
            positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
            thickness: isSet(object.thickness) ? Number(object.thickness) : undefined,
            color: isSet(object.color) ? ECS6Color4.fromJSON(object.color) : undefined,
            alignmentUsesSize: isSet(object.alignmentUsesSize) ? Boolean(object.alignmentUsesSize) : undefined,
        };
    }
    ECS6ComponentUiContainerRect.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.visible !== undefined && (obj.visible = message.visible);
        message.opacity !== undefined && (obj.opacity = message.opacity);
        message.hAlign !== undefined && (obj.hAlign = message.hAlign);
        message.vAlign !== undefined && (obj.vAlign = message.vAlign);
        message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
        message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
        message.positionX !== undefined &&
            (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
        message.positionY !== undefined &&
            (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
        message.thickness !== undefined && (obj.thickness = message.thickness);
        message.color !== undefined && (obj.color = message.color ? ECS6Color4.toJSON(message.color) : undefined);
        message.alignmentUsesSize !== undefined && (obj.alignmentUsesSize = message.alignmentUsesSize);
        return obj;
    }
    ECS6ComponentUiContainerRect.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentUiContainerRect.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentUiContainerRect.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseECS6ComponentUiContainerRect();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : undefined;
        message.visible = (_b = object.visible) !== null && _b !== void 0 ? _b : undefined;
        message.opacity = (_c = object.opacity) !== null && _c !== void 0 ? _c : undefined;
        message.hAlign = (_d = object.hAlign) !== null && _d !== void 0 ? _d : undefined;
        message.vAlign = (_e = object.vAlign) !== null && _e !== void 0 ? _e : undefined;
        message.width = (object.width !== undefined && object.width !== null)
            ? UiValue.fromPartial(object.width)
            : undefined;
        message.height = (object.height !== undefined && object.height !== null)
            ? UiValue.fromPartial(object.height)
            : undefined;
        message.positionX = (object.positionX !== undefined && object.positionX !== null)
            ? UiValue.fromPartial(object.positionX)
            : undefined;
        message.positionY = (object.positionY !== undefined && object.positionY !== null)
            ? UiValue.fromPartial(object.positionY)
            : undefined;
        message.isPointerBlocker = (_f = object.isPointerBlocker) !== null && _f !== void 0 ? _f : undefined;
        message.parentComponent = (_g = object.parentComponent) !== null && _g !== void 0 ? _g : undefined;
        message.thickness = (_h = object.thickness) !== null && _h !== void 0 ? _h : undefined;
        message.color = (object.color !== undefined && object.color !== null)
            ? ECS6Color4.fromPartial(object.color)
            : undefined;
        message.alignmentUsesSize = (_j = object.alignmentUsesSize) !== null && _j !== void 0 ? _j : undefined;
        return message;
    }
    ECS6ComponentUiContainerRect.fromPartial = fromPartial;
})(ECS6ComponentUiContainerRect || (exports.ECS6ComponentUiContainerRect = ECS6ComponentUiContainerRect = {}));
function createBaseECS6ComponentUiContainerStack() {
    return {
        name: undefined,
        visible: undefined,
        opacity: undefined,
        hAlign: undefined,
        vAlign: undefined,
        width: undefined,
        height: undefined,
        positionX: undefined,
        positionY: undefined,
        isPointerBlocker: undefined,
        parentComponent: undefined,
        adaptWidth: undefined,
        adaptHeight: undefined,
        color: undefined,
        stackOrientation: undefined,
        spacing: undefined,
    };
}
var ECS6ComponentUiContainerStack;
(function (ECS6ComponentUiContainerStack) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== undefined) {
            writer.uint32(10).string(message.name);
        }
        if (message.visible !== undefined) {
            writer.uint32(16).bool(message.visible);
        }
        if (message.opacity !== undefined) {
            writer.uint32(29).float(message.opacity);
        }
        if (message.hAlign !== undefined) {
            writer.uint32(34).string(message.hAlign);
        }
        if (message.vAlign !== undefined) {
            writer.uint32(42).string(message.vAlign);
        }
        if (message.width !== undefined) {
            UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
        }
        if (message.height !== undefined) {
            UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
        }
        if (message.positionX !== undefined) {
            UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
        }
        if (message.positionY !== undefined) {
            UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(80).bool(message.isPointerBlocker);
        }
        if (message.parentComponent !== undefined) {
            writer.uint32(130).string(message.parentComponent);
        }
        if (message.adaptWidth !== undefined) {
            writer.uint32(88).bool(message.adaptWidth);
        }
        if (message.adaptHeight !== undefined) {
            writer.uint32(96).bool(message.adaptHeight);
        }
        if (message.color !== undefined) {
            ECS6Color4.encode(message.color, writer.uint32(106).fork()).ldelim();
        }
        if (message.stackOrientation !== undefined) {
            writer.uint32(112).int32(message.stackOrientation);
        }
        if (message.spacing !== undefined) {
            writer.uint32(125).float(message.spacing);
        }
        return writer;
    }
    ECS6ComponentUiContainerStack.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentUiContainerStack();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.opacity = reader.float();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.hAlign = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.vAlign = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.width = UiValue.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.height = UiValue.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.positionX = UiValue.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.positionY = UiValue.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.parentComponent = reader.string();
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.adaptWidth = reader.bool();
                    continue;
                case 12:
                    if (tag !== 96) {
                        break;
                    }
                    message.adaptHeight = reader.bool();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.color = ECS6Color4.decode(reader, reader.uint32());
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.stackOrientation = reader.int32();
                    continue;
                case 15:
                    if (tag !== 125) {
                        break;
                    }
                    message.spacing = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentUiContainerStack.decode = decode;
    function fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
            hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
            vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
            width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
            height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
            positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
            positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
            adaptWidth: isSet(object.adaptWidth) ? Boolean(object.adaptWidth) : undefined,
            adaptHeight: isSet(object.adaptHeight) ? Boolean(object.adaptHeight) : undefined,
            color: isSet(object.color) ? ECS6Color4.fromJSON(object.color) : undefined,
            stackOrientation: isSet(object.stackOrientation)
                ? eCS6ComponentUiContainerStack_UIStackOrientationFromJSON(object.stackOrientation)
                : undefined,
            spacing: isSet(object.spacing) ? Number(object.spacing) : undefined,
        };
    }
    ECS6ComponentUiContainerStack.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.visible !== undefined && (obj.visible = message.visible);
        message.opacity !== undefined && (obj.opacity = message.opacity);
        message.hAlign !== undefined && (obj.hAlign = message.hAlign);
        message.vAlign !== undefined && (obj.vAlign = message.vAlign);
        message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
        message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
        message.positionX !== undefined &&
            (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
        message.positionY !== undefined &&
            (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
        message.adaptWidth !== undefined && (obj.adaptWidth = message.adaptWidth);
        message.adaptHeight !== undefined && (obj.adaptHeight = message.adaptHeight);
        message.color !== undefined && (obj.color = message.color ? ECS6Color4.toJSON(message.color) : undefined);
        message.stackOrientation !== undefined &&
            (obj.stackOrientation = message.stackOrientation !== undefined
                ? eCS6ComponentUiContainerStack_UIStackOrientationToJSON(message.stackOrientation)
                : undefined);
        message.spacing !== undefined && (obj.spacing = message.spacing);
        return obj;
    }
    ECS6ComponentUiContainerStack.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentUiContainerStack.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentUiContainerStack.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseECS6ComponentUiContainerStack();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : undefined;
        message.visible = (_b = object.visible) !== null && _b !== void 0 ? _b : undefined;
        message.opacity = (_c = object.opacity) !== null && _c !== void 0 ? _c : undefined;
        message.hAlign = (_d = object.hAlign) !== null && _d !== void 0 ? _d : undefined;
        message.vAlign = (_e = object.vAlign) !== null && _e !== void 0 ? _e : undefined;
        message.width = (object.width !== undefined && object.width !== null)
            ? UiValue.fromPartial(object.width)
            : undefined;
        message.height = (object.height !== undefined && object.height !== null)
            ? UiValue.fromPartial(object.height)
            : undefined;
        message.positionX = (object.positionX !== undefined && object.positionX !== null)
            ? UiValue.fromPartial(object.positionX)
            : undefined;
        message.positionY = (object.positionY !== undefined && object.positionY !== null)
            ? UiValue.fromPartial(object.positionY)
            : undefined;
        message.isPointerBlocker = (_f = object.isPointerBlocker) !== null && _f !== void 0 ? _f : undefined;
        message.parentComponent = (_g = object.parentComponent) !== null && _g !== void 0 ? _g : undefined;
        message.adaptWidth = (_h = object.adaptWidth) !== null && _h !== void 0 ? _h : undefined;
        message.adaptHeight = (_j = object.adaptHeight) !== null && _j !== void 0 ? _j : undefined;
        message.color = (object.color !== undefined && object.color !== null)
            ? ECS6Color4.fromPartial(object.color)
            : undefined;
        message.stackOrientation = (_k = object.stackOrientation) !== null && _k !== void 0 ? _k : undefined;
        message.spacing = (_l = object.spacing) !== null && _l !== void 0 ? _l : undefined;
        return message;
    }
    ECS6ComponentUiContainerStack.fromPartial = fromPartial;
})(ECS6ComponentUiContainerStack || (exports.ECS6ComponentUiContainerStack = ECS6ComponentUiContainerStack = {}));
function createBaseECS6ComponentUiButton() {
    return {
        name: undefined,
        visible: undefined,
        opacity: undefined,
        hAlign: undefined,
        vAlign: undefined,
        width: undefined,
        height: undefined,
        positionX: undefined,
        positionY: undefined,
        isPointerBlocker: undefined,
        parentComponent: undefined,
        fontSize: undefined,
        fontWeight: undefined,
        thickness: undefined,
        cornerRadius: undefined,
        color: undefined,
        background: undefined,
        paddingTop: undefined,
        paddingRight: undefined,
        paddingBottom: undefined,
        paddingLeft: undefined,
        shadowBlur: undefined,
        shadowOffsetX: undefined,
        shadowOffsetY: undefined,
        shadowColor: undefined,
        text: undefined,
    };
}
var ECS6ComponentUiButton;
(function (ECS6ComponentUiButton) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== undefined) {
            writer.uint32(10).string(message.name);
        }
        if (message.visible !== undefined) {
            writer.uint32(16).bool(message.visible);
        }
        if (message.opacity !== undefined) {
            writer.uint32(29).float(message.opacity);
        }
        if (message.hAlign !== undefined) {
            writer.uint32(34).string(message.hAlign);
        }
        if (message.vAlign !== undefined) {
            writer.uint32(42).string(message.vAlign);
        }
        if (message.width !== undefined) {
            UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
        }
        if (message.height !== undefined) {
            UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
        }
        if (message.positionX !== undefined) {
            UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
        }
        if (message.positionY !== undefined) {
            UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(80).bool(message.isPointerBlocker);
        }
        if (message.parentComponent !== undefined) {
            writer.uint32(210).string(message.parentComponent);
        }
        if (message.fontSize !== undefined) {
            writer.uint32(93).float(message.fontSize);
        }
        if (message.fontWeight !== undefined) {
            writer.uint32(98).string(message.fontWeight);
        }
        if (message.thickness !== undefined) {
            writer.uint32(109).float(message.thickness);
        }
        if (message.cornerRadius !== undefined) {
            writer.uint32(117).float(message.cornerRadius);
        }
        if (message.color !== undefined) {
            ECS6Color4.encode(message.color, writer.uint32(122).fork()).ldelim();
        }
        if (message.background !== undefined) {
            ECS6Color4.encode(message.background, writer.uint32(130).fork()).ldelim();
        }
        if (message.paddingTop !== undefined) {
            writer.uint32(141).float(message.paddingTop);
        }
        if (message.paddingRight !== undefined) {
            writer.uint32(149).float(message.paddingRight);
        }
        if (message.paddingBottom !== undefined) {
            writer.uint32(157).float(message.paddingBottom);
        }
        if (message.paddingLeft !== undefined) {
            writer.uint32(165).float(message.paddingLeft);
        }
        if (message.shadowBlur !== undefined) {
            writer.uint32(173).float(message.shadowBlur);
        }
        if (message.shadowOffsetX !== undefined) {
            writer.uint32(181).float(message.shadowOffsetX);
        }
        if (message.shadowOffsetY !== undefined) {
            writer.uint32(189).float(message.shadowOffsetY);
        }
        if (message.shadowColor !== undefined) {
            ECS6Color4.encode(message.shadowColor, writer.uint32(194).fork()).ldelim();
        }
        if (message.text !== undefined) {
            writer.uint32(202).string(message.text);
        }
        return writer;
    }
    ECS6ComponentUiButton.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentUiButton();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.opacity = reader.float();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.hAlign = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.vAlign = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.width = UiValue.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.height = UiValue.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.positionX = UiValue.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.positionY = UiValue.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 26:
                    if (tag !== 210) {
                        break;
                    }
                    message.parentComponent = reader.string();
                    continue;
                case 11:
                    if (tag !== 93) {
                        break;
                    }
                    message.fontSize = reader.float();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.fontWeight = reader.string();
                    continue;
                case 13:
                    if (tag !== 109) {
                        break;
                    }
                    message.thickness = reader.float();
                    continue;
                case 14:
                    if (tag !== 117) {
                        break;
                    }
                    message.cornerRadius = reader.float();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.color = ECS6Color4.decode(reader, reader.uint32());
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.background = ECS6Color4.decode(reader, reader.uint32());
                    continue;
                case 17:
                    if (tag !== 141) {
                        break;
                    }
                    message.paddingTop = reader.float();
                    continue;
                case 18:
                    if (tag !== 149) {
                        break;
                    }
                    message.paddingRight = reader.float();
                    continue;
                case 19:
                    if (tag !== 157) {
                        break;
                    }
                    message.paddingBottom = reader.float();
                    continue;
                case 20:
                    if (tag !== 165) {
                        break;
                    }
                    message.paddingLeft = reader.float();
                    continue;
                case 21:
                    if (tag !== 173) {
                        break;
                    }
                    message.shadowBlur = reader.float();
                    continue;
                case 22:
                    if (tag !== 181) {
                        break;
                    }
                    message.shadowOffsetX = reader.float();
                    continue;
                case 23:
                    if (tag !== 189) {
                        break;
                    }
                    message.shadowOffsetY = reader.float();
                    continue;
                case 24:
                    if (tag !== 194) {
                        break;
                    }
                    message.shadowColor = ECS6Color4.decode(reader, reader.uint32());
                    continue;
                case 25:
                    if (tag !== 202) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentUiButton.decode = decode;
    function fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
            hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
            vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
            width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
            height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
            positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
            positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
            fontSize: isSet(object.fontSize) ? Number(object.fontSize) : undefined,
            fontWeight: isSet(object.fontWeight) ? String(object.fontWeight) : undefined,
            thickness: isSet(object.thickness) ? Number(object.thickness) : undefined,
            cornerRadius: isSet(object.cornerRadius) ? Number(object.cornerRadius) : undefined,
            color: isSet(object.color) ? ECS6Color4.fromJSON(object.color) : undefined,
            background: isSet(object.background) ? ECS6Color4.fromJSON(object.background) : undefined,
            paddingTop: isSet(object.paddingTop) ? Number(object.paddingTop) : undefined,
            paddingRight: isSet(object.paddingRight) ? Number(object.paddingRight) : undefined,
            paddingBottom: isSet(object.paddingBottom) ? Number(object.paddingBottom) : undefined,
            paddingLeft: isSet(object.paddingLeft) ? Number(object.paddingLeft) : undefined,
            shadowBlur: isSet(object.shadowBlur) ? Number(object.shadowBlur) : undefined,
            shadowOffsetX: isSet(object.shadowOffsetX) ? Number(object.shadowOffsetX) : undefined,
            shadowOffsetY: isSet(object.shadowOffsetY) ? Number(object.shadowOffsetY) : undefined,
            shadowColor: isSet(object.shadowColor) ? ECS6Color4.fromJSON(object.shadowColor) : undefined,
            text: isSet(object.text) ? String(object.text) : undefined,
        };
    }
    ECS6ComponentUiButton.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.visible !== undefined && (obj.visible = message.visible);
        message.opacity !== undefined && (obj.opacity = message.opacity);
        message.hAlign !== undefined && (obj.hAlign = message.hAlign);
        message.vAlign !== undefined && (obj.vAlign = message.vAlign);
        message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
        message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
        message.positionX !== undefined &&
            (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
        message.positionY !== undefined &&
            (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
        message.fontSize !== undefined && (obj.fontSize = message.fontSize);
        message.fontWeight !== undefined && (obj.fontWeight = message.fontWeight);
        message.thickness !== undefined && (obj.thickness = message.thickness);
        message.cornerRadius !== undefined && (obj.cornerRadius = message.cornerRadius);
        message.color !== undefined && (obj.color = message.color ? ECS6Color4.toJSON(message.color) : undefined);
        message.background !== undefined &&
            (obj.background = message.background ? ECS6Color4.toJSON(message.background) : undefined);
        message.paddingTop !== undefined && (obj.paddingTop = message.paddingTop);
        message.paddingRight !== undefined && (obj.paddingRight = message.paddingRight);
        message.paddingBottom !== undefined && (obj.paddingBottom = message.paddingBottom);
        message.paddingLeft !== undefined && (obj.paddingLeft = message.paddingLeft);
        message.shadowBlur !== undefined && (obj.shadowBlur = message.shadowBlur);
        message.shadowOffsetX !== undefined && (obj.shadowOffsetX = message.shadowOffsetX);
        message.shadowOffsetY !== undefined && (obj.shadowOffsetY = message.shadowOffsetY);
        message.shadowColor !== undefined &&
            (obj.shadowColor = message.shadowColor ? ECS6Color4.toJSON(message.shadowColor) : undefined);
        message.text !== undefined && (obj.text = message.text);
        return obj;
    }
    ECS6ComponentUiButton.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentUiButton.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentUiButton.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
        const message = createBaseECS6ComponentUiButton();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : undefined;
        message.visible = (_b = object.visible) !== null && _b !== void 0 ? _b : undefined;
        message.opacity = (_c = object.opacity) !== null && _c !== void 0 ? _c : undefined;
        message.hAlign = (_d = object.hAlign) !== null && _d !== void 0 ? _d : undefined;
        message.vAlign = (_e = object.vAlign) !== null && _e !== void 0 ? _e : undefined;
        message.width = (object.width !== undefined && object.width !== null)
            ? UiValue.fromPartial(object.width)
            : undefined;
        message.height = (object.height !== undefined && object.height !== null)
            ? UiValue.fromPartial(object.height)
            : undefined;
        message.positionX = (object.positionX !== undefined && object.positionX !== null)
            ? UiValue.fromPartial(object.positionX)
            : undefined;
        message.positionY = (object.positionY !== undefined && object.positionY !== null)
            ? UiValue.fromPartial(object.positionY)
            : undefined;
        message.isPointerBlocker = (_f = object.isPointerBlocker) !== null && _f !== void 0 ? _f : undefined;
        message.parentComponent = (_g = object.parentComponent) !== null && _g !== void 0 ? _g : undefined;
        message.fontSize = (_h = object.fontSize) !== null && _h !== void 0 ? _h : undefined;
        message.fontWeight = (_j = object.fontWeight) !== null && _j !== void 0 ? _j : undefined;
        message.thickness = (_k = object.thickness) !== null && _k !== void 0 ? _k : undefined;
        message.cornerRadius = (_l = object.cornerRadius) !== null && _l !== void 0 ? _l : undefined;
        message.color = (object.color !== undefined && object.color !== null)
            ? ECS6Color4.fromPartial(object.color)
            : undefined;
        message.background = (object.background !== undefined && object.background !== null)
            ? ECS6Color4.fromPartial(object.background)
            : undefined;
        message.paddingTop = (_m = object.paddingTop) !== null && _m !== void 0 ? _m : undefined;
        message.paddingRight = (_o = object.paddingRight) !== null && _o !== void 0 ? _o : undefined;
        message.paddingBottom = (_p = object.paddingBottom) !== null && _p !== void 0 ? _p : undefined;
        message.paddingLeft = (_q = object.paddingLeft) !== null && _q !== void 0 ? _q : undefined;
        message.shadowBlur = (_r = object.shadowBlur) !== null && _r !== void 0 ? _r : undefined;
        message.shadowOffsetX = (_s = object.shadowOffsetX) !== null && _s !== void 0 ? _s : undefined;
        message.shadowOffsetY = (_t = object.shadowOffsetY) !== null && _t !== void 0 ? _t : undefined;
        message.shadowColor = (object.shadowColor !== undefined && object.shadowColor !== null)
            ? ECS6Color4.fromPartial(object.shadowColor)
            : undefined;
        message.text = (_u = object.text) !== null && _u !== void 0 ? _u : undefined;
        return message;
    }
    ECS6ComponentUiButton.fromPartial = fromPartial;
})(ECS6ComponentUiButton || (exports.ECS6ComponentUiButton = ECS6ComponentUiButton = {}));
function createBaseECS6ComponentUiText() {
    return {
        name: undefined,
        visible: undefined,
        opacity: undefined,
        hAlign: undefined,
        vAlign: undefined,
        width: undefined,
        height: undefined,
        positionX: undefined,
        positionY: undefined,
        isPointerBlocker: undefined,
        parentComponent: undefined,
        outlineWidth: undefined,
        outlineColor: undefined,
        color: undefined,
        fontSize: undefined,
        fontAutoSize: undefined,
        font: undefined,
        value: undefined,
        lineSpacing: undefined,
        lineCount: undefined,
        adaptWidth: undefined,
        adaptHeight: undefined,
        textWrapping: undefined,
        shadowBlur: undefined,
        shadowOffsetX: undefined,
        shadowOffsetY: undefined,
        shadowColor: undefined,
        hTextAlign: undefined,
        vTextAlign: undefined,
        paddingTop: undefined,
        paddingRight: undefined,
        paddingBottom: undefined,
        paddingLeft: undefined,
    };
}
var ECS6ComponentUiText;
(function (ECS6ComponentUiText) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== undefined) {
            writer.uint32(10).string(message.name);
        }
        if (message.visible !== undefined) {
            writer.uint32(16).bool(message.visible);
        }
        if (message.opacity !== undefined) {
            writer.uint32(29).float(message.opacity);
        }
        if (message.hAlign !== undefined) {
            writer.uint32(34).string(message.hAlign);
        }
        if (message.vAlign !== undefined) {
            writer.uint32(42).string(message.vAlign);
        }
        if (message.width !== undefined) {
            UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
        }
        if (message.height !== undefined) {
            UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
        }
        if (message.positionX !== undefined) {
            UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
        }
        if (message.positionY !== undefined) {
            UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(80).bool(message.isPointerBlocker);
        }
        if (message.parentComponent !== undefined) {
            writer.uint32(266).string(message.parentComponent);
        }
        if (message.outlineWidth !== undefined) {
            writer.uint32(93).float(message.outlineWidth);
        }
        if (message.outlineColor !== undefined) {
            ECS6Color4.encode(message.outlineColor, writer.uint32(98).fork()).ldelim();
        }
        if (message.color !== undefined) {
            ECS6Color4.encode(message.color, writer.uint32(106).fork()).ldelim();
        }
        if (message.fontSize !== undefined) {
            writer.uint32(117).float(message.fontSize);
        }
        if (message.fontAutoSize !== undefined) {
            writer.uint32(120).bool(message.fontAutoSize);
        }
        if (message.font !== undefined) {
            writer.uint32(130).string(message.font);
        }
        if (message.value !== undefined) {
            writer.uint32(138).string(message.value);
        }
        if (message.lineSpacing !== undefined) {
            writer.uint32(149).float(message.lineSpacing);
        }
        if (message.lineCount !== undefined) {
            writer.uint32(152).int32(message.lineCount);
        }
        if (message.adaptWidth !== undefined) {
            writer.uint32(160).bool(message.adaptWidth);
        }
        if (message.adaptHeight !== undefined) {
            writer.uint32(168).bool(message.adaptHeight);
        }
        if (message.textWrapping !== undefined) {
            writer.uint32(176).bool(message.textWrapping);
        }
        if (message.shadowBlur !== undefined) {
            writer.uint32(189).float(message.shadowBlur);
        }
        if (message.shadowOffsetX !== undefined) {
            writer.uint32(197).float(message.shadowOffsetX);
        }
        if (message.shadowOffsetY !== undefined) {
            writer.uint32(205).float(message.shadowOffsetY);
        }
        if (message.shadowColor !== undefined) {
            ECS6Color4.encode(message.shadowColor, writer.uint32(210).fork()).ldelim();
        }
        if (message.hTextAlign !== undefined) {
            writer.uint32(218).string(message.hTextAlign);
        }
        if (message.vTextAlign !== undefined) {
            writer.uint32(226).string(message.vTextAlign);
        }
        if (message.paddingTop !== undefined) {
            writer.uint32(237).float(message.paddingTop);
        }
        if (message.paddingRight !== undefined) {
            writer.uint32(245).float(message.paddingRight);
        }
        if (message.paddingBottom !== undefined) {
            writer.uint32(253).float(message.paddingBottom);
        }
        if (message.paddingLeft !== undefined) {
            writer.uint32(261).float(message.paddingLeft);
        }
        return writer;
    }
    ECS6ComponentUiText.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentUiText();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.opacity = reader.float();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.hAlign = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.vAlign = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.width = UiValue.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.height = UiValue.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.positionX = UiValue.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.positionY = UiValue.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 33:
                    if (tag !== 266) {
                        break;
                    }
                    message.parentComponent = reader.string();
                    continue;
                case 11:
                    if (tag !== 93) {
                        break;
                    }
                    message.outlineWidth = reader.float();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.outlineColor = ECS6Color4.decode(reader, reader.uint32());
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.color = ECS6Color4.decode(reader, reader.uint32());
                    continue;
                case 14:
                    if (tag !== 117) {
                        break;
                    }
                    message.fontSize = reader.float();
                    continue;
                case 15:
                    if (tag !== 120) {
                        break;
                    }
                    message.fontAutoSize = reader.bool();
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.font = reader.string();
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                case 18:
                    if (tag !== 149) {
                        break;
                    }
                    message.lineSpacing = reader.float();
                    continue;
                case 19:
                    if (tag !== 152) {
                        break;
                    }
                    message.lineCount = reader.int32();
                    continue;
                case 20:
                    if (tag !== 160) {
                        break;
                    }
                    message.adaptWidth = reader.bool();
                    continue;
                case 21:
                    if (tag !== 168) {
                        break;
                    }
                    message.adaptHeight = reader.bool();
                    continue;
                case 22:
                    if (tag !== 176) {
                        break;
                    }
                    message.textWrapping = reader.bool();
                    continue;
                case 23:
                    if (tag !== 189) {
                        break;
                    }
                    message.shadowBlur = reader.float();
                    continue;
                case 24:
                    if (tag !== 197) {
                        break;
                    }
                    message.shadowOffsetX = reader.float();
                    continue;
                case 25:
                    if (tag !== 205) {
                        break;
                    }
                    message.shadowOffsetY = reader.float();
                    continue;
                case 26:
                    if (tag !== 210) {
                        break;
                    }
                    message.shadowColor = ECS6Color4.decode(reader, reader.uint32());
                    continue;
                case 27:
                    if (tag !== 218) {
                        break;
                    }
                    message.hTextAlign = reader.string();
                    continue;
                case 28:
                    if (tag !== 226) {
                        break;
                    }
                    message.vTextAlign = reader.string();
                    continue;
                case 29:
                    if (tag !== 237) {
                        break;
                    }
                    message.paddingTop = reader.float();
                    continue;
                case 30:
                    if (tag !== 245) {
                        break;
                    }
                    message.paddingRight = reader.float();
                    continue;
                case 31:
                    if (tag !== 253) {
                        break;
                    }
                    message.paddingBottom = reader.float();
                    continue;
                case 32:
                    if (tag !== 261) {
                        break;
                    }
                    message.paddingLeft = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentUiText.decode = decode;
    function fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
            hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
            vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
            width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
            height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
            positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
            positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
            outlineWidth: isSet(object.outlineWidth) ? Number(object.outlineWidth) : undefined,
            outlineColor: isSet(object.outlineColor) ? ECS6Color4.fromJSON(object.outlineColor) : undefined,
            color: isSet(object.color) ? ECS6Color4.fromJSON(object.color) : undefined,
            fontSize: isSet(object.fontSize) ? Number(object.fontSize) : undefined,
            fontAutoSize: isSet(object.fontAutoSize) ? Boolean(object.fontAutoSize) : undefined,
            font: isSet(object.font) ? String(object.font) : undefined,
            value: isSet(object.value) ? String(object.value) : undefined,
            lineSpacing: isSet(object.lineSpacing) ? Number(object.lineSpacing) : undefined,
            lineCount: isSet(object.lineCount) ? Number(object.lineCount) : undefined,
            adaptWidth: isSet(object.adaptWidth) ? Boolean(object.adaptWidth) : undefined,
            adaptHeight: isSet(object.adaptHeight) ? Boolean(object.adaptHeight) : undefined,
            textWrapping: isSet(object.textWrapping) ? Boolean(object.textWrapping) : undefined,
            shadowBlur: isSet(object.shadowBlur) ? Number(object.shadowBlur) : undefined,
            shadowOffsetX: isSet(object.shadowOffsetX) ? Number(object.shadowOffsetX) : undefined,
            shadowOffsetY: isSet(object.shadowOffsetY) ? Number(object.shadowOffsetY) : undefined,
            shadowColor: isSet(object.shadowColor) ? ECS6Color4.fromJSON(object.shadowColor) : undefined,
            hTextAlign: isSet(object.hTextAlign) ? String(object.hTextAlign) : undefined,
            vTextAlign: isSet(object.vTextAlign) ? String(object.vTextAlign) : undefined,
            paddingTop: isSet(object.paddingTop) ? Number(object.paddingTop) : undefined,
            paddingRight: isSet(object.paddingRight) ? Number(object.paddingRight) : undefined,
            paddingBottom: isSet(object.paddingBottom) ? Number(object.paddingBottom) : undefined,
            paddingLeft: isSet(object.paddingLeft) ? Number(object.paddingLeft) : undefined,
        };
    }
    ECS6ComponentUiText.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.visible !== undefined && (obj.visible = message.visible);
        message.opacity !== undefined && (obj.opacity = message.opacity);
        message.hAlign !== undefined && (obj.hAlign = message.hAlign);
        message.vAlign !== undefined && (obj.vAlign = message.vAlign);
        message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
        message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
        message.positionX !== undefined &&
            (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
        message.positionY !== undefined &&
            (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
        message.outlineWidth !== undefined && (obj.outlineWidth = message.outlineWidth);
        message.outlineColor !== undefined &&
            (obj.outlineColor = message.outlineColor ? ECS6Color4.toJSON(message.outlineColor) : undefined);
        message.color !== undefined && (obj.color = message.color ? ECS6Color4.toJSON(message.color) : undefined);
        message.fontSize !== undefined && (obj.fontSize = message.fontSize);
        message.fontAutoSize !== undefined && (obj.fontAutoSize = message.fontAutoSize);
        message.font !== undefined && (obj.font = message.font);
        message.value !== undefined && (obj.value = message.value);
        message.lineSpacing !== undefined && (obj.lineSpacing = message.lineSpacing);
        message.lineCount !== undefined && (obj.lineCount = Math.round(message.lineCount));
        message.adaptWidth !== undefined && (obj.adaptWidth = message.adaptWidth);
        message.adaptHeight !== undefined && (obj.adaptHeight = message.adaptHeight);
        message.textWrapping !== undefined && (obj.textWrapping = message.textWrapping);
        message.shadowBlur !== undefined && (obj.shadowBlur = message.shadowBlur);
        message.shadowOffsetX !== undefined && (obj.shadowOffsetX = message.shadowOffsetX);
        message.shadowOffsetY !== undefined && (obj.shadowOffsetY = message.shadowOffsetY);
        message.shadowColor !== undefined &&
            (obj.shadowColor = message.shadowColor ? ECS6Color4.toJSON(message.shadowColor) : undefined);
        message.hTextAlign !== undefined && (obj.hTextAlign = message.hTextAlign);
        message.vTextAlign !== undefined && (obj.vTextAlign = message.vTextAlign);
        message.paddingTop !== undefined && (obj.paddingTop = message.paddingTop);
        message.paddingRight !== undefined && (obj.paddingRight = message.paddingRight);
        message.paddingBottom !== undefined && (obj.paddingBottom = message.paddingBottom);
        message.paddingLeft !== undefined && (obj.paddingLeft = message.paddingLeft);
        return obj;
    }
    ECS6ComponentUiText.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentUiText.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentUiText.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1;
        const message = createBaseECS6ComponentUiText();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : undefined;
        message.visible = (_b = object.visible) !== null && _b !== void 0 ? _b : undefined;
        message.opacity = (_c = object.opacity) !== null && _c !== void 0 ? _c : undefined;
        message.hAlign = (_d = object.hAlign) !== null && _d !== void 0 ? _d : undefined;
        message.vAlign = (_e = object.vAlign) !== null && _e !== void 0 ? _e : undefined;
        message.width = (object.width !== undefined && object.width !== null)
            ? UiValue.fromPartial(object.width)
            : undefined;
        message.height = (object.height !== undefined && object.height !== null)
            ? UiValue.fromPartial(object.height)
            : undefined;
        message.positionX = (object.positionX !== undefined && object.positionX !== null)
            ? UiValue.fromPartial(object.positionX)
            : undefined;
        message.positionY = (object.positionY !== undefined && object.positionY !== null)
            ? UiValue.fromPartial(object.positionY)
            : undefined;
        message.isPointerBlocker = (_f = object.isPointerBlocker) !== null && _f !== void 0 ? _f : undefined;
        message.parentComponent = (_g = object.parentComponent) !== null && _g !== void 0 ? _g : undefined;
        message.outlineWidth = (_h = object.outlineWidth) !== null && _h !== void 0 ? _h : undefined;
        message.outlineColor = (object.outlineColor !== undefined && object.outlineColor !== null)
            ? ECS6Color4.fromPartial(object.outlineColor)
            : undefined;
        message.color = (object.color !== undefined && object.color !== null)
            ? ECS6Color4.fromPartial(object.color)
            : undefined;
        message.fontSize = (_j = object.fontSize) !== null && _j !== void 0 ? _j : undefined;
        message.fontAutoSize = (_k = object.fontAutoSize) !== null && _k !== void 0 ? _k : undefined;
        message.font = (_l = object.font) !== null && _l !== void 0 ? _l : undefined;
        message.value = (_m = object.value) !== null && _m !== void 0 ? _m : undefined;
        message.lineSpacing = (_o = object.lineSpacing) !== null && _o !== void 0 ? _o : undefined;
        message.lineCount = (_p = object.lineCount) !== null && _p !== void 0 ? _p : undefined;
        message.adaptWidth = (_q = object.adaptWidth) !== null && _q !== void 0 ? _q : undefined;
        message.adaptHeight = (_r = object.adaptHeight) !== null && _r !== void 0 ? _r : undefined;
        message.textWrapping = (_s = object.textWrapping) !== null && _s !== void 0 ? _s : undefined;
        message.shadowBlur = (_t = object.shadowBlur) !== null && _t !== void 0 ? _t : undefined;
        message.shadowOffsetX = (_u = object.shadowOffsetX) !== null && _u !== void 0 ? _u : undefined;
        message.shadowOffsetY = (_v = object.shadowOffsetY) !== null && _v !== void 0 ? _v : undefined;
        message.shadowColor = (object.shadowColor !== undefined && object.shadowColor !== null)
            ? ECS6Color4.fromPartial(object.shadowColor)
            : undefined;
        message.hTextAlign = (_w = object.hTextAlign) !== null && _w !== void 0 ? _w : undefined;
        message.vTextAlign = (_x = object.vTextAlign) !== null && _x !== void 0 ? _x : undefined;
        message.paddingTop = (_y = object.paddingTop) !== null && _y !== void 0 ? _y : undefined;
        message.paddingRight = (_z = object.paddingRight) !== null && _z !== void 0 ? _z : undefined;
        message.paddingBottom = (_0 = object.paddingBottom) !== null && _0 !== void 0 ? _0 : undefined;
        message.paddingLeft = (_1 = object.paddingLeft) !== null && _1 !== void 0 ? _1 : undefined;
        return message;
    }
    ECS6ComponentUiText.fromPartial = fromPartial;
})(ECS6ComponentUiText || (exports.ECS6ComponentUiText = ECS6ComponentUiText = {}));
function createBaseECS6ComponentUiInputText() {
    return {
        name: undefined,
        visible: undefined,
        opacity: undefined,
        hAlign: undefined,
        vAlign: undefined,
        width: undefined,
        height: undefined,
        positionX: undefined,
        positionY: undefined,
        isPointerBlocker: undefined,
        parentComponent: undefined,
        outlineWidth: undefined,
        outlineColor: undefined,
        color: undefined,
        fontSize: undefined,
        font: undefined,
        value: undefined,
        placeholder: undefined,
        margin: undefined,
        focusedBackground: undefined,
        textWrapping: undefined,
        shadowBlur: undefined,
        shadowOffsetX: undefined,
        shadowOffsetY: undefined,
        shadowColor: undefined,
        hTextAlign: undefined,
        vTextAlign: undefined,
        paddingTop: undefined,
        paddingRight: undefined,
        paddingBottom: undefined,
        paddingLeft: undefined,
        onTextChanged: undefined,
        onFocus: undefined,
        onBlur: undefined,
        onTextSubmit: undefined,
        onChanged: undefined,
    };
}
var ECS6ComponentUiInputText;
(function (ECS6ComponentUiInputText) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== undefined) {
            writer.uint32(10).string(message.name);
        }
        if (message.visible !== undefined) {
            writer.uint32(16).bool(message.visible);
        }
        if (message.opacity !== undefined) {
            writer.uint32(29).float(message.opacity);
        }
        if (message.hAlign !== undefined) {
            writer.uint32(34).string(message.hAlign);
        }
        if (message.vAlign !== undefined) {
            writer.uint32(42).string(message.vAlign);
        }
        if (message.width !== undefined) {
            UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
        }
        if (message.height !== undefined) {
            UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
        }
        if (message.positionX !== undefined) {
            UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
        }
        if (message.positionY !== undefined) {
            UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(80).bool(message.isPointerBlocker);
        }
        if (message.parentComponent !== undefined) {
            writer.uint32(314).string(message.parentComponent);
        }
        if (message.outlineWidth !== undefined) {
            writer.uint32(93).float(message.outlineWidth);
        }
        if (message.outlineColor !== undefined) {
            ECS6Color4.encode(message.outlineColor, writer.uint32(98).fork()).ldelim();
        }
        if (message.color !== undefined) {
            ECS6Color4.encode(message.color, writer.uint32(106).fork()).ldelim();
        }
        if (message.fontSize !== undefined) {
            writer.uint32(117).float(message.fontSize);
        }
        if (message.font !== undefined) {
            writer.uint32(130).string(message.font);
        }
        if (message.value !== undefined) {
            writer.uint32(138).string(message.value);
        }
        if (message.placeholder !== undefined) {
            writer.uint32(266).string(message.placeholder);
        }
        if (message.margin !== undefined) {
            writer.uint32(277).float(message.margin);
        }
        if (message.focusedBackground !== undefined) {
            ECS6Color4.encode(message.focusedBackground, writer.uint32(282).fork()).ldelim();
        }
        if (message.textWrapping !== undefined) {
            writer.uint32(176).bool(message.textWrapping);
        }
        if (message.shadowBlur !== undefined) {
            writer.uint32(189).float(message.shadowBlur);
        }
        if (message.shadowOffsetX !== undefined) {
            writer.uint32(197).float(message.shadowOffsetX);
        }
        if (message.shadowOffsetY !== undefined) {
            writer.uint32(205).float(message.shadowOffsetY);
        }
        if (message.shadowColor !== undefined) {
            ECS6Color4.encode(message.shadowColor, writer.uint32(210).fork()).ldelim();
        }
        if (message.hTextAlign !== undefined) {
            writer.uint32(218).string(message.hTextAlign);
        }
        if (message.vTextAlign !== undefined) {
            writer.uint32(226).string(message.vTextAlign);
        }
        if (message.paddingTop !== undefined) {
            writer.uint32(237).float(message.paddingTop);
        }
        if (message.paddingRight !== undefined) {
            writer.uint32(245).float(message.paddingRight);
        }
        if (message.paddingBottom !== undefined) {
            writer.uint32(253).float(message.paddingBottom);
        }
        if (message.paddingLeft !== undefined) {
            writer.uint32(261).float(message.paddingLeft);
        }
        if (message.onTextChanged !== undefined) {
            writer.uint32(290).string(message.onTextChanged);
        }
        if (message.onFocus !== undefined) {
            writer.uint32(298).string(message.onFocus);
        }
        if (message.onBlur !== undefined) {
            writer.uint32(306).string(message.onBlur);
        }
        if (message.onTextSubmit !== undefined) {
            writer.uint32(322).string(message.onTextSubmit);
        }
        if (message.onChanged !== undefined) {
            writer.uint32(330).string(message.onChanged);
        }
        return writer;
    }
    ECS6ComponentUiInputText.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentUiInputText();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.opacity = reader.float();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.hAlign = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.vAlign = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.width = UiValue.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.height = UiValue.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.positionX = UiValue.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.positionY = UiValue.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 39:
                    if (tag !== 314) {
                        break;
                    }
                    message.parentComponent = reader.string();
                    continue;
                case 11:
                    if (tag !== 93) {
                        break;
                    }
                    message.outlineWidth = reader.float();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.outlineColor = ECS6Color4.decode(reader, reader.uint32());
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.color = ECS6Color4.decode(reader, reader.uint32());
                    continue;
                case 14:
                    if (tag !== 117) {
                        break;
                    }
                    message.fontSize = reader.float();
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.font = reader.string();
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                case 33:
                    if (tag !== 266) {
                        break;
                    }
                    message.placeholder = reader.string();
                    continue;
                case 34:
                    if (tag !== 277) {
                        break;
                    }
                    message.margin = reader.float();
                    continue;
                case 35:
                    if (tag !== 282) {
                        break;
                    }
                    message.focusedBackground = ECS6Color4.decode(reader, reader.uint32());
                    continue;
                case 22:
                    if (tag !== 176) {
                        break;
                    }
                    message.textWrapping = reader.bool();
                    continue;
                case 23:
                    if (tag !== 189) {
                        break;
                    }
                    message.shadowBlur = reader.float();
                    continue;
                case 24:
                    if (tag !== 197) {
                        break;
                    }
                    message.shadowOffsetX = reader.float();
                    continue;
                case 25:
                    if (tag !== 205) {
                        break;
                    }
                    message.shadowOffsetY = reader.float();
                    continue;
                case 26:
                    if (tag !== 210) {
                        break;
                    }
                    message.shadowColor = ECS6Color4.decode(reader, reader.uint32());
                    continue;
                case 27:
                    if (tag !== 218) {
                        break;
                    }
                    message.hTextAlign = reader.string();
                    continue;
                case 28:
                    if (tag !== 226) {
                        break;
                    }
                    message.vTextAlign = reader.string();
                    continue;
                case 29:
                    if (tag !== 237) {
                        break;
                    }
                    message.paddingTop = reader.float();
                    continue;
                case 30:
                    if (tag !== 245) {
                        break;
                    }
                    message.paddingRight = reader.float();
                    continue;
                case 31:
                    if (tag !== 253) {
                        break;
                    }
                    message.paddingBottom = reader.float();
                    continue;
                case 32:
                    if (tag !== 261) {
                        break;
                    }
                    message.paddingLeft = reader.float();
                    continue;
                case 36:
                    if (tag !== 290) {
                        break;
                    }
                    message.onTextChanged = reader.string();
                    continue;
                case 37:
                    if (tag !== 298) {
                        break;
                    }
                    message.onFocus = reader.string();
                    continue;
                case 38:
                    if (tag !== 306) {
                        break;
                    }
                    message.onBlur = reader.string();
                    continue;
                case 40:
                    if (tag !== 322) {
                        break;
                    }
                    message.onTextSubmit = reader.string();
                    continue;
                case 41:
                    if (tag !== 330) {
                        break;
                    }
                    message.onChanged = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentUiInputText.decode = decode;
    function fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
            hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
            vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
            width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
            height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
            positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
            positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
            outlineWidth: isSet(object.outlineWidth) ? Number(object.outlineWidth) : undefined,
            outlineColor: isSet(object.outlineColor) ? ECS6Color4.fromJSON(object.outlineColor) : undefined,
            color: isSet(object.color) ? ECS6Color4.fromJSON(object.color) : undefined,
            fontSize: isSet(object.fontSize) ? Number(object.fontSize) : undefined,
            font: isSet(object.font) ? String(object.font) : undefined,
            value: isSet(object.value) ? String(object.value) : undefined,
            placeholder: isSet(object.placeholder) ? String(object.placeholder) : undefined,
            margin: isSet(object.margin) ? Number(object.margin) : undefined,
            focusedBackground: isSet(object.focusedBackground) ? ECS6Color4.fromJSON(object.focusedBackground) : undefined,
            textWrapping: isSet(object.textWrapping) ? Boolean(object.textWrapping) : undefined,
            shadowBlur: isSet(object.shadowBlur) ? Number(object.shadowBlur) : undefined,
            shadowOffsetX: isSet(object.shadowOffsetX) ? Number(object.shadowOffsetX) : undefined,
            shadowOffsetY: isSet(object.shadowOffsetY) ? Number(object.shadowOffsetY) : undefined,
            shadowColor: isSet(object.shadowColor) ? ECS6Color4.fromJSON(object.shadowColor) : undefined,
            hTextAlign: isSet(object.hTextAlign) ? String(object.hTextAlign) : undefined,
            vTextAlign: isSet(object.vTextAlign) ? String(object.vTextAlign) : undefined,
            paddingTop: isSet(object.paddingTop) ? Number(object.paddingTop) : undefined,
            paddingRight: isSet(object.paddingRight) ? Number(object.paddingRight) : undefined,
            paddingBottom: isSet(object.paddingBottom) ? Number(object.paddingBottom) : undefined,
            paddingLeft: isSet(object.paddingLeft) ? Number(object.paddingLeft) : undefined,
            onTextChanged: isSet(object.onTextChanged) ? String(object.onTextChanged) : undefined,
            onFocus: isSet(object.onFocus) ? String(object.onFocus) : undefined,
            onBlur: isSet(object.onBlur) ? String(object.onBlur) : undefined,
            onTextSubmit: isSet(object.onTextSubmit) ? String(object.onTextSubmit) : undefined,
            onChanged: isSet(object.onChanged) ? String(object.onChanged) : undefined,
        };
    }
    ECS6ComponentUiInputText.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.visible !== undefined && (obj.visible = message.visible);
        message.opacity !== undefined && (obj.opacity = message.opacity);
        message.hAlign !== undefined && (obj.hAlign = message.hAlign);
        message.vAlign !== undefined && (obj.vAlign = message.vAlign);
        message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
        message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
        message.positionX !== undefined &&
            (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
        message.positionY !== undefined &&
            (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
        message.outlineWidth !== undefined && (obj.outlineWidth = message.outlineWidth);
        message.outlineColor !== undefined &&
            (obj.outlineColor = message.outlineColor ? ECS6Color4.toJSON(message.outlineColor) : undefined);
        message.color !== undefined && (obj.color = message.color ? ECS6Color4.toJSON(message.color) : undefined);
        message.fontSize !== undefined && (obj.fontSize = message.fontSize);
        message.font !== undefined && (obj.font = message.font);
        message.value !== undefined && (obj.value = message.value);
        message.placeholder !== undefined && (obj.placeholder = message.placeholder);
        message.margin !== undefined && (obj.margin = message.margin);
        message.focusedBackground !== undefined &&
            (obj.focusedBackground = message.focusedBackground ? ECS6Color4.toJSON(message.focusedBackground) : undefined);
        message.textWrapping !== undefined && (obj.textWrapping = message.textWrapping);
        message.shadowBlur !== undefined && (obj.shadowBlur = message.shadowBlur);
        message.shadowOffsetX !== undefined && (obj.shadowOffsetX = message.shadowOffsetX);
        message.shadowOffsetY !== undefined && (obj.shadowOffsetY = message.shadowOffsetY);
        message.shadowColor !== undefined &&
            (obj.shadowColor = message.shadowColor ? ECS6Color4.toJSON(message.shadowColor) : undefined);
        message.hTextAlign !== undefined && (obj.hTextAlign = message.hTextAlign);
        message.vTextAlign !== undefined && (obj.vTextAlign = message.vTextAlign);
        message.paddingTop !== undefined && (obj.paddingTop = message.paddingTop);
        message.paddingRight !== undefined && (obj.paddingRight = message.paddingRight);
        message.paddingBottom !== undefined && (obj.paddingBottom = message.paddingBottom);
        message.paddingLeft !== undefined && (obj.paddingLeft = message.paddingLeft);
        message.onTextChanged !== undefined && (obj.onTextChanged = message.onTextChanged);
        message.onFocus !== undefined && (obj.onFocus = message.onFocus);
        message.onBlur !== undefined && (obj.onBlur = message.onBlur);
        message.onTextSubmit !== undefined && (obj.onTextSubmit = message.onTextSubmit);
        message.onChanged !== undefined && (obj.onChanged = message.onChanged);
        return obj;
    }
    ECS6ComponentUiInputText.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentUiInputText.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentUiInputText.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3;
        const message = createBaseECS6ComponentUiInputText();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : undefined;
        message.visible = (_b = object.visible) !== null && _b !== void 0 ? _b : undefined;
        message.opacity = (_c = object.opacity) !== null && _c !== void 0 ? _c : undefined;
        message.hAlign = (_d = object.hAlign) !== null && _d !== void 0 ? _d : undefined;
        message.vAlign = (_e = object.vAlign) !== null && _e !== void 0 ? _e : undefined;
        message.width = (object.width !== undefined && object.width !== null)
            ? UiValue.fromPartial(object.width)
            : undefined;
        message.height = (object.height !== undefined && object.height !== null)
            ? UiValue.fromPartial(object.height)
            : undefined;
        message.positionX = (object.positionX !== undefined && object.positionX !== null)
            ? UiValue.fromPartial(object.positionX)
            : undefined;
        message.positionY = (object.positionY !== undefined && object.positionY !== null)
            ? UiValue.fromPartial(object.positionY)
            : undefined;
        message.isPointerBlocker = (_f = object.isPointerBlocker) !== null && _f !== void 0 ? _f : undefined;
        message.parentComponent = (_g = object.parentComponent) !== null && _g !== void 0 ? _g : undefined;
        message.outlineWidth = (_h = object.outlineWidth) !== null && _h !== void 0 ? _h : undefined;
        message.outlineColor = (object.outlineColor !== undefined && object.outlineColor !== null)
            ? ECS6Color4.fromPartial(object.outlineColor)
            : undefined;
        message.color = (object.color !== undefined && object.color !== null)
            ? ECS6Color4.fromPartial(object.color)
            : undefined;
        message.fontSize = (_j = object.fontSize) !== null && _j !== void 0 ? _j : undefined;
        message.font = (_k = object.font) !== null && _k !== void 0 ? _k : undefined;
        message.value = (_l = object.value) !== null && _l !== void 0 ? _l : undefined;
        message.placeholder = (_m = object.placeholder) !== null && _m !== void 0 ? _m : undefined;
        message.margin = (_o = object.margin) !== null && _o !== void 0 ? _o : undefined;
        message.focusedBackground = (object.focusedBackground !== undefined && object.focusedBackground !== null)
            ? ECS6Color4.fromPartial(object.focusedBackground)
            : undefined;
        message.textWrapping = (_p = object.textWrapping) !== null && _p !== void 0 ? _p : undefined;
        message.shadowBlur = (_q = object.shadowBlur) !== null && _q !== void 0 ? _q : undefined;
        message.shadowOffsetX = (_r = object.shadowOffsetX) !== null && _r !== void 0 ? _r : undefined;
        message.shadowOffsetY = (_s = object.shadowOffsetY) !== null && _s !== void 0 ? _s : undefined;
        message.shadowColor = (object.shadowColor !== undefined && object.shadowColor !== null)
            ? ECS6Color4.fromPartial(object.shadowColor)
            : undefined;
        message.hTextAlign = (_t = object.hTextAlign) !== null && _t !== void 0 ? _t : undefined;
        message.vTextAlign = (_u = object.vTextAlign) !== null && _u !== void 0 ? _u : undefined;
        message.paddingTop = (_v = object.paddingTop) !== null && _v !== void 0 ? _v : undefined;
        message.paddingRight = (_w = object.paddingRight) !== null && _w !== void 0 ? _w : undefined;
        message.paddingBottom = (_x = object.paddingBottom) !== null && _x !== void 0 ? _x : undefined;
        message.paddingLeft = (_y = object.paddingLeft) !== null && _y !== void 0 ? _y : undefined;
        message.onTextChanged = (_z = object.onTextChanged) !== null && _z !== void 0 ? _z : undefined;
        message.onFocus = (_0 = object.onFocus) !== null && _0 !== void 0 ? _0 : undefined;
        message.onBlur = (_1 = object.onBlur) !== null && _1 !== void 0 ? _1 : undefined;
        message.onTextSubmit = (_2 = object.onTextSubmit) !== null && _2 !== void 0 ? _2 : undefined;
        message.onChanged = (_3 = object.onChanged) !== null && _3 !== void 0 ? _3 : undefined;
        return message;
    }
    ECS6ComponentUiInputText.fromPartial = fromPartial;
})(ECS6ComponentUiInputText || (exports.ECS6ComponentUiInputText = ECS6ComponentUiInputText = {}));
function createBaseECS6ComponentUiImage() {
    return {
        name: undefined,
        visible: undefined,
        opacity: undefined,
        hAlign: undefined,
        vAlign: undefined,
        width: undefined,
        height: undefined,
        positionX: undefined,
        positionY: undefined,
        isPointerBlocker: undefined,
        parentComponent: undefined,
        sourceLeft: undefined,
        sourceTop: undefined,
        sourceWidth: undefined,
        sourceHeight: undefined,
        source: undefined,
        paddingTop: undefined,
        paddingRight: undefined,
        paddingBottom: undefined,
        paddingLeft: undefined,
        sizeInPixels: undefined,
        onClick: undefined,
    };
}
var ECS6ComponentUiImage;
(function (ECS6ComponentUiImage) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== undefined) {
            writer.uint32(10).string(message.name);
        }
        if (message.visible !== undefined) {
            writer.uint32(16).bool(message.visible);
        }
        if (message.opacity !== undefined) {
            writer.uint32(29).float(message.opacity);
        }
        if (message.hAlign !== undefined) {
            writer.uint32(34).string(message.hAlign);
        }
        if (message.vAlign !== undefined) {
            writer.uint32(42).string(message.vAlign);
        }
        if (message.width !== undefined) {
            UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
        }
        if (message.height !== undefined) {
            UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
        }
        if (message.positionX !== undefined) {
            UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
        }
        if (message.positionY !== undefined) {
            UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(80).bool(message.isPointerBlocker);
        }
        if (message.parentComponent !== undefined) {
            writer.uint32(178).string(message.parentComponent);
        }
        if (message.sourceLeft !== undefined) {
            writer.uint32(93).float(message.sourceLeft);
        }
        if (message.sourceTop !== undefined) {
            writer.uint32(101).float(message.sourceTop);
        }
        if (message.sourceWidth !== undefined) {
            writer.uint32(109).float(message.sourceWidth);
        }
        if (message.sourceHeight !== undefined) {
            writer.uint32(117).float(message.sourceHeight);
        }
        if (message.source !== undefined) {
            writer.uint32(122).string(message.source);
        }
        if (message.paddingTop !== undefined) {
            writer.uint32(133).float(message.paddingTop);
        }
        if (message.paddingRight !== undefined) {
            writer.uint32(141).float(message.paddingRight);
        }
        if (message.paddingBottom !== undefined) {
            writer.uint32(149).float(message.paddingBottom);
        }
        if (message.paddingLeft !== undefined) {
            writer.uint32(157).float(message.paddingLeft);
        }
        if (message.sizeInPixels !== undefined) {
            writer.uint32(160).bool(message.sizeInPixels);
        }
        if (message.onClick !== undefined) {
            writer.uint32(170).string(message.onClick);
        }
        return writer;
    }
    ECS6ComponentUiImage.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentUiImage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.opacity = reader.float();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.hAlign = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.vAlign = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.width = UiValue.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.height = UiValue.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.positionX = UiValue.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.positionY = UiValue.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 22:
                    if (tag !== 178) {
                        break;
                    }
                    message.parentComponent = reader.string();
                    continue;
                case 11:
                    if (tag !== 93) {
                        break;
                    }
                    message.sourceLeft = reader.float();
                    continue;
                case 12:
                    if (tag !== 101) {
                        break;
                    }
                    message.sourceTop = reader.float();
                    continue;
                case 13:
                    if (tag !== 109) {
                        break;
                    }
                    message.sourceWidth = reader.float();
                    continue;
                case 14:
                    if (tag !== 117) {
                        break;
                    }
                    message.sourceHeight = reader.float();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.source = reader.string();
                    continue;
                case 16:
                    if (tag !== 133) {
                        break;
                    }
                    message.paddingTop = reader.float();
                    continue;
                case 17:
                    if (tag !== 141) {
                        break;
                    }
                    message.paddingRight = reader.float();
                    continue;
                case 18:
                    if (tag !== 149) {
                        break;
                    }
                    message.paddingBottom = reader.float();
                    continue;
                case 19:
                    if (tag !== 157) {
                        break;
                    }
                    message.paddingLeft = reader.float();
                    continue;
                case 20:
                    if (tag !== 160) {
                        break;
                    }
                    message.sizeInPixels = reader.bool();
                    continue;
                case 21:
                    if (tag !== 170) {
                        break;
                    }
                    message.onClick = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentUiImage.decode = decode;
    function fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
            hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
            vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
            width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
            height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
            positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
            positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
            sourceLeft: isSet(object.sourceLeft) ? Number(object.sourceLeft) : undefined,
            sourceTop: isSet(object.sourceTop) ? Number(object.sourceTop) : undefined,
            sourceWidth: isSet(object.sourceWidth) ? Number(object.sourceWidth) : undefined,
            sourceHeight: isSet(object.sourceHeight) ? Number(object.sourceHeight) : undefined,
            source: isSet(object.source) ? String(object.source) : undefined,
            paddingTop: isSet(object.paddingTop) ? Number(object.paddingTop) : undefined,
            paddingRight: isSet(object.paddingRight) ? Number(object.paddingRight) : undefined,
            paddingBottom: isSet(object.paddingBottom) ? Number(object.paddingBottom) : undefined,
            paddingLeft: isSet(object.paddingLeft) ? Number(object.paddingLeft) : undefined,
            sizeInPixels: isSet(object.sizeInPixels) ? Boolean(object.sizeInPixels) : undefined,
            onClick: isSet(object.onClick) ? String(object.onClick) : undefined,
        };
    }
    ECS6ComponentUiImage.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.visible !== undefined && (obj.visible = message.visible);
        message.opacity !== undefined && (obj.opacity = message.opacity);
        message.hAlign !== undefined && (obj.hAlign = message.hAlign);
        message.vAlign !== undefined && (obj.vAlign = message.vAlign);
        message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
        message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
        message.positionX !== undefined &&
            (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
        message.positionY !== undefined &&
            (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
        message.sourceLeft !== undefined && (obj.sourceLeft = message.sourceLeft);
        message.sourceTop !== undefined && (obj.sourceTop = message.sourceTop);
        message.sourceWidth !== undefined && (obj.sourceWidth = message.sourceWidth);
        message.sourceHeight !== undefined && (obj.sourceHeight = message.sourceHeight);
        message.source !== undefined && (obj.source = message.source);
        message.paddingTop !== undefined && (obj.paddingTop = message.paddingTop);
        message.paddingRight !== undefined && (obj.paddingRight = message.paddingRight);
        message.paddingBottom !== undefined && (obj.paddingBottom = message.paddingBottom);
        message.paddingLeft !== undefined && (obj.paddingLeft = message.paddingLeft);
        message.sizeInPixels !== undefined && (obj.sizeInPixels = message.sizeInPixels);
        message.onClick !== undefined && (obj.onClick = message.onClick);
        return obj;
    }
    ECS6ComponentUiImage.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentUiImage.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentUiImage.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        const message = createBaseECS6ComponentUiImage();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : undefined;
        message.visible = (_b = object.visible) !== null && _b !== void 0 ? _b : undefined;
        message.opacity = (_c = object.opacity) !== null && _c !== void 0 ? _c : undefined;
        message.hAlign = (_d = object.hAlign) !== null && _d !== void 0 ? _d : undefined;
        message.vAlign = (_e = object.vAlign) !== null && _e !== void 0 ? _e : undefined;
        message.width = (object.width !== undefined && object.width !== null)
            ? UiValue.fromPartial(object.width)
            : undefined;
        message.height = (object.height !== undefined && object.height !== null)
            ? UiValue.fromPartial(object.height)
            : undefined;
        message.positionX = (object.positionX !== undefined && object.positionX !== null)
            ? UiValue.fromPartial(object.positionX)
            : undefined;
        message.positionY = (object.positionY !== undefined && object.positionY !== null)
            ? UiValue.fromPartial(object.positionY)
            : undefined;
        message.isPointerBlocker = (_f = object.isPointerBlocker) !== null && _f !== void 0 ? _f : undefined;
        message.parentComponent = (_g = object.parentComponent) !== null && _g !== void 0 ? _g : undefined;
        message.sourceLeft = (_h = object.sourceLeft) !== null && _h !== void 0 ? _h : undefined;
        message.sourceTop = (_j = object.sourceTop) !== null && _j !== void 0 ? _j : undefined;
        message.sourceWidth = (_k = object.sourceWidth) !== null && _k !== void 0 ? _k : undefined;
        message.sourceHeight = (_l = object.sourceHeight) !== null && _l !== void 0 ? _l : undefined;
        message.source = (_m = object.source) !== null && _m !== void 0 ? _m : undefined;
        message.paddingTop = (_o = object.paddingTop) !== null && _o !== void 0 ? _o : undefined;
        message.paddingRight = (_p = object.paddingRight) !== null && _p !== void 0 ? _p : undefined;
        message.paddingBottom = (_q = object.paddingBottom) !== null && _q !== void 0 ? _q : undefined;
        message.paddingLeft = (_r = object.paddingLeft) !== null && _r !== void 0 ? _r : undefined;
        message.sizeInPixels = (_s = object.sizeInPixels) !== null && _s !== void 0 ? _s : undefined;
        message.onClick = (_t = object.onClick) !== null && _t !== void 0 ? _t : undefined;
        return message;
    }
    ECS6ComponentUiImage.fromPartial = fromPartial;
})(ECS6ComponentUiImage || (exports.ECS6ComponentUiImage = ECS6ComponentUiImage = {}));
function createBaseECS6ComponentUiScrollRect() {
    return {
        name: undefined,
        visible: undefined,
        opacity: undefined,
        hAlign: undefined,
        vAlign: undefined,
        width: undefined,
        height: undefined,
        positionX: undefined,
        positionY: undefined,
        isPointerBlocker: undefined,
        parentComponent: undefined,
        valueX: undefined,
        valueY: undefined,
        backgroundColor: undefined,
        isHorizontal: undefined,
        isVertical: undefined,
        paddingTop: undefined,
        paddingRight: undefined,
        paddingBottom: undefined,
        paddingLeft: undefined,
        onChanged: undefined,
    };
}
var ECS6ComponentUiScrollRect;
(function (ECS6ComponentUiScrollRect) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== undefined) {
            writer.uint32(90).string(message.name);
        }
        if (message.visible !== undefined) {
            writer.uint32(96).bool(message.visible);
        }
        if (message.opacity !== undefined) {
            writer.uint32(109).float(message.opacity);
        }
        if (message.hAlign !== undefined) {
            writer.uint32(114).string(message.hAlign);
        }
        if (message.vAlign !== undefined) {
            writer.uint32(122).string(message.vAlign);
        }
        if (message.width !== undefined) {
            UiValue.encode(message.width, writer.uint32(130).fork()).ldelim();
        }
        if (message.height !== undefined) {
            UiValue.encode(message.height, writer.uint32(138).fork()).ldelim();
        }
        if (message.positionX !== undefined) {
            UiValue.encode(message.positionX, writer.uint32(146).fork()).ldelim();
        }
        if (message.positionY !== undefined) {
            UiValue.encode(message.positionY, writer.uint32(154).fork()).ldelim();
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(160).bool(message.isPointerBlocker);
        }
        if (message.parentComponent !== undefined) {
            writer.uint32(170).string(message.parentComponent);
        }
        if (message.valueX !== undefined) {
            writer.uint32(13).float(message.valueX);
        }
        if (message.valueY !== undefined) {
            writer.uint32(21).float(message.valueY);
        }
        if (message.backgroundColor !== undefined) {
            ECS6Color4.encode(message.backgroundColor, writer.uint32(26).fork()).ldelim();
        }
        if (message.isHorizontal !== undefined) {
            writer.uint32(32).bool(message.isHorizontal);
        }
        if (message.isVertical !== undefined) {
            writer.uint32(40).bool(message.isVertical);
        }
        if (message.paddingTop !== undefined) {
            writer.uint32(53).float(message.paddingTop);
        }
        if (message.paddingRight !== undefined) {
            writer.uint32(61).float(message.paddingRight);
        }
        if (message.paddingBottom !== undefined) {
            writer.uint32(69).float(message.paddingBottom);
        }
        if (message.paddingLeft !== undefined) {
            writer.uint32(77).float(message.paddingLeft);
        }
        if (message.onChanged !== undefined) {
            writer.uint32(82).string(message.onChanged);
        }
        return writer;
    }
    ECS6ComponentUiScrollRect.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentUiScrollRect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 12:
                    if (tag !== 96) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 13:
                    if (tag !== 109) {
                        break;
                    }
                    message.opacity = reader.float();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.hAlign = reader.string();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.vAlign = reader.string();
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.width = UiValue.decode(reader, reader.uint32());
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.height = UiValue.decode(reader, reader.uint32());
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.positionX = UiValue.decode(reader, reader.uint32());
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.positionY = UiValue.decode(reader, reader.uint32());
                    continue;
                case 20:
                    if (tag !== 160) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 21:
                    if (tag !== 170) {
                        break;
                    }
                    message.parentComponent = reader.string();
                    continue;
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.valueX = reader.float();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.valueY = reader.float();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.backgroundColor = ECS6Color4.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.isHorizontal = reader.bool();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.isVertical = reader.bool();
                    continue;
                case 6:
                    if (tag !== 53) {
                        break;
                    }
                    message.paddingTop = reader.float();
                    continue;
                case 7:
                    if (tag !== 61) {
                        break;
                    }
                    message.paddingRight = reader.float();
                    continue;
                case 8:
                    if (tag !== 69) {
                        break;
                    }
                    message.paddingBottom = reader.float();
                    continue;
                case 9:
                    if (tag !== 77) {
                        break;
                    }
                    message.paddingLeft = reader.float();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.onChanged = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentUiScrollRect.decode = decode;
    function fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
            hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
            vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
            width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
            height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
            positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
            positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
            valueX: isSet(object.valueX) ? Number(object.valueX) : undefined,
            valueY: isSet(object.valueY) ? Number(object.valueY) : undefined,
            backgroundColor: isSet(object.backgroundColor) ? ECS6Color4.fromJSON(object.backgroundColor) : undefined,
            isHorizontal: isSet(object.isHorizontal) ? Boolean(object.isHorizontal) : undefined,
            isVertical: isSet(object.isVertical) ? Boolean(object.isVertical) : undefined,
            paddingTop: isSet(object.paddingTop) ? Number(object.paddingTop) : undefined,
            paddingRight: isSet(object.paddingRight) ? Number(object.paddingRight) : undefined,
            paddingBottom: isSet(object.paddingBottom) ? Number(object.paddingBottom) : undefined,
            paddingLeft: isSet(object.paddingLeft) ? Number(object.paddingLeft) : undefined,
            onChanged: isSet(object.onChanged) ? String(object.onChanged) : undefined,
        };
    }
    ECS6ComponentUiScrollRect.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.visible !== undefined && (obj.visible = message.visible);
        message.opacity !== undefined && (obj.opacity = message.opacity);
        message.hAlign !== undefined && (obj.hAlign = message.hAlign);
        message.vAlign !== undefined && (obj.vAlign = message.vAlign);
        message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
        message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
        message.positionX !== undefined &&
            (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
        message.positionY !== undefined &&
            (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
        message.valueX !== undefined && (obj.valueX = message.valueX);
        message.valueY !== undefined && (obj.valueY = message.valueY);
        message.backgroundColor !== undefined &&
            (obj.backgroundColor = message.backgroundColor ? ECS6Color4.toJSON(message.backgroundColor) : undefined);
        message.isHorizontal !== undefined && (obj.isHorizontal = message.isHorizontal);
        message.isVertical !== undefined && (obj.isVertical = message.isVertical);
        message.paddingTop !== undefined && (obj.paddingTop = message.paddingTop);
        message.paddingRight !== undefined && (obj.paddingRight = message.paddingRight);
        message.paddingBottom !== undefined && (obj.paddingBottom = message.paddingBottom);
        message.paddingLeft !== undefined && (obj.paddingLeft = message.paddingLeft);
        message.onChanged !== undefined && (obj.onChanged = message.onChanged);
        return obj;
    }
    ECS6ComponentUiScrollRect.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentUiScrollRect.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentUiScrollRect.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        const message = createBaseECS6ComponentUiScrollRect();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : undefined;
        message.visible = (_b = object.visible) !== null && _b !== void 0 ? _b : undefined;
        message.opacity = (_c = object.opacity) !== null && _c !== void 0 ? _c : undefined;
        message.hAlign = (_d = object.hAlign) !== null && _d !== void 0 ? _d : undefined;
        message.vAlign = (_e = object.vAlign) !== null && _e !== void 0 ? _e : undefined;
        message.width = (object.width !== undefined && object.width !== null)
            ? UiValue.fromPartial(object.width)
            : undefined;
        message.height = (object.height !== undefined && object.height !== null)
            ? UiValue.fromPartial(object.height)
            : undefined;
        message.positionX = (object.positionX !== undefined && object.positionX !== null)
            ? UiValue.fromPartial(object.positionX)
            : undefined;
        message.positionY = (object.positionY !== undefined && object.positionY !== null)
            ? UiValue.fromPartial(object.positionY)
            : undefined;
        message.isPointerBlocker = (_f = object.isPointerBlocker) !== null && _f !== void 0 ? _f : undefined;
        message.parentComponent = (_g = object.parentComponent) !== null && _g !== void 0 ? _g : undefined;
        message.valueX = (_h = object.valueX) !== null && _h !== void 0 ? _h : undefined;
        message.valueY = (_j = object.valueY) !== null && _j !== void 0 ? _j : undefined;
        message.backgroundColor = (object.backgroundColor !== undefined && object.backgroundColor !== null)
            ? ECS6Color4.fromPartial(object.backgroundColor)
            : undefined;
        message.isHorizontal = (_k = object.isHorizontal) !== null && _k !== void 0 ? _k : undefined;
        message.isVertical = (_l = object.isVertical) !== null && _l !== void 0 ? _l : undefined;
        message.paddingTop = (_m = object.paddingTop) !== null && _m !== void 0 ? _m : undefined;
        message.paddingRight = (_o = object.paddingRight) !== null && _o !== void 0 ? _o : undefined;
        message.paddingBottom = (_p = object.paddingBottom) !== null && _p !== void 0 ? _p : undefined;
        message.paddingLeft = (_q = object.paddingLeft) !== null && _q !== void 0 ? _q : undefined;
        message.onChanged = (_r = object.onChanged) !== null && _r !== void 0 ? _r : undefined;
        return message;
    }
    ECS6ComponentUiScrollRect.fromPartial = fromPartial;
})(ECS6ComponentUiScrollRect || (exports.ECS6ComponentUiScrollRect = ECS6ComponentUiScrollRect = {}));
function createBaseECS6ComponentUiWorldSpaceShape() {
    return {
        name: undefined,
        visible: undefined,
        opacity: undefined,
        hAlign: undefined,
        vAlign: undefined,
        width: undefined,
        height: undefined,
        positionX: undefined,
        positionY: undefined,
        isPointerBlocker: undefined,
        parentComponent: undefined,
    };
}
var ECS6ComponentUiWorldSpaceShape;
(function (ECS6ComponentUiWorldSpaceShape) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== undefined) {
            writer.uint32(10).string(message.name);
        }
        if (message.visible !== undefined) {
            writer.uint32(16).bool(message.visible);
        }
        if (message.opacity !== undefined) {
            writer.uint32(29).float(message.opacity);
        }
        if (message.hAlign !== undefined) {
            writer.uint32(34).string(message.hAlign);
        }
        if (message.vAlign !== undefined) {
            writer.uint32(42).string(message.vAlign);
        }
        if (message.width !== undefined) {
            UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
        }
        if (message.height !== undefined) {
            UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
        }
        if (message.positionX !== undefined) {
            UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
        }
        if (message.positionY !== undefined) {
            UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(80).bool(message.isPointerBlocker);
        }
        if (message.parentComponent !== undefined) {
            writer.uint32(90).string(message.parentComponent);
        }
        return writer;
    }
    ECS6ComponentUiWorldSpaceShape.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentUiWorldSpaceShape();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.opacity = reader.float();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.hAlign = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.vAlign = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.width = UiValue.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.height = UiValue.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.positionX = UiValue.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.positionY = UiValue.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.parentComponent = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentUiWorldSpaceShape.decode = decode;
    function fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
            hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
            vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
            width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
            height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
            positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
            positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
        };
    }
    ECS6ComponentUiWorldSpaceShape.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.visible !== undefined && (obj.visible = message.visible);
        message.opacity !== undefined && (obj.opacity = message.opacity);
        message.hAlign !== undefined && (obj.hAlign = message.hAlign);
        message.vAlign !== undefined && (obj.vAlign = message.vAlign);
        message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
        message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
        message.positionX !== undefined &&
            (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
        message.positionY !== undefined &&
            (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
        return obj;
    }
    ECS6ComponentUiWorldSpaceShape.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentUiWorldSpaceShape.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentUiWorldSpaceShape.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseECS6ComponentUiWorldSpaceShape();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : undefined;
        message.visible = (_b = object.visible) !== null && _b !== void 0 ? _b : undefined;
        message.opacity = (_c = object.opacity) !== null && _c !== void 0 ? _c : undefined;
        message.hAlign = (_d = object.hAlign) !== null && _d !== void 0 ? _d : undefined;
        message.vAlign = (_e = object.vAlign) !== null && _e !== void 0 ? _e : undefined;
        message.width = (object.width !== undefined && object.width !== null)
            ? UiValue.fromPartial(object.width)
            : undefined;
        message.height = (object.height !== undefined && object.height !== null)
            ? UiValue.fromPartial(object.height)
            : undefined;
        message.positionX = (object.positionX !== undefined && object.positionX !== null)
            ? UiValue.fromPartial(object.positionX)
            : undefined;
        message.positionY = (object.positionY !== undefined && object.positionY !== null)
            ? UiValue.fromPartial(object.positionY)
            : undefined;
        message.isPointerBlocker = (_f = object.isPointerBlocker) !== null && _f !== void 0 ? _f : undefined;
        message.parentComponent = (_g = object.parentComponent) !== null && _g !== void 0 ? _g : undefined;
        return message;
    }
    ECS6ComponentUiWorldSpaceShape.fromPartial = fromPartial;
})(ECS6ComponentUiWorldSpaceShape || (exports.ECS6ComponentUiWorldSpaceShape = ECS6ComponentUiWorldSpaceShape = {}));
function createBaseECS6ComponentUiScreenSpaceShape() {
    return {
        name: undefined,
        visible: undefined,
        opacity: undefined,
        hAlign: undefined,
        vAlign: undefined,
        width: undefined,
        height: undefined,
        positionX: undefined,
        positionY: undefined,
        isPointerBlocker: undefined,
        parentComponent: undefined,
    };
}
var ECS6ComponentUiScreenSpaceShape;
(function (ECS6ComponentUiScreenSpaceShape) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== undefined) {
            writer.uint32(10).string(message.name);
        }
        if (message.visible !== undefined) {
            writer.uint32(16).bool(message.visible);
        }
        if (message.opacity !== undefined) {
            writer.uint32(29).float(message.opacity);
        }
        if (message.hAlign !== undefined) {
            writer.uint32(34).string(message.hAlign);
        }
        if (message.vAlign !== undefined) {
            writer.uint32(42).string(message.vAlign);
        }
        if (message.width !== undefined) {
            UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
        }
        if (message.height !== undefined) {
            UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
        }
        if (message.positionX !== undefined) {
            UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
        }
        if (message.positionY !== undefined) {
            UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(80).bool(message.isPointerBlocker);
        }
        if (message.parentComponent !== undefined) {
            writer.uint32(90).string(message.parentComponent);
        }
        return writer;
    }
    ECS6ComponentUiScreenSpaceShape.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentUiScreenSpaceShape();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.opacity = reader.float();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.hAlign = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.vAlign = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.width = UiValue.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.height = UiValue.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.positionX = UiValue.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.positionY = UiValue.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.parentComponent = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentUiScreenSpaceShape.decode = decode;
    function fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
            hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
            vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
            width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
            height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
            positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
            positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
        };
    }
    ECS6ComponentUiScreenSpaceShape.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.visible !== undefined && (obj.visible = message.visible);
        message.opacity !== undefined && (obj.opacity = message.opacity);
        message.hAlign !== undefined && (obj.hAlign = message.hAlign);
        message.vAlign !== undefined && (obj.vAlign = message.vAlign);
        message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
        message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
        message.positionX !== undefined &&
            (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
        message.positionY !== undefined &&
            (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
        return obj;
    }
    ECS6ComponentUiScreenSpaceShape.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentUiScreenSpaceShape.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentUiScreenSpaceShape.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseECS6ComponentUiScreenSpaceShape();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : undefined;
        message.visible = (_b = object.visible) !== null && _b !== void 0 ? _b : undefined;
        message.opacity = (_c = object.opacity) !== null && _c !== void 0 ? _c : undefined;
        message.hAlign = (_d = object.hAlign) !== null && _d !== void 0 ? _d : undefined;
        message.vAlign = (_e = object.vAlign) !== null && _e !== void 0 ? _e : undefined;
        message.width = (object.width !== undefined && object.width !== null)
            ? UiValue.fromPartial(object.width)
            : undefined;
        message.height = (object.height !== undefined && object.height !== null)
            ? UiValue.fromPartial(object.height)
            : undefined;
        message.positionX = (object.positionX !== undefined && object.positionX !== null)
            ? UiValue.fromPartial(object.positionX)
            : undefined;
        message.positionY = (object.positionY !== undefined && object.positionY !== null)
            ? UiValue.fromPartial(object.positionY)
            : undefined;
        message.isPointerBlocker = (_f = object.isPointerBlocker) !== null && _f !== void 0 ? _f : undefined;
        message.parentComponent = (_g = object.parentComponent) !== null && _g !== void 0 ? _g : undefined;
        return message;
    }
    ECS6ComponentUiScreenSpaceShape.fromPartial = fromPartial;
})(ECS6ComponentUiScreenSpaceShape || (exports.ECS6ComponentUiScreenSpaceShape = ECS6ComponentUiScreenSpaceShape = {}));
function createBaseECS6ComponentUiFullScreenShape() {
    return {
        name: undefined,
        visible: undefined,
        opacity: undefined,
        hAlign: undefined,
        vAlign: undefined,
        width: undefined,
        height: undefined,
        positionX: undefined,
        positionY: undefined,
        isPointerBlocker: undefined,
        parentComponent: undefined,
    };
}
var ECS6ComponentUiFullScreenShape;
(function (ECS6ComponentUiFullScreenShape) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== undefined) {
            writer.uint32(10).string(message.name);
        }
        if (message.visible !== undefined) {
            writer.uint32(16).bool(message.visible);
        }
        if (message.opacity !== undefined) {
            writer.uint32(29).float(message.opacity);
        }
        if (message.hAlign !== undefined) {
            writer.uint32(34).string(message.hAlign);
        }
        if (message.vAlign !== undefined) {
            writer.uint32(42).string(message.vAlign);
        }
        if (message.width !== undefined) {
            UiValue.encode(message.width, writer.uint32(50).fork()).ldelim();
        }
        if (message.height !== undefined) {
            UiValue.encode(message.height, writer.uint32(58).fork()).ldelim();
        }
        if (message.positionX !== undefined) {
            UiValue.encode(message.positionX, writer.uint32(66).fork()).ldelim();
        }
        if (message.positionY !== undefined) {
            UiValue.encode(message.positionY, writer.uint32(74).fork()).ldelim();
        }
        if (message.isPointerBlocker !== undefined) {
            writer.uint32(80).bool(message.isPointerBlocker);
        }
        if (message.parentComponent !== undefined) {
            writer.uint32(90).string(message.parentComponent);
        }
        return writer;
    }
    ECS6ComponentUiFullScreenShape.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseECS6ComponentUiFullScreenShape();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.visible = reader.bool();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.opacity = reader.float();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.hAlign = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.vAlign = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.width = UiValue.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.height = UiValue.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.positionX = UiValue.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.positionY = UiValue.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.isPointerBlocker = reader.bool();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.parentComponent = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ECS6ComponentUiFullScreenShape.decode = decode;
    function fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : undefined,
            visible: isSet(object.visible) ? Boolean(object.visible) : undefined,
            opacity: isSet(object.opacity) ? Number(object.opacity) : undefined,
            hAlign: isSet(object.hAlign) ? String(object.hAlign) : undefined,
            vAlign: isSet(object.vAlign) ? String(object.vAlign) : undefined,
            width: isSet(object.width) ? UiValue.fromJSON(object.width) : undefined,
            height: isSet(object.height) ? UiValue.fromJSON(object.height) : undefined,
            positionX: isSet(object.positionX) ? UiValue.fromJSON(object.positionX) : undefined,
            positionY: isSet(object.positionY) ? UiValue.fromJSON(object.positionY) : undefined,
            isPointerBlocker: isSet(object.isPointerBlocker) ? Boolean(object.isPointerBlocker) : undefined,
            parentComponent: isSet(object.parentComponent) ? String(object.parentComponent) : undefined,
        };
    }
    ECS6ComponentUiFullScreenShape.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.visible !== undefined && (obj.visible = message.visible);
        message.opacity !== undefined && (obj.opacity = message.opacity);
        message.hAlign !== undefined && (obj.hAlign = message.hAlign);
        message.vAlign !== undefined && (obj.vAlign = message.vAlign);
        message.width !== undefined && (obj.width = message.width ? UiValue.toJSON(message.width) : undefined);
        message.height !== undefined && (obj.height = message.height ? UiValue.toJSON(message.height) : undefined);
        message.positionX !== undefined &&
            (obj.positionX = message.positionX ? UiValue.toJSON(message.positionX) : undefined);
        message.positionY !== undefined &&
            (obj.positionY = message.positionY ? UiValue.toJSON(message.positionY) : undefined);
        message.isPointerBlocker !== undefined && (obj.isPointerBlocker = message.isPointerBlocker);
        message.parentComponent !== undefined && (obj.parentComponent = message.parentComponent);
        return obj;
    }
    ECS6ComponentUiFullScreenShape.toJSON = toJSON;
    function create(base) {
        return ECS6ComponentUiFullScreenShape.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ECS6ComponentUiFullScreenShape.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseECS6ComponentUiFullScreenShape();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : undefined;
        message.visible = (_b = object.visible) !== null && _b !== void 0 ? _b : undefined;
        message.opacity = (_c = object.opacity) !== null && _c !== void 0 ? _c : undefined;
        message.hAlign = (_d = object.hAlign) !== null && _d !== void 0 ? _d : undefined;
        message.vAlign = (_e = object.vAlign) !== null && _e !== void 0 ? _e : undefined;
        message.width = (object.width !== undefined && object.width !== null)
            ? UiValue.fromPartial(object.width)
            : undefined;
        message.height = (object.height !== undefined && object.height !== null)
            ? UiValue.fromPartial(object.height)
            : undefined;
        message.positionX = (object.positionX !== undefined && object.positionX !== null)
            ? UiValue.fromPartial(object.positionX)
            : undefined;
        message.positionY = (object.positionY !== undefined && object.positionY !== null)
            ? UiValue.fromPartial(object.positionY)
            : undefined;
        message.isPointerBlocker = (_f = object.isPointerBlocker) !== null && _f !== void 0 ? _f : undefined;
        message.parentComponent = (_g = object.parentComponent) !== null && _g !== void 0 ? _g : undefined;
        return message;
    }
    ECS6ComponentUiFullScreenShape.fromPartial = fromPartial;
})(ECS6ComponentUiFullScreenShape || (exports.ECS6ComponentUiFullScreenShape = ECS6ComponentUiFullScreenShape = {}));
const tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=components_ecs6.gen.js.map