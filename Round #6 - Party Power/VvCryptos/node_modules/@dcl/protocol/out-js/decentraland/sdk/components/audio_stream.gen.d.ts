import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.sdk.components";
/**
 * The AudioStream component can play external audio clips given a URL, streaming it in real-time.
 *
 * Despite being attached to a particular entity, the sound is not affected by its position.
 */
export interface PBAudioStream {
    /** whether the clip is currently playing */
    playing?: boolean | undefined;
    /** the audio volume (default: 1.0) */
    volume?: number | undefined;
    /** the audio stream HTTP URL */
    url: string;
}
export declare namespace PBAudioStream {
    function encode(message: PBAudioStream, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBAudioStream;
    function fromJSON(object: any): PBAudioStream;
    function toJSON(message: PBAudioStream): unknown;
    function create<I extends Exact<DeepPartial<PBAudioStream>, I>>(base?: I): PBAudioStream;
    function fromPartial<I extends Exact<DeepPartial<PBAudioStream>, I>>(object: I): PBAudioStream;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
