import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.sdk.components";
/** AvatarAnchorPointType determines the part of the avatar's body that anchors the Entity. */
export declare enum AvatarAnchorPointType {
    /** AAPT_POSITION - @deprecated consider parenting to `engine.PlayerEntity`, this will attach to player position with an arbitrary offset */
    AAPT_POSITION = 0,
    AAPT_NAME_TAG = 1,
    AAPT_HEAD = 4,
    AAPT_NECK = 5,
    AAPT_SPINE = 6,
    AAPT_SPINE1 = 7,
    AAPT_SPINE2 = 8,
    AAPT_HIP = 9,
    AAPT_LEFT_SHOULDER = 10,
    AAPT_LEFT_ARM = 11,
    AAPT_LEFT_FOREARM = 12,
    AAPT_LEFT_HAND = 2,
    AAPT_LEFT_HAND_INDEX = 13,
    AAPT_RIGHT_SHOULDER = 14,
    AAPT_RIGHT_ARM = 15,
    AAPT_RIGHT_FOREARM = 16,
    AAPT_RIGHT_HAND = 3,
    AAPT_RIGHT_HAND_INDEX = 17,
    AAPT_LEFT_UP_LEG = 18,
    AAPT_LEFT_LEG = 19,
    AAPT_LEFT_FOOT = 20,
    AAPT_LEFT_TOE_BASE = 21,
    AAPT_RIGHT_UP_LEG = 22,
    AAPT_RIGHT_LEG = 23,
    AAPT_RIGHT_FOOT = 24,
    AAPT_RIGHT_TOE_BASE = 25,
    UNRECOGNIZED = -1
}
export declare function avatarAnchorPointTypeFromJSON(object: any): AvatarAnchorPointType;
export declare function avatarAnchorPointTypeToJSON(object: AvatarAnchorPointType): string;
/**
 * The AvatarAttach component automatically repositions an Entity to maintain the same position and
 * rotation relative to some part of an avatar, called the "anchor point". The Entity
 * will follow this anchor as it moves.
 *
 * The Entity's own Transform is overridden by this component. To offset position and adjust scale,
 * add a child to the anchored Entity and set a Transform on it instead.
 *
 * AvatarAnchorPointType indicates which part of the avatar the Entity must follow.
 */
export interface PBAvatarAttach {
    /** the user ID of the avatar (default: local user) */
    avatarId?: string | undefined;
    /** the anchor point. */
    anchorPointId: AvatarAnchorPointType;
}
export declare namespace PBAvatarAttach {
    function encode(message: PBAvatarAttach, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBAvatarAttach;
    function fromJSON(object: any): PBAvatarAttach;
    function toJSON(message: PBAvatarAttach): unknown;
    function create<I extends Exact<DeepPartial<PBAvatarAttach>, I>>(base?: I): PBAvatarAttach;
    function fromPartial<I extends Exact<DeepPartial<PBAvatarAttach>, I>>(object: I): PBAvatarAttach;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
