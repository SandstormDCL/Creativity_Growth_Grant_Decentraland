"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBAvatarEquippedData = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.sdk.components";
function createBasePBAvatarEquippedData() {
    return { wearableUrns: [], emoteUrns: [] };
}
var PBAvatarEquippedData;
(function (PBAvatarEquippedData) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.wearableUrns) {
            writer.uint32(10).string(v);
        }
        for (const v of message.emoteUrns) {
            writer.uint32(18).string(v);
        }
        return writer;
    }
    PBAvatarEquippedData.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBAvatarEquippedData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.wearableUrns.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.emoteUrns.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBAvatarEquippedData.decode = decode;
    function fromJSON(object) {
        return {
            wearableUrns: Array.isArray(object === null || object === void 0 ? void 0 : object.wearableUrns) ? object.wearableUrns.map((e) => String(e)) : [],
            emoteUrns: Array.isArray(object === null || object === void 0 ? void 0 : object.emoteUrns) ? object.emoteUrns.map((e) => String(e)) : [],
        };
    }
    PBAvatarEquippedData.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.wearableUrns) {
            obj.wearableUrns = message.wearableUrns.map((e) => e);
        }
        else {
            obj.wearableUrns = [];
        }
        if (message.emoteUrns) {
            obj.emoteUrns = message.emoteUrns.map((e) => e);
        }
        else {
            obj.emoteUrns = [];
        }
        return obj;
    }
    PBAvatarEquippedData.toJSON = toJSON;
    function create(base) {
        return PBAvatarEquippedData.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBAvatarEquippedData.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBasePBAvatarEquippedData();
        message.wearableUrns = ((_a = object.wearableUrns) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.emoteUrns = ((_b = object.emoteUrns) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    }
    PBAvatarEquippedData.fromPartial = fromPartial;
})(PBAvatarEquippedData || (exports.PBAvatarEquippedData = PBAvatarEquippedData = {}));
//# sourceMappingURL=avatar_equipped_data.gen.js.map