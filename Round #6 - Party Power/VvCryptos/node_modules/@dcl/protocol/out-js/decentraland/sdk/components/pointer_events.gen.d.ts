import _m0 from "protobufjs/minimal";
import { InputAction, PointerEventType } from "./common/input_action.gen";
export declare const protobufPackage = "decentraland.sdk.components";
/**
 * PointerEvents adds configurable pointer-based interactions to the attached Entity.
 *
 * Events that match the criteria defined in the PointerEvents structure are reported back to the
 * Entity via the PointerEventsResult component.
 *
 * Some examples of events that can be detected:
 * - Pointer hovering over the Entity.
 * - Held mouse button released over the Entity.
 * - Controller button pressed while targeting the Entity.
 * - Key pressed while targeting the Entity, but only in close range.
 *
 * It also supports simple visual feedback when interactions occur, by showing floating text.
 * More sophisticated feedback requires the use of other components.
 */
export interface PBPointerEvents {
    /** the list of relevant events to detect */
    pointerEvents: PBPointerEvents_Entry[];
}
export interface PBPointerEvents_Info {
    /** key/button in use (default IA_ANY) */
    button?: InputAction | undefined;
    /** feedback on hover (default 'Interact') */
    hoverText?: string | undefined;
    /** range of interaction (default 10) */
    maxDistance?: number | undefined;
    /** enable or disable hover text and highlight (default true) */
    showFeedback?: boolean | undefined;
    /** enable or disable hover highlight (default true) */
    showHighlight?: boolean | undefined;
}
export interface PBPointerEvents_Entry {
    /** the kind of interaction to detect */
    eventType: PointerEventType;
    /** additional configuration for this detection */
    eventInfo: PBPointerEvents_Info | undefined;
}
export declare namespace PBPointerEvents {
    function encode(message: PBPointerEvents, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBPointerEvents;
    function fromJSON(object: any): PBPointerEvents;
    function toJSON(message: PBPointerEvents): unknown;
    function create<I extends Exact<DeepPartial<PBPointerEvents>, I>>(base?: I): PBPointerEvents;
    function fromPartial<I extends Exact<DeepPartial<PBPointerEvents>, I>>(object: I): PBPointerEvents;
}
export declare namespace PBPointerEvents_Info {
    function encode(message: PBPointerEvents_Info, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBPointerEvents_Info;
    function fromJSON(object: any): PBPointerEvents_Info;
    function toJSON(message: PBPointerEvents_Info): unknown;
    function create<I extends Exact<DeepPartial<PBPointerEvents_Info>, I>>(base?: I): PBPointerEvents_Info;
    function fromPartial<I extends Exact<DeepPartial<PBPointerEvents_Info>, I>>(object: I): PBPointerEvents_Info;
}
export declare namespace PBPointerEvents_Entry {
    function encode(message: PBPointerEvents_Entry, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBPointerEvents_Entry;
    function fromJSON(object: any): PBPointerEvents_Entry;
    function toJSON(message: PBPointerEvents_Entry): unknown;
    function create<I extends Exact<DeepPartial<PBPointerEvents_Entry>, I>>(base?: I): PBPointerEvents_Entry;
    function fromPartial<I extends Exact<DeepPartial<PBPointerEvents_Entry>, I>>(object: I): PBPointerEvents_Entry;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
