"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBTextShape = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const colors_gen_1 = require("../../common/colors.gen");
const texts_gen_1 = require("./common/texts.gen");
exports.protobufPackage = "decentraland.sdk.components";
function createBasePBTextShape() {
    return {
        text: "",
        font: undefined,
        fontSize: undefined,
        fontAutoSize: undefined,
        textAlign: undefined,
        width: undefined,
        height: undefined,
        paddingTop: undefined,
        paddingRight: undefined,
        paddingBottom: undefined,
        paddingLeft: undefined,
        lineSpacing: undefined,
        lineCount: undefined,
        textWrapping: undefined,
        shadowBlur: undefined,
        shadowOffsetX: undefined,
        shadowOffsetY: undefined,
        outlineWidth: undefined,
        shadowColor: undefined,
        outlineColor: undefined,
        textColor: undefined,
    };
}
var PBTextShape;
(function (PBTextShape) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.text !== "") {
            writer.uint32(10).string(message.text);
        }
        if (message.font !== undefined) {
            writer.uint32(16).int32(message.font);
        }
        if (message.fontSize !== undefined) {
            writer.uint32(29).float(message.fontSize);
        }
        if (message.fontAutoSize !== undefined) {
            writer.uint32(32).bool(message.fontAutoSize);
        }
        if (message.textAlign !== undefined) {
            writer.uint32(40).int32(message.textAlign);
        }
        if (message.width !== undefined) {
            writer.uint32(53).float(message.width);
        }
        if (message.height !== undefined) {
            writer.uint32(61).float(message.height);
        }
        if (message.paddingTop !== undefined) {
            writer.uint32(69).float(message.paddingTop);
        }
        if (message.paddingRight !== undefined) {
            writer.uint32(77).float(message.paddingRight);
        }
        if (message.paddingBottom !== undefined) {
            writer.uint32(85).float(message.paddingBottom);
        }
        if (message.paddingLeft !== undefined) {
            writer.uint32(93).float(message.paddingLeft);
        }
        if (message.lineSpacing !== undefined) {
            writer.uint32(101).float(message.lineSpacing);
        }
        if (message.lineCount !== undefined) {
            writer.uint32(104).int32(message.lineCount);
        }
        if (message.textWrapping !== undefined) {
            writer.uint32(112).bool(message.textWrapping);
        }
        if (message.shadowBlur !== undefined) {
            writer.uint32(125).float(message.shadowBlur);
        }
        if (message.shadowOffsetX !== undefined) {
            writer.uint32(133).float(message.shadowOffsetX);
        }
        if (message.shadowOffsetY !== undefined) {
            writer.uint32(141).float(message.shadowOffsetY);
        }
        if (message.outlineWidth !== undefined) {
            writer.uint32(149).float(message.outlineWidth);
        }
        if (message.shadowColor !== undefined) {
            colors_gen_1.Color3.encode(message.shadowColor, writer.uint32(154).fork()).ldelim();
        }
        if (message.outlineColor !== undefined) {
            colors_gen_1.Color3.encode(message.outlineColor, writer.uint32(162).fork()).ldelim();
        }
        if (message.textColor !== undefined) {
            colors_gen_1.Color4.encode(message.textColor, writer.uint32(170).fork()).ldelim();
        }
        return writer;
    }
    PBTextShape.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBTextShape();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.font = reader.int32();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.fontSize = reader.float();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.fontAutoSize = reader.bool();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.textAlign = reader.int32();
                    continue;
                case 6:
                    if (tag !== 53) {
                        break;
                    }
                    message.width = reader.float();
                    continue;
                case 7:
                    if (tag !== 61) {
                        break;
                    }
                    message.height = reader.float();
                    continue;
                case 8:
                    if (tag !== 69) {
                        break;
                    }
                    message.paddingTop = reader.float();
                    continue;
                case 9:
                    if (tag !== 77) {
                        break;
                    }
                    message.paddingRight = reader.float();
                    continue;
                case 10:
                    if (tag !== 85) {
                        break;
                    }
                    message.paddingBottom = reader.float();
                    continue;
                case 11:
                    if (tag !== 93) {
                        break;
                    }
                    message.paddingLeft = reader.float();
                    continue;
                case 12:
                    if (tag !== 101) {
                        break;
                    }
                    message.lineSpacing = reader.float();
                    continue;
                case 13:
                    if (tag !== 104) {
                        break;
                    }
                    message.lineCount = reader.int32();
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.textWrapping = reader.bool();
                    continue;
                case 15:
                    if (tag !== 125) {
                        break;
                    }
                    message.shadowBlur = reader.float();
                    continue;
                case 16:
                    if (tag !== 133) {
                        break;
                    }
                    message.shadowOffsetX = reader.float();
                    continue;
                case 17:
                    if (tag !== 141) {
                        break;
                    }
                    message.shadowOffsetY = reader.float();
                    continue;
                case 18:
                    if (tag !== 149) {
                        break;
                    }
                    message.outlineWidth = reader.float();
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.shadowColor = colors_gen_1.Color3.decode(reader, reader.uint32());
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.outlineColor = colors_gen_1.Color3.decode(reader, reader.uint32());
                    continue;
                case 21:
                    if (tag !== 170) {
                        break;
                    }
                    message.textColor = colors_gen_1.Color4.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBTextShape.decode = decode;
    function fromJSON(object) {
        return {
            text: isSet(object.text) ? String(object.text) : "",
            font: isSet(object.font) ? (0, texts_gen_1.fontFromJSON)(object.font) : undefined,
            fontSize: isSet(object.fontSize) ? Number(object.fontSize) : undefined,
            fontAutoSize: isSet(object.fontAutoSize) ? Boolean(object.fontAutoSize) : undefined,
            textAlign: isSet(object.textAlign) ? (0, texts_gen_1.textAlignModeFromJSON)(object.textAlign) : undefined,
            width: isSet(object.width) ? Number(object.width) : undefined,
            height: isSet(object.height) ? Number(object.height) : undefined,
            paddingTop: isSet(object.paddingTop) ? Number(object.paddingTop) : undefined,
            paddingRight: isSet(object.paddingRight) ? Number(object.paddingRight) : undefined,
            paddingBottom: isSet(object.paddingBottom) ? Number(object.paddingBottom) : undefined,
            paddingLeft: isSet(object.paddingLeft) ? Number(object.paddingLeft) : undefined,
            lineSpacing: isSet(object.lineSpacing) ? Number(object.lineSpacing) : undefined,
            lineCount: isSet(object.lineCount) ? Number(object.lineCount) : undefined,
            textWrapping: isSet(object.textWrapping) ? Boolean(object.textWrapping) : undefined,
            shadowBlur: isSet(object.shadowBlur) ? Number(object.shadowBlur) : undefined,
            shadowOffsetX: isSet(object.shadowOffsetX) ? Number(object.shadowOffsetX) : undefined,
            shadowOffsetY: isSet(object.shadowOffsetY) ? Number(object.shadowOffsetY) : undefined,
            outlineWidth: isSet(object.outlineWidth) ? Number(object.outlineWidth) : undefined,
            shadowColor: isSet(object.shadowColor) ? colors_gen_1.Color3.fromJSON(object.shadowColor) : undefined,
            outlineColor: isSet(object.outlineColor) ? colors_gen_1.Color3.fromJSON(object.outlineColor) : undefined,
            textColor: isSet(object.textColor) ? colors_gen_1.Color4.fromJSON(object.textColor) : undefined,
        };
    }
    PBTextShape.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.text !== undefined && (obj.text = message.text);
        message.font !== undefined && (obj.font = message.font !== undefined ? (0, texts_gen_1.fontToJSON)(message.font) : undefined);
        message.fontSize !== undefined && (obj.fontSize = message.fontSize);
        message.fontAutoSize !== undefined && (obj.fontAutoSize = message.fontAutoSize);
        message.textAlign !== undefined &&
            (obj.textAlign = message.textAlign !== undefined ? (0, texts_gen_1.textAlignModeToJSON)(message.textAlign) : undefined);
        message.width !== undefined && (obj.width = message.width);
        message.height !== undefined && (obj.height = message.height);
        message.paddingTop !== undefined && (obj.paddingTop = message.paddingTop);
        message.paddingRight !== undefined && (obj.paddingRight = message.paddingRight);
        message.paddingBottom !== undefined && (obj.paddingBottom = message.paddingBottom);
        message.paddingLeft !== undefined && (obj.paddingLeft = message.paddingLeft);
        message.lineSpacing !== undefined && (obj.lineSpacing = message.lineSpacing);
        message.lineCount !== undefined && (obj.lineCount = Math.round(message.lineCount));
        message.textWrapping !== undefined && (obj.textWrapping = message.textWrapping);
        message.shadowBlur !== undefined && (obj.shadowBlur = message.shadowBlur);
        message.shadowOffsetX !== undefined && (obj.shadowOffsetX = message.shadowOffsetX);
        message.shadowOffsetY !== undefined && (obj.shadowOffsetY = message.shadowOffsetY);
        message.outlineWidth !== undefined && (obj.outlineWidth = message.outlineWidth);
        message.shadowColor !== undefined &&
            (obj.shadowColor = message.shadowColor ? colors_gen_1.Color3.toJSON(message.shadowColor) : undefined);
        message.outlineColor !== undefined &&
            (obj.outlineColor = message.outlineColor ? colors_gen_1.Color3.toJSON(message.outlineColor) : undefined);
        message.textColor !== undefined &&
            (obj.textColor = message.textColor ? colors_gen_1.Color4.toJSON(message.textColor) : undefined);
        return obj;
    }
    PBTextShape.toJSON = toJSON;
    function create(base) {
        return PBTextShape.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBTextShape.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        const message = createBasePBTextShape();
        message.text = (_a = object.text) !== null && _a !== void 0 ? _a : "";
        message.font = (_b = object.font) !== null && _b !== void 0 ? _b : undefined;
        message.fontSize = (_c = object.fontSize) !== null && _c !== void 0 ? _c : undefined;
        message.fontAutoSize = (_d = object.fontAutoSize) !== null && _d !== void 0 ? _d : undefined;
        message.textAlign = (_e = object.textAlign) !== null && _e !== void 0 ? _e : undefined;
        message.width = (_f = object.width) !== null && _f !== void 0 ? _f : undefined;
        message.height = (_g = object.height) !== null && _g !== void 0 ? _g : undefined;
        message.paddingTop = (_h = object.paddingTop) !== null && _h !== void 0 ? _h : undefined;
        message.paddingRight = (_j = object.paddingRight) !== null && _j !== void 0 ? _j : undefined;
        message.paddingBottom = (_k = object.paddingBottom) !== null && _k !== void 0 ? _k : undefined;
        message.paddingLeft = (_l = object.paddingLeft) !== null && _l !== void 0 ? _l : undefined;
        message.lineSpacing = (_m = object.lineSpacing) !== null && _m !== void 0 ? _m : undefined;
        message.lineCount = (_o = object.lineCount) !== null && _o !== void 0 ? _o : undefined;
        message.textWrapping = (_p = object.textWrapping) !== null && _p !== void 0 ? _p : undefined;
        message.shadowBlur = (_q = object.shadowBlur) !== null && _q !== void 0 ? _q : undefined;
        message.shadowOffsetX = (_r = object.shadowOffsetX) !== null && _r !== void 0 ? _r : undefined;
        message.shadowOffsetY = (_s = object.shadowOffsetY) !== null && _s !== void 0 ? _s : undefined;
        message.outlineWidth = (_t = object.outlineWidth) !== null && _t !== void 0 ? _t : undefined;
        message.shadowColor = (object.shadowColor !== undefined && object.shadowColor !== null)
            ? colors_gen_1.Color3.fromPartial(object.shadowColor)
            : undefined;
        message.outlineColor = (object.outlineColor !== undefined && object.outlineColor !== null)
            ? colors_gen_1.Color3.fromPartial(object.outlineColor)
            : undefined;
        message.textColor = (object.textColor !== undefined && object.textColor !== null)
            ? colors_gen_1.Color4.fromPartial(object.textColor)
            : undefined;
        return message;
    }
    PBTextShape.fromPartial = fromPartial;
})(PBTextShape || (exports.PBTextShape = PBTextShape = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=text_shape.gen.js.map