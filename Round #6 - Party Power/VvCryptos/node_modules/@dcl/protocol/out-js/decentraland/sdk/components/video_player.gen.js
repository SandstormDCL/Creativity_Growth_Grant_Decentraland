"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBVideoPlayer = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.sdk.components";
function createBasePBVideoPlayer() {
    return {
        src: "",
        playing: undefined,
        position: undefined,
        volume: undefined,
        playbackRate: undefined,
        loop: undefined,
    };
}
var PBVideoPlayer;
(function (PBVideoPlayer) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.src !== "") {
            writer.uint32(10).string(message.src);
        }
        if (message.playing !== undefined) {
            writer.uint32(16).bool(message.playing);
        }
        if (message.position !== undefined) {
            writer.uint32(29).float(message.position);
        }
        if (message.volume !== undefined) {
            writer.uint32(37).float(message.volume);
        }
        if (message.playbackRate !== undefined) {
            writer.uint32(45).float(message.playbackRate);
        }
        if (message.loop !== undefined) {
            writer.uint32(48).bool(message.loop);
        }
        return writer;
    }
    PBVideoPlayer.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBVideoPlayer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.src = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.playing = reader.bool();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.position = reader.float();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.volume = reader.float();
                    continue;
                case 5:
                    if (tag !== 45) {
                        break;
                    }
                    message.playbackRate = reader.float();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.loop = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBVideoPlayer.decode = decode;
    function fromJSON(object) {
        return {
            src: isSet(object.src) ? String(object.src) : "",
            playing: isSet(object.playing) ? Boolean(object.playing) : undefined,
            position: isSet(object.position) ? Number(object.position) : undefined,
            volume: isSet(object.volume) ? Number(object.volume) : undefined,
            playbackRate: isSet(object.playbackRate) ? Number(object.playbackRate) : undefined,
            loop: isSet(object.loop) ? Boolean(object.loop) : undefined,
        };
    }
    PBVideoPlayer.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.src !== undefined && (obj.src = message.src);
        message.playing !== undefined && (obj.playing = message.playing);
        message.position !== undefined && (obj.position = message.position);
        message.volume !== undefined && (obj.volume = message.volume);
        message.playbackRate !== undefined && (obj.playbackRate = message.playbackRate);
        message.loop !== undefined && (obj.loop = message.loop);
        return obj;
    }
    PBVideoPlayer.toJSON = toJSON;
    function create(base) {
        return PBVideoPlayer.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBVideoPlayer.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBasePBVideoPlayer();
        message.src = (_a = object.src) !== null && _a !== void 0 ? _a : "";
        message.playing = (_b = object.playing) !== null && _b !== void 0 ? _b : undefined;
        message.position = (_c = object.position) !== null && _c !== void 0 ? _c : undefined;
        message.volume = (_d = object.volume) !== null && _d !== void 0 ? _d : undefined;
        message.playbackRate = (_e = object.playbackRate) !== null && _e !== void 0 ? _e : undefined;
        message.loop = (_f = object.loop) !== null && _f !== void 0 ? _f : undefined;
        return message;
    }
    PBVideoPlayer.fromPartial = fromPartial;
})(PBVideoPlayer || (exports.PBVideoPlayer = PBVideoPlayer = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=video_player.gen.js.map