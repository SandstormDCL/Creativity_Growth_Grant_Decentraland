import _m0 from "protobufjs/minimal";
import { Color4 } from "../../common/colors.gen";
import { Font, TextAlignMode } from "./common/texts.gen";
export declare const protobufPackage = "decentraland.sdk.components";
export interface PBUiInput {
    placeholder: string;
    /** default=(0.0,0.0,0.0,1.0) */
    color?: Color4 | undefined;
    /** default=(0.3,0.3,0.3,1.0) */
    placeholderColor?: Color4 | undefined;
    disabled: boolean;
    /** default='center' */
    textAlign?: TextAlignMode | undefined;
    /** default=0 */
    font?: Font | undefined;
    /** default=10 */
    fontSize?: number | undefined;
    value?: string | undefined;
}
export declare namespace PBUiInput {
    function encode(message: PBUiInput, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBUiInput;
    function fromJSON(object: any): PBUiInput;
    function toJSON(message: PBUiInput): unknown;
    function create<I extends Exact<DeepPartial<PBUiInput>, I>>(base?: I): PBUiInput;
    function fromPartial<I extends Exact<DeepPartial<PBUiInput>, I>>(object: I): PBUiInput;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
