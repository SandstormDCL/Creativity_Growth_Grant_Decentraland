import _m0 from "protobufjs/minimal";
import { InputAction, PointerEventType } from "./common/input_action.gen";
import { RaycastHit } from "./common/raycast_hit.gen";
export declare const protobufPackage = "decentraland.sdk.components";
/** renderer append a new object of this in each command, there can be many commands per frames */
export interface PBPointerEventsResult {
    /** identifier of the input */
    button: InputAction;
    hit: RaycastHit | undefined;
    state: PointerEventType;
    /** monotonic counter */
    timestamp: number;
    /** if the input is analog then we store it here */
    analog?: number | undefined;
    /** number of tick in which the event was produced, equals to EngineInfo.tick_number */
    tickNumber: number;
}
export declare namespace PBPointerEventsResult {
    function encode(message: PBPointerEventsResult, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBPointerEventsResult;
    function fromJSON(object: any): PBPointerEventsResult;
    function toJSON(message: PBPointerEventsResult): unknown;
    function create<I extends Exact<DeepPartial<PBPointerEventsResult>, I>>(base?: I): PBPointerEventsResult;
    function fromPartial<I extends Exact<DeepPartial<PBPointerEventsResult>, I>>(object: I): PBPointerEventsResult;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
