"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBRaycastResult = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const vectors_gen_1 = require("../../common/vectors.gen");
const raycast_hit_gen_1 = require("./common/raycast_hit.gen");
exports.protobufPackage = "decentraland.sdk.components";
function createBasePBRaycastResult() {
    return { timestamp: undefined, globalOrigin: undefined, direction: undefined, hits: [], tickNumber: 0 };
}
var PBRaycastResult;
(function (PBRaycastResult) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.timestamp !== undefined) {
            writer.uint32(8).uint32(message.timestamp);
        }
        if (message.globalOrigin !== undefined) {
            vectors_gen_1.Vector3.encode(message.globalOrigin, writer.uint32(18).fork()).ldelim();
        }
        if (message.direction !== undefined) {
            vectors_gen_1.Vector3.encode(message.direction, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.hits) {
            raycast_hit_gen_1.RaycastHit.encode(v, writer.uint32(34).fork()).ldelim();
        }
        if (message.tickNumber !== 0) {
            writer.uint32(40).uint32(message.tickNumber);
        }
        return writer;
    }
    PBRaycastResult.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBRaycastResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.timestamp = reader.uint32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.globalOrigin = vectors_gen_1.Vector3.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.direction = vectors_gen_1.Vector3.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.hits.push(raycast_hit_gen_1.RaycastHit.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.tickNumber = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBRaycastResult.decode = decode;
    function fromJSON(object) {
        return {
            timestamp: isSet(object.timestamp) ? Number(object.timestamp) : undefined,
            globalOrigin: isSet(object.globalOrigin) ? vectors_gen_1.Vector3.fromJSON(object.globalOrigin) : undefined,
            direction: isSet(object.direction) ? vectors_gen_1.Vector3.fromJSON(object.direction) : undefined,
            hits: Array.isArray(object === null || object === void 0 ? void 0 : object.hits) ? object.hits.map((e) => raycast_hit_gen_1.RaycastHit.fromJSON(e)) : [],
            tickNumber: isSet(object.tickNumber) ? Number(object.tickNumber) : 0,
        };
    }
    PBRaycastResult.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.timestamp !== undefined && (obj.timestamp = Math.round(message.timestamp));
        message.globalOrigin !== undefined &&
            (obj.globalOrigin = message.globalOrigin ? vectors_gen_1.Vector3.toJSON(message.globalOrigin) : undefined);
        message.direction !== undefined &&
            (obj.direction = message.direction ? vectors_gen_1.Vector3.toJSON(message.direction) : undefined);
        if (message.hits) {
            obj.hits = message.hits.map((e) => e ? raycast_hit_gen_1.RaycastHit.toJSON(e) : undefined);
        }
        else {
            obj.hits = [];
        }
        message.tickNumber !== undefined && (obj.tickNumber = Math.round(message.tickNumber));
        return obj;
    }
    PBRaycastResult.toJSON = toJSON;
    function create(base) {
        return PBRaycastResult.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBRaycastResult.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePBRaycastResult();
        message.timestamp = (_a = object.timestamp) !== null && _a !== void 0 ? _a : undefined;
        message.globalOrigin = (object.globalOrigin !== undefined && object.globalOrigin !== null)
            ? vectors_gen_1.Vector3.fromPartial(object.globalOrigin)
            : undefined;
        message.direction = (object.direction !== undefined && object.direction !== null)
            ? vectors_gen_1.Vector3.fromPartial(object.direction)
            : undefined;
        message.hits = ((_b = object.hits) === null || _b === void 0 ? void 0 : _b.map((e) => raycast_hit_gen_1.RaycastHit.fromPartial(e))) || [];
        message.tickNumber = (_c = object.tickNumber) !== null && _c !== void 0 ? _c : 0;
        return message;
    }
    PBRaycastResult.fromPartial = fromPartial;
})(PBRaycastResult || (exports.PBRaycastResult = PBRaycastResult = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=raycast_result.gen.js.map