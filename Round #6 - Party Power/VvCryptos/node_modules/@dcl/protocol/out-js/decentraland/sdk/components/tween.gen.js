"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scale = exports.Rotate = exports.Move = exports.PBTween = exports.EasingFunction = exports.protobufPackage = void 0;
exports.easingFunctionFromJSON = easingFunctionFromJSON;
exports.easingFunctionToJSON = easingFunctionToJSON;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const vectors_gen_1 = require("../../common/vectors.gen");
exports.protobufPackage = "decentraland.sdk.components";
/**
 * Implementation guidelines for these easing functions can be found
 * at https://github.com/ai/easings.net/blob/6fcd5f852a470bf1a7890e8178afa0f471d5f2ec/src/easings/easingsFunctions.ts
 */
var EasingFunction;
(function (EasingFunction) {
    /** EF_LINEAR - default */
    EasingFunction[EasingFunction["EF_LINEAR"] = 0] = "EF_LINEAR";
    EasingFunction[EasingFunction["EF_EASEINQUAD"] = 1] = "EF_EASEINQUAD";
    EasingFunction[EasingFunction["EF_EASEOUTQUAD"] = 2] = "EF_EASEOUTQUAD";
    EasingFunction[EasingFunction["EF_EASEQUAD"] = 3] = "EF_EASEQUAD";
    EasingFunction[EasingFunction["EF_EASEINSINE"] = 4] = "EF_EASEINSINE";
    EasingFunction[EasingFunction["EF_EASEOUTSINE"] = 5] = "EF_EASEOUTSINE";
    EasingFunction[EasingFunction["EF_EASESINE"] = 6] = "EF_EASESINE";
    EasingFunction[EasingFunction["EF_EASEINEXPO"] = 7] = "EF_EASEINEXPO";
    EasingFunction[EasingFunction["EF_EASEOUTEXPO"] = 8] = "EF_EASEOUTEXPO";
    EasingFunction[EasingFunction["EF_EASEEXPO"] = 9] = "EF_EASEEXPO";
    EasingFunction[EasingFunction["EF_EASEINELASTIC"] = 10] = "EF_EASEINELASTIC";
    EasingFunction[EasingFunction["EF_EASEOUTELASTIC"] = 11] = "EF_EASEOUTELASTIC";
    EasingFunction[EasingFunction["EF_EASEELASTIC"] = 12] = "EF_EASEELASTIC";
    EasingFunction[EasingFunction["EF_EASEINBOUNCE"] = 13] = "EF_EASEINBOUNCE";
    EasingFunction[EasingFunction["EF_EASEOUTBOUNCE"] = 14] = "EF_EASEOUTBOUNCE";
    EasingFunction[EasingFunction["EF_EASEBOUNCE"] = 15] = "EF_EASEBOUNCE";
    EasingFunction[EasingFunction["EF_EASEINCUBIC"] = 16] = "EF_EASEINCUBIC";
    EasingFunction[EasingFunction["EF_EASEOUTCUBIC"] = 17] = "EF_EASEOUTCUBIC";
    EasingFunction[EasingFunction["EF_EASECUBIC"] = 18] = "EF_EASECUBIC";
    EasingFunction[EasingFunction["EF_EASEINQUART"] = 19] = "EF_EASEINQUART";
    EasingFunction[EasingFunction["EF_EASEOUTQUART"] = 20] = "EF_EASEOUTQUART";
    EasingFunction[EasingFunction["EF_EASEQUART"] = 21] = "EF_EASEQUART";
    EasingFunction[EasingFunction["EF_EASEINQUINT"] = 22] = "EF_EASEINQUINT";
    EasingFunction[EasingFunction["EF_EASEOUTQUINT"] = 23] = "EF_EASEOUTQUINT";
    EasingFunction[EasingFunction["EF_EASEQUINT"] = 24] = "EF_EASEQUINT";
    EasingFunction[EasingFunction["EF_EASEINCIRC"] = 25] = "EF_EASEINCIRC";
    EasingFunction[EasingFunction["EF_EASEOUTCIRC"] = 26] = "EF_EASEOUTCIRC";
    EasingFunction[EasingFunction["EF_EASECIRC"] = 27] = "EF_EASECIRC";
    EasingFunction[EasingFunction["EF_EASEINBACK"] = 28] = "EF_EASEINBACK";
    EasingFunction[EasingFunction["EF_EASEOUTBACK"] = 29] = "EF_EASEOUTBACK";
    EasingFunction[EasingFunction["EF_EASEBACK"] = 30] = "EF_EASEBACK";
    EasingFunction[EasingFunction["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(EasingFunction || (exports.EasingFunction = EasingFunction = {}));
function easingFunctionFromJSON(object) {
    switch (object) {
        case 0:
        case "EF_LINEAR":
            return EasingFunction.EF_LINEAR;
        case 1:
        case "EF_EASEINQUAD":
            return EasingFunction.EF_EASEINQUAD;
        case 2:
        case "EF_EASEOUTQUAD":
            return EasingFunction.EF_EASEOUTQUAD;
        case 3:
        case "EF_EASEQUAD":
            return EasingFunction.EF_EASEQUAD;
        case 4:
        case "EF_EASEINSINE":
            return EasingFunction.EF_EASEINSINE;
        case 5:
        case "EF_EASEOUTSINE":
            return EasingFunction.EF_EASEOUTSINE;
        case 6:
        case "EF_EASESINE":
            return EasingFunction.EF_EASESINE;
        case 7:
        case "EF_EASEINEXPO":
            return EasingFunction.EF_EASEINEXPO;
        case 8:
        case "EF_EASEOUTEXPO":
            return EasingFunction.EF_EASEOUTEXPO;
        case 9:
        case "EF_EASEEXPO":
            return EasingFunction.EF_EASEEXPO;
        case 10:
        case "EF_EASEINELASTIC":
            return EasingFunction.EF_EASEINELASTIC;
        case 11:
        case "EF_EASEOUTELASTIC":
            return EasingFunction.EF_EASEOUTELASTIC;
        case 12:
        case "EF_EASEELASTIC":
            return EasingFunction.EF_EASEELASTIC;
        case 13:
        case "EF_EASEINBOUNCE":
            return EasingFunction.EF_EASEINBOUNCE;
        case 14:
        case "EF_EASEOUTBOUNCE":
            return EasingFunction.EF_EASEOUTBOUNCE;
        case 15:
        case "EF_EASEBOUNCE":
            return EasingFunction.EF_EASEBOUNCE;
        case 16:
        case "EF_EASEINCUBIC":
            return EasingFunction.EF_EASEINCUBIC;
        case 17:
        case "EF_EASEOUTCUBIC":
            return EasingFunction.EF_EASEOUTCUBIC;
        case 18:
        case "EF_EASECUBIC":
            return EasingFunction.EF_EASECUBIC;
        case 19:
        case "EF_EASEINQUART":
            return EasingFunction.EF_EASEINQUART;
        case 20:
        case "EF_EASEOUTQUART":
            return EasingFunction.EF_EASEOUTQUART;
        case 21:
        case "EF_EASEQUART":
            return EasingFunction.EF_EASEQUART;
        case 22:
        case "EF_EASEINQUINT":
            return EasingFunction.EF_EASEINQUINT;
        case 23:
        case "EF_EASEOUTQUINT":
            return EasingFunction.EF_EASEOUTQUINT;
        case 24:
        case "EF_EASEQUINT":
            return EasingFunction.EF_EASEQUINT;
        case 25:
        case "EF_EASEINCIRC":
            return EasingFunction.EF_EASEINCIRC;
        case 26:
        case "EF_EASEOUTCIRC":
            return EasingFunction.EF_EASEOUTCIRC;
        case 27:
        case "EF_EASECIRC":
            return EasingFunction.EF_EASECIRC;
        case 28:
        case "EF_EASEINBACK":
            return EasingFunction.EF_EASEINBACK;
        case 29:
        case "EF_EASEOUTBACK":
            return EasingFunction.EF_EASEOUTBACK;
        case 30:
        case "EF_EASEBACK":
            return EasingFunction.EF_EASEBACK;
        case -1:
        case "UNRECOGNIZED":
        default:
            return EasingFunction.UNRECOGNIZED;
    }
}
function easingFunctionToJSON(object) {
    switch (object) {
        case EasingFunction.EF_LINEAR:
            return "EF_LINEAR";
        case EasingFunction.EF_EASEINQUAD:
            return "EF_EASEINQUAD";
        case EasingFunction.EF_EASEOUTQUAD:
            return "EF_EASEOUTQUAD";
        case EasingFunction.EF_EASEQUAD:
            return "EF_EASEQUAD";
        case EasingFunction.EF_EASEINSINE:
            return "EF_EASEINSINE";
        case EasingFunction.EF_EASEOUTSINE:
            return "EF_EASEOUTSINE";
        case EasingFunction.EF_EASESINE:
            return "EF_EASESINE";
        case EasingFunction.EF_EASEINEXPO:
            return "EF_EASEINEXPO";
        case EasingFunction.EF_EASEOUTEXPO:
            return "EF_EASEOUTEXPO";
        case EasingFunction.EF_EASEEXPO:
            return "EF_EASEEXPO";
        case EasingFunction.EF_EASEINELASTIC:
            return "EF_EASEINELASTIC";
        case EasingFunction.EF_EASEOUTELASTIC:
            return "EF_EASEOUTELASTIC";
        case EasingFunction.EF_EASEELASTIC:
            return "EF_EASEELASTIC";
        case EasingFunction.EF_EASEINBOUNCE:
            return "EF_EASEINBOUNCE";
        case EasingFunction.EF_EASEOUTBOUNCE:
            return "EF_EASEOUTBOUNCE";
        case EasingFunction.EF_EASEBOUNCE:
            return "EF_EASEBOUNCE";
        case EasingFunction.EF_EASEINCUBIC:
            return "EF_EASEINCUBIC";
        case EasingFunction.EF_EASEOUTCUBIC:
            return "EF_EASEOUTCUBIC";
        case EasingFunction.EF_EASECUBIC:
            return "EF_EASECUBIC";
        case EasingFunction.EF_EASEINQUART:
            return "EF_EASEINQUART";
        case EasingFunction.EF_EASEOUTQUART:
            return "EF_EASEOUTQUART";
        case EasingFunction.EF_EASEQUART:
            return "EF_EASEQUART";
        case EasingFunction.EF_EASEINQUINT:
            return "EF_EASEINQUINT";
        case EasingFunction.EF_EASEOUTQUINT:
            return "EF_EASEOUTQUINT";
        case EasingFunction.EF_EASEQUINT:
            return "EF_EASEQUINT";
        case EasingFunction.EF_EASEINCIRC:
            return "EF_EASEINCIRC";
        case EasingFunction.EF_EASEOUTCIRC:
            return "EF_EASEOUTCIRC";
        case EasingFunction.EF_EASECIRC:
            return "EF_EASECIRC";
        case EasingFunction.EF_EASEINBACK:
            return "EF_EASEINBACK";
        case EasingFunction.EF_EASEOUTBACK:
            return "EF_EASEOUTBACK";
        case EasingFunction.EF_EASEBACK:
            return "EF_EASEBACK";
        case EasingFunction.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBasePBTween() {
    return { duration: 0, easingFunction: 0, mode: undefined, playing: undefined, currentTime: undefined };
}
var PBTween;
(function (PBTween) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        if (message.duration !== 0) {
            writer.uint32(13).float(message.duration);
        }
        if (message.easingFunction !== 0) {
            writer.uint32(16).int32(message.easingFunction);
        }
        switch ((_a = message.mode) === null || _a === void 0 ? void 0 : _a.$case) {
            case "move":
                Move.encode(message.mode.move, writer.uint32(26).fork()).ldelim();
                break;
            case "rotate":
                Rotate.encode(message.mode.rotate, writer.uint32(34).fork()).ldelim();
                break;
            case "scale":
                Scale.encode(message.mode.scale, writer.uint32(42).fork()).ldelim();
                break;
        }
        if (message.playing !== undefined) {
            writer.uint32(48).bool(message.playing);
        }
        if (message.currentTime !== undefined) {
            writer.uint32(61).float(message.currentTime);
        }
        return writer;
    }
    PBTween.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBTween();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.duration = reader.float();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.easingFunction = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.mode = { $case: "move", move: Move.decode(reader, reader.uint32()) };
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.mode = { $case: "rotate", rotate: Rotate.decode(reader, reader.uint32()) };
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.mode = { $case: "scale", scale: Scale.decode(reader, reader.uint32()) };
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.playing = reader.bool();
                    continue;
                case 7:
                    if (tag !== 61) {
                        break;
                    }
                    message.currentTime = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBTween.decode = decode;
    function fromJSON(object) {
        return {
            duration: isSet(object.duration) ? Number(object.duration) : 0,
            easingFunction: isSet(object.easingFunction) ? easingFunctionFromJSON(object.easingFunction) : 0,
            mode: isSet(object.move)
                ? { $case: "move", move: Move.fromJSON(object.move) }
                : isSet(object.rotate)
                    ? { $case: "rotate", rotate: Rotate.fromJSON(object.rotate) }
                    : isSet(object.scale)
                        ? { $case: "scale", scale: Scale.fromJSON(object.scale) }
                        : undefined,
            playing: isSet(object.playing) ? Boolean(object.playing) : undefined,
            currentTime: isSet(object.currentTime) ? Number(object.currentTime) : undefined,
        };
    }
    PBTween.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const obj = {};
        message.duration !== undefined && (obj.duration = message.duration);
        message.easingFunction !== undefined && (obj.easingFunction = easingFunctionToJSON(message.easingFunction));
        ((_a = message.mode) === null || _a === void 0 ? void 0 : _a.$case) === "move" && (obj.move = ((_b = message.mode) === null || _b === void 0 ? void 0 : _b.move) ? Move.toJSON((_c = message.mode) === null || _c === void 0 ? void 0 : _c.move) : undefined);
        ((_d = message.mode) === null || _d === void 0 ? void 0 : _d.$case) === "rotate" &&
            (obj.rotate = ((_e = message.mode) === null || _e === void 0 ? void 0 : _e.rotate) ? Rotate.toJSON((_f = message.mode) === null || _f === void 0 ? void 0 : _f.rotate) : undefined);
        ((_g = message.mode) === null || _g === void 0 ? void 0 : _g.$case) === "scale" &&
            (obj.scale = ((_h = message.mode) === null || _h === void 0 ? void 0 : _h.scale) ? Scale.toJSON((_j = message.mode) === null || _j === void 0 ? void 0 : _j.scale) : undefined);
        message.playing !== undefined && (obj.playing = message.playing);
        message.currentTime !== undefined && (obj.currentTime = message.currentTime);
        return obj;
    }
    PBTween.toJSON = toJSON;
    function create(base) {
        return PBTween.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBTween.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBasePBTween();
        message.duration = (_a = object.duration) !== null && _a !== void 0 ? _a : 0;
        message.easingFunction = (_b = object.easingFunction) !== null && _b !== void 0 ? _b : 0;
        if (((_c = object.mode) === null || _c === void 0 ? void 0 : _c.$case) === "move" && ((_d = object.mode) === null || _d === void 0 ? void 0 : _d.move) !== undefined && ((_e = object.mode) === null || _e === void 0 ? void 0 : _e.move) !== null) {
            message.mode = { $case: "move", move: Move.fromPartial(object.mode.move) };
        }
        if (((_f = object.mode) === null || _f === void 0 ? void 0 : _f.$case) === "rotate" && ((_g = object.mode) === null || _g === void 0 ? void 0 : _g.rotate) !== undefined && ((_h = object.mode) === null || _h === void 0 ? void 0 : _h.rotate) !== null) {
            message.mode = { $case: "rotate", rotate: Rotate.fromPartial(object.mode.rotate) };
        }
        if (((_j = object.mode) === null || _j === void 0 ? void 0 : _j.$case) === "scale" && ((_k = object.mode) === null || _k === void 0 ? void 0 : _k.scale) !== undefined && ((_l = object.mode) === null || _l === void 0 ? void 0 : _l.scale) !== null) {
            message.mode = { $case: "scale", scale: Scale.fromPartial(object.mode.scale) };
        }
        message.playing = (_m = object.playing) !== null && _m !== void 0 ? _m : undefined;
        message.currentTime = (_o = object.currentTime) !== null && _o !== void 0 ? _o : undefined;
        return message;
    }
    PBTween.fromPartial = fromPartial;
})(PBTween || (exports.PBTween = PBTween = {}));
function createBaseMove() {
    return { start: undefined, end: undefined, faceDirection: undefined };
}
var Move;
(function (Move) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.start !== undefined) {
            vectors_gen_1.Vector3.encode(message.start, writer.uint32(10).fork()).ldelim();
        }
        if (message.end !== undefined) {
            vectors_gen_1.Vector3.encode(message.end, writer.uint32(18).fork()).ldelim();
        }
        if (message.faceDirection !== undefined) {
            writer.uint32(24).bool(message.faceDirection);
        }
        return writer;
    }
    Move.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMove();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.start = vectors_gen_1.Vector3.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.end = vectors_gen_1.Vector3.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.faceDirection = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Move.decode = decode;
    function fromJSON(object) {
        return {
            start: isSet(object.start) ? vectors_gen_1.Vector3.fromJSON(object.start) : undefined,
            end: isSet(object.end) ? vectors_gen_1.Vector3.fromJSON(object.end) : undefined,
            faceDirection: isSet(object.faceDirection) ? Boolean(object.faceDirection) : undefined,
        };
    }
    Move.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.start !== undefined && (obj.start = message.start ? vectors_gen_1.Vector3.toJSON(message.start) : undefined);
        message.end !== undefined && (obj.end = message.end ? vectors_gen_1.Vector3.toJSON(message.end) : undefined);
        message.faceDirection !== undefined && (obj.faceDirection = message.faceDirection);
        return obj;
    }
    Move.toJSON = toJSON;
    function create(base) {
        return Move.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Move.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseMove();
        message.start = (object.start !== undefined && object.start !== null)
            ? vectors_gen_1.Vector3.fromPartial(object.start)
            : undefined;
        message.end = (object.end !== undefined && object.end !== null) ? vectors_gen_1.Vector3.fromPartial(object.end) : undefined;
        message.faceDirection = (_a = object.faceDirection) !== null && _a !== void 0 ? _a : undefined;
        return message;
    }
    Move.fromPartial = fromPartial;
})(Move || (exports.Move = Move = {}));
function createBaseRotate() {
    return { start: undefined, end: undefined };
}
var Rotate;
(function (Rotate) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.start !== undefined) {
            vectors_gen_1.Quaternion.encode(message.start, writer.uint32(10).fork()).ldelim();
        }
        if (message.end !== undefined) {
            vectors_gen_1.Quaternion.encode(message.end, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    Rotate.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRotate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.start = vectors_gen_1.Quaternion.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.end = vectors_gen_1.Quaternion.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Rotate.decode = decode;
    function fromJSON(object) {
        return {
            start: isSet(object.start) ? vectors_gen_1.Quaternion.fromJSON(object.start) : undefined,
            end: isSet(object.end) ? vectors_gen_1.Quaternion.fromJSON(object.end) : undefined,
        };
    }
    Rotate.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.start !== undefined && (obj.start = message.start ? vectors_gen_1.Quaternion.toJSON(message.start) : undefined);
        message.end !== undefined && (obj.end = message.end ? vectors_gen_1.Quaternion.toJSON(message.end) : undefined);
        return obj;
    }
    Rotate.toJSON = toJSON;
    function create(base) {
        return Rotate.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Rotate.create = create;
    function fromPartial(object) {
        const message = createBaseRotate();
        message.start = (object.start !== undefined && object.start !== null)
            ? vectors_gen_1.Quaternion.fromPartial(object.start)
            : undefined;
        message.end = (object.end !== undefined && object.end !== null) ? vectors_gen_1.Quaternion.fromPartial(object.end) : undefined;
        return message;
    }
    Rotate.fromPartial = fromPartial;
})(Rotate || (exports.Rotate = Rotate = {}));
function createBaseScale() {
    return { start: undefined, end: undefined };
}
var Scale;
(function (Scale) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.start !== undefined) {
            vectors_gen_1.Vector3.encode(message.start, writer.uint32(10).fork()).ldelim();
        }
        if (message.end !== undefined) {
            vectors_gen_1.Vector3.encode(message.end, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    Scale.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseScale();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.start = vectors_gen_1.Vector3.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.end = vectors_gen_1.Vector3.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Scale.decode = decode;
    function fromJSON(object) {
        return {
            start: isSet(object.start) ? vectors_gen_1.Vector3.fromJSON(object.start) : undefined,
            end: isSet(object.end) ? vectors_gen_1.Vector3.fromJSON(object.end) : undefined,
        };
    }
    Scale.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.start !== undefined && (obj.start = message.start ? vectors_gen_1.Vector3.toJSON(message.start) : undefined);
        message.end !== undefined && (obj.end = message.end ? vectors_gen_1.Vector3.toJSON(message.end) : undefined);
        return obj;
    }
    Scale.toJSON = toJSON;
    function create(base) {
        return Scale.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Scale.create = create;
    function fromPartial(object) {
        const message = createBaseScale();
        message.start = (object.start !== undefined && object.start !== null)
            ? vectors_gen_1.Vector3.fromPartial(object.start)
            : undefined;
        message.end = (object.end !== undefined && object.end !== null) ? vectors_gen_1.Vector3.fromPartial(object.end) : undefined;
        return message;
    }
    Scale.fromPartial = fromPartial;
})(Scale || (exports.Scale = Scale = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=tween.gen.js.map