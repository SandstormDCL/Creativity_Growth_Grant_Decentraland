import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.sdk.components";
/**
 * BillboardMode indicates one or more axis for automatic rotation, in OR-able bit flag form.
 * Only the values below and the (BM_X | BM_Y) combination are valid.
 */
export declare enum BillboardMode {
    BM_NONE = 0,
    BM_X = 1,
    BM_Y = 2,
    BM_Z = 4,
    /** BM_ALL - bitwise combination BM_X | BM_Y | BM_Z */
    BM_ALL = 7,
    UNRECOGNIZED = -1
}
export declare function billboardModeFromJSON(object: any): BillboardMode;
export declare function billboardModeToJSON(object: BillboardMode): string;
/**
 * The Billboard component makes an Entity automatically reorient its rotation to face the camera.
 * As the name indicates, itâ€™s used to display in-game billboards and frequently combined with
 * the TextShape component.
 *
 * Billboard only affects the Entity's rotation. Its scale and position are still determined by its
 * Transform.
 */
export interface PBBillboard {
    /** the BillboardMode (default: BM_ALL) */
    billboardMode?: BillboardMode | undefined;
}
export declare namespace PBBillboard {
    function encode(message: PBBillboard, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBBillboard;
    function fromJSON(object: any): PBBillboard;
    function toJSON(message: PBBillboard): unknown;
    function create<I extends Exact<DeepPartial<PBBillboard>, I>>(base?: I): PBBillboard;
    function fromPartial<I extends Exact<DeepPartial<PBBillboard>, I>>(object: I): PBBillboard;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
