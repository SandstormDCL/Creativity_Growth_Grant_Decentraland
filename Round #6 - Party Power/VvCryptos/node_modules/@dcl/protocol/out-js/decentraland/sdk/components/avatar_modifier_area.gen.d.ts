import _m0 from "protobufjs/minimal";
import { Vector3 } from "../../common/vectors.gen";
export declare const protobufPackage = "decentraland.sdk.components";
/** AvatarModifierType is an effect that should be applied to avatars inside the region. */
export declare enum AvatarModifierType {
    /** AMT_HIDE_AVATARS - avatars are invisible */
    AMT_HIDE_AVATARS = 0,
    /** AMT_DISABLE_PASSPORTS - selecting (e.g. clicking) an avatar will not bring up their profile. */
    AMT_DISABLE_PASSPORTS = 1,
    UNRECOGNIZED = -1
}
export declare function avatarModifierTypeFromJSON(object: any): AvatarModifierType;
export declare function avatarModifierTypeToJSON(object: AvatarModifierType): string;
/**
 * The AvatarModifierArea component can be attached to an Entity to define a region of space where
 * avatar behavior changes.
 *
 * The Entity's Transform position determines the center-point of the region, while its size is
 * given as a vector in the `area` property below. The Transform rotation is applied, but the scale
 * is ignored.
 *
 * The modifier effect is only applied to avatars inside the region. It does not affect how players
 * standing inside it see avatars on the other side of the boundary.
 *
 * Note that, while commonly used to delineate a 2D area in a scene (hence the name), the region
 * is actually a 3D volume.
 */
export interface PBAvatarModifierArea {
    /** the 3D size of the region */
    area: Vector3 | undefined;
    /** user IDs that can enter and remain unaffected */
    excludeIds: string[];
    /** list of modifiers to apply */
    modifiers: AvatarModifierType[];
}
export declare namespace PBAvatarModifierArea {
    function encode(message: PBAvatarModifierArea, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBAvatarModifierArea;
    function fromJSON(object: any): PBAvatarModifierArea;
    function toJSON(message: PBAvatarModifierArea): unknown;
    function create<I extends Exact<DeepPartial<PBAvatarModifierArea>, I>>(base?: I): PBAvatarModifierArea;
    function fromPartial<I extends Exact<DeepPartial<PBAvatarModifierArea>, I>>(object: I): PBAvatarModifierArea;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
