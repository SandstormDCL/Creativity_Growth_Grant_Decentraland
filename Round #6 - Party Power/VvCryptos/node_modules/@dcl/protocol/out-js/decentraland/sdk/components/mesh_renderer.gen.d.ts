import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.sdk.components";
/**
 * The MeshRenderer component renders a basic geometric shape for an Entity. It can be a cube, a
 * plane, a sphere or a cylinder.
 *
 * The cube and plane variants can include a UV texture mapping, so specific areas of a material
 * texture are rendered on different faces of the shape. They are serialized as a sequence of 2D
 * `float` coordinates, one for each corner of each side of each face.
 *
 * More complex shapes require the use of a `GltfContainer` component.
 */
export interface PBMeshRenderer {
    mesh?: {
        $case: "box";
        box: PBMeshRenderer_BoxMesh;
    } | {
        $case: "sphere";
        sphere: PBMeshRenderer_SphereMesh;
    } | {
        $case: "cylinder";
        cylinder: PBMeshRenderer_CylinderMesh;
    } | {
        $case: "plane";
        plane: PBMeshRenderer_PlaneMesh;
    } | undefined;
}
/** BoxMesh renders a prism shape. */
export interface PBMeshRenderer_BoxMesh {
    /** 96-value texture map (2D * 6 faces * 2 sides * 4 vertices) */
    uvs: number[];
}
/** CylinderMesh renders a truncated cone shape. */
export interface PBMeshRenderer_CylinderMesh {
    /** (default 0.5) */
    radiusTop?: number | undefined;
    /** (default 0.5) */
    radiusBottom?: number | undefined;
}
/** PlaneMesh renders a 2D rectangular shape. */
export interface PBMeshRenderer_PlaneMesh {
    /** 16-value texture map (2D * 1 face * 2 sides * 4 vertices) */
    uvs: number[];
}
/** SphereMesh renders a spherical shape. */
export interface PBMeshRenderer_SphereMesh {
}
export declare namespace PBMeshRenderer {
    function encode(message: PBMeshRenderer, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBMeshRenderer;
    function fromJSON(object: any): PBMeshRenderer;
    function toJSON(message: PBMeshRenderer): unknown;
    function create<I extends Exact<DeepPartial<PBMeshRenderer>, I>>(base?: I): PBMeshRenderer;
    function fromPartial<I extends Exact<DeepPartial<PBMeshRenderer>, I>>(object: I): PBMeshRenderer;
}
export declare namespace PBMeshRenderer_BoxMesh {
    function encode(message: PBMeshRenderer_BoxMesh, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBMeshRenderer_BoxMesh;
    function fromJSON(object: any): PBMeshRenderer_BoxMesh;
    function toJSON(message: PBMeshRenderer_BoxMesh): unknown;
    function create<I extends Exact<DeepPartial<PBMeshRenderer_BoxMesh>, I>>(base?: I): PBMeshRenderer_BoxMesh;
    function fromPartial<I extends Exact<DeepPartial<PBMeshRenderer_BoxMesh>, I>>(object: I): PBMeshRenderer_BoxMesh;
}
export declare namespace PBMeshRenderer_CylinderMesh {
    function encode(message: PBMeshRenderer_CylinderMesh, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBMeshRenderer_CylinderMesh;
    function fromJSON(object: any): PBMeshRenderer_CylinderMesh;
    function toJSON(message: PBMeshRenderer_CylinderMesh): unknown;
    function create<I extends Exact<DeepPartial<PBMeshRenderer_CylinderMesh>, I>>(base?: I): PBMeshRenderer_CylinderMesh;
    function fromPartial<I extends Exact<DeepPartial<PBMeshRenderer_CylinderMesh>, I>>(object: I): PBMeshRenderer_CylinderMesh;
}
export declare namespace PBMeshRenderer_PlaneMesh {
    function encode(message: PBMeshRenderer_PlaneMesh, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBMeshRenderer_PlaneMesh;
    function fromJSON(object: any): PBMeshRenderer_PlaneMesh;
    function toJSON(message: PBMeshRenderer_PlaneMesh): unknown;
    function create<I extends Exact<DeepPartial<PBMeshRenderer_PlaneMesh>, I>>(base?: I): PBMeshRenderer_PlaneMesh;
    function fromPartial<I extends Exact<DeepPartial<PBMeshRenderer_PlaneMesh>, I>>(object: I): PBMeshRenderer_PlaneMesh;
}
export declare namespace PBMeshRenderer_SphereMesh {
    function encode(_: PBMeshRenderer_SphereMesh, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBMeshRenderer_SphereMesh;
    function fromJSON(_: any): PBMeshRenderer_SphereMesh;
    function toJSON(_: PBMeshRenderer_SphereMesh): unknown;
    function create<I extends Exact<DeepPartial<PBMeshRenderer_SphereMesh>, I>>(base?: I): PBMeshRenderer_SphereMesh;
    function fromPartial<I extends Exact<DeepPartial<PBMeshRenderer_SphereMesh>, I>>(_: I): PBMeshRenderer_SphereMesh;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
