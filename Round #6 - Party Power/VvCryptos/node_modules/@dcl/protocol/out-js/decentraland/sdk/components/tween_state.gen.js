"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBTweenState = exports.TweenStateStatus = exports.protobufPackage = void 0;
exports.tweenStateStatusFromJSON = tweenStateStatusFromJSON;
exports.tweenStateStatusToJSON = tweenStateStatusToJSON;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.sdk.components";
var TweenStateStatus;
(function (TweenStateStatus) {
    TweenStateStatus[TweenStateStatus["TS_ACTIVE"] = 0] = "TS_ACTIVE";
    TweenStateStatus[TweenStateStatus["TS_COMPLETED"] = 1] = "TS_COMPLETED";
    TweenStateStatus[TweenStateStatus["TS_PAUSED"] = 2] = "TS_PAUSED";
    TweenStateStatus[TweenStateStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(TweenStateStatus || (exports.TweenStateStatus = TweenStateStatus = {}));
function tweenStateStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "TS_ACTIVE":
            return TweenStateStatus.TS_ACTIVE;
        case 1:
        case "TS_COMPLETED":
            return TweenStateStatus.TS_COMPLETED;
        case 2:
        case "TS_PAUSED":
            return TweenStateStatus.TS_PAUSED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return TweenStateStatus.UNRECOGNIZED;
    }
}
function tweenStateStatusToJSON(object) {
    switch (object) {
        case TweenStateStatus.TS_ACTIVE:
            return "TS_ACTIVE";
        case TweenStateStatus.TS_COMPLETED:
            return "TS_COMPLETED";
        case TweenStateStatus.TS_PAUSED:
            return "TS_PAUSED";
        case TweenStateStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBasePBTweenState() {
    return { state: 0, currentTime: 0 };
}
var PBTweenState;
(function (PBTweenState) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.state !== 0) {
            writer.uint32(8).int32(message.state);
        }
        if (message.currentTime !== 0) {
            writer.uint32(21).float(message.currentTime);
        }
        return writer;
    }
    PBTweenState.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBTweenState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.currentTime = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBTweenState.decode = decode;
    function fromJSON(object) {
        return {
            state: isSet(object.state) ? tweenStateStatusFromJSON(object.state) : 0,
            currentTime: isSet(object.currentTime) ? Number(object.currentTime) : 0,
        };
    }
    PBTweenState.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.state !== undefined && (obj.state = tweenStateStatusToJSON(message.state));
        message.currentTime !== undefined && (obj.currentTime = message.currentTime);
        return obj;
    }
    PBTweenState.toJSON = toJSON;
    function create(base) {
        return PBTweenState.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBTweenState.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBasePBTweenState();
        message.state = (_a = object.state) !== null && _a !== void 0 ? _a : 0;
        message.currentTime = (_b = object.currentTime) !== null && _b !== void 0 ? _b : 0;
        return message;
    }
    PBTweenState.fromPartial = fromPartial;
})(PBTweenState || (exports.PBTweenState = PBTweenState = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=tween_state.gen.js.map