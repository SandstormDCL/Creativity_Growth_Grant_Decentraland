"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBAvatarBase = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const colors_gen_1 = require("../../common/colors.gen");
exports.protobufPackage = "decentraland.sdk.components";
function createBasePBAvatarBase() {
    return { skinColor: undefined, eyesColor: undefined, hairColor: undefined, bodyShapeUrn: "", name: "" };
}
var PBAvatarBase;
(function (PBAvatarBase) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.skinColor !== undefined) {
            colors_gen_1.Color3.encode(message.skinColor, writer.uint32(10).fork()).ldelim();
        }
        if (message.eyesColor !== undefined) {
            colors_gen_1.Color3.encode(message.eyesColor, writer.uint32(18).fork()).ldelim();
        }
        if (message.hairColor !== undefined) {
            colors_gen_1.Color3.encode(message.hairColor, writer.uint32(26).fork()).ldelim();
        }
        if (message.bodyShapeUrn !== "") {
            writer.uint32(34).string(message.bodyShapeUrn);
        }
        if (message.name !== "") {
            writer.uint32(42).string(message.name);
        }
        return writer;
    }
    PBAvatarBase.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBAvatarBase();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.skinColor = colors_gen_1.Color3.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.eyesColor = colors_gen_1.Color3.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.hairColor = colors_gen_1.Color3.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.bodyShapeUrn = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBAvatarBase.decode = decode;
    function fromJSON(object) {
        return {
            skinColor: isSet(object.skinColor) ? colors_gen_1.Color3.fromJSON(object.skinColor) : undefined,
            eyesColor: isSet(object.eyesColor) ? colors_gen_1.Color3.fromJSON(object.eyesColor) : undefined,
            hairColor: isSet(object.hairColor) ? colors_gen_1.Color3.fromJSON(object.hairColor) : undefined,
            bodyShapeUrn: isSet(object.bodyShapeUrn) ? String(object.bodyShapeUrn) : "",
            name: isSet(object.name) ? String(object.name) : "",
        };
    }
    PBAvatarBase.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.skinColor !== undefined &&
            (obj.skinColor = message.skinColor ? colors_gen_1.Color3.toJSON(message.skinColor) : undefined);
        message.eyesColor !== undefined &&
            (obj.eyesColor = message.eyesColor ? colors_gen_1.Color3.toJSON(message.eyesColor) : undefined);
        message.hairColor !== undefined &&
            (obj.hairColor = message.hairColor ? colors_gen_1.Color3.toJSON(message.hairColor) : undefined);
        message.bodyShapeUrn !== undefined && (obj.bodyShapeUrn = message.bodyShapeUrn);
        message.name !== undefined && (obj.name = message.name);
        return obj;
    }
    PBAvatarBase.toJSON = toJSON;
    function create(base) {
        return PBAvatarBase.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBAvatarBase.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBasePBAvatarBase();
        message.skinColor = (object.skinColor !== undefined && object.skinColor !== null)
            ? colors_gen_1.Color3.fromPartial(object.skinColor)
            : undefined;
        message.eyesColor = (object.eyesColor !== undefined && object.eyesColor !== null)
            ? colors_gen_1.Color3.fromPartial(object.eyesColor)
            : undefined;
        message.hairColor = (object.hairColor !== undefined && object.hairColor !== null)
            ? colors_gen_1.Color3.fromPartial(object.hairColor)
            : undefined;
        message.bodyShapeUrn = (_a = object.bodyShapeUrn) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        return message;
    }
    PBAvatarBase.fromPartial = fromPartial;
})(PBAvatarBase || (exports.PBAvatarBase = PBAvatarBase = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=avatar_base.gen.js.map