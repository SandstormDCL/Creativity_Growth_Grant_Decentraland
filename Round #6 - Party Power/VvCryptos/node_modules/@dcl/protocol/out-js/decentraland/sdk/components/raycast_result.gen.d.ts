import _m0 from "protobufjs/minimal";
import { Vector3 } from "../../common/vectors.gen";
import { RaycastHit } from "./common/raycast_hit.gen";
export declare const protobufPackage = "decentraland.sdk.components";
/**
 * The PBRaycast component and PBRaycastResult are defined in https://adr.decentraland.org/adr/ADR-200
 *
 * The RaycastResult component is added to an Entity when the results of a previously attached
 * Raycast component are available. It contains information about the ray and any objects it
 * collided with.
 */
export interface PBRaycastResult {
    /** timestamp is a correlation id, copied from the PBRaycast */
    timestamp?: number | undefined;
    /** the starting point of the ray in global coordinates */
    globalOrigin: Vector3 | undefined;
    /** the direction vector of the ray in global coordinates */
    direction: Vector3 | undefined;
    /** zero or more hits */
    hits: RaycastHit[];
    /** number of tick in which the event was produced, equals to EngineInfo.tick_number */
    tickNumber: number;
}
export declare namespace PBRaycastResult {
    function encode(message: PBRaycastResult, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBRaycastResult;
    function fromJSON(object: any): PBRaycastResult;
    function toJSON(message: PBRaycastResult): unknown;
    function create<I extends Exact<DeepPartial<PBRaycastResult>, I>>(base?: I): PBRaycastResult;
    function fromPartial<I extends Exact<DeepPartial<PBRaycastResult>, I>>(object: I): PBRaycastResult;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
