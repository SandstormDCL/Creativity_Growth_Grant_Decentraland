"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBGltfContainer = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.sdk.components";
function createBasePBGltfContainer() {
    return { src: "", visibleMeshesCollisionMask: undefined, invisibleMeshesCollisionMask: undefined };
}
var PBGltfContainer;
(function (PBGltfContainer) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.src !== "") {
            writer.uint32(10).string(message.src);
        }
        if (message.visibleMeshesCollisionMask !== undefined) {
            writer.uint32(32).uint32(message.visibleMeshesCollisionMask);
        }
        if (message.invisibleMeshesCollisionMask !== undefined) {
            writer.uint32(40).uint32(message.invisibleMeshesCollisionMask);
        }
        return writer;
    }
    PBGltfContainer.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBGltfContainer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.src = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.visibleMeshesCollisionMask = reader.uint32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.invisibleMeshesCollisionMask = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBGltfContainer.decode = decode;
    function fromJSON(object) {
        return {
            src: isSet(object.src) ? String(object.src) : "",
            visibleMeshesCollisionMask: isSet(object.visibleMeshesCollisionMask)
                ? Number(object.visibleMeshesCollisionMask)
                : undefined,
            invisibleMeshesCollisionMask: isSet(object.invisibleMeshesCollisionMask)
                ? Number(object.invisibleMeshesCollisionMask)
                : undefined,
        };
    }
    PBGltfContainer.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.src !== undefined && (obj.src = message.src);
        message.visibleMeshesCollisionMask !== undefined &&
            (obj.visibleMeshesCollisionMask = Math.round(message.visibleMeshesCollisionMask));
        message.invisibleMeshesCollisionMask !== undefined &&
            (obj.invisibleMeshesCollisionMask = Math.round(message.invisibleMeshesCollisionMask));
        return obj;
    }
    PBGltfContainer.toJSON = toJSON;
    function create(base) {
        return PBGltfContainer.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBGltfContainer.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePBGltfContainer();
        message.src = (_a = object.src) !== null && _a !== void 0 ? _a : "";
        message.visibleMeshesCollisionMask = (_b = object.visibleMeshesCollisionMask) !== null && _b !== void 0 ? _b : undefined;
        message.invisibleMeshesCollisionMask = (_c = object.invisibleMeshesCollisionMask) !== null && _c !== void 0 ? _c : undefined;
        return message;
    }
    PBGltfContainer.fromPartial = fromPartial;
})(PBGltfContainer || (exports.PBGltfContainer = PBGltfContainer = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=gltf_container.gen.js.map