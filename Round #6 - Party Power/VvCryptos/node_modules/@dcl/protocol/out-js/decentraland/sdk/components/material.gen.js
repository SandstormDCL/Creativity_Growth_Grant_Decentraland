"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBMaterial_PbrMaterial = exports.PBMaterial_UnlitMaterial = exports.PBMaterial = exports.MaterialTransparencyMode = exports.protobufPackage = void 0;
exports.materialTransparencyModeFromJSON = materialTransparencyModeFromJSON;
exports.materialTransparencyModeToJSON = materialTransparencyModeToJSON;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const colors_gen_1 = require("../../common/colors.gen");
const texture_gen_1 = require("../../common/texture.gen");
exports.protobufPackage = "decentraland.sdk.components";
var MaterialTransparencyMode;
(function (MaterialTransparencyMode) {
    MaterialTransparencyMode[MaterialTransparencyMode["MTM_OPAQUE"] = 0] = "MTM_OPAQUE";
    MaterialTransparencyMode[MaterialTransparencyMode["MTM_ALPHA_TEST"] = 1] = "MTM_ALPHA_TEST";
    MaterialTransparencyMode[MaterialTransparencyMode["MTM_ALPHA_BLEND"] = 2] = "MTM_ALPHA_BLEND";
    MaterialTransparencyMode[MaterialTransparencyMode["MTM_ALPHA_TEST_AND_ALPHA_BLEND"] = 3] = "MTM_ALPHA_TEST_AND_ALPHA_BLEND";
    MaterialTransparencyMode[MaterialTransparencyMode["MTM_AUTO"] = 4] = "MTM_AUTO";
    MaterialTransparencyMode[MaterialTransparencyMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MaterialTransparencyMode || (exports.MaterialTransparencyMode = MaterialTransparencyMode = {}));
function materialTransparencyModeFromJSON(object) {
    switch (object) {
        case 0:
        case "MTM_OPAQUE":
            return MaterialTransparencyMode.MTM_OPAQUE;
        case 1:
        case "MTM_ALPHA_TEST":
            return MaterialTransparencyMode.MTM_ALPHA_TEST;
        case 2:
        case "MTM_ALPHA_BLEND":
            return MaterialTransparencyMode.MTM_ALPHA_BLEND;
        case 3:
        case "MTM_ALPHA_TEST_AND_ALPHA_BLEND":
            return MaterialTransparencyMode.MTM_ALPHA_TEST_AND_ALPHA_BLEND;
        case 4:
        case "MTM_AUTO":
            return MaterialTransparencyMode.MTM_AUTO;
        case -1:
        case "UNRECOGNIZED":
        default:
            return MaterialTransparencyMode.UNRECOGNIZED;
    }
}
function materialTransparencyModeToJSON(object) {
    switch (object) {
        case MaterialTransparencyMode.MTM_OPAQUE:
            return "MTM_OPAQUE";
        case MaterialTransparencyMode.MTM_ALPHA_TEST:
            return "MTM_ALPHA_TEST";
        case MaterialTransparencyMode.MTM_ALPHA_BLEND:
            return "MTM_ALPHA_BLEND";
        case MaterialTransparencyMode.MTM_ALPHA_TEST_AND_ALPHA_BLEND:
            return "MTM_ALPHA_TEST_AND_ALPHA_BLEND";
        case MaterialTransparencyMode.MTM_AUTO:
            return "MTM_AUTO";
        case MaterialTransparencyMode.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBasePBMaterial() {
    return { material: undefined };
}
var PBMaterial;
(function (PBMaterial) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.material) === null || _a === void 0 ? void 0 : _a.$case) {
            case "unlit":
                PBMaterial_UnlitMaterial.encode(message.material.unlit, writer.uint32(10).fork()).ldelim();
                break;
            case "pbr":
                PBMaterial_PbrMaterial.encode(message.material.pbr, writer.uint32(18).fork()).ldelim();
                break;
        }
        return writer;
    }
    PBMaterial.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBMaterial();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.material = { $case: "unlit", unlit: PBMaterial_UnlitMaterial.decode(reader, reader.uint32()) };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.material = { $case: "pbr", pbr: PBMaterial_PbrMaterial.decode(reader, reader.uint32()) };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBMaterial.decode = decode;
    function fromJSON(object) {
        return {
            material: isSet(object.unlit)
                ? { $case: "unlit", unlit: PBMaterial_UnlitMaterial.fromJSON(object.unlit) }
                : isSet(object.pbr)
                    ? { $case: "pbr", pbr: PBMaterial_PbrMaterial.fromJSON(object.pbr) }
                    : undefined,
        };
    }
    PBMaterial.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f;
        const obj = {};
        ((_a = message.material) === null || _a === void 0 ? void 0 : _a.$case) === "unlit" &&
            (obj.unlit = ((_b = message.material) === null || _b === void 0 ? void 0 : _b.unlit) ? PBMaterial_UnlitMaterial.toJSON((_c = message.material) === null || _c === void 0 ? void 0 : _c.unlit) : undefined);
        ((_d = message.material) === null || _d === void 0 ? void 0 : _d.$case) === "pbr" &&
            (obj.pbr = ((_e = message.material) === null || _e === void 0 ? void 0 : _e.pbr) ? PBMaterial_PbrMaterial.toJSON((_f = message.material) === null || _f === void 0 ? void 0 : _f.pbr) : undefined);
        return obj;
    }
    PBMaterial.toJSON = toJSON;
    function create(base) {
        return PBMaterial.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBMaterial.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBasePBMaterial();
        if (((_a = object.material) === null || _a === void 0 ? void 0 : _a.$case) === "unlit" && ((_b = object.material) === null || _b === void 0 ? void 0 : _b.unlit) !== undefined && ((_c = object.material) === null || _c === void 0 ? void 0 : _c.unlit) !== null) {
            message.material = { $case: "unlit", unlit: PBMaterial_UnlitMaterial.fromPartial(object.material.unlit) };
        }
        if (((_d = object.material) === null || _d === void 0 ? void 0 : _d.$case) === "pbr" && ((_e = object.material) === null || _e === void 0 ? void 0 : _e.pbr) !== undefined && ((_f = object.material) === null || _f === void 0 ? void 0 : _f.pbr) !== null) {
            message.material = { $case: "pbr", pbr: PBMaterial_PbrMaterial.fromPartial(object.material.pbr) };
        }
        return message;
    }
    PBMaterial.fromPartial = fromPartial;
})(PBMaterial || (exports.PBMaterial = PBMaterial = {}));
function createBasePBMaterial_UnlitMaterial() {
    return {
        texture: undefined,
        alphaTest: undefined,
        castShadows: undefined,
        diffuseColor: undefined,
        alphaTexture: undefined,
    };
}
var PBMaterial_UnlitMaterial;
(function (PBMaterial_UnlitMaterial) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.texture !== undefined) {
            texture_gen_1.TextureUnion.encode(message.texture, writer.uint32(10).fork()).ldelim();
        }
        if (message.alphaTest !== undefined) {
            writer.uint32(21).float(message.alphaTest);
        }
        if (message.castShadows !== undefined) {
            writer.uint32(24).bool(message.castShadows);
        }
        if (message.diffuseColor !== undefined) {
            colors_gen_1.Color4.encode(message.diffuseColor, writer.uint32(34).fork()).ldelim();
        }
        if (message.alphaTexture !== undefined) {
            texture_gen_1.TextureUnion.encode(message.alphaTexture, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    }
    PBMaterial_UnlitMaterial.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBMaterial_UnlitMaterial();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.texture = texture_gen_1.TextureUnion.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.alphaTest = reader.float();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.castShadows = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.diffuseColor = colors_gen_1.Color4.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.alphaTexture = texture_gen_1.TextureUnion.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBMaterial_UnlitMaterial.decode = decode;
    function fromJSON(object) {
        return {
            texture: isSet(object.texture) ? texture_gen_1.TextureUnion.fromJSON(object.texture) : undefined,
            alphaTest: isSet(object.alphaTest) ? Number(object.alphaTest) : undefined,
            castShadows: isSet(object.castShadows) ? Boolean(object.castShadows) : undefined,
            diffuseColor: isSet(object.diffuseColor) ? colors_gen_1.Color4.fromJSON(object.diffuseColor) : undefined,
            alphaTexture: isSet(object.alphaTexture) ? texture_gen_1.TextureUnion.fromJSON(object.alphaTexture) : undefined,
        };
    }
    PBMaterial_UnlitMaterial.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.texture !== undefined && (obj.texture = message.texture ? texture_gen_1.TextureUnion.toJSON(message.texture) : undefined);
        message.alphaTest !== undefined && (obj.alphaTest = message.alphaTest);
        message.castShadows !== undefined && (obj.castShadows = message.castShadows);
        message.diffuseColor !== undefined &&
            (obj.diffuseColor = message.diffuseColor ? colors_gen_1.Color4.toJSON(message.diffuseColor) : undefined);
        message.alphaTexture !== undefined &&
            (obj.alphaTexture = message.alphaTexture ? texture_gen_1.TextureUnion.toJSON(message.alphaTexture) : undefined);
        return obj;
    }
    PBMaterial_UnlitMaterial.toJSON = toJSON;
    function create(base) {
        return PBMaterial_UnlitMaterial.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBMaterial_UnlitMaterial.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBasePBMaterial_UnlitMaterial();
        message.texture = (object.texture !== undefined && object.texture !== null)
            ? texture_gen_1.TextureUnion.fromPartial(object.texture)
            : undefined;
        message.alphaTest = (_a = object.alphaTest) !== null && _a !== void 0 ? _a : undefined;
        message.castShadows = (_b = object.castShadows) !== null && _b !== void 0 ? _b : undefined;
        message.diffuseColor = (object.diffuseColor !== undefined && object.diffuseColor !== null)
            ? colors_gen_1.Color4.fromPartial(object.diffuseColor)
            : undefined;
        message.alphaTexture = (object.alphaTexture !== undefined && object.alphaTexture !== null)
            ? texture_gen_1.TextureUnion.fromPartial(object.alphaTexture)
            : undefined;
        return message;
    }
    PBMaterial_UnlitMaterial.fromPartial = fromPartial;
})(PBMaterial_UnlitMaterial || (exports.PBMaterial_UnlitMaterial = PBMaterial_UnlitMaterial = {}));
function createBasePBMaterial_PbrMaterial() {
    return {
        texture: undefined,
        alphaTest: undefined,
        castShadows: undefined,
        alphaTexture: undefined,
        emissiveTexture: undefined,
        bumpTexture: undefined,
        albedoColor: undefined,
        emissiveColor: undefined,
        reflectivityColor: undefined,
        transparencyMode: undefined,
        metallic: undefined,
        roughness: undefined,
        specularIntensity: undefined,
        emissiveIntensity: undefined,
        directIntensity: undefined,
    };
}
var PBMaterial_PbrMaterial;
(function (PBMaterial_PbrMaterial) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.texture !== undefined) {
            texture_gen_1.TextureUnion.encode(message.texture, writer.uint32(10).fork()).ldelim();
        }
        if (message.alphaTest !== undefined) {
            writer.uint32(21).float(message.alphaTest);
        }
        if (message.castShadows !== undefined) {
            writer.uint32(24).bool(message.castShadows);
        }
        if (message.alphaTexture !== undefined) {
            texture_gen_1.TextureUnion.encode(message.alphaTexture, writer.uint32(34).fork()).ldelim();
        }
        if (message.emissiveTexture !== undefined) {
            texture_gen_1.TextureUnion.encode(message.emissiveTexture, writer.uint32(42).fork()).ldelim();
        }
        if (message.bumpTexture !== undefined) {
            texture_gen_1.TextureUnion.encode(message.bumpTexture, writer.uint32(50).fork()).ldelim();
        }
        if (message.albedoColor !== undefined) {
            colors_gen_1.Color4.encode(message.albedoColor, writer.uint32(58).fork()).ldelim();
        }
        if (message.emissiveColor !== undefined) {
            colors_gen_1.Color3.encode(message.emissiveColor, writer.uint32(66).fork()).ldelim();
        }
        if (message.reflectivityColor !== undefined) {
            colors_gen_1.Color3.encode(message.reflectivityColor, writer.uint32(74).fork()).ldelim();
        }
        if (message.transparencyMode !== undefined) {
            writer.uint32(80).int32(message.transparencyMode);
        }
        if (message.metallic !== undefined) {
            writer.uint32(93).float(message.metallic);
        }
        if (message.roughness !== undefined) {
            writer.uint32(101).float(message.roughness);
        }
        if (message.specularIntensity !== undefined) {
            writer.uint32(117).float(message.specularIntensity);
        }
        if (message.emissiveIntensity !== undefined) {
            writer.uint32(125).float(message.emissiveIntensity);
        }
        if (message.directIntensity !== undefined) {
            writer.uint32(133).float(message.directIntensity);
        }
        return writer;
    }
    PBMaterial_PbrMaterial.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBMaterial_PbrMaterial();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.texture = texture_gen_1.TextureUnion.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.alphaTest = reader.float();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.castShadows = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.alphaTexture = texture_gen_1.TextureUnion.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.emissiveTexture = texture_gen_1.TextureUnion.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.bumpTexture = texture_gen_1.TextureUnion.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.albedoColor = colors_gen_1.Color4.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.emissiveColor = colors_gen_1.Color3.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.reflectivityColor = colors_gen_1.Color3.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.transparencyMode = reader.int32();
                    continue;
                case 11:
                    if (tag !== 93) {
                        break;
                    }
                    message.metallic = reader.float();
                    continue;
                case 12:
                    if (tag !== 101) {
                        break;
                    }
                    message.roughness = reader.float();
                    continue;
                case 14:
                    if (tag !== 117) {
                        break;
                    }
                    message.specularIntensity = reader.float();
                    continue;
                case 15:
                    if (tag !== 125) {
                        break;
                    }
                    message.emissiveIntensity = reader.float();
                    continue;
                case 16:
                    if (tag !== 133) {
                        break;
                    }
                    message.directIntensity = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBMaterial_PbrMaterial.decode = decode;
    function fromJSON(object) {
        return {
            texture: isSet(object.texture) ? texture_gen_1.TextureUnion.fromJSON(object.texture) : undefined,
            alphaTest: isSet(object.alphaTest) ? Number(object.alphaTest) : undefined,
            castShadows: isSet(object.castShadows) ? Boolean(object.castShadows) : undefined,
            alphaTexture: isSet(object.alphaTexture) ? texture_gen_1.TextureUnion.fromJSON(object.alphaTexture) : undefined,
            emissiveTexture: isSet(object.emissiveTexture) ? texture_gen_1.TextureUnion.fromJSON(object.emissiveTexture) : undefined,
            bumpTexture: isSet(object.bumpTexture) ? texture_gen_1.TextureUnion.fromJSON(object.bumpTexture) : undefined,
            albedoColor: isSet(object.albedoColor) ? colors_gen_1.Color4.fromJSON(object.albedoColor) : undefined,
            emissiveColor: isSet(object.emissiveColor) ? colors_gen_1.Color3.fromJSON(object.emissiveColor) : undefined,
            reflectivityColor: isSet(object.reflectivityColor) ? colors_gen_1.Color3.fromJSON(object.reflectivityColor) : undefined,
            transparencyMode: isSet(object.transparencyMode)
                ? materialTransparencyModeFromJSON(object.transparencyMode)
                : undefined,
            metallic: isSet(object.metallic) ? Number(object.metallic) : undefined,
            roughness: isSet(object.roughness) ? Number(object.roughness) : undefined,
            specularIntensity: isSet(object.specularIntensity) ? Number(object.specularIntensity) : undefined,
            emissiveIntensity: isSet(object.emissiveIntensity) ? Number(object.emissiveIntensity) : undefined,
            directIntensity: isSet(object.directIntensity) ? Number(object.directIntensity) : undefined,
        };
    }
    PBMaterial_PbrMaterial.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.texture !== undefined && (obj.texture = message.texture ? texture_gen_1.TextureUnion.toJSON(message.texture) : undefined);
        message.alphaTest !== undefined && (obj.alphaTest = message.alphaTest);
        message.castShadows !== undefined && (obj.castShadows = message.castShadows);
        message.alphaTexture !== undefined &&
            (obj.alphaTexture = message.alphaTexture ? texture_gen_1.TextureUnion.toJSON(message.alphaTexture) : undefined);
        message.emissiveTexture !== undefined &&
            (obj.emissiveTexture = message.emissiveTexture ? texture_gen_1.TextureUnion.toJSON(message.emissiveTexture) : undefined);
        message.bumpTexture !== undefined &&
            (obj.bumpTexture = message.bumpTexture ? texture_gen_1.TextureUnion.toJSON(message.bumpTexture) : undefined);
        message.albedoColor !== undefined &&
            (obj.albedoColor = message.albedoColor ? colors_gen_1.Color4.toJSON(message.albedoColor) : undefined);
        message.emissiveColor !== undefined &&
            (obj.emissiveColor = message.emissiveColor ? colors_gen_1.Color3.toJSON(message.emissiveColor) : undefined);
        message.reflectivityColor !== undefined &&
            (obj.reflectivityColor = message.reflectivityColor ? colors_gen_1.Color3.toJSON(message.reflectivityColor) : undefined);
        message.transparencyMode !== undefined &&
            (obj.transparencyMode = message.transparencyMode !== undefined
                ? materialTransparencyModeToJSON(message.transparencyMode)
                : undefined);
        message.metallic !== undefined && (obj.metallic = message.metallic);
        message.roughness !== undefined && (obj.roughness = message.roughness);
        message.specularIntensity !== undefined && (obj.specularIntensity = message.specularIntensity);
        message.emissiveIntensity !== undefined && (obj.emissiveIntensity = message.emissiveIntensity);
        message.directIntensity !== undefined && (obj.directIntensity = message.directIntensity);
        return obj;
    }
    PBMaterial_PbrMaterial.toJSON = toJSON;
    function create(base) {
        return PBMaterial_PbrMaterial.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBMaterial_PbrMaterial.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBasePBMaterial_PbrMaterial();
        message.texture = (object.texture !== undefined && object.texture !== null)
            ? texture_gen_1.TextureUnion.fromPartial(object.texture)
            : undefined;
        message.alphaTest = (_a = object.alphaTest) !== null && _a !== void 0 ? _a : undefined;
        message.castShadows = (_b = object.castShadows) !== null && _b !== void 0 ? _b : undefined;
        message.alphaTexture = (object.alphaTexture !== undefined && object.alphaTexture !== null)
            ? texture_gen_1.TextureUnion.fromPartial(object.alphaTexture)
            : undefined;
        message.emissiveTexture = (object.emissiveTexture !== undefined && object.emissiveTexture !== null)
            ? texture_gen_1.TextureUnion.fromPartial(object.emissiveTexture)
            : undefined;
        message.bumpTexture = (object.bumpTexture !== undefined && object.bumpTexture !== null)
            ? texture_gen_1.TextureUnion.fromPartial(object.bumpTexture)
            : undefined;
        message.albedoColor = (object.albedoColor !== undefined && object.albedoColor !== null)
            ? colors_gen_1.Color4.fromPartial(object.albedoColor)
            : undefined;
        message.emissiveColor = (object.emissiveColor !== undefined && object.emissiveColor !== null)
            ? colors_gen_1.Color3.fromPartial(object.emissiveColor)
            : undefined;
        message.reflectivityColor = (object.reflectivityColor !== undefined && object.reflectivityColor !== null)
            ? colors_gen_1.Color3.fromPartial(object.reflectivityColor)
            : undefined;
        message.transparencyMode = (_c = object.transparencyMode) !== null && _c !== void 0 ? _c : undefined;
        message.metallic = (_d = object.metallic) !== null && _d !== void 0 ? _d : undefined;
        message.roughness = (_e = object.roughness) !== null && _e !== void 0 ? _e : undefined;
        message.specularIntensity = (_f = object.specularIntensity) !== null && _f !== void 0 ? _f : undefined;
        message.emissiveIntensity = (_g = object.emissiveIntensity) !== null && _g !== void 0 ? _g : undefined;
        message.directIntensity = (_h = object.directIntensity) !== null && _h !== void 0 ? _h : undefined;
        return message;
    }
    PBMaterial_PbrMaterial.fromPartial = fromPartial;
})(PBMaterial_PbrMaterial || (exports.PBMaterial_PbrMaterial = PBMaterial_PbrMaterial = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=material.gen.js.map