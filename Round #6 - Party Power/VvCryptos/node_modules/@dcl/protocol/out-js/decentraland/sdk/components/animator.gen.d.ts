import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.sdk.components";
/**
 * The Animator component is a container for multiple potential animations an Entity can display,
 * separately or at the same time. It can be used to start, stop or blend animations; as well as
 * to inspect their playback state.
 *
 * Animations have a `weight` property, which determines how pronounced the animation will be. This
 * can be adjusted to blend animations together, or gracefully transition from one to the next.
 */
export interface PBAnimator {
    /** a collection of animations and their current state */
    states: PBAnimationState[];
}
/** AnimationState indicates the status and configuration of one available animation. */
export interface PBAnimationState {
    /** the animation path in the `files` array of the scene manifest */
    clip: string;
    /** whether this animation is currently playing */
    playing?: boolean | undefined;
    /** @experimental the "weight" of this animation (see below, default: 1.0) */
    weight?: number | undefined;
    /** the playback speed (default: 1.0) */
    speed?: number | undefined;
    /** whether the animation repeats (**) until is manually stopped (default: true) */
    loop?: boolean | undefined;
    /** whether the animation is restored to the initial state (*) when it changes from stopped to playing (default: false) */
    shouldReset?: boolean | undefined;
}
export declare namespace PBAnimator {
    function encode(message: PBAnimator, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBAnimator;
    function fromJSON(object: any): PBAnimator;
    function toJSON(message: PBAnimator): unknown;
    function create<I extends Exact<DeepPartial<PBAnimator>, I>>(base?: I): PBAnimator;
    function fromPartial<I extends Exact<DeepPartial<PBAnimator>, I>>(object: I): PBAnimator;
}
export declare namespace PBAnimationState {
    function encode(message: PBAnimationState, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBAnimationState;
    function fromJSON(object: any): PBAnimationState;
    function toJSON(message: PBAnimationState): unknown;
    function create<I extends Exact<DeepPartial<PBAnimationState>, I>>(base?: I): PBAnimationState;
    function fromPartial<I extends Exact<DeepPartial<PBAnimationState>, I>>(object: I): PBAnimationState;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
