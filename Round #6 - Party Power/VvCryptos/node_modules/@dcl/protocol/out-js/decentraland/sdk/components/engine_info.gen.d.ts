import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.sdk.components";
/**
 * EngineInfo provides information about the graphics engine running the scene.
 * The values of this component are written at the "physics" stage of the ADR-148. Meaning
 * the tick_number and frame_number of the same frame could be used as correlation numbers
 * for timestamps in other components.
 */
export interface PBEngineInfo {
    /** frame counter of the engine */
    frameNumber: number;
    /** total runtime of this scene in seconds */
    totalRuntime: number;
    /** tick counter of the scene as per ADR-148 */
    tickNumber: number;
}
export declare namespace PBEngineInfo {
    function encode(message: PBEngineInfo, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBEngineInfo;
    function fromJSON(object: any): PBEngineInfo;
    function toJSON(message: PBEngineInfo): unknown;
    function create<I extends Exact<DeepPartial<PBEngineInfo>, I>>(base?: I): PBEngineInfo;
    function fromPartial<I extends Exact<DeepPartial<PBEngineInfo>, I>>(object: I): PBEngineInfo;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
