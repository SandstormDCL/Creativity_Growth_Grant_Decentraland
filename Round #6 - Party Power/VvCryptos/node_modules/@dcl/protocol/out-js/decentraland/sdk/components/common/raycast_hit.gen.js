"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RaycastHit = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const vectors_gen_1 = require("../../../common/vectors.gen");
exports.protobufPackage = "decentraland.sdk.components.common";
function createBaseRaycastHit() {
    return {
        position: undefined,
        globalOrigin: undefined,
        direction: undefined,
        normalHit: undefined,
        length: 0,
        meshName: undefined,
        entityId: undefined,
    };
}
var RaycastHit;
(function (RaycastHit) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.position !== undefined) {
            vectors_gen_1.Vector3.encode(message.position, writer.uint32(10).fork()).ldelim();
        }
        if (message.globalOrigin !== undefined) {
            vectors_gen_1.Vector3.encode(message.globalOrigin, writer.uint32(18).fork()).ldelim();
        }
        if (message.direction !== undefined) {
            vectors_gen_1.Vector3.encode(message.direction, writer.uint32(26).fork()).ldelim();
        }
        if (message.normalHit !== undefined) {
            vectors_gen_1.Vector3.encode(message.normalHit, writer.uint32(34).fork()).ldelim();
        }
        if (message.length !== 0) {
            writer.uint32(45).float(message.length);
        }
        if (message.meshName !== undefined) {
            writer.uint32(50).string(message.meshName);
        }
        if (message.entityId !== undefined) {
            writer.uint32(56).uint32(message.entityId);
        }
        return writer;
    }
    RaycastHit.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRaycastHit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.position = vectors_gen_1.Vector3.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.globalOrigin = vectors_gen_1.Vector3.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.direction = vectors_gen_1.Vector3.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.normalHit = vectors_gen_1.Vector3.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 45) {
                        break;
                    }
                    message.length = reader.float();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.meshName = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.entityId = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    RaycastHit.decode = decode;
    function fromJSON(object) {
        return {
            position: isSet(object.position) ? vectors_gen_1.Vector3.fromJSON(object.position) : undefined,
            globalOrigin: isSet(object.globalOrigin) ? vectors_gen_1.Vector3.fromJSON(object.globalOrigin) : undefined,
            direction: isSet(object.direction) ? vectors_gen_1.Vector3.fromJSON(object.direction) : undefined,
            normalHit: isSet(object.normalHit) ? vectors_gen_1.Vector3.fromJSON(object.normalHit) : undefined,
            length: isSet(object.length) ? Number(object.length) : 0,
            meshName: isSet(object.meshName) ? String(object.meshName) : undefined,
            entityId: isSet(object.entityId) ? Number(object.entityId) : undefined,
        };
    }
    RaycastHit.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.position !== undefined && (obj.position = message.position ? vectors_gen_1.Vector3.toJSON(message.position) : undefined);
        message.globalOrigin !== undefined &&
            (obj.globalOrigin = message.globalOrigin ? vectors_gen_1.Vector3.toJSON(message.globalOrigin) : undefined);
        message.direction !== undefined &&
            (obj.direction = message.direction ? vectors_gen_1.Vector3.toJSON(message.direction) : undefined);
        message.normalHit !== undefined &&
            (obj.normalHit = message.normalHit ? vectors_gen_1.Vector3.toJSON(message.normalHit) : undefined);
        message.length !== undefined && (obj.length = message.length);
        message.meshName !== undefined && (obj.meshName = message.meshName);
        message.entityId !== undefined && (obj.entityId = Math.round(message.entityId));
        return obj;
    }
    RaycastHit.toJSON = toJSON;
    function create(base) {
        return RaycastHit.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    RaycastHit.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseRaycastHit();
        message.position = (object.position !== undefined && object.position !== null)
            ? vectors_gen_1.Vector3.fromPartial(object.position)
            : undefined;
        message.globalOrigin = (object.globalOrigin !== undefined && object.globalOrigin !== null)
            ? vectors_gen_1.Vector3.fromPartial(object.globalOrigin)
            : undefined;
        message.direction = (object.direction !== undefined && object.direction !== null)
            ? vectors_gen_1.Vector3.fromPartial(object.direction)
            : undefined;
        message.normalHit = (object.normalHit !== undefined && object.normalHit !== null)
            ? vectors_gen_1.Vector3.fromPartial(object.normalHit)
            : undefined;
        message.length = (_a = object.length) !== null && _a !== void 0 ? _a : 0;
        message.meshName = (_b = object.meshName) !== null && _b !== void 0 ? _b : undefined;
        message.entityId = (_c = object.entityId) !== null && _c !== void 0 ? _c : undefined;
        return message;
    }
    RaycastHit.fromPartial = fromPartial;
})(RaycastHit || (exports.RaycastHit = RaycastHit = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=raycast_hit.gen.js.map