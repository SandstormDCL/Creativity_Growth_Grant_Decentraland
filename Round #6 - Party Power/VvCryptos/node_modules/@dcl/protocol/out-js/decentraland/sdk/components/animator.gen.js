"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBAnimationState = exports.PBAnimator = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.sdk.components";
function createBasePBAnimator() {
    return { states: [] };
}
var PBAnimator;
(function (PBAnimator) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.states) {
            PBAnimationState.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    PBAnimator.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBAnimator();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.states.push(PBAnimationState.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBAnimator.decode = decode;
    function fromJSON(object) {
        return { states: Array.isArray(object === null || object === void 0 ? void 0 : object.states) ? object.states.map((e) => PBAnimationState.fromJSON(e)) : [] };
    }
    PBAnimator.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.states) {
            obj.states = message.states.map((e) => e ? PBAnimationState.toJSON(e) : undefined);
        }
        else {
            obj.states = [];
        }
        return obj;
    }
    PBAnimator.toJSON = toJSON;
    function create(base) {
        return PBAnimator.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBAnimator.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBasePBAnimator();
        message.states = ((_a = object.states) === null || _a === void 0 ? void 0 : _a.map((e) => PBAnimationState.fromPartial(e))) || [];
        return message;
    }
    PBAnimator.fromPartial = fromPartial;
})(PBAnimator || (exports.PBAnimator = PBAnimator = {}));
function createBasePBAnimationState() {
    return { clip: "", playing: undefined, weight: undefined, speed: undefined, loop: undefined, shouldReset: undefined };
}
var PBAnimationState;
(function (PBAnimationState) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clip !== "") {
            writer.uint32(18).string(message.clip);
        }
        if (message.playing !== undefined) {
            writer.uint32(24).bool(message.playing);
        }
        if (message.weight !== undefined) {
            writer.uint32(37).float(message.weight);
        }
        if (message.speed !== undefined) {
            writer.uint32(45).float(message.speed);
        }
        if (message.loop !== undefined) {
            writer.uint32(48).bool(message.loop);
        }
        if (message.shouldReset !== undefined) {
            writer.uint32(56).bool(message.shouldReset);
        }
        return writer;
    }
    PBAnimationState.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBAnimationState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clip = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.playing = reader.bool();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.weight = reader.float();
                    continue;
                case 5:
                    if (tag !== 45) {
                        break;
                    }
                    message.speed = reader.float();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.loop = reader.bool();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.shouldReset = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBAnimationState.decode = decode;
    function fromJSON(object) {
        return {
            clip: isSet(object.clip) ? String(object.clip) : "",
            playing: isSet(object.playing) ? Boolean(object.playing) : undefined,
            weight: isSet(object.weight) ? Number(object.weight) : undefined,
            speed: isSet(object.speed) ? Number(object.speed) : undefined,
            loop: isSet(object.loop) ? Boolean(object.loop) : undefined,
            shouldReset: isSet(object.shouldReset) ? Boolean(object.shouldReset) : undefined,
        };
    }
    PBAnimationState.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.clip !== undefined && (obj.clip = message.clip);
        message.playing !== undefined && (obj.playing = message.playing);
        message.weight !== undefined && (obj.weight = message.weight);
        message.speed !== undefined && (obj.speed = message.speed);
        message.loop !== undefined && (obj.loop = message.loop);
        message.shouldReset !== undefined && (obj.shouldReset = message.shouldReset);
        return obj;
    }
    PBAnimationState.toJSON = toJSON;
    function create(base) {
        return PBAnimationState.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBAnimationState.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBasePBAnimationState();
        message.clip = (_a = object.clip) !== null && _a !== void 0 ? _a : "";
        message.playing = (_b = object.playing) !== null && _b !== void 0 ? _b : undefined;
        message.weight = (_c = object.weight) !== null && _c !== void 0 ? _c : undefined;
        message.speed = (_d = object.speed) !== null && _d !== void 0 ? _d : undefined;
        message.loop = (_e = object.loop) !== null && _e !== void 0 ? _e : undefined;
        message.shouldReset = (_f = object.shouldReset) !== null && _f !== void 0 ? _f : undefined;
        return message;
    }
    PBAnimationState.fromPartial = fromPartial;
})(PBAnimationState || (exports.PBAnimationState = PBAnimationState = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=animator.gen.js.map