"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBPointerEventsResult = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const input_action_gen_1 = require("./common/input_action.gen");
const raycast_hit_gen_1 = require("./common/raycast_hit.gen");
exports.protobufPackage = "decentraland.sdk.components";
function createBasePBPointerEventsResult() {
    return { button: 0, hit: undefined, state: 0, timestamp: 0, analog: undefined, tickNumber: 0 };
}
var PBPointerEventsResult;
(function (PBPointerEventsResult) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.button !== 0) {
            writer.uint32(8).int32(message.button);
        }
        if (message.hit !== undefined) {
            raycast_hit_gen_1.RaycastHit.encode(message.hit, writer.uint32(18).fork()).ldelim();
        }
        if (message.state !== 0) {
            writer.uint32(32).int32(message.state);
        }
        if (message.timestamp !== 0) {
            writer.uint32(40).uint32(message.timestamp);
        }
        if (message.analog !== undefined) {
            writer.uint32(53).float(message.analog);
        }
        if (message.tickNumber !== 0) {
            writer.uint32(56).uint32(message.tickNumber);
        }
        return writer;
    }
    PBPointerEventsResult.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBPointerEventsResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.button = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.hit = raycast_hit_gen_1.RaycastHit.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.timestamp = reader.uint32();
                    continue;
                case 6:
                    if (tag !== 53) {
                        break;
                    }
                    message.analog = reader.float();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.tickNumber = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBPointerEventsResult.decode = decode;
    function fromJSON(object) {
        return {
            button: isSet(object.button) ? (0, input_action_gen_1.inputActionFromJSON)(object.button) : 0,
            hit: isSet(object.hit) ? raycast_hit_gen_1.RaycastHit.fromJSON(object.hit) : undefined,
            state: isSet(object.state) ? (0, input_action_gen_1.pointerEventTypeFromJSON)(object.state) : 0,
            timestamp: isSet(object.timestamp) ? Number(object.timestamp) : 0,
            analog: isSet(object.analog) ? Number(object.analog) : undefined,
            tickNumber: isSet(object.tickNumber) ? Number(object.tickNumber) : 0,
        };
    }
    PBPointerEventsResult.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.button !== undefined && (obj.button = (0, input_action_gen_1.inputActionToJSON)(message.button));
        message.hit !== undefined && (obj.hit = message.hit ? raycast_hit_gen_1.RaycastHit.toJSON(message.hit) : undefined);
        message.state !== undefined && (obj.state = (0, input_action_gen_1.pointerEventTypeToJSON)(message.state));
        message.timestamp !== undefined && (obj.timestamp = Math.round(message.timestamp));
        message.analog !== undefined && (obj.analog = message.analog);
        message.tickNumber !== undefined && (obj.tickNumber = Math.round(message.tickNumber));
        return obj;
    }
    PBPointerEventsResult.toJSON = toJSON;
    function create(base) {
        return PBPointerEventsResult.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBPointerEventsResult.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBasePBPointerEventsResult();
        message.button = (_a = object.button) !== null && _a !== void 0 ? _a : 0;
        message.hit = (object.hit !== undefined && object.hit !== null) ? raycast_hit_gen_1.RaycastHit.fromPartial(object.hit) : undefined;
        message.state = (_b = object.state) !== null && _b !== void 0 ? _b : 0;
        message.timestamp = (_c = object.timestamp) !== null && _c !== void 0 ? _c : 0;
        message.analog = (_d = object.analog) !== null && _d !== void 0 ? _d : undefined;
        message.tickNumber = (_e = object.tickNumber) !== null && _e !== void 0 ? _e : 0;
        return message;
    }
    PBPointerEventsResult.fromPartial = fromPartial;
})(PBPointerEventsResult || (exports.PBPointerEventsResult = PBPointerEventsResult = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=pointer_events_result.gen.js.map