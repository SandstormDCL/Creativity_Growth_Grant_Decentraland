"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBUiBackground = exports.BackgroundTextureMode = exports.protobufPackage = void 0;
exports.backgroundTextureModeFromJSON = backgroundTextureModeFromJSON;
exports.backgroundTextureModeToJSON = backgroundTextureModeToJSON;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const border_rect_gen_1 = require("../../common/border_rect.gen");
const colors_gen_1 = require("../../common/colors.gen");
const texture_gen_1 = require("../../common/texture.gen");
exports.protobufPackage = "decentraland.sdk.components";
var BackgroundTextureMode;
(function (BackgroundTextureMode) {
    /**
     * NINE_SLICES - https://docs.unity3d.com/Manual/UIE-USS-SupportedProperties.html (Slicing section)
     * https://forum.unity.com/threads/how-does-slicing-in-ui-tookkit-works.1235863/
     * https://docs.unity3d.com/Manual/9SliceSprites.html
     * https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-slice
     */
    BackgroundTextureMode[BackgroundTextureMode["NINE_SLICES"] = 0] = "NINE_SLICES";
    /**
     * CENTER - CENTER enables the texture to be rendered centered in relation to the
     * element. If the element is smaller than the texture then the background
     * should use the element as stencil to cut off the out-of-bounds area
     */
    BackgroundTextureMode[BackgroundTextureMode["CENTER"] = 1] = "CENTER";
    /**
     * STRETCH - STRETCH enables the texture to cover all the area of the container,
     * adopting its aspect ratio.
     */
    BackgroundTextureMode[BackgroundTextureMode["STRETCH"] = 2] = "STRETCH";
    BackgroundTextureMode[BackgroundTextureMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BackgroundTextureMode || (exports.BackgroundTextureMode = BackgroundTextureMode = {}));
function backgroundTextureModeFromJSON(object) {
    switch (object) {
        case 0:
        case "NINE_SLICES":
            return BackgroundTextureMode.NINE_SLICES;
        case 1:
        case "CENTER":
            return BackgroundTextureMode.CENTER;
        case 2:
        case "STRETCH":
            return BackgroundTextureMode.STRETCH;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BackgroundTextureMode.UNRECOGNIZED;
    }
}
function backgroundTextureModeToJSON(object) {
    switch (object) {
        case BackgroundTextureMode.NINE_SLICES:
            return "NINE_SLICES";
        case BackgroundTextureMode.CENTER:
            return "CENTER";
        case BackgroundTextureMode.STRETCH:
            return "STRETCH";
        case BackgroundTextureMode.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBasePBUiBackground() {
    return { color: undefined, texture: undefined, textureMode: 0, textureSlices: undefined, uvs: [] };
}
var PBUiBackground;
(function (PBUiBackground) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.color !== undefined) {
            colors_gen_1.Color4.encode(message.color, writer.uint32(10).fork()).ldelim();
        }
        if (message.texture !== undefined) {
            texture_gen_1.TextureUnion.encode(message.texture, writer.uint32(18).fork()).ldelim();
        }
        if (message.textureMode !== 0) {
            writer.uint32(24).int32(message.textureMode);
        }
        if (message.textureSlices !== undefined) {
            border_rect_gen_1.BorderRect.encode(message.textureSlices, writer.uint32(34).fork()).ldelim();
        }
        writer.uint32(42).fork();
        for (const v of message.uvs) {
            writer.float(v);
        }
        writer.ldelim();
        return writer;
    }
    PBUiBackground.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBUiBackground();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.color = colors_gen_1.Color4.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.texture = texture_gen_1.TextureUnion.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.textureMode = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.textureSlices = border_rect_gen_1.BorderRect.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag === 45) {
                        message.uvs.push(reader.float());
                        continue;
                    }
                    if (tag === 42) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.uvs.push(reader.float());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBUiBackground.decode = decode;
    function fromJSON(object) {
        return {
            color: isSet(object.color) ? colors_gen_1.Color4.fromJSON(object.color) : undefined,
            texture: isSet(object.texture) ? texture_gen_1.TextureUnion.fromJSON(object.texture) : undefined,
            textureMode: isSet(object.textureMode) ? backgroundTextureModeFromJSON(object.textureMode) : 0,
            textureSlices: isSet(object.textureSlices) ? border_rect_gen_1.BorderRect.fromJSON(object.textureSlices) : undefined,
            uvs: Array.isArray(object === null || object === void 0 ? void 0 : object.uvs) ? object.uvs.map((e) => Number(e)) : [],
        };
    }
    PBUiBackground.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.color !== undefined && (obj.color = message.color ? colors_gen_1.Color4.toJSON(message.color) : undefined);
        message.texture !== undefined && (obj.texture = message.texture ? texture_gen_1.TextureUnion.toJSON(message.texture) : undefined);
        message.textureMode !== undefined && (obj.textureMode = backgroundTextureModeToJSON(message.textureMode));
        message.textureSlices !== undefined &&
            (obj.textureSlices = message.textureSlices ? border_rect_gen_1.BorderRect.toJSON(message.textureSlices) : undefined);
        if (message.uvs) {
            obj.uvs = message.uvs.map((e) => e);
        }
        else {
            obj.uvs = [];
        }
        return obj;
    }
    PBUiBackground.toJSON = toJSON;
    function create(base) {
        return PBUiBackground.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBUiBackground.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBasePBUiBackground();
        message.color = (object.color !== undefined && object.color !== null)
            ? colors_gen_1.Color4.fromPartial(object.color)
            : undefined;
        message.texture = (object.texture !== undefined && object.texture !== null)
            ? texture_gen_1.TextureUnion.fromPartial(object.texture)
            : undefined;
        message.textureMode = (_a = object.textureMode) !== null && _a !== void 0 ? _a : 0;
        message.textureSlices = (object.textureSlices !== undefined && object.textureSlices !== null)
            ? border_rect_gen_1.BorderRect.fromPartial(object.textureSlices)
            : undefined;
        message.uvs = ((_b = object.uvs) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    }
    PBUiBackground.fromPartial = fromPartial;
})(PBUiBackground || (exports.PBUiBackground = PBUiBackground = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=ui_background.gen.js.map