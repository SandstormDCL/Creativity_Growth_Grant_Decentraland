"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WsSceneMessage = exports.UpdateModel = exports.UpdateScene = exports.UpdateModelType = exports.protobufPackage = void 0;
exports.updateModelTypeFromJSON = updateModelTypeFromJSON;
exports.updateModelTypeToJSON = updateModelTypeToJSON;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.sdk.development";
var UpdateModelType;
(function (UpdateModelType) {
    UpdateModelType[UpdateModelType["UMT_CHANGE"] = 0] = "UMT_CHANGE";
    UpdateModelType[UpdateModelType["UMT_REMOVE"] = 1] = "UMT_REMOVE";
    UpdateModelType[UpdateModelType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(UpdateModelType || (exports.UpdateModelType = UpdateModelType = {}));
function updateModelTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "UMT_CHANGE":
            return UpdateModelType.UMT_CHANGE;
        case 1:
        case "UMT_REMOVE":
            return UpdateModelType.UMT_REMOVE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return UpdateModelType.UNRECOGNIZED;
    }
}
function updateModelTypeToJSON(object) {
    switch (object) {
        case UpdateModelType.UMT_CHANGE:
            return "UMT_CHANGE";
        case UpdateModelType.UMT_REMOVE:
            return "UMT_REMOVE";
        case UpdateModelType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseUpdateScene() {
    return { sceneId: "" };
}
var UpdateScene;
(function (UpdateScene) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sceneId !== "") {
            writer.uint32(10).string(message.sceneId);
        }
        return writer;
    }
    UpdateScene.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateScene();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sceneId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    UpdateScene.decode = decode;
    function fromJSON(object) {
        return { sceneId: isSet(object.sceneId) ? String(object.sceneId) : "" };
    }
    UpdateScene.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.sceneId !== undefined && (obj.sceneId = message.sceneId);
        return obj;
    }
    UpdateScene.toJSON = toJSON;
    function create(base) {
        return UpdateScene.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    UpdateScene.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseUpdateScene();
        message.sceneId = (_a = object.sceneId) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    UpdateScene.fromPartial = fromPartial;
})(UpdateScene || (exports.UpdateScene = UpdateScene = {}));
function createBaseUpdateModel() {
    return { sceneId: "", src: "", hash: "", type: 0 };
}
var UpdateModel;
(function (UpdateModel) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sceneId !== "") {
            writer.uint32(10).string(message.sceneId);
        }
        if (message.src !== "") {
            writer.uint32(18).string(message.src);
        }
        if (message.hash !== "") {
            writer.uint32(26).string(message.hash);
        }
        if (message.type !== 0) {
            writer.uint32(32).int32(message.type);
        }
        return writer;
    }
    UpdateModel.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateModel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sceneId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.src = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    UpdateModel.decode = decode;
    function fromJSON(object) {
        return {
            sceneId: isSet(object.sceneId) ? String(object.sceneId) : "",
            src: isSet(object.src) ? String(object.src) : "",
            hash: isSet(object.hash) ? String(object.hash) : "",
            type: isSet(object.type) ? updateModelTypeFromJSON(object.type) : 0,
        };
    }
    UpdateModel.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.sceneId !== undefined && (obj.sceneId = message.sceneId);
        message.src !== undefined && (obj.src = message.src);
        message.hash !== undefined && (obj.hash = message.hash);
        message.type !== undefined && (obj.type = updateModelTypeToJSON(message.type));
        return obj;
    }
    UpdateModel.toJSON = toJSON;
    function create(base) {
        return UpdateModel.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    UpdateModel.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseUpdateModel();
        message.sceneId = (_a = object.sceneId) !== null && _a !== void 0 ? _a : "";
        message.src = (_b = object.src) !== null && _b !== void 0 ? _b : "";
        message.hash = (_c = object.hash) !== null && _c !== void 0 ? _c : "";
        message.type = (_d = object.type) !== null && _d !== void 0 ? _d : 0;
        return message;
    }
    UpdateModel.fromPartial = fromPartial;
})(UpdateModel || (exports.UpdateModel = UpdateModel = {}));
function createBaseWsSceneMessage() {
    return { message: undefined };
}
var WsSceneMessage;
(function (WsSceneMessage) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.message) === null || _a === void 0 ? void 0 : _a.$case) {
            case "updateScene":
                UpdateScene.encode(message.message.updateScene, writer.uint32(10).fork()).ldelim();
                break;
            case "updateModel":
                UpdateModel.encode(message.message.updateModel, writer.uint32(18).fork()).ldelim();
                break;
        }
        return writer;
    }
    WsSceneMessage.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWsSceneMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = { $case: "updateScene", updateScene: UpdateScene.decode(reader, reader.uint32()) };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = { $case: "updateModel", updateModel: UpdateModel.decode(reader, reader.uint32()) };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    WsSceneMessage.decode = decode;
    function fromJSON(object) {
        return {
            message: isSet(object.updateScene)
                ? { $case: "updateScene", updateScene: UpdateScene.fromJSON(object.updateScene) }
                : isSet(object.updateModel)
                    ? { $case: "updateModel", updateModel: UpdateModel.fromJSON(object.updateModel) }
                    : undefined,
        };
    }
    WsSceneMessage.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f;
        const obj = {};
        ((_a = message.message) === null || _a === void 0 ? void 0 : _a.$case) === "updateScene" &&
            (obj.updateScene = ((_b = message.message) === null || _b === void 0 ? void 0 : _b.updateScene) ? UpdateScene.toJSON((_c = message.message) === null || _c === void 0 ? void 0 : _c.updateScene) : undefined);
        ((_d = message.message) === null || _d === void 0 ? void 0 : _d.$case) === "updateModel" &&
            (obj.updateModel = ((_e = message.message) === null || _e === void 0 ? void 0 : _e.updateModel) ? UpdateModel.toJSON((_f = message.message) === null || _f === void 0 ? void 0 : _f.updateModel) : undefined);
        return obj;
    }
    WsSceneMessage.toJSON = toJSON;
    function create(base) {
        return WsSceneMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    WsSceneMessage.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseWsSceneMessage();
        if (((_a = object.message) === null || _a === void 0 ? void 0 : _a.$case) === "updateScene" &&
            ((_b = object.message) === null || _b === void 0 ? void 0 : _b.updateScene) !== undefined &&
            ((_c = object.message) === null || _c === void 0 ? void 0 : _c.updateScene) !== null) {
            message.message = { $case: "updateScene", updateScene: UpdateScene.fromPartial(object.message.updateScene) };
        }
        if (((_d = object.message) === null || _d === void 0 ? void 0 : _d.$case) === "updateModel" &&
            ((_e = object.message) === null || _e === void 0 ? void 0 : _e.updateModel) !== undefined &&
            ((_f = object.message) === null || _f === void 0 ? void 0 : _f.updateModel) !== null) {
            message.message = { $case: "updateModel", updateModel: UpdateModel.fromPartial(object.message.updateModel) };
        }
        return message;
    }
    WsSceneMessage.fromPartial = fromPartial;
})(WsSceneMessage || (exports.WsSceneMessage = WsSceneMessage = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=local_development.gen.js.map