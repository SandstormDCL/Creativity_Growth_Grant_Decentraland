import _m0 from "protobufjs/minimal";
import { Color3, Color4 } from "../../common/colors.gen";
import { TextureUnion } from "../../common/texture.gen";
export declare const protobufPackage = "decentraland.sdk.components";
export declare enum MaterialTransparencyMode {
    MTM_OPAQUE = 0,
    MTM_ALPHA_TEST = 1,
    MTM_ALPHA_BLEND = 2,
    MTM_ALPHA_TEST_AND_ALPHA_BLEND = 3,
    MTM_AUTO = 4,
    UNRECOGNIZED = -1
}
export declare function materialTransparencyModeFromJSON(object: any): MaterialTransparencyMode;
export declare function materialTransparencyModeToJSON(object: MaterialTransparencyMode): string;
export interface PBMaterial {
    material?: {
        $case: "unlit";
        unlit: PBMaterial_UnlitMaterial;
    } | {
        $case: "pbr";
        pbr: PBMaterial_PbrMaterial;
    } | undefined;
}
export interface PBMaterial_UnlitMaterial {
    /** default = null */
    texture?: TextureUnion | undefined;
    /** default = 0.5. range value: from 0 to 1 */
    alphaTest?: number | undefined;
    /** default =  true */
    castShadows?: boolean | undefined;
    /** default = white; */
    diffuseColor?: Color4 | undefined;
    /** default = null */
    alphaTexture?: TextureUnion | undefined;
}
export interface PBMaterial_PbrMaterial {
    /** default = null */
    texture?: TextureUnion | undefined;
    /** default = 0.5. range value: from 0 to 1 */
    alphaTest?: number | undefined;
    /** default =  true */
    castShadows?: boolean | undefined;
    /** @deprecated Alpha textures are no longer supported on PBRMaterial and UnlitMaterial.alphaTexture should be used instead. */
    alphaTexture?: TextureUnion | undefined;
    /** default = null */
    emissiveTexture?: TextureUnion | undefined;
    /** default = null */
    bumpTexture?: TextureUnion | undefined;
    /** default = white; */
    albedoColor?: Color4 | undefined;
    /** default = black; */
    emissiveColor?: Color3 | undefined;
    /** default = white; */
    reflectivityColor?: Color3 | undefined;
    /** default = TransparencyMode.Auto */
    transparencyMode?: MaterialTransparencyMode | undefined;
    /** default = 0.5 */
    metallic?: number | undefined;
    /** default = 0.5 */
    roughness?: number | undefined;
    /** default = 1 */
    specularIntensity?: number | undefined;
    /** default = 2 */
    emissiveIntensity?: number | undefined;
    /** default = 1 */
    directIntensity?: number | undefined;
}
export declare namespace PBMaterial {
    function encode(message: PBMaterial, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBMaterial;
    function fromJSON(object: any): PBMaterial;
    function toJSON(message: PBMaterial): unknown;
    function create<I extends Exact<DeepPartial<PBMaterial>, I>>(base?: I): PBMaterial;
    function fromPartial<I extends Exact<DeepPartial<PBMaterial>, I>>(object: I): PBMaterial;
}
export declare namespace PBMaterial_UnlitMaterial {
    function encode(message: PBMaterial_UnlitMaterial, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBMaterial_UnlitMaterial;
    function fromJSON(object: any): PBMaterial_UnlitMaterial;
    function toJSON(message: PBMaterial_UnlitMaterial): unknown;
    function create<I extends Exact<DeepPartial<PBMaterial_UnlitMaterial>, I>>(base?: I): PBMaterial_UnlitMaterial;
    function fromPartial<I extends Exact<DeepPartial<PBMaterial_UnlitMaterial>, I>>(object: I): PBMaterial_UnlitMaterial;
}
export declare namespace PBMaterial_PbrMaterial {
    function encode(message: PBMaterial_PbrMaterial, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBMaterial_PbrMaterial;
    function fromJSON(object: any): PBMaterial_PbrMaterial;
    function toJSON(message: PBMaterial_PbrMaterial): unknown;
    function create<I extends Exact<DeepPartial<PBMaterial_PbrMaterial>, I>>(base?: I): PBMaterial_PbrMaterial;
    function fromPartial<I extends Exact<DeepPartial<PBMaterial_PbrMaterial>, I>>(object: I): PBMaterial_PbrMaterial;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
