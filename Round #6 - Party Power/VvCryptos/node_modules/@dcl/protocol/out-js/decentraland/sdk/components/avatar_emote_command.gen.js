"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBAvatarEmoteCommand = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.sdk.components";
function createBasePBAvatarEmoteCommand() {
    return { emoteUrn: "", loop: false, timestamp: 0 };
}
var PBAvatarEmoteCommand;
(function (PBAvatarEmoteCommand) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.emoteUrn !== "") {
            writer.uint32(10).string(message.emoteUrn);
        }
        if (message.loop === true) {
            writer.uint32(16).bool(message.loop);
        }
        if (message.timestamp !== 0) {
            writer.uint32(24).uint32(message.timestamp);
        }
        return writer;
    }
    PBAvatarEmoteCommand.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBAvatarEmoteCommand();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.emoteUrn = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.loop = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.timestamp = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBAvatarEmoteCommand.decode = decode;
    function fromJSON(object) {
        return {
            emoteUrn: isSet(object.emoteUrn) ? String(object.emoteUrn) : "",
            loop: isSet(object.loop) ? Boolean(object.loop) : false,
            timestamp: isSet(object.timestamp) ? Number(object.timestamp) : 0,
        };
    }
    PBAvatarEmoteCommand.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.emoteUrn !== undefined && (obj.emoteUrn = message.emoteUrn);
        message.loop !== undefined && (obj.loop = message.loop);
        message.timestamp !== undefined && (obj.timestamp = Math.round(message.timestamp));
        return obj;
    }
    PBAvatarEmoteCommand.toJSON = toJSON;
    function create(base) {
        return PBAvatarEmoteCommand.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBAvatarEmoteCommand.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePBAvatarEmoteCommand();
        message.emoteUrn = (_a = object.emoteUrn) !== null && _a !== void 0 ? _a : "";
        message.loop = (_b = object.loop) !== null && _b !== void 0 ? _b : false;
        message.timestamp = (_c = object.timestamp) !== null && _c !== void 0 ? _c : 0;
        return message;
    }
    PBAvatarEmoteCommand.fromPartial = fromPartial;
})(PBAvatarEmoteCommand || (exports.PBAvatarEmoteCommand = PBAvatarEmoteCommand = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=avatar_emote_command.gen.js.map