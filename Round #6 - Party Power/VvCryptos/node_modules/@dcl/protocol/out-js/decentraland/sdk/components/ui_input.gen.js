"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBUiInput = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const colors_gen_1 = require("../../common/colors.gen");
const texts_gen_1 = require("./common/texts.gen");
exports.protobufPackage = "decentraland.sdk.components";
function createBasePBUiInput() {
    return {
        placeholder: "",
        color: undefined,
        placeholderColor: undefined,
        disabled: false,
        textAlign: undefined,
        font: undefined,
        fontSize: undefined,
        value: undefined,
    };
}
var PBUiInput;
(function (PBUiInput) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.placeholder !== "") {
            writer.uint32(10).string(message.placeholder);
        }
        if (message.color !== undefined) {
            colors_gen_1.Color4.encode(message.color, writer.uint32(18).fork()).ldelim();
        }
        if (message.placeholderColor !== undefined) {
            colors_gen_1.Color4.encode(message.placeholderColor, writer.uint32(26).fork()).ldelim();
        }
        if (message.disabled === true) {
            writer.uint32(32).bool(message.disabled);
        }
        if (message.textAlign !== undefined) {
            writer.uint32(80).int32(message.textAlign);
        }
        if (message.font !== undefined) {
            writer.uint32(88).int32(message.font);
        }
        if (message.fontSize !== undefined) {
            writer.uint32(96).int32(message.fontSize);
        }
        if (message.value !== undefined) {
            writer.uint32(106).string(message.value);
        }
        return writer;
    }
    PBUiInput.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBUiInput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.placeholder = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.color = colors_gen_1.Color4.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.placeholderColor = colors_gen_1.Color4.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.disabled = reader.bool();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.textAlign = reader.int32();
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.font = reader.int32();
                    continue;
                case 12:
                    if (tag !== 96) {
                        break;
                    }
                    message.fontSize = reader.int32();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBUiInput.decode = decode;
    function fromJSON(object) {
        return {
            placeholder: isSet(object.placeholder) ? String(object.placeholder) : "",
            color: isSet(object.color) ? colors_gen_1.Color4.fromJSON(object.color) : undefined,
            placeholderColor: isSet(object.placeholderColor) ? colors_gen_1.Color4.fromJSON(object.placeholderColor) : undefined,
            disabled: isSet(object.disabled) ? Boolean(object.disabled) : false,
            textAlign: isSet(object.textAlign) ? (0, texts_gen_1.textAlignModeFromJSON)(object.textAlign) : undefined,
            font: isSet(object.font) ? (0, texts_gen_1.fontFromJSON)(object.font) : undefined,
            fontSize: isSet(object.fontSize) ? Number(object.fontSize) : undefined,
            value: isSet(object.value) ? String(object.value) : undefined,
        };
    }
    PBUiInput.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.placeholder !== undefined && (obj.placeholder = message.placeholder);
        message.color !== undefined && (obj.color = message.color ? colors_gen_1.Color4.toJSON(message.color) : undefined);
        message.placeholderColor !== undefined &&
            (obj.placeholderColor = message.placeholderColor ? colors_gen_1.Color4.toJSON(message.placeholderColor) : undefined);
        message.disabled !== undefined && (obj.disabled = message.disabled);
        message.textAlign !== undefined &&
            (obj.textAlign = message.textAlign !== undefined ? (0, texts_gen_1.textAlignModeToJSON)(message.textAlign) : undefined);
        message.font !== undefined && (obj.font = message.font !== undefined ? (0, texts_gen_1.fontToJSON)(message.font) : undefined);
        message.fontSize !== undefined && (obj.fontSize = Math.round(message.fontSize));
        message.value !== undefined && (obj.value = message.value);
        return obj;
    }
    PBUiInput.toJSON = toJSON;
    function create(base) {
        return PBUiInput.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBUiInput.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBasePBUiInput();
        message.placeholder = (_a = object.placeholder) !== null && _a !== void 0 ? _a : "";
        message.color = (object.color !== undefined && object.color !== null)
            ? colors_gen_1.Color4.fromPartial(object.color)
            : undefined;
        message.placeholderColor = (object.placeholderColor !== undefined && object.placeholderColor !== null)
            ? colors_gen_1.Color4.fromPartial(object.placeholderColor)
            : undefined;
        message.disabled = (_b = object.disabled) !== null && _b !== void 0 ? _b : false;
        message.textAlign = (_c = object.textAlign) !== null && _c !== void 0 ? _c : undefined;
        message.font = (_d = object.font) !== null && _d !== void 0 ? _d : undefined;
        message.fontSize = (_e = object.fontSize) !== null && _e !== void 0 ? _e : undefined;
        message.value = (_f = object.value) !== null && _f !== void 0 ? _f : undefined;
        return message;
    }
    PBUiInput.fromPartial = fromPartial;
})(PBUiInput || (exports.PBUiInput = PBUiInput = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=ui_input.gen.js.map