"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBUiDropdown = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const colors_gen_1 = require("../../common/colors.gen");
const texts_gen_1 = require("./common/texts.gen");
exports.protobufPackage = "decentraland.sdk.components";
function createBasePBUiDropdown() {
    return {
        acceptEmpty: false,
        emptyLabel: undefined,
        options: [],
        selectedIndex: undefined,
        disabled: false,
        color: undefined,
        textAlign: undefined,
        font: undefined,
        fontSize: undefined,
    };
}
var PBUiDropdown;
(function (PBUiDropdown) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.acceptEmpty === true) {
            writer.uint32(8).bool(message.acceptEmpty);
        }
        if (message.emptyLabel !== undefined) {
            writer.uint32(18).string(message.emptyLabel);
        }
        for (const v of message.options) {
            writer.uint32(26).string(v);
        }
        if (message.selectedIndex !== undefined) {
            writer.uint32(32).int32(message.selectedIndex);
        }
        if (message.disabled === true) {
            writer.uint32(40).bool(message.disabled);
        }
        if (message.color !== undefined) {
            colors_gen_1.Color4.encode(message.color, writer.uint32(50).fork()).ldelim();
        }
        if (message.textAlign !== undefined) {
            writer.uint32(80).int32(message.textAlign);
        }
        if (message.font !== undefined) {
            writer.uint32(88).int32(message.font);
        }
        if (message.fontSize !== undefined) {
            writer.uint32(96).int32(message.fontSize);
        }
        return writer;
    }
    PBUiDropdown.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBUiDropdown();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.acceptEmpty = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.emptyLabel = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.options.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.selectedIndex = reader.int32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.disabled = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.color = colors_gen_1.Color4.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.textAlign = reader.int32();
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.font = reader.int32();
                    continue;
                case 12:
                    if (tag !== 96) {
                        break;
                    }
                    message.fontSize = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBUiDropdown.decode = decode;
    function fromJSON(object) {
        return {
            acceptEmpty: isSet(object.acceptEmpty) ? Boolean(object.acceptEmpty) : false,
            emptyLabel: isSet(object.emptyLabel) ? String(object.emptyLabel) : undefined,
            options: Array.isArray(object === null || object === void 0 ? void 0 : object.options) ? object.options.map((e) => String(e)) : [],
            selectedIndex: isSet(object.selectedIndex) ? Number(object.selectedIndex) : undefined,
            disabled: isSet(object.disabled) ? Boolean(object.disabled) : false,
            color: isSet(object.color) ? colors_gen_1.Color4.fromJSON(object.color) : undefined,
            textAlign: isSet(object.textAlign) ? (0, texts_gen_1.textAlignModeFromJSON)(object.textAlign) : undefined,
            font: isSet(object.font) ? (0, texts_gen_1.fontFromJSON)(object.font) : undefined,
            fontSize: isSet(object.fontSize) ? Number(object.fontSize) : undefined,
        };
    }
    PBUiDropdown.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.acceptEmpty !== undefined && (obj.acceptEmpty = message.acceptEmpty);
        message.emptyLabel !== undefined && (obj.emptyLabel = message.emptyLabel);
        if (message.options) {
            obj.options = message.options.map((e) => e);
        }
        else {
            obj.options = [];
        }
        message.selectedIndex !== undefined && (obj.selectedIndex = Math.round(message.selectedIndex));
        message.disabled !== undefined && (obj.disabled = message.disabled);
        message.color !== undefined && (obj.color = message.color ? colors_gen_1.Color4.toJSON(message.color) : undefined);
        message.textAlign !== undefined &&
            (obj.textAlign = message.textAlign !== undefined ? (0, texts_gen_1.textAlignModeToJSON)(message.textAlign) : undefined);
        message.font !== undefined && (obj.font = message.font !== undefined ? (0, texts_gen_1.fontToJSON)(message.font) : undefined);
        message.fontSize !== undefined && (obj.fontSize = Math.round(message.fontSize));
        return obj;
    }
    PBUiDropdown.toJSON = toJSON;
    function create(base) {
        return PBUiDropdown.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBUiDropdown.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBasePBUiDropdown();
        message.acceptEmpty = (_a = object.acceptEmpty) !== null && _a !== void 0 ? _a : false;
        message.emptyLabel = (_b = object.emptyLabel) !== null && _b !== void 0 ? _b : undefined;
        message.options = ((_c = object.options) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.selectedIndex = (_d = object.selectedIndex) !== null && _d !== void 0 ? _d : undefined;
        message.disabled = (_e = object.disabled) !== null && _e !== void 0 ? _e : false;
        message.color = (object.color !== undefined && object.color !== null)
            ? colors_gen_1.Color4.fromPartial(object.color)
            : undefined;
        message.textAlign = (_f = object.textAlign) !== null && _f !== void 0 ? _f : undefined;
        message.font = (_g = object.font) !== null && _g !== void 0 ? _g : undefined;
        message.fontSize = (_h = object.fontSize) !== null && _h !== void 0 ? _h : undefined;
        return message;
    }
    PBUiDropdown.fromPartial = fromPartial;
})(PBUiDropdown || (exports.PBUiDropdown = PBUiDropdown = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=ui_dropdown.gen.js.map