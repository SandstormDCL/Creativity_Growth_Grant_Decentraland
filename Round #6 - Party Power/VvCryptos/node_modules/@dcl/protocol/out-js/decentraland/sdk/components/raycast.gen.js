"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBRaycast = exports.RaycastQueryType = exports.protobufPackage = void 0;
exports.raycastQueryTypeFromJSON = raycastQueryTypeFromJSON;
exports.raycastQueryTypeToJSON = raycastQueryTypeToJSON;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const vectors_gen_1 = require("../../common/vectors.gen");
exports.protobufPackage = "decentraland.sdk.components";
/** RaycastQueryType indicates whether the ray should stop on the first collition, or continue. */
var RaycastQueryType;
(function (RaycastQueryType) {
    /** RQT_HIT_FIRST - Pick the first (not necessarily the closest) hit within the range */
    RaycastQueryType[RaycastQueryType["RQT_HIT_FIRST"] = 0] = "RQT_HIT_FIRST";
    /** RQT_QUERY_ALL - Pick all hits within the range */
    RaycastQueryType[RaycastQueryType["RQT_QUERY_ALL"] = 1] = "RQT_QUERY_ALL";
    /** RQT_NONE - Do not perform the raycast, only set the raycast result with empty hits */
    RaycastQueryType[RaycastQueryType["RQT_NONE"] = 2] = "RQT_NONE";
    RaycastQueryType[RaycastQueryType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RaycastQueryType || (exports.RaycastQueryType = RaycastQueryType = {}));
function raycastQueryTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "RQT_HIT_FIRST":
            return RaycastQueryType.RQT_HIT_FIRST;
        case 1:
        case "RQT_QUERY_ALL":
            return RaycastQueryType.RQT_QUERY_ALL;
        case 2:
        case "RQT_NONE":
            return RaycastQueryType.RQT_NONE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return RaycastQueryType.UNRECOGNIZED;
    }
}
function raycastQueryTypeToJSON(object) {
    switch (object) {
        case RaycastQueryType.RQT_HIT_FIRST:
            return "RQT_HIT_FIRST";
        case RaycastQueryType.RQT_QUERY_ALL:
            return "RQT_QUERY_ALL";
        case RaycastQueryType.RQT_NONE:
            return "RQT_NONE";
        case RaycastQueryType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBasePBRaycast() {
    return {
        timestamp: undefined,
        originOffset: undefined,
        direction: undefined,
        maxDistance: 0,
        queryType: 0,
        continuous: undefined,
        collisionMask: undefined,
    };
}
var PBRaycast;
(function (PBRaycast) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        if (message.timestamp !== undefined) {
            writer.uint32(8).uint32(message.timestamp);
        }
        if (message.originOffset !== undefined) {
            vectors_gen_1.Vector3.encode(message.originOffset, writer.uint32(18).fork()).ldelim();
        }
        switch ((_a = message.direction) === null || _a === void 0 ? void 0 : _a.$case) {
            case "localDirection":
                vectors_gen_1.Vector3.encode(message.direction.localDirection, writer.uint32(50).fork()).ldelim();
                break;
            case "globalDirection":
                vectors_gen_1.Vector3.encode(message.direction.globalDirection, writer.uint32(26).fork()).ldelim();
                break;
            case "globalTarget":
                vectors_gen_1.Vector3.encode(message.direction.globalTarget, writer.uint32(58).fork()).ldelim();
                break;
            case "targetEntity":
                writer.uint32(80).uint32(message.direction.targetEntity);
                break;
        }
        if (message.maxDistance !== 0) {
            writer.uint32(37).float(message.maxDistance);
        }
        if (message.queryType !== 0) {
            writer.uint32(40).int32(message.queryType);
        }
        if (message.continuous !== undefined) {
            writer.uint32(64).bool(message.continuous);
        }
        if (message.collisionMask !== undefined) {
            writer.uint32(72).uint32(message.collisionMask);
        }
        return writer;
    }
    PBRaycast.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBRaycast();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.timestamp = reader.uint32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.originOffset = vectors_gen_1.Vector3.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.direction = { $case: "localDirection", localDirection: vectors_gen_1.Vector3.decode(reader, reader.uint32()) };
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.direction = { $case: "globalDirection", globalDirection: vectors_gen_1.Vector3.decode(reader, reader.uint32()) };
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.direction = { $case: "globalTarget", globalTarget: vectors_gen_1.Vector3.decode(reader, reader.uint32()) };
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.direction = { $case: "targetEntity", targetEntity: reader.uint32() };
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.maxDistance = reader.float();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.queryType = reader.int32();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.continuous = reader.bool();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.collisionMask = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBRaycast.decode = decode;
    function fromJSON(object) {
        return {
            timestamp: isSet(object.timestamp) ? Number(object.timestamp) : undefined,
            originOffset: isSet(object.originOffset) ? vectors_gen_1.Vector3.fromJSON(object.originOffset) : undefined,
            direction: isSet(object.localDirection)
                ? { $case: "localDirection", localDirection: vectors_gen_1.Vector3.fromJSON(object.localDirection) }
                : isSet(object.globalDirection)
                    ? { $case: "globalDirection", globalDirection: vectors_gen_1.Vector3.fromJSON(object.globalDirection) }
                    : isSet(object.globalTarget)
                        ? { $case: "globalTarget", globalTarget: vectors_gen_1.Vector3.fromJSON(object.globalTarget) }
                        : isSet(object.targetEntity)
                            ? { $case: "targetEntity", targetEntity: Number(object.targetEntity) }
                            : undefined,
            maxDistance: isSet(object.maxDistance) ? Number(object.maxDistance) : 0,
            queryType: isSet(object.queryType) ? raycastQueryTypeFromJSON(object.queryType) : 0,
            continuous: isSet(object.continuous) ? Boolean(object.continuous) : undefined,
            collisionMask: isSet(object.collisionMask) ? Number(object.collisionMask) : undefined,
        };
    }
    PBRaycast.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const obj = {};
        message.timestamp !== undefined && (obj.timestamp = Math.round(message.timestamp));
        message.originOffset !== undefined &&
            (obj.originOffset = message.originOffset ? vectors_gen_1.Vector3.toJSON(message.originOffset) : undefined);
        ((_a = message.direction) === null || _a === void 0 ? void 0 : _a.$case) === "localDirection" &&
            (obj.localDirection = ((_b = message.direction) === null || _b === void 0 ? void 0 : _b.localDirection)
                ? vectors_gen_1.Vector3.toJSON((_c = message.direction) === null || _c === void 0 ? void 0 : _c.localDirection)
                : undefined);
        ((_d = message.direction) === null || _d === void 0 ? void 0 : _d.$case) === "globalDirection" &&
            (obj.globalDirection = ((_e = message.direction) === null || _e === void 0 ? void 0 : _e.globalDirection)
                ? vectors_gen_1.Vector3.toJSON((_f = message.direction) === null || _f === void 0 ? void 0 : _f.globalDirection)
                : undefined);
        ((_g = message.direction) === null || _g === void 0 ? void 0 : _g.$case) === "globalTarget" &&
            (obj.globalTarget = ((_h = message.direction) === null || _h === void 0 ? void 0 : _h.globalTarget)
                ? vectors_gen_1.Vector3.toJSON((_j = message.direction) === null || _j === void 0 ? void 0 : _j.globalTarget)
                : undefined);
        ((_k = message.direction) === null || _k === void 0 ? void 0 : _k.$case) === "targetEntity" && (obj.targetEntity = Math.round((_l = message.direction) === null || _l === void 0 ? void 0 : _l.targetEntity));
        message.maxDistance !== undefined && (obj.maxDistance = message.maxDistance);
        message.queryType !== undefined && (obj.queryType = raycastQueryTypeToJSON(message.queryType));
        message.continuous !== undefined && (obj.continuous = message.continuous);
        message.collisionMask !== undefined && (obj.collisionMask = Math.round(message.collisionMask));
        return obj;
    }
    PBRaycast.toJSON = toJSON;
    function create(base) {
        return PBRaycast.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBRaycast.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
        const message = createBasePBRaycast();
        message.timestamp = (_a = object.timestamp) !== null && _a !== void 0 ? _a : undefined;
        message.originOffset = (object.originOffset !== undefined && object.originOffset !== null)
            ? vectors_gen_1.Vector3.fromPartial(object.originOffset)
            : undefined;
        if (((_b = object.direction) === null || _b === void 0 ? void 0 : _b.$case) === "localDirection" &&
            ((_c = object.direction) === null || _c === void 0 ? void 0 : _c.localDirection) !== undefined &&
            ((_d = object.direction) === null || _d === void 0 ? void 0 : _d.localDirection) !== null) {
            message.direction = {
                $case: "localDirection",
                localDirection: vectors_gen_1.Vector3.fromPartial(object.direction.localDirection),
            };
        }
        if (((_e = object.direction) === null || _e === void 0 ? void 0 : _e.$case) === "globalDirection" &&
            ((_f = object.direction) === null || _f === void 0 ? void 0 : _f.globalDirection) !== undefined &&
            ((_g = object.direction) === null || _g === void 0 ? void 0 : _g.globalDirection) !== null) {
            message.direction = {
                $case: "globalDirection",
                globalDirection: vectors_gen_1.Vector3.fromPartial(object.direction.globalDirection),
            };
        }
        if (((_h = object.direction) === null || _h === void 0 ? void 0 : _h.$case) === "globalTarget" &&
            ((_j = object.direction) === null || _j === void 0 ? void 0 : _j.globalTarget) !== undefined &&
            ((_k = object.direction) === null || _k === void 0 ? void 0 : _k.globalTarget) !== null) {
            message.direction = { $case: "globalTarget", globalTarget: vectors_gen_1.Vector3.fromPartial(object.direction.globalTarget) };
        }
        if (((_l = object.direction) === null || _l === void 0 ? void 0 : _l.$case) === "targetEntity" &&
            ((_m = object.direction) === null || _m === void 0 ? void 0 : _m.targetEntity) !== undefined &&
            ((_o = object.direction) === null || _o === void 0 ? void 0 : _o.targetEntity) !== null) {
            message.direction = { $case: "targetEntity", targetEntity: object.direction.targetEntity };
        }
        message.maxDistance = (_p = object.maxDistance) !== null && _p !== void 0 ? _p : 0;
        message.queryType = (_q = object.queryType) !== null && _q !== void 0 ? _q : 0;
        message.continuous = (_r = object.continuous) !== null && _r !== void 0 ? _r : undefined;
        message.collisionMask = (_s = object.collisionMask) !== null && _s !== void 0 ? _s : undefined;
        return message;
    }
    PBRaycast.fromPartial = fromPartial;
})(PBRaycast || (exports.PBRaycast = PBRaycast = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=raycast.gen.js.map