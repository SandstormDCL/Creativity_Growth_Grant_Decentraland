import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.sdk.components";
/**
 * The AudioSource component can play an audio clips bundled with the scene, controlling some
 * of the behavior.
 *
 * In each AudioSource instance, the sound is spatially located at the associated entityâ€™s position,
 * given by its Transform.
 *
 * Note that the `audio_clip_url` is not actually a URL, but rather the path of a file bundled with
 * the scene and declared in its manifest. The name was chosen because the URL use-case will
 * eventually be supported.
 *
 * `playing=true` when it's previously `playing=true`
 *  a) if clip is playing and `current_time` is NOT SET, the clip remains in the current `current_time`
 *  b) if clip is stopped or `current_time` is set, the clip is played from the `current_time` (if set) or from the beginning
 *
 * If other property (volume, loop, pitch) is changed while playing, the clip is keep playing with the new properties
 * Changing `audio_clip_url` while playing stops the current clip and plays the new one (as a new instance)
 */
export interface PBAudioSource {
    /** whether the clip is currently playing. */
    playing?: boolean | undefined;
    /** the audio volume (default: 1.0). */
    volume?: number | undefined;
    /** whether the clip should restart when finished. */
    loop?: boolean | undefined;
    /** the audio pitch (default: 1.0). */
    pitch?: number | undefined;
    /** the clip path as given in the `files` array of the scene's manifest. */
    audioClipUrl: string;
    /** specifies the current playback time of the clip in seconds (default: 0). */
    currentTime?: number | undefined;
    /** whether the audio plays at constant volume across the scene. */
    global?: boolean | undefined;
}
export declare namespace PBAudioSource {
    function encode(message: PBAudioSource, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBAudioSource;
    function fromJSON(object: any): PBAudioSource;
    function toJSON(message: PBAudioSource): unknown;
    function create<I extends Exact<DeepPartial<PBAudioSource>, I>>(base?: I): PBAudioSource;
    function fromPartial<I extends Exact<DeepPartial<PBAudioSource>, I>>(object: I): PBAudioSource;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
