import _m0 from "protobufjs/minimal";
import { Vector3 } from "../../../common/vectors.gen";
export declare const protobufPackage = "decentraland.sdk.components.common";
/** RaycastHit contains information about the intersection of a ray with a mesh. */
export interface RaycastHit {
    /** Position will be relative to the scene */
    position: Vector3 | undefined;
    /** the starting point of the ray in global coordinates */
    globalOrigin: Vector3 | undefined;
    /** the direction vector of the ray in global coordinates */
    direction: Vector3 | undefined;
    /** normal of the hit surface in global coordinates */
    normalHit: Vector3 | undefined;
    /** the distance between the ray origin and the hit position */
    length: number;
    /** mesh name, if collision happened inside a GltfContainer */
    meshName?: string | undefined;
    /** the ID of the Entity that has the impacted mesh attached */
    entityId?: number | undefined;
}
export declare namespace RaycastHit {
    function encode(message: RaycastHit, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): RaycastHit;
    function fromJSON(object: any): RaycastHit;
    function toJSON(message: RaycastHit): unknown;
    function create<I extends Exact<DeepPartial<RaycastHit>, I>>(base?: I): RaycastHit;
    function fromPartial<I extends Exact<DeepPartial<RaycastHit>, I>>(object: I): RaycastHit;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
