import _m0 from "protobufjs/minimal";
import { Vector3 } from "../../common/vectors.gen";
import { CameraType } from "./common/camera_type.gen";
export declare const protobufPackage = "decentraland.sdk.components";
/**
 * The CameraModeArea component can be attached to an Entity to define a region of space where
 * the player's camera mode (1st-person or 3rd-person) is overridden.
 *
 * The Entity's Transform position determines the center-point of the region, while its size is
 * given as a vector in the `area` property below. The Transform rotation is applied, but the scale
 * is ignored.
 *
 * When players leave the region, their previous setting is restored.
 *
 * Note that, while commonly used to delineate a 2D area in a scene (hence the name), the region
 * is actually a 3D volume.
 */
export interface PBCameraModeArea {
    /** the 3D size of the region */
    area: Vector3 | undefined;
    /** the camera mode to enforce */
    mode: CameraType;
}
export declare namespace PBCameraModeArea {
    function encode(message: PBCameraModeArea, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBCameraModeArea;
    function fromJSON(object: any): PBCameraModeArea;
    function toJSON(message: PBCameraModeArea): unknown;
    function create<I extends Exact<DeepPartial<PBCameraModeArea>, I>>(base?: I): PBCameraModeArea;
    function fromPartial<I extends Exact<DeepPartial<PBCameraModeArea>, I>>(object: I): PBCameraModeArea;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
