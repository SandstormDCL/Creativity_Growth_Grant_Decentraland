"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBAvatarShape = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const colors_gen_1 = require("../../common/colors.gen");
exports.protobufPackage = "decentraland.sdk.components";
function createBasePBAvatarShape() {
    return {
        id: "",
        name: undefined,
        bodyShape: undefined,
        skinColor: undefined,
        hairColor: undefined,
        eyeColor: undefined,
        expressionTriggerId: undefined,
        expressionTriggerTimestamp: undefined,
        talking: undefined,
        wearables: [],
        emotes: [],
    };
}
var PBAvatarShape;
(function (PBAvatarShape) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== undefined) {
            writer.uint32(18).string(message.name);
        }
        if (message.bodyShape !== undefined) {
            writer.uint32(26).string(message.bodyShape);
        }
        if (message.skinColor !== undefined) {
            colors_gen_1.Color3.encode(message.skinColor, writer.uint32(34).fork()).ldelim();
        }
        if (message.hairColor !== undefined) {
            colors_gen_1.Color3.encode(message.hairColor, writer.uint32(42).fork()).ldelim();
        }
        if (message.eyeColor !== undefined) {
            colors_gen_1.Color3.encode(message.eyeColor, writer.uint32(50).fork()).ldelim();
        }
        if (message.expressionTriggerId !== undefined) {
            writer.uint32(58).string(message.expressionTriggerId);
        }
        if (message.expressionTriggerTimestamp !== undefined) {
            writer.uint32(64).int64(message.expressionTriggerTimestamp);
        }
        if (message.talking !== undefined) {
            writer.uint32(72).bool(message.talking);
        }
        for (const v of message.wearables) {
            writer.uint32(82).string(v);
        }
        for (const v of message.emotes) {
            writer.uint32(90).string(v);
        }
        return writer;
    }
    PBAvatarShape.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBAvatarShape();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.bodyShape = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.skinColor = colors_gen_1.Color3.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.hairColor = colors_gen_1.Color3.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.eyeColor = colors_gen_1.Color3.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.expressionTriggerId = reader.string();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.expressionTriggerTimestamp = longToNumber(reader.int64());
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.talking = reader.bool();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.wearables.push(reader.string());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.emotes.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBAvatarShape.decode = decode;
    function fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            name: isSet(object.name) ? String(object.name) : undefined,
            bodyShape: isSet(object.bodyShape) ? String(object.bodyShape) : undefined,
            skinColor: isSet(object.skinColor) ? colors_gen_1.Color3.fromJSON(object.skinColor) : undefined,
            hairColor: isSet(object.hairColor) ? colors_gen_1.Color3.fromJSON(object.hairColor) : undefined,
            eyeColor: isSet(object.eyeColor) ? colors_gen_1.Color3.fromJSON(object.eyeColor) : undefined,
            expressionTriggerId: isSet(object.expressionTriggerId) ? String(object.expressionTriggerId) : undefined,
            expressionTriggerTimestamp: isSet(object.expressionTriggerTimestamp)
                ? Number(object.expressionTriggerTimestamp)
                : undefined,
            talking: isSet(object.talking) ? Boolean(object.talking) : undefined,
            wearables: Array.isArray(object === null || object === void 0 ? void 0 : object.wearables) ? object.wearables.map((e) => String(e)) : [],
            emotes: Array.isArray(object === null || object === void 0 ? void 0 : object.emotes) ? object.emotes.map((e) => String(e)) : [],
        };
    }
    PBAvatarShape.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.name !== undefined && (obj.name = message.name);
        message.bodyShape !== undefined && (obj.bodyShape = message.bodyShape);
        message.skinColor !== undefined &&
            (obj.skinColor = message.skinColor ? colors_gen_1.Color3.toJSON(message.skinColor) : undefined);
        message.hairColor !== undefined &&
            (obj.hairColor = message.hairColor ? colors_gen_1.Color3.toJSON(message.hairColor) : undefined);
        message.eyeColor !== undefined && (obj.eyeColor = message.eyeColor ? colors_gen_1.Color3.toJSON(message.eyeColor) : undefined);
        message.expressionTriggerId !== undefined && (obj.expressionTriggerId = message.expressionTriggerId);
        message.expressionTriggerTimestamp !== undefined &&
            (obj.expressionTriggerTimestamp = Math.round(message.expressionTriggerTimestamp));
        message.talking !== undefined && (obj.talking = message.talking);
        if (message.wearables) {
            obj.wearables = message.wearables.map((e) => e);
        }
        else {
            obj.wearables = [];
        }
        if (message.emotes) {
            obj.emotes = message.emotes.map((e) => e);
        }
        else {
            obj.emotes = [];
        }
        return obj;
    }
    PBAvatarShape.toJSON = toJSON;
    function create(base) {
        return PBAvatarShape.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBAvatarShape.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBasePBAvatarShape();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : undefined;
        message.bodyShape = (_c = object.bodyShape) !== null && _c !== void 0 ? _c : undefined;
        message.skinColor = (object.skinColor !== undefined && object.skinColor !== null)
            ? colors_gen_1.Color3.fromPartial(object.skinColor)
            : undefined;
        message.hairColor = (object.hairColor !== undefined && object.hairColor !== null)
            ? colors_gen_1.Color3.fromPartial(object.hairColor)
            : undefined;
        message.eyeColor = (object.eyeColor !== undefined && object.eyeColor !== null)
            ? colors_gen_1.Color3.fromPartial(object.eyeColor)
            : undefined;
        message.expressionTriggerId = (_d = object.expressionTriggerId) !== null && _d !== void 0 ? _d : undefined;
        message.expressionTriggerTimestamp = (_e = object.expressionTriggerTimestamp) !== null && _e !== void 0 ? _e : undefined;
        message.talking = (_f = object.talking) !== null && _f !== void 0 ? _f : undefined;
        message.wearables = ((_g = object.wearables) === null || _g === void 0 ? void 0 : _g.map((e) => e)) || [];
        message.emotes = ((_h = object.emotes) === null || _h === void 0 ? void 0 : _h.map((e) => e)) || [];
        return message;
    }
    PBAvatarShape.fromPartial = fromPartial;
})(PBAvatarShape || (exports.PBAvatarShape = PBAvatarShape = {}));
const tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=avatar_shape.gen.js.map