import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.sdk.components";
/**
 * AvatarEquipData is used to read the information about the avatar's owneables.
 * this component is written by the engine using the communications transports'
 * data.
 */
export interface PBAvatarEquippedData {
    wearableUrns: string[];
    emoteUrns: string[];
}
export declare namespace PBAvatarEquippedData {
    function encode(message: PBAvatarEquippedData, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PBAvatarEquippedData;
    function fromJSON(object: any): PBAvatarEquippedData;
    function toJSON(message: PBAvatarEquippedData): unknown;
    function create<I extends Exact<DeepPartial<PBAvatarEquippedData>, I>>(base?: I): PBAvatarEquippedData;
    function fromPartial<I extends Exact<DeepPartial<PBAvatarEquippedData>, I>>(object: I): PBAvatarEquippedData;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
