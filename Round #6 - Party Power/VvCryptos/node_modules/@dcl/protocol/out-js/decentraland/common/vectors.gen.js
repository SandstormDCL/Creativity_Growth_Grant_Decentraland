"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Quaternion = exports.Vector2 = exports.Vector3 = exports.Position = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.common";
function createBasePosition() {
    return { x: 0, y: 0, z: 0 };
}
var Position;
(function (Position) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.x !== 0) {
            writer.uint32(13).float(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(21).float(message.y);
        }
        if (message.z !== 0) {
            writer.uint32(29).float(message.z);
        }
        return writer;
    }
    Position.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePosition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.x = reader.float();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.y = reader.float();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.z = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Position.decode = decode;
    function fromJSON(object) {
        return {
            x: isSet(object.x) ? Number(object.x) : 0,
            y: isSet(object.y) ? Number(object.y) : 0,
            z: isSet(object.z) ? Number(object.z) : 0,
        };
    }
    Position.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.x !== undefined && (obj.x = message.x);
        message.y !== undefined && (obj.y = message.y);
        message.z !== undefined && (obj.z = message.z);
        return obj;
    }
    Position.toJSON = toJSON;
    function create(base) {
        return Position.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Position.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePosition();
        message.x = (_a = object.x) !== null && _a !== void 0 ? _a : 0;
        message.y = (_b = object.y) !== null && _b !== void 0 ? _b : 0;
        message.z = (_c = object.z) !== null && _c !== void 0 ? _c : 0;
        return message;
    }
    Position.fromPartial = fromPartial;
})(Position || (exports.Position = Position = {}));
function createBaseVector3() {
    return { x: 0, y: 0, z: 0 };
}
var Vector3;
(function (Vector3) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.x !== 0) {
            writer.uint32(13).float(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(21).float(message.y);
        }
        if (message.z !== 0) {
            writer.uint32(29).float(message.z);
        }
        return writer;
    }
    Vector3.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVector3();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.x = reader.float();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.y = reader.float();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.z = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Vector3.decode = decode;
    function fromJSON(object) {
        return {
            x: isSet(object.x) ? Number(object.x) : 0,
            y: isSet(object.y) ? Number(object.y) : 0,
            z: isSet(object.z) ? Number(object.z) : 0,
        };
    }
    Vector3.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.x !== undefined && (obj.x = message.x);
        message.y !== undefined && (obj.y = message.y);
        message.z !== undefined && (obj.z = message.z);
        return obj;
    }
    Vector3.toJSON = toJSON;
    function create(base) {
        return Vector3.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Vector3.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseVector3();
        message.x = (_a = object.x) !== null && _a !== void 0 ? _a : 0;
        message.y = (_b = object.y) !== null && _b !== void 0 ? _b : 0;
        message.z = (_c = object.z) !== null && _c !== void 0 ? _c : 0;
        return message;
    }
    Vector3.fromPartial = fromPartial;
})(Vector3 || (exports.Vector3 = Vector3 = {}));
function createBaseVector2() {
    return { x: 0, y: 0 };
}
var Vector2;
(function (Vector2) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.x !== 0) {
            writer.uint32(13).float(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(21).float(message.y);
        }
        return writer;
    }
    Vector2.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVector2();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.x = reader.float();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.y = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Vector2.decode = decode;
    function fromJSON(object) {
        return { x: isSet(object.x) ? Number(object.x) : 0, y: isSet(object.y) ? Number(object.y) : 0 };
    }
    Vector2.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.x !== undefined && (obj.x = message.x);
        message.y !== undefined && (obj.y = message.y);
        return obj;
    }
    Vector2.toJSON = toJSON;
    function create(base) {
        return Vector2.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Vector2.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseVector2();
        message.x = (_a = object.x) !== null && _a !== void 0 ? _a : 0;
        message.y = (_b = object.y) !== null && _b !== void 0 ? _b : 0;
        return message;
    }
    Vector2.fromPartial = fromPartial;
})(Vector2 || (exports.Vector2 = Vector2 = {}));
function createBaseQuaternion() {
    return { x: 0, y: 0, z: 0, w: 0 };
}
var Quaternion;
(function (Quaternion) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.x !== 0) {
            writer.uint32(13).float(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(21).float(message.y);
        }
        if (message.z !== 0) {
            writer.uint32(29).float(message.z);
        }
        if (message.w !== 0) {
            writer.uint32(37).float(message.w);
        }
        return writer;
    }
    Quaternion.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuaternion();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.x = reader.float();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.y = reader.float();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.z = reader.float();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.w = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Quaternion.decode = decode;
    function fromJSON(object) {
        return {
            x: isSet(object.x) ? Number(object.x) : 0,
            y: isSet(object.y) ? Number(object.y) : 0,
            z: isSet(object.z) ? Number(object.z) : 0,
            w: isSet(object.w) ? Number(object.w) : 0,
        };
    }
    Quaternion.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.x !== undefined && (obj.x = message.x);
        message.y !== undefined && (obj.y = message.y);
        message.z !== undefined && (obj.z = message.z);
        message.w !== undefined && (obj.w = message.w);
        return obj;
    }
    Quaternion.toJSON = toJSON;
    function create(base) {
        return Quaternion.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Quaternion.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseQuaternion();
        message.x = (_a = object.x) !== null && _a !== void 0 ? _a : 0;
        message.y = (_b = object.y) !== null && _b !== void 0 ? _b : 0;
        message.z = (_c = object.z) !== null && _c !== void 0 ? _c : 0;
        message.w = (_d = object.w) !== null && _d !== void 0 ? _d : 0;
        return message;
    }
    Quaternion.fromPartial = fromPartial;
})(Quaternion || (exports.Quaternion = Quaternion = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=vectors.gen.js.map