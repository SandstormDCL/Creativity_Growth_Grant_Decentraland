"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserData = exports.AvatarForUserData = exports.Snapshots = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.common.sdk";
function createBaseSnapshots() {
    return { face256: "", body: "" };
}
var Snapshots;
(function (Snapshots) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.face256 !== "") {
            writer.uint32(10).string(message.face256);
        }
        if (message.body !== "") {
            writer.uint32(18).string(message.body);
        }
        return writer;
    }
    Snapshots.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSnapshots();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.face256 = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.body = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Snapshots.decode = decode;
    function fromJSON(object) {
        return {
            face256: isSet(object.face256) ? String(object.face256) : "",
            body: isSet(object.body) ? String(object.body) : "",
        };
    }
    Snapshots.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.face256 !== undefined && (obj.face256 = message.face256);
        message.body !== undefined && (obj.body = message.body);
        return obj;
    }
    Snapshots.toJSON = toJSON;
    function create(base) {
        return Snapshots.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Snapshots.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseSnapshots();
        message.face256 = (_a = object.face256) !== null && _a !== void 0 ? _a : "";
        message.body = (_b = object.body) !== null && _b !== void 0 ? _b : "";
        return message;
    }
    Snapshots.fromPartial = fromPartial;
})(Snapshots || (exports.Snapshots = Snapshots = {}));
function createBaseAvatarForUserData() {
    return { bodyShape: "", skinColor: "", hairColor: "", eyeColor: "", wearables: [], snapshots: undefined };
}
var AvatarForUserData;
(function (AvatarForUserData) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.bodyShape !== "") {
            writer.uint32(10).string(message.bodyShape);
        }
        if (message.skinColor !== "") {
            writer.uint32(18).string(message.skinColor);
        }
        if (message.hairColor !== "") {
            writer.uint32(26).string(message.hairColor);
        }
        if (message.eyeColor !== "") {
            writer.uint32(34).string(message.eyeColor);
        }
        for (const v of message.wearables) {
            writer.uint32(42).string(v);
        }
        if (message.snapshots !== undefined) {
            Snapshots.encode(message.snapshots, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    }
    AvatarForUserData.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAvatarForUserData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.bodyShape = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.skinColor = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.hairColor = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.eyeColor = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.wearables.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.snapshots = Snapshots.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AvatarForUserData.decode = decode;
    function fromJSON(object) {
        return {
            bodyShape: isSet(object.bodyShape) ? String(object.bodyShape) : "",
            skinColor: isSet(object.skinColor) ? String(object.skinColor) : "",
            hairColor: isSet(object.hairColor) ? String(object.hairColor) : "",
            eyeColor: isSet(object.eyeColor) ? String(object.eyeColor) : "",
            wearables: Array.isArray(object === null || object === void 0 ? void 0 : object.wearables) ? object.wearables.map((e) => String(e)) : [],
            snapshots: isSet(object.snapshots) ? Snapshots.fromJSON(object.snapshots) : undefined,
        };
    }
    AvatarForUserData.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.bodyShape !== undefined && (obj.bodyShape = message.bodyShape);
        message.skinColor !== undefined && (obj.skinColor = message.skinColor);
        message.hairColor !== undefined && (obj.hairColor = message.hairColor);
        message.eyeColor !== undefined && (obj.eyeColor = message.eyeColor);
        if (message.wearables) {
            obj.wearables = message.wearables.map((e) => e);
        }
        else {
            obj.wearables = [];
        }
        message.snapshots !== undefined &&
            (obj.snapshots = message.snapshots ? Snapshots.toJSON(message.snapshots) : undefined);
        return obj;
    }
    AvatarForUserData.toJSON = toJSON;
    function create(base) {
        return AvatarForUserData.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AvatarForUserData.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseAvatarForUserData();
        message.bodyShape = (_a = object.bodyShape) !== null && _a !== void 0 ? _a : "";
        message.skinColor = (_b = object.skinColor) !== null && _b !== void 0 ? _b : "";
        message.hairColor = (_c = object.hairColor) !== null && _c !== void 0 ? _c : "";
        message.eyeColor = (_d = object.eyeColor) !== null && _d !== void 0 ? _d : "";
        message.wearables = ((_e = object.wearables) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.snapshots = (object.snapshots !== undefined && object.snapshots !== null)
            ? Snapshots.fromPartial(object.snapshots)
            : undefined;
        return message;
    }
    AvatarForUserData.fromPartial = fromPartial;
})(AvatarForUserData || (exports.AvatarForUserData = AvatarForUserData = {}));
function createBaseUserData() {
    return { displayName: "", publicKey: undefined, hasConnectedWeb3: false, userId: "", version: 0, avatar: undefined };
}
var UserData;
(function (UserData) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.displayName !== "") {
            writer.uint32(10).string(message.displayName);
        }
        if (message.publicKey !== undefined) {
            writer.uint32(18).string(message.publicKey);
        }
        if (message.hasConnectedWeb3 === true) {
            writer.uint32(24).bool(message.hasConnectedWeb3);
        }
        if (message.userId !== "") {
            writer.uint32(34).string(message.userId);
        }
        if (message.version !== 0) {
            writer.uint32(40).int32(message.version);
        }
        if (message.avatar !== undefined) {
            AvatarForUserData.encode(message.avatar, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    }
    UserData.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.displayName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.publicKey = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.hasConnectedWeb3 = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.version = reader.int32();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.avatar = AvatarForUserData.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    UserData.decode = decode;
    function fromJSON(object) {
        return {
            displayName: isSet(object.displayName) ? String(object.displayName) : "",
            publicKey: isSet(object.publicKey) ? String(object.publicKey) : undefined,
            hasConnectedWeb3: isSet(object.hasConnectedWeb3) ? Boolean(object.hasConnectedWeb3) : false,
            userId: isSet(object.userId) ? String(object.userId) : "",
            version: isSet(object.version) ? Number(object.version) : 0,
            avatar: isSet(object.avatar) ? AvatarForUserData.fromJSON(object.avatar) : undefined,
        };
    }
    UserData.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.displayName !== undefined && (obj.displayName = message.displayName);
        message.publicKey !== undefined && (obj.publicKey = message.publicKey);
        message.hasConnectedWeb3 !== undefined && (obj.hasConnectedWeb3 = message.hasConnectedWeb3);
        message.userId !== undefined && (obj.userId = message.userId);
        message.version !== undefined && (obj.version = Math.round(message.version));
        message.avatar !== undefined &&
            (obj.avatar = message.avatar ? AvatarForUserData.toJSON(message.avatar) : undefined);
        return obj;
    }
    UserData.toJSON = toJSON;
    function create(base) {
        return UserData.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    UserData.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseUserData();
        message.displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : "";
        message.publicKey = (_b = object.publicKey) !== null && _b !== void 0 ? _b : undefined;
        message.hasConnectedWeb3 = (_c = object.hasConnectedWeb3) !== null && _c !== void 0 ? _c : false;
        message.userId = (_d = object.userId) !== null && _d !== void 0 ? _d : "";
        message.version = (_e = object.version) !== null && _e !== void 0 ? _e : 0;
        message.avatar = (object.avatar !== undefined && object.avatar !== null)
            ? AvatarForUserData.fromPartial(object.avatar)
            : undefined;
        return message;
    }
    UserData.fromPartial = fromPartial;
})(UserData || (exports.UserData = UserData = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=user_data.gen.js.map