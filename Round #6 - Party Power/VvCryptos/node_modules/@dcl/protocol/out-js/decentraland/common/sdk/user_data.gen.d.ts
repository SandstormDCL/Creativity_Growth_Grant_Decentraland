import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.common.sdk";
export interface Snapshots {
    face256: string;
    body: string;
}
export interface AvatarForUserData {
    bodyShape: string;
    skinColor: string;
    hairColor: string;
    eyeColor: string;
    wearables: string[];
    snapshots: Snapshots | undefined;
}
export interface UserData {
    displayName: string;
    publicKey?: string | undefined;
    hasConnectedWeb3: boolean;
    userId: string;
    version: number;
    avatar: AvatarForUserData | undefined;
}
export declare namespace Snapshots {
    function encode(message: Snapshots, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): Snapshots;
    function fromJSON(object: any): Snapshots;
    function toJSON(message: Snapshots): unknown;
    function create<I extends Exact<DeepPartial<Snapshots>, I>>(base?: I): Snapshots;
    function fromPartial<I extends Exact<DeepPartial<Snapshots>, I>>(object: I): Snapshots;
}
export declare namespace AvatarForUserData {
    function encode(message: AvatarForUserData, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): AvatarForUserData;
    function fromJSON(object: any): AvatarForUserData;
    function toJSON(message: AvatarForUserData): unknown;
    function create<I extends Exact<DeepPartial<AvatarForUserData>, I>>(base?: I): AvatarForUserData;
    function fromPartial<I extends Exact<DeepPartial<AvatarForUserData>, I>>(object: I): AvatarForUserData;
}
export declare namespace UserData {
    function encode(message: UserData, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): UserData;
    function fromJSON(object: any): UserData;
    function toJSON(message: UserData): unknown;
    function create<I extends Exact<DeepPartial<UserData>, I>>(base?: I): UserData;
    function fromPartial<I extends Exact<DeepPartial<UserData>, I>>(object: I): UserData;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
