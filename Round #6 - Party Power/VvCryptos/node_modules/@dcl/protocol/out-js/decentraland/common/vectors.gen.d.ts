import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.common";
export interface Position {
    x: number;
    y: number;
    z: number;
}
export interface Vector3 {
    x: number;
    y: number;
    z: number;
}
export interface Vector2 {
    x: number;
    y: number;
}
export interface Quaternion {
    x: number;
    y: number;
    z: number;
    w: number;
}
export declare namespace Position {
    function encode(message: Position, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): Position;
    function fromJSON(object: any): Position;
    function toJSON(message: Position): unknown;
    function create<I extends Exact<DeepPartial<Position>, I>>(base?: I): Position;
    function fromPartial<I extends Exact<DeepPartial<Position>, I>>(object: I): Position;
}
export declare namespace Vector3 {
    function encode(message: Vector3, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): Vector3;
    function fromJSON(object: any): Vector3;
    function toJSON(message: Vector3): unknown;
    function create<I extends Exact<DeepPartial<Vector3>, I>>(base?: I): Vector3;
    function fromPartial<I extends Exact<DeepPartial<Vector3>, I>>(object: I): Vector3;
}
export declare namespace Vector2 {
    function encode(message: Vector2, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): Vector2;
    function fromJSON(object: any): Vector2;
    function toJSON(message: Vector2): unknown;
    function create<I extends Exact<DeepPartial<Vector2>, I>>(base?: I): Vector2;
    function fromPartial<I extends Exact<DeepPartial<Vector2>, I>>(object: I): Vector2;
}
export declare namespace Quaternion {
    function encode(message: Quaternion, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): Quaternion;
    function fromJSON(object: any): Quaternion;
    function toJSON(message: Quaternion): unknown;
    function create<I extends Exact<DeepPartial<Quaternion>, I>>(base?: I): Quaternion;
    function fromPartial<I extends Exact<DeepPartial<Quaternion>, I>>(object: I): Quaternion;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
