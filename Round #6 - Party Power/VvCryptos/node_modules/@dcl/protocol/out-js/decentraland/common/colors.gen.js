"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Color4 = exports.Color3 = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.common";
function createBaseColor3() {
    return { r: 0, g: 0, b: 0 };
}
var Color3;
(function (Color3) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.r !== 0) {
            writer.uint32(13).float(message.r);
        }
        if (message.g !== 0) {
            writer.uint32(21).float(message.g);
        }
        if (message.b !== 0) {
            writer.uint32(29).float(message.b);
        }
        return writer;
    }
    Color3.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseColor3();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.r = reader.float();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.g = reader.float();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.b = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Color3.decode = decode;
    function fromJSON(object) {
        return {
            r: isSet(object.r) ? Number(object.r) : 0,
            g: isSet(object.g) ? Number(object.g) : 0,
            b: isSet(object.b) ? Number(object.b) : 0,
        };
    }
    Color3.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.r !== undefined && (obj.r = message.r);
        message.g !== undefined && (obj.g = message.g);
        message.b !== undefined && (obj.b = message.b);
        return obj;
    }
    Color3.toJSON = toJSON;
    function create(base) {
        return Color3.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Color3.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseColor3();
        message.r = (_a = object.r) !== null && _a !== void 0 ? _a : 0;
        message.g = (_b = object.g) !== null && _b !== void 0 ? _b : 0;
        message.b = (_c = object.b) !== null && _c !== void 0 ? _c : 0;
        return message;
    }
    Color3.fromPartial = fromPartial;
})(Color3 || (exports.Color3 = Color3 = {}));
function createBaseColor4() {
    return { r: 0, g: 0, b: 0, a: 0 };
}
var Color4;
(function (Color4) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.r !== 0) {
            writer.uint32(13).float(message.r);
        }
        if (message.g !== 0) {
            writer.uint32(21).float(message.g);
        }
        if (message.b !== 0) {
            writer.uint32(29).float(message.b);
        }
        if (message.a !== 0) {
            writer.uint32(37).float(message.a);
        }
        return writer;
    }
    Color4.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseColor4();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.r = reader.float();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.g = reader.float();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.b = reader.float();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.a = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Color4.decode = decode;
    function fromJSON(object) {
        return {
            r: isSet(object.r) ? Number(object.r) : 0,
            g: isSet(object.g) ? Number(object.g) : 0,
            b: isSet(object.b) ? Number(object.b) : 0,
            a: isSet(object.a) ? Number(object.a) : 0,
        };
    }
    Color4.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.r !== undefined && (obj.r = message.r);
        message.g !== undefined && (obj.g = message.g);
        message.b !== undefined && (obj.b = message.b);
        message.a !== undefined && (obj.a = message.a);
        return obj;
    }
    Color4.toJSON = toJSON;
    function create(base) {
        return Color4.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Color4.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseColor4();
        message.r = (_a = object.r) !== null && _a !== void 0 ? _a : 0;
        message.g = (_b = object.g) !== null && _b !== void 0 ? _b : 0;
        message.b = (_c = object.b) !== null && _c !== void 0 ? _c : 0;
        message.a = (_d = object.a) !== null && _d !== void 0 ? _d : 0;
        return message;
    }
    Color4.fromPartial = fromPartial;
})(Color4 || (exports.Color4 = Color4 = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=colors.gen.js.map