"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rect = exports.BorderRect = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.common";
function createBaseBorderRect() {
    return { top: 0, left: 0, right: 0, bottom: 0 };
}
var BorderRect;
(function (BorderRect) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.top !== 0) {
            writer.uint32(13).float(message.top);
        }
        if (message.left !== 0) {
            writer.uint32(21).float(message.left);
        }
        if (message.right !== 0) {
            writer.uint32(29).float(message.right);
        }
        if (message.bottom !== 0) {
            writer.uint32(37).float(message.bottom);
        }
        return writer;
    }
    BorderRect.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBorderRect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.top = reader.float();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.left = reader.float();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.right = reader.float();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.bottom = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    BorderRect.decode = decode;
    function fromJSON(object) {
        return {
            top: isSet(object.top) ? Number(object.top) : 0,
            left: isSet(object.left) ? Number(object.left) : 0,
            right: isSet(object.right) ? Number(object.right) : 0,
            bottom: isSet(object.bottom) ? Number(object.bottom) : 0,
        };
    }
    BorderRect.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.top !== undefined && (obj.top = message.top);
        message.left !== undefined && (obj.left = message.left);
        message.right !== undefined && (obj.right = message.right);
        message.bottom !== undefined && (obj.bottom = message.bottom);
        return obj;
    }
    BorderRect.toJSON = toJSON;
    function create(base) {
        return BorderRect.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    BorderRect.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseBorderRect();
        message.top = (_a = object.top) !== null && _a !== void 0 ? _a : 0;
        message.left = (_b = object.left) !== null && _b !== void 0 ? _b : 0;
        message.right = (_c = object.right) !== null && _c !== void 0 ? _c : 0;
        message.bottom = (_d = object.bottom) !== null && _d !== void 0 ? _d : 0;
        return message;
    }
    BorderRect.fromPartial = fromPartial;
})(BorderRect || (exports.BorderRect = BorderRect = {}));
function createBaseRect() {
    return { x: 0, y: 0, width: 0, height: 0 };
}
var Rect;
(function (Rect) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.x !== 0) {
            writer.uint32(13).float(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(21).float(message.y);
        }
        if (message.width !== 0) {
            writer.uint32(29).float(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(37).float(message.height);
        }
        return writer;
    }
    Rect.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.x = reader.float();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.y = reader.float();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.width = reader.float();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.height = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Rect.decode = decode;
    function fromJSON(object) {
        return {
            x: isSet(object.x) ? Number(object.x) : 0,
            y: isSet(object.y) ? Number(object.y) : 0,
            width: isSet(object.width) ? Number(object.width) : 0,
            height: isSet(object.height) ? Number(object.height) : 0,
        };
    }
    Rect.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.x !== undefined && (obj.x = message.x);
        message.y !== undefined && (obj.y = message.y);
        message.width !== undefined && (obj.width = message.width);
        message.height !== undefined && (obj.height = message.height);
        return obj;
    }
    Rect.toJSON = toJSON;
    function create(base) {
        return Rect.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Rect.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseRect();
        message.x = (_a = object.x) !== null && _a !== void 0 ? _a : 0;
        message.y = (_b = object.y) !== null && _b !== void 0 ? _b : 0;
        message.width = (_c = object.width) !== null && _c !== void 0 ? _c : 0;
        message.height = (_d = object.height) !== null && _d !== void 0 ? _d : 0;
        return message;
    }
    Rect.fromPartial = fromPartial;
})(Rect || (exports.Rect = Rect = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=border_rect.gen.js.map