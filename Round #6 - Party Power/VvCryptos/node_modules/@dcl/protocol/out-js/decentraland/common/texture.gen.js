"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextureUnion = exports.VideoTexture = exports.AvatarTexture = exports.Texture = exports.TextureFilterMode = exports.TextureWrapMode = exports.protobufPackage = void 0;
exports.textureWrapModeFromJSON = textureWrapModeFromJSON;
exports.textureWrapModeToJSON = textureWrapModeToJSON;
exports.textureFilterModeFromJSON = textureFilterModeFromJSON;
exports.textureFilterModeToJSON = textureFilterModeToJSON;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const vectors_gen_1 = require("./vectors.gen");
exports.protobufPackage = "decentraland.common";
var TextureWrapMode;
(function (TextureWrapMode) {
    TextureWrapMode[TextureWrapMode["TWM_REPEAT"] = 0] = "TWM_REPEAT";
    TextureWrapMode[TextureWrapMode["TWM_CLAMP"] = 1] = "TWM_CLAMP";
    TextureWrapMode[TextureWrapMode["TWM_MIRROR"] = 2] = "TWM_MIRROR";
    TextureWrapMode[TextureWrapMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(TextureWrapMode || (exports.TextureWrapMode = TextureWrapMode = {}));
function textureWrapModeFromJSON(object) {
    switch (object) {
        case 0:
        case "TWM_REPEAT":
            return TextureWrapMode.TWM_REPEAT;
        case 1:
        case "TWM_CLAMP":
            return TextureWrapMode.TWM_CLAMP;
        case 2:
        case "TWM_MIRROR":
            return TextureWrapMode.TWM_MIRROR;
        case -1:
        case "UNRECOGNIZED":
        default:
            return TextureWrapMode.UNRECOGNIZED;
    }
}
function textureWrapModeToJSON(object) {
    switch (object) {
        case TextureWrapMode.TWM_REPEAT:
            return "TWM_REPEAT";
        case TextureWrapMode.TWM_CLAMP:
            return "TWM_CLAMP";
        case TextureWrapMode.TWM_MIRROR:
            return "TWM_MIRROR";
        case TextureWrapMode.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var TextureFilterMode;
(function (TextureFilterMode) {
    TextureFilterMode[TextureFilterMode["TFM_POINT"] = 0] = "TFM_POINT";
    TextureFilterMode[TextureFilterMode["TFM_BILINEAR"] = 1] = "TFM_BILINEAR";
    TextureFilterMode[TextureFilterMode["TFM_TRILINEAR"] = 2] = "TFM_TRILINEAR";
    TextureFilterMode[TextureFilterMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(TextureFilterMode || (exports.TextureFilterMode = TextureFilterMode = {}));
function textureFilterModeFromJSON(object) {
    switch (object) {
        case 0:
        case "TFM_POINT":
            return TextureFilterMode.TFM_POINT;
        case 1:
        case "TFM_BILINEAR":
            return TextureFilterMode.TFM_BILINEAR;
        case 2:
        case "TFM_TRILINEAR":
            return TextureFilterMode.TFM_TRILINEAR;
        case -1:
        case "UNRECOGNIZED":
        default:
            return TextureFilterMode.UNRECOGNIZED;
    }
}
function textureFilterModeToJSON(object) {
    switch (object) {
        case TextureFilterMode.TFM_POINT:
            return "TFM_POINT";
        case TextureFilterMode.TFM_BILINEAR:
            return "TFM_BILINEAR";
        case TextureFilterMode.TFM_TRILINEAR:
            return "TFM_TRILINEAR";
        case TextureFilterMode.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseTexture() {
    return { src: "", wrapMode: undefined, filterMode: undefined, offset: undefined, tiling: undefined };
}
var Texture;
(function (Texture) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.src !== "") {
            writer.uint32(10).string(message.src);
        }
        if (message.wrapMode !== undefined) {
            writer.uint32(16).int32(message.wrapMode);
        }
        if (message.filterMode !== undefined) {
            writer.uint32(24).int32(message.filterMode);
        }
        if (message.offset !== undefined) {
            vectors_gen_1.Vector2.encode(message.offset, writer.uint32(34).fork()).ldelim();
        }
        if (message.tiling !== undefined) {
            vectors_gen_1.Vector2.encode(message.tiling, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    }
    Texture.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTexture();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.src = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.wrapMode = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.filterMode = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.offset = vectors_gen_1.Vector2.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.tiling = vectors_gen_1.Vector2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Texture.decode = decode;
    function fromJSON(object) {
        return {
            src: isSet(object.src) ? String(object.src) : "",
            wrapMode: isSet(object.wrapMode) ? textureWrapModeFromJSON(object.wrapMode) : undefined,
            filterMode: isSet(object.filterMode) ? textureFilterModeFromJSON(object.filterMode) : undefined,
            offset: isSet(object.offset) ? vectors_gen_1.Vector2.fromJSON(object.offset) : undefined,
            tiling: isSet(object.tiling) ? vectors_gen_1.Vector2.fromJSON(object.tiling) : undefined,
        };
    }
    Texture.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.src !== undefined && (obj.src = message.src);
        message.wrapMode !== undefined &&
            (obj.wrapMode = message.wrapMode !== undefined ? textureWrapModeToJSON(message.wrapMode) : undefined);
        message.filterMode !== undefined &&
            (obj.filterMode = message.filterMode !== undefined ? textureFilterModeToJSON(message.filterMode) : undefined);
        message.offset !== undefined && (obj.offset = message.offset ? vectors_gen_1.Vector2.toJSON(message.offset) : undefined);
        message.tiling !== undefined && (obj.tiling = message.tiling ? vectors_gen_1.Vector2.toJSON(message.tiling) : undefined);
        return obj;
    }
    Texture.toJSON = toJSON;
    function create(base) {
        return Texture.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Texture.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseTexture();
        message.src = (_a = object.src) !== null && _a !== void 0 ? _a : "";
        message.wrapMode = (_b = object.wrapMode) !== null && _b !== void 0 ? _b : undefined;
        message.filterMode = (_c = object.filterMode) !== null && _c !== void 0 ? _c : undefined;
        message.offset = (object.offset !== undefined && object.offset !== null)
            ? vectors_gen_1.Vector2.fromPartial(object.offset)
            : undefined;
        message.tiling = (object.tiling !== undefined && object.tiling !== null)
            ? vectors_gen_1.Vector2.fromPartial(object.tiling)
            : undefined;
        return message;
    }
    Texture.fromPartial = fromPartial;
})(Texture || (exports.Texture = Texture = {}));
function createBaseAvatarTexture() {
    return { userId: "", wrapMode: undefined, filterMode: undefined };
}
var AvatarTexture;
(function (AvatarTexture) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.wrapMode !== undefined) {
            writer.uint32(16).int32(message.wrapMode);
        }
        if (message.filterMode !== undefined) {
            writer.uint32(24).int32(message.filterMode);
        }
        return writer;
    }
    AvatarTexture.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAvatarTexture();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.wrapMode = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.filterMode = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AvatarTexture.decode = decode;
    function fromJSON(object) {
        return {
            userId: isSet(object.userId) ? String(object.userId) : "",
            wrapMode: isSet(object.wrapMode) ? textureWrapModeFromJSON(object.wrapMode) : undefined,
            filterMode: isSet(object.filterMode) ? textureFilterModeFromJSON(object.filterMode) : undefined,
        };
    }
    AvatarTexture.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.userId !== undefined && (obj.userId = message.userId);
        message.wrapMode !== undefined &&
            (obj.wrapMode = message.wrapMode !== undefined ? textureWrapModeToJSON(message.wrapMode) : undefined);
        message.filterMode !== undefined &&
            (obj.filterMode = message.filterMode !== undefined ? textureFilterModeToJSON(message.filterMode) : undefined);
        return obj;
    }
    AvatarTexture.toJSON = toJSON;
    function create(base) {
        return AvatarTexture.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AvatarTexture.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAvatarTexture();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : "";
        message.wrapMode = (_b = object.wrapMode) !== null && _b !== void 0 ? _b : undefined;
        message.filterMode = (_c = object.filterMode) !== null && _c !== void 0 ? _c : undefined;
        return message;
    }
    AvatarTexture.fromPartial = fromPartial;
})(AvatarTexture || (exports.AvatarTexture = AvatarTexture = {}));
function createBaseVideoTexture() {
    return { videoPlayerEntity: 0, wrapMode: undefined, filterMode: undefined };
}
var VideoTexture;
(function (VideoTexture) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.videoPlayerEntity !== 0) {
            writer.uint32(8).uint32(message.videoPlayerEntity);
        }
        if (message.wrapMode !== undefined) {
            writer.uint32(16).int32(message.wrapMode);
        }
        if (message.filterMode !== undefined) {
            writer.uint32(24).int32(message.filterMode);
        }
        return writer;
    }
    VideoTexture.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVideoTexture();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.videoPlayerEntity = reader.uint32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.wrapMode = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.filterMode = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    VideoTexture.decode = decode;
    function fromJSON(object) {
        return {
            videoPlayerEntity: isSet(object.videoPlayerEntity) ? Number(object.videoPlayerEntity) : 0,
            wrapMode: isSet(object.wrapMode) ? textureWrapModeFromJSON(object.wrapMode) : undefined,
            filterMode: isSet(object.filterMode) ? textureFilterModeFromJSON(object.filterMode) : undefined,
        };
    }
    VideoTexture.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.videoPlayerEntity !== undefined && (obj.videoPlayerEntity = Math.round(message.videoPlayerEntity));
        message.wrapMode !== undefined &&
            (obj.wrapMode = message.wrapMode !== undefined ? textureWrapModeToJSON(message.wrapMode) : undefined);
        message.filterMode !== undefined &&
            (obj.filterMode = message.filterMode !== undefined ? textureFilterModeToJSON(message.filterMode) : undefined);
        return obj;
    }
    VideoTexture.toJSON = toJSON;
    function create(base) {
        return VideoTexture.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    VideoTexture.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseVideoTexture();
        message.videoPlayerEntity = (_a = object.videoPlayerEntity) !== null && _a !== void 0 ? _a : 0;
        message.wrapMode = (_b = object.wrapMode) !== null && _b !== void 0 ? _b : undefined;
        message.filterMode = (_c = object.filterMode) !== null && _c !== void 0 ? _c : undefined;
        return message;
    }
    VideoTexture.fromPartial = fromPartial;
})(VideoTexture || (exports.VideoTexture = VideoTexture = {}));
function createBaseTextureUnion() {
    return { tex: undefined };
}
var TextureUnion;
(function (TextureUnion) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.tex) === null || _a === void 0 ? void 0 : _a.$case) {
            case "texture":
                Texture.encode(message.tex.texture, writer.uint32(10).fork()).ldelim();
                break;
            case "avatarTexture":
                AvatarTexture.encode(message.tex.avatarTexture, writer.uint32(18).fork()).ldelim();
                break;
            case "videoTexture":
                VideoTexture.encode(message.tex.videoTexture, writer.uint32(26).fork()).ldelim();
                break;
        }
        return writer;
    }
    TextureUnion.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTextureUnion();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.tex = { $case: "texture", texture: Texture.decode(reader, reader.uint32()) };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.tex = { $case: "avatarTexture", avatarTexture: AvatarTexture.decode(reader, reader.uint32()) };
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.tex = { $case: "videoTexture", videoTexture: VideoTexture.decode(reader, reader.uint32()) };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    TextureUnion.decode = decode;
    function fromJSON(object) {
        return {
            tex: isSet(object.texture)
                ? { $case: "texture", texture: Texture.fromJSON(object.texture) }
                : isSet(object.avatarTexture)
                    ? { $case: "avatarTexture", avatarTexture: AvatarTexture.fromJSON(object.avatarTexture) }
                    : isSet(object.videoTexture)
                        ? { $case: "videoTexture", videoTexture: VideoTexture.fromJSON(object.videoTexture) }
                        : undefined,
        };
    }
    TextureUnion.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const obj = {};
        ((_a = message.tex) === null || _a === void 0 ? void 0 : _a.$case) === "texture" &&
            (obj.texture = ((_b = message.tex) === null || _b === void 0 ? void 0 : _b.texture) ? Texture.toJSON((_c = message.tex) === null || _c === void 0 ? void 0 : _c.texture) : undefined);
        ((_d = message.tex) === null || _d === void 0 ? void 0 : _d.$case) === "avatarTexture" &&
            (obj.avatarTexture = ((_e = message.tex) === null || _e === void 0 ? void 0 : _e.avatarTexture) ? AvatarTexture.toJSON((_f = message.tex) === null || _f === void 0 ? void 0 : _f.avatarTexture) : undefined);
        ((_g = message.tex) === null || _g === void 0 ? void 0 : _g.$case) === "videoTexture" &&
            (obj.videoTexture = ((_h = message.tex) === null || _h === void 0 ? void 0 : _h.videoTexture) ? VideoTexture.toJSON((_j = message.tex) === null || _j === void 0 ? void 0 : _j.videoTexture) : undefined);
        return obj;
    }
    TextureUnion.toJSON = toJSON;
    function create(base) {
        return TextureUnion.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    TextureUnion.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseTextureUnion();
        if (((_a = object.tex) === null || _a === void 0 ? void 0 : _a.$case) === "texture" && ((_b = object.tex) === null || _b === void 0 ? void 0 : _b.texture) !== undefined && ((_c = object.tex) === null || _c === void 0 ? void 0 : _c.texture) !== null) {
            message.tex = { $case: "texture", texture: Texture.fromPartial(object.tex.texture) };
        }
        if (((_d = object.tex) === null || _d === void 0 ? void 0 : _d.$case) === "avatarTexture" &&
            ((_e = object.tex) === null || _e === void 0 ? void 0 : _e.avatarTexture) !== undefined &&
            ((_f = object.tex) === null || _f === void 0 ? void 0 : _f.avatarTexture) !== null) {
            message.tex = { $case: "avatarTexture", avatarTexture: AvatarTexture.fromPartial(object.tex.avatarTexture) };
        }
        if (((_g = object.tex) === null || _g === void 0 ? void 0 : _g.$case) === "videoTexture" &&
            ((_h = object.tex) === null || _h === void 0 ? void 0 : _h.videoTexture) !== undefined &&
            ((_j = object.tex) === null || _j === void 0 ? void 0 : _j.videoTexture) !== null) {
            message.tex = { $case: "videoTexture", videoTexture: VideoTexture.fromPartial(object.tex.videoTexture) };
        }
        return message;
    }
    TextureUnion.fromPartial = fromPartial;
})(TextureUnion || (exports.TextureUnion = TextureUnion = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=texture.gen.js.map