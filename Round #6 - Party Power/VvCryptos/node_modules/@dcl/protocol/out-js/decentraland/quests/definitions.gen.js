"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuestsServiceDefinition = exports.GetQuestDefinitionResponse = exports.GetQuestDefinitionRequest = exports.GetAllQuestsResponse = exports.Quests = exports.UserUpdate = exports.QuestStateUpdate = exports.QuestInstance = exports.Quest = exports.QuestState_CurrentStepsEntry = exports.QuestState = exports.StepContent = exports.Task = exports.Action_ParametersEntry = exports.Action = exports.Step = exports.Connection = exports.QuestDefinition = exports.EventResponse = exports.EventRequest = exports.Event = exports.AbortQuestResponse_Accepted = exports.AbortQuestResponse = exports.AbortQuestRequest = exports.StartQuestResponse_Accepted = exports.StartQuestResponse = exports.StartQuestRequest = exports.IgnoredEvent = exports.NotOwner = exports.QuestAlreadyStarted = exports.NotFoundQuestInstance = exports.InternalServerError = exports.NotUUID = exports.InvalidQuest = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const empty_gen_1 = require("../../google/protobuf/empty.gen");
exports.protobufPackage = "decentraland.quests";
function createBaseInvalidQuest() {
    return {};
}
var InvalidQuest;
(function (InvalidQuest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    InvalidQuest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInvalidQuest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    InvalidQuest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    InvalidQuest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    InvalidQuest.toJSON = toJSON;
    function create(base) {
        return InvalidQuest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    InvalidQuest.create = create;
    function fromPartial(_) {
        const message = createBaseInvalidQuest();
        return message;
    }
    InvalidQuest.fromPartial = fromPartial;
})(InvalidQuest || (exports.InvalidQuest = InvalidQuest = {}));
function createBaseNotUUID() {
    return {};
}
var NotUUID;
(function (NotUUID) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    NotUUID.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotUUID();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    NotUUID.decode = decode;
    function fromJSON(_) {
        return {};
    }
    NotUUID.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    NotUUID.toJSON = toJSON;
    function create(base) {
        return NotUUID.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    NotUUID.create = create;
    function fromPartial(_) {
        const message = createBaseNotUUID();
        return message;
    }
    NotUUID.fromPartial = fromPartial;
})(NotUUID || (exports.NotUUID = NotUUID = {}));
function createBaseInternalServerError() {
    return {};
}
var InternalServerError;
(function (InternalServerError) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    InternalServerError.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInternalServerError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    InternalServerError.decode = decode;
    function fromJSON(_) {
        return {};
    }
    InternalServerError.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    InternalServerError.toJSON = toJSON;
    function create(base) {
        return InternalServerError.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    InternalServerError.create = create;
    function fromPartial(_) {
        const message = createBaseInternalServerError();
        return message;
    }
    InternalServerError.fromPartial = fromPartial;
})(InternalServerError || (exports.InternalServerError = InternalServerError = {}));
function createBaseNotFoundQuestInstance() {
    return {};
}
var NotFoundQuestInstance;
(function (NotFoundQuestInstance) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    NotFoundQuestInstance.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotFoundQuestInstance();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    NotFoundQuestInstance.decode = decode;
    function fromJSON(_) {
        return {};
    }
    NotFoundQuestInstance.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    NotFoundQuestInstance.toJSON = toJSON;
    function create(base) {
        return NotFoundQuestInstance.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    NotFoundQuestInstance.create = create;
    function fromPartial(_) {
        const message = createBaseNotFoundQuestInstance();
        return message;
    }
    NotFoundQuestInstance.fromPartial = fromPartial;
})(NotFoundQuestInstance || (exports.NotFoundQuestInstance = NotFoundQuestInstance = {}));
function createBaseQuestAlreadyStarted() {
    return {};
}
var QuestAlreadyStarted;
(function (QuestAlreadyStarted) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    QuestAlreadyStarted.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuestAlreadyStarted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    QuestAlreadyStarted.decode = decode;
    function fromJSON(_) {
        return {};
    }
    QuestAlreadyStarted.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    QuestAlreadyStarted.toJSON = toJSON;
    function create(base) {
        return QuestAlreadyStarted.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    QuestAlreadyStarted.create = create;
    function fromPartial(_) {
        const message = createBaseQuestAlreadyStarted();
        return message;
    }
    QuestAlreadyStarted.fromPartial = fromPartial;
})(QuestAlreadyStarted || (exports.QuestAlreadyStarted = QuestAlreadyStarted = {}));
function createBaseNotOwner() {
    return {};
}
var NotOwner;
(function (NotOwner) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    NotOwner.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotOwner();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    NotOwner.decode = decode;
    function fromJSON(_) {
        return {};
    }
    NotOwner.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    NotOwner.toJSON = toJSON;
    function create(base) {
        return NotOwner.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    NotOwner.create = create;
    function fromPartial(_) {
        const message = createBaseNotOwner();
        return message;
    }
    NotOwner.fromPartial = fromPartial;
})(NotOwner || (exports.NotOwner = NotOwner = {}));
function createBaseIgnoredEvent() {
    return {};
}
var IgnoredEvent;
(function (IgnoredEvent) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    IgnoredEvent.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIgnoredEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    IgnoredEvent.decode = decode;
    function fromJSON(_) {
        return {};
    }
    IgnoredEvent.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    IgnoredEvent.toJSON = toJSON;
    function create(base) {
        return IgnoredEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    IgnoredEvent.create = create;
    function fromPartial(_) {
        const message = createBaseIgnoredEvent();
        return message;
    }
    IgnoredEvent.fromPartial = fromPartial;
})(IgnoredEvent || (exports.IgnoredEvent = IgnoredEvent = {}));
function createBaseStartQuestRequest() {
    return { questId: "" };
}
var StartQuestRequest;
(function (StartQuestRequest) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.questId !== "") {
            writer.uint32(10).string(message.questId);
        }
        return writer;
    }
    StartQuestRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStartQuestRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.questId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    StartQuestRequest.decode = decode;
    function fromJSON(object) {
        return { questId: isSet(object.questId) ? String(object.questId) : "" };
    }
    StartQuestRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.questId !== undefined && (obj.questId = message.questId);
        return obj;
    }
    StartQuestRequest.toJSON = toJSON;
    function create(base) {
        return StartQuestRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    StartQuestRequest.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseStartQuestRequest();
        message.questId = (_a = object.questId) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    StartQuestRequest.fromPartial = fromPartial;
})(StartQuestRequest || (exports.StartQuestRequest = StartQuestRequest = {}));
function createBaseStartQuestResponse() {
    return { response: undefined };
}
var StartQuestResponse;
(function (StartQuestResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) {
            case "accepted":
                StartQuestResponse_Accepted.encode(message.response.accepted, writer.uint32(10).fork()).ldelim();
                break;
            case "invalidQuest":
                InvalidQuest.encode(message.response.invalidQuest, writer.uint32(18).fork()).ldelim();
                break;
            case "notUuidError":
                NotUUID.encode(message.response.notUuidError, writer.uint32(26).fork()).ldelim();
                break;
            case "internalServerError":
                InternalServerError.encode(message.response.internalServerError, writer.uint32(34).fork()).ldelim();
                break;
            case "questAlreadyStarted":
                QuestAlreadyStarted.encode(message.response.questAlreadyStarted, writer.uint32(42).fork()).ldelim();
                break;
        }
        return writer;
    }
    StartQuestResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStartQuestResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.response = {
                        $case: "accepted",
                        accepted: StartQuestResponse_Accepted.decode(reader, reader.uint32()),
                    };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = { $case: "invalidQuest", invalidQuest: InvalidQuest.decode(reader, reader.uint32()) };
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.response = { $case: "notUuidError", notUuidError: NotUUID.decode(reader, reader.uint32()) };
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.response = {
                        $case: "internalServerError",
                        internalServerError: InternalServerError.decode(reader, reader.uint32()),
                    };
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.response = {
                        $case: "questAlreadyStarted",
                        questAlreadyStarted: QuestAlreadyStarted.decode(reader, reader.uint32()),
                    };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    StartQuestResponse.decode = decode;
    function fromJSON(object) {
        return {
            response: isSet(object.accepted)
                ? { $case: "accepted", accepted: StartQuestResponse_Accepted.fromJSON(object.accepted) }
                : isSet(object.invalidQuest)
                    ? { $case: "invalidQuest", invalidQuest: InvalidQuest.fromJSON(object.invalidQuest) }
                    : isSet(object.notUuidError)
                        ? { $case: "notUuidError", notUuidError: NotUUID.fromJSON(object.notUuidError) }
                        : isSet(object.internalServerError)
                            ? {
                                $case: "internalServerError",
                                internalServerError: InternalServerError.fromJSON(object.internalServerError),
                            }
                            : isSet(object.questAlreadyStarted)
                                ? {
                                    $case: "questAlreadyStarted",
                                    questAlreadyStarted: QuestAlreadyStarted.fromJSON(object.questAlreadyStarted),
                                }
                                : undefined,
        };
    }
    StartQuestResponse.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const obj = {};
        ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) === "accepted" &&
            (obj.accepted = ((_b = message.response) === null || _b === void 0 ? void 0 : _b.accepted)
                ? StartQuestResponse_Accepted.toJSON((_c = message.response) === null || _c === void 0 ? void 0 : _c.accepted)
                : undefined);
        ((_d = message.response) === null || _d === void 0 ? void 0 : _d.$case) === "invalidQuest" &&
            (obj.invalidQuest = ((_e = message.response) === null || _e === void 0 ? void 0 : _e.invalidQuest)
                ? InvalidQuest.toJSON((_f = message.response) === null || _f === void 0 ? void 0 : _f.invalidQuest)
                : undefined);
        ((_g = message.response) === null || _g === void 0 ? void 0 : _g.$case) === "notUuidError" &&
            (obj.notUuidError = ((_h = message.response) === null || _h === void 0 ? void 0 : _h.notUuidError) ? NotUUID.toJSON((_j = message.response) === null || _j === void 0 ? void 0 : _j.notUuidError) : undefined);
        ((_k = message.response) === null || _k === void 0 ? void 0 : _k.$case) === "internalServerError" &&
            (obj.internalServerError = ((_l = message.response) === null || _l === void 0 ? void 0 : _l.internalServerError)
                ? InternalServerError.toJSON((_m = message.response) === null || _m === void 0 ? void 0 : _m.internalServerError)
                : undefined);
        ((_o = message.response) === null || _o === void 0 ? void 0 : _o.$case) === "questAlreadyStarted" &&
            (obj.questAlreadyStarted = ((_p = message.response) === null || _p === void 0 ? void 0 : _p.questAlreadyStarted)
                ? QuestAlreadyStarted.toJSON((_q = message.response) === null || _q === void 0 ? void 0 : _q.questAlreadyStarted)
                : undefined);
        return obj;
    }
    StartQuestResponse.toJSON = toJSON;
    function create(base) {
        return StartQuestResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    StartQuestResponse.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const message = createBaseStartQuestResponse();
        if (((_a = object.response) === null || _a === void 0 ? void 0 : _a.$case) === "accepted" &&
            ((_b = object.response) === null || _b === void 0 ? void 0 : _b.accepted) !== undefined &&
            ((_c = object.response) === null || _c === void 0 ? void 0 : _c.accepted) !== null) {
            message.response = {
                $case: "accepted",
                accepted: StartQuestResponse_Accepted.fromPartial(object.response.accepted),
            };
        }
        if (((_d = object.response) === null || _d === void 0 ? void 0 : _d.$case) === "invalidQuest" &&
            ((_e = object.response) === null || _e === void 0 ? void 0 : _e.invalidQuest) !== undefined &&
            ((_f = object.response) === null || _f === void 0 ? void 0 : _f.invalidQuest) !== null) {
            message.response = {
                $case: "invalidQuest",
                invalidQuest: InvalidQuest.fromPartial(object.response.invalidQuest),
            };
        }
        if (((_g = object.response) === null || _g === void 0 ? void 0 : _g.$case) === "notUuidError" &&
            ((_h = object.response) === null || _h === void 0 ? void 0 : _h.notUuidError) !== undefined &&
            ((_j = object.response) === null || _j === void 0 ? void 0 : _j.notUuidError) !== null) {
            message.response = { $case: "notUuidError", notUuidError: NotUUID.fromPartial(object.response.notUuidError) };
        }
        if (((_k = object.response) === null || _k === void 0 ? void 0 : _k.$case) === "internalServerError" &&
            ((_l = object.response) === null || _l === void 0 ? void 0 : _l.internalServerError) !== undefined &&
            ((_m = object.response) === null || _m === void 0 ? void 0 : _m.internalServerError) !== null) {
            message.response = {
                $case: "internalServerError",
                internalServerError: InternalServerError.fromPartial(object.response.internalServerError),
            };
        }
        if (((_o = object.response) === null || _o === void 0 ? void 0 : _o.$case) === "questAlreadyStarted" &&
            ((_p = object.response) === null || _p === void 0 ? void 0 : _p.questAlreadyStarted) !== undefined &&
            ((_q = object.response) === null || _q === void 0 ? void 0 : _q.questAlreadyStarted) !== null) {
            message.response = {
                $case: "questAlreadyStarted",
                questAlreadyStarted: QuestAlreadyStarted.fromPartial(object.response.questAlreadyStarted),
            };
        }
        return message;
    }
    StartQuestResponse.fromPartial = fromPartial;
})(StartQuestResponse || (exports.StartQuestResponse = StartQuestResponse = {}));
function createBaseStartQuestResponse_Accepted() {
    return {};
}
var StartQuestResponse_Accepted;
(function (StartQuestResponse_Accepted) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    StartQuestResponse_Accepted.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStartQuestResponse_Accepted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    StartQuestResponse_Accepted.decode = decode;
    function fromJSON(_) {
        return {};
    }
    StartQuestResponse_Accepted.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    StartQuestResponse_Accepted.toJSON = toJSON;
    function create(base) {
        return StartQuestResponse_Accepted.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    StartQuestResponse_Accepted.create = create;
    function fromPartial(_) {
        const message = createBaseStartQuestResponse_Accepted();
        return message;
    }
    StartQuestResponse_Accepted.fromPartial = fromPartial;
})(StartQuestResponse_Accepted || (exports.StartQuestResponse_Accepted = StartQuestResponse_Accepted = {}));
function createBaseAbortQuestRequest() {
    return { questInstanceId: "" };
}
var AbortQuestRequest;
(function (AbortQuestRequest) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.questInstanceId !== "") {
            writer.uint32(10).string(message.questInstanceId);
        }
        return writer;
    }
    AbortQuestRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAbortQuestRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.questInstanceId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AbortQuestRequest.decode = decode;
    function fromJSON(object) {
        return { questInstanceId: isSet(object.questInstanceId) ? String(object.questInstanceId) : "" };
    }
    AbortQuestRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.questInstanceId !== undefined && (obj.questInstanceId = message.questInstanceId);
        return obj;
    }
    AbortQuestRequest.toJSON = toJSON;
    function create(base) {
        return AbortQuestRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AbortQuestRequest.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseAbortQuestRequest();
        message.questInstanceId = (_a = object.questInstanceId) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    AbortQuestRequest.fromPartial = fromPartial;
})(AbortQuestRequest || (exports.AbortQuestRequest = AbortQuestRequest = {}));
function createBaseAbortQuestResponse() {
    return { response: undefined };
}
var AbortQuestResponse;
(function (AbortQuestResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) {
            case "accepted":
                AbortQuestResponse_Accepted.encode(message.response.accepted, writer.uint32(10).fork()).ldelim();
                break;
            case "notFoundQuestInstance":
                NotFoundQuestInstance.encode(message.response.notFoundQuestInstance, writer.uint32(18).fork()).ldelim();
                break;
            case "notUuidError":
                NotUUID.encode(message.response.notUuidError, writer.uint32(26).fork()).ldelim();
                break;
            case "notOwner":
                NotOwner.encode(message.response.notOwner, writer.uint32(34).fork()).ldelim();
                break;
            case "internalServerError":
                InternalServerError.encode(message.response.internalServerError, writer.uint32(42).fork()).ldelim();
                break;
        }
        return writer;
    }
    AbortQuestResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAbortQuestResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.response = {
                        $case: "accepted",
                        accepted: AbortQuestResponse_Accepted.decode(reader, reader.uint32()),
                    };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = {
                        $case: "notFoundQuestInstance",
                        notFoundQuestInstance: NotFoundQuestInstance.decode(reader, reader.uint32()),
                    };
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.response = { $case: "notUuidError", notUuidError: NotUUID.decode(reader, reader.uint32()) };
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.response = { $case: "notOwner", notOwner: NotOwner.decode(reader, reader.uint32()) };
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.response = {
                        $case: "internalServerError",
                        internalServerError: InternalServerError.decode(reader, reader.uint32()),
                    };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AbortQuestResponse.decode = decode;
    function fromJSON(object) {
        return {
            response: isSet(object.accepted)
                ? { $case: "accepted", accepted: AbortQuestResponse_Accepted.fromJSON(object.accepted) }
                : isSet(object.notFoundQuestInstance)
                    ? {
                        $case: "notFoundQuestInstance",
                        notFoundQuestInstance: NotFoundQuestInstance.fromJSON(object.notFoundQuestInstance),
                    }
                    : isSet(object.notUuidError)
                        ? { $case: "notUuidError", notUuidError: NotUUID.fromJSON(object.notUuidError) }
                        : isSet(object.notOwner)
                            ? { $case: "notOwner", notOwner: NotOwner.fromJSON(object.notOwner) }
                            : isSet(object.internalServerError)
                                ? {
                                    $case: "internalServerError",
                                    internalServerError: InternalServerError.fromJSON(object.internalServerError),
                                }
                                : undefined,
        };
    }
    AbortQuestResponse.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const obj = {};
        ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) === "accepted" &&
            (obj.accepted = ((_b = message.response) === null || _b === void 0 ? void 0 : _b.accepted)
                ? AbortQuestResponse_Accepted.toJSON((_c = message.response) === null || _c === void 0 ? void 0 : _c.accepted)
                : undefined);
        ((_d = message.response) === null || _d === void 0 ? void 0 : _d.$case) === "notFoundQuestInstance" &&
            (obj.notFoundQuestInstance = ((_e = message.response) === null || _e === void 0 ? void 0 : _e.notFoundQuestInstance)
                ? NotFoundQuestInstance.toJSON((_f = message.response) === null || _f === void 0 ? void 0 : _f.notFoundQuestInstance)
                : undefined);
        ((_g = message.response) === null || _g === void 0 ? void 0 : _g.$case) === "notUuidError" &&
            (obj.notUuidError = ((_h = message.response) === null || _h === void 0 ? void 0 : _h.notUuidError) ? NotUUID.toJSON((_j = message.response) === null || _j === void 0 ? void 0 : _j.notUuidError) : undefined);
        ((_k = message.response) === null || _k === void 0 ? void 0 : _k.$case) === "notOwner" &&
            (obj.notOwner = ((_l = message.response) === null || _l === void 0 ? void 0 : _l.notOwner) ? NotOwner.toJSON((_m = message.response) === null || _m === void 0 ? void 0 : _m.notOwner) : undefined);
        ((_o = message.response) === null || _o === void 0 ? void 0 : _o.$case) === "internalServerError" &&
            (obj.internalServerError = ((_p = message.response) === null || _p === void 0 ? void 0 : _p.internalServerError)
                ? InternalServerError.toJSON((_q = message.response) === null || _q === void 0 ? void 0 : _q.internalServerError)
                : undefined);
        return obj;
    }
    AbortQuestResponse.toJSON = toJSON;
    function create(base) {
        return AbortQuestResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AbortQuestResponse.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const message = createBaseAbortQuestResponse();
        if (((_a = object.response) === null || _a === void 0 ? void 0 : _a.$case) === "accepted" &&
            ((_b = object.response) === null || _b === void 0 ? void 0 : _b.accepted) !== undefined &&
            ((_c = object.response) === null || _c === void 0 ? void 0 : _c.accepted) !== null) {
            message.response = {
                $case: "accepted",
                accepted: AbortQuestResponse_Accepted.fromPartial(object.response.accepted),
            };
        }
        if (((_d = object.response) === null || _d === void 0 ? void 0 : _d.$case) === "notFoundQuestInstance" &&
            ((_e = object.response) === null || _e === void 0 ? void 0 : _e.notFoundQuestInstance) !== undefined &&
            ((_f = object.response) === null || _f === void 0 ? void 0 : _f.notFoundQuestInstance) !== null) {
            message.response = {
                $case: "notFoundQuestInstance",
                notFoundQuestInstance: NotFoundQuestInstance.fromPartial(object.response.notFoundQuestInstance),
            };
        }
        if (((_g = object.response) === null || _g === void 0 ? void 0 : _g.$case) === "notUuidError" &&
            ((_h = object.response) === null || _h === void 0 ? void 0 : _h.notUuidError) !== undefined &&
            ((_j = object.response) === null || _j === void 0 ? void 0 : _j.notUuidError) !== null) {
            message.response = { $case: "notUuidError", notUuidError: NotUUID.fromPartial(object.response.notUuidError) };
        }
        if (((_k = object.response) === null || _k === void 0 ? void 0 : _k.$case) === "notOwner" &&
            ((_l = object.response) === null || _l === void 0 ? void 0 : _l.notOwner) !== undefined &&
            ((_m = object.response) === null || _m === void 0 ? void 0 : _m.notOwner) !== null) {
            message.response = { $case: "notOwner", notOwner: NotOwner.fromPartial(object.response.notOwner) };
        }
        if (((_o = object.response) === null || _o === void 0 ? void 0 : _o.$case) === "internalServerError" &&
            ((_p = object.response) === null || _p === void 0 ? void 0 : _p.internalServerError) !== undefined &&
            ((_q = object.response) === null || _q === void 0 ? void 0 : _q.internalServerError) !== null) {
            message.response = {
                $case: "internalServerError",
                internalServerError: InternalServerError.fromPartial(object.response.internalServerError),
            };
        }
        return message;
    }
    AbortQuestResponse.fromPartial = fromPartial;
})(AbortQuestResponse || (exports.AbortQuestResponse = AbortQuestResponse = {}));
function createBaseAbortQuestResponse_Accepted() {
    return {};
}
var AbortQuestResponse_Accepted;
(function (AbortQuestResponse_Accepted) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    AbortQuestResponse_Accepted.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAbortQuestResponse_Accepted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AbortQuestResponse_Accepted.decode = decode;
    function fromJSON(_) {
        return {};
    }
    AbortQuestResponse_Accepted.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    AbortQuestResponse_Accepted.toJSON = toJSON;
    function create(base) {
        return AbortQuestResponse_Accepted.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AbortQuestResponse_Accepted.create = create;
    function fromPartial(_) {
        const message = createBaseAbortQuestResponse_Accepted();
        return message;
    }
    AbortQuestResponse_Accepted.fromPartial = fromPartial;
})(AbortQuestResponse_Accepted || (exports.AbortQuestResponse_Accepted = AbortQuestResponse_Accepted = {}));
function createBaseEvent() {
    return { id: "", address: "", action: undefined };
}
var Event;
(function (Event) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        if (message.action !== undefined) {
            Action.encode(message.action, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    }
    Event.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.action = Action.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Event.decode = decode;
    function fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            address: isSet(object.address) ? String(object.address) : "",
            action: isSet(object.action) ? Action.fromJSON(object.action) : undefined,
        };
    }
    Event.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.address !== undefined && (obj.address = message.address);
        message.action !== undefined && (obj.action = message.action ? Action.toJSON(message.action) : undefined);
        return obj;
    }
    Event.toJSON = toJSON;
    function create(base) {
        return Event.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Event.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseEvent();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        message.action = (object.action !== undefined && object.action !== null)
            ? Action.fromPartial(object.action)
            : undefined;
        return message;
    }
    Event.fromPartial = fromPartial;
})(Event || (exports.Event = Event = {}));
function createBaseEventRequest() {
    return { action: undefined };
}
var EventRequest;
(function (EventRequest) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.action !== undefined) {
            Action.encode(message.action, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    EventRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.action = Action.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    EventRequest.decode = decode;
    function fromJSON(object) {
        return { action: isSet(object.action) ? Action.fromJSON(object.action) : undefined };
    }
    EventRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.action !== undefined && (obj.action = message.action ? Action.toJSON(message.action) : undefined);
        return obj;
    }
    EventRequest.toJSON = toJSON;
    function create(base) {
        return EventRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    EventRequest.create = create;
    function fromPartial(object) {
        const message = createBaseEventRequest();
        message.action = (object.action !== undefined && object.action !== null)
            ? Action.fromPartial(object.action)
            : undefined;
        return message;
    }
    EventRequest.fromPartial = fromPartial;
})(EventRequest || (exports.EventRequest = EventRequest = {}));
function createBaseEventResponse() {
    return { response: undefined };
}
var EventResponse;
(function (EventResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) {
            case "acceptedEventId":
                writer.uint32(10).string(message.response.acceptedEventId);
                break;
            case "ignoredEvent":
                IgnoredEvent.encode(message.response.ignoredEvent, writer.uint32(18).fork()).ldelim();
                break;
            case "internalServerError":
                InternalServerError.encode(message.response.internalServerError, writer.uint32(26).fork()).ldelim();
                break;
        }
        return writer;
    }
    EventResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.response = { $case: "acceptedEventId", acceptedEventId: reader.string() };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = { $case: "ignoredEvent", ignoredEvent: IgnoredEvent.decode(reader, reader.uint32()) };
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.response = {
                        $case: "internalServerError",
                        internalServerError: InternalServerError.decode(reader, reader.uint32()),
                    };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    EventResponse.decode = decode;
    function fromJSON(object) {
        return {
            response: isSet(object.acceptedEventId)
                ? { $case: "acceptedEventId", acceptedEventId: String(object.acceptedEventId) }
                : isSet(object.ignoredEvent)
                    ? { $case: "ignoredEvent", ignoredEvent: IgnoredEvent.fromJSON(object.ignoredEvent) }
                    : isSet(object.internalServerError)
                        ? {
                            $case: "internalServerError",
                            internalServerError: InternalServerError.fromJSON(object.internalServerError),
                        }
                        : undefined,
        };
    }
    EventResponse.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const obj = {};
        ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) === "acceptedEventId" && (obj.acceptedEventId = (_b = message.response) === null || _b === void 0 ? void 0 : _b.acceptedEventId);
        ((_c = message.response) === null || _c === void 0 ? void 0 : _c.$case) === "ignoredEvent" &&
            (obj.ignoredEvent = ((_d = message.response) === null || _d === void 0 ? void 0 : _d.ignoredEvent)
                ? IgnoredEvent.toJSON((_e = message.response) === null || _e === void 0 ? void 0 : _e.ignoredEvent)
                : undefined);
        ((_f = message.response) === null || _f === void 0 ? void 0 : _f.$case) === "internalServerError" &&
            (obj.internalServerError = ((_g = message.response) === null || _g === void 0 ? void 0 : _g.internalServerError)
                ? InternalServerError.toJSON((_h = message.response) === null || _h === void 0 ? void 0 : _h.internalServerError)
                : undefined);
        return obj;
    }
    EventResponse.toJSON = toJSON;
    function create(base) {
        return EventResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    EventResponse.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseEventResponse();
        if (((_a = object.response) === null || _a === void 0 ? void 0 : _a.$case) === "acceptedEventId" &&
            ((_b = object.response) === null || _b === void 0 ? void 0 : _b.acceptedEventId) !== undefined &&
            ((_c = object.response) === null || _c === void 0 ? void 0 : _c.acceptedEventId) !== null) {
            message.response = { $case: "acceptedEventId", acceptedEventId: object.response.acceptedEventId };
        }
        if (((_d = object.response) === null || _d === void 0 ? void 0 : _d.$case) === "ignoredEvent" &&
            ((_e = object.response) === null || _e === void 0 ? void 0 : _e.ignoredEvent) !== undefined &&
            ((_f = object.response) === null || _f === void 0 ? void 0 : _f.ignoredEvent) !== null) {
            message.response = {
                $case: "ignoredEvent",
                ignoredEvent: IgnoredEvent.fromPartial(object.response.ignoredEvent),
            };
        }
        if (((_g = object.response) === null || _g === void 0 ? void 0 : _g.$case) === "internalServerError" &&
            ((_h = object.response) === null || _h === void 0 ? void 0 : _h.internalServerError) !== undefined &&
            ((_j = object.response) === null || _j === void 0 ? void 0 : _j.internalServerError) !== null) {
            message.response = {
                $case: "internalServerError",
                internalServerError: InternalServerError.fromPartial(object.response.internalServerError),
            };
        }
        return message;
    }
    EventResponse.fromPartial = fromPartial;
})(EventResponse || (exports.EventResponse = EventResponse = {}));
function createBaseQuestDefinition() {
    return { steps: [], connections: [] };
}
var QuestDefinition;
(function (QuestDefinition) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.steps) {
            Step.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.connections) {
            Connection.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    QuestDefinition.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuestDefinition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.steps.push(Step.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.connections.push(Connection.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    QuestDefinition.decode = decode;
    function fromJSON(object) {
        return {
            steps: Array.isArray(object === null || object === void 0 ? void 0 : object.steps) ? object.steps.map((e) => Step.fromJSON(e)) : [],
            connections: Array.isArray(object === null || object === void 0 ? void 0 : object.connections) ? object.connections.map((e) => Connection.fromJSON(e)) : [],
        };
    }
    QuestDefinition.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.steps) {
            obj.steps = message.steps.map((e) => e ? Step.toJSON(e) : undefined);
        }
        else {
            obj.steps = [];
        }
        if (message.connections) {
            obj.connections = message.connections.map((e) => e ? Connection.toJSON(e) : undefined);
        }
        else {
            obj.connections = [];
        }
        return obj;
    }
    QuestDefinition.toJSON = toJSON;
    function create(base) {
        return QuestDefinition.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    QuestDefinition.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseQuestDefinition();
        message.steps = ((_a = object.steps) === null || _a === void 0 ? void 0 : _a.map((e) => Step.fromPartial(e))) || [];
        message.connections = ((_b = object.connections) === null || _b === void 0 ? void 0 : _b.map((e) => Connection.fromPartial(e))) || [];
        return message;
    }
    QuestDefinition.fromPartial = fromPartial;
})(QuestDefinition || (exports.QuestDefinition = QuestDefinition = {}));
function createBaseConnection() {
    return { stepFrom: "", stepTo: "" };
}
var Connection;
(function (Connection) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.stepFrom !== "") {
            writer.uint32(10).string(message.stepFrom);
        }
        if (message.stepTo !== "") {
            writer.uint32(18).string(message.stepTo);
        }
        return writer;
    }
    Connection.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConnection();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.stepFrom = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.stepTo = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Connection.decode = decode;
    function fromJSON(object) {
        return {
            stepFrom: isSet(object.stepFrom) ? String(object.stepFrom) : "",
            stepTo: isSet(object.stepTo) ? String(object.stepTo) : "",
        };
    }
    Connection.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.stepFrom !== undefined && (obj.stepFrom = message.stepFrom);
        message.stepTo !== undefined && (obj.stepTo = message.stepTo);
        return obj;
    }
    Connection.toJSON = toJSON;
    function create(base) {
        return Connection.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Connection.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseConnection();
        message.stepFrom = (_a = object.stepFrom) !== null && _a !== void 0 ? _a : "";
        message.stepTo = (_b = object.stepTo) !== null && _b !== void 0 ? _b : "";
        return message;
    }
    Connection.fromPartial = fromPartial;
})(Connection || (exports.Connection = Connection = {}));
function createBaseStep() {
    return { id: "", description: "", tasks: [] };
}
var Step;
(function (Step) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        for (const v of message.tasks) {
            Task.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    }
    Step.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStep();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.tasks.push(Task.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Step.decode = decode;
    function fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            description: isSet(object.description) ? String(object.description) : "",
            tasks: Array.isArray(object === null || object === void 0 ? void 0 : object.tasks) ? object.tasks.map((e) => Task.fromJSON(e)) : [],
        };
    }
    Step.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.description !== undefined && (obj.description = message.description);
        if (message.tasks) {
            obj.tasks = message.tasks.map((e) => e ? Task.toJSON(e) : undefined);
        }
        else {
            obj.tasks = [];
        }
        return obj;
    }
    Step.toJSON = toJSON;
    function create(base) {
        return Step.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Step.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseStep();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.tasks = ((_c = object.tasks) === null || _c === void 0 ? void 0 : _c.map((e) => Task.fromPartial(e))) || [];
        return message;
    }
    Step.fromPartial = fromPartial;
})(Step || (exports.Step = Step = {}));
function createBaseAction() {
    return { type: "", parameters: {} };
}
var Action;
(function (Action) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        Object.entries(message.parameters).forEach(([key, value]) => {
            Action_ParametersEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        return writer;
    }
    Action.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = Action_ParametersEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.parameters[entry2.key] = entry2.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Action.decode = decode;
    function fromJSON(object) {
        return {
            type: isSet(object.type) ? String(object.type) : "",
            parameters: isObject(object.parameters)
                ? Object.entries(object.parameters).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    }
    Action.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.type !== undefined && (obj.type = message.type);
        obj.parameters = {};
        if (message.parameters) {
            Object.entries(message.parameters).forEach(([k, v]) => {
                obj.parameters[k] = v;
            });
        }
        return obj;
    }
    Action.toJSON = toJSON;
    function create(base) {
        return Action.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Action.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseAction();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : "";
        message.parameters = Object.entries((_b = object.parameters) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    }
    Action.fromPartial = fromPartial;
})(Action || (exports.Action = Action = {}));
function createBaseAction_ParametersEntry() {
    return { key: "", value: "" };
}
var Action_ParametersEntry;
(function (Action_ParametersEntry) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    }
    Action_ParametersEntry.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAction_ParametersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Action_ParametersEntry.decode = decode;
    function fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
    }
    Action_ParametersEntry.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    }
    Action_ParametersEntry.toJSON = toJSON;
    function create(base) {
        return Action_ParametersEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Action_ParametersEntry.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseAction_ParametersEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    }
    Action_ParametersEntry.fromPartial = fromPartial;
})(Action_ParametersEntry || (exports.Action_ParametersEntry = Action_ParametersEntry = {}));
function createBaseTask() {
    return { id: "", description: "", actionItems: [] };
}
var Task;
(function (Task) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        for (const v of message.actionItems) {
            Action.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    }
    Task.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTask();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.actionItems.push(Action.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Task.decode = decode;
    function fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            description: isSet(object.description) ? String(object.description) : "",
            actionItems: Array.isArray(object === null || object === void 0 ? void 0 : object.actionItems) ? object.actionItems.map((e) => Action.fromJSON(e)) : [],
        };
    }
    Task.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.description !== undefined && (obj.description = message.description);
        if (message.actionItems) {
            obj.actionItems = message.actionItems.map((e) => e ? Action.toJSON(e) : undefined);
        }
        else {
            obj.actionItems = [];
        }
        return obj;
    }
    Task.toJSON = toJSON;
    function create(base) {
        return Task.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Task.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseTask();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.actionItems = ((_c = object.actionItems) === null || _c === void 0 ? void 0 : _c.map((e) => Action.fromPartial(e))) || [];
        return message;
    }
    Task.fromPartial = fromPartial;
})(Task || (exports.Task = Task = {}));
function createBaseStepContent() {
    return { toDos: [], tasksCompleted: [] };
}
var StepContent;
(function (StepContent) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.toDos) {
            Task.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.tasksCompleted) {
            Task.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    StepContent.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStepContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.toDos.push(Task.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.tasksCompleted.push(Task.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    StepContent.decode = decode;
    function fromJSON(object) {
        return {
            toDos: Array.isArray(object === null || object === void 0 ? void 0 : object.toDos) ? object.toDos.map((e) => Task.fromJSON(e)) : [],
            tasksCompleted: Array.isArray(object === null || object === void 0 ? void 0 : object.tasksCompleted)
                ? object.tasksCompleted.map((e) => Task.fromJSON(e))
                : [],
        };
    }
    StepContent.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.toDos) {
            obj.toDos = message.toDos.map((e) => e ? Task.toJSON(e) : undefined);
        }
        else {
            obj.toDos = [];
        }
        if (message.tasksCompleted) {
            obj.tasksCompleted = message.tasksCompleted.map((e) => e ? Task.toJSON(e) : undefined);
        }
        else {
            obj.tasksCompleted = [];
        }
        return obj;
    }
    StepContent.toJSON = toJSON;
    function create(base) {
        return StepContent.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    StepContent.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseStepContent();
        message.toDos = ((_a = object.toDos) === null || _a === void 0 ? void 0 : _a.map((e) => Task.fromPartial(e))) || [];
        message.tasksCompleted = ((_b = object.tasksCompleted) === null || _b === void 0 ? void 0 : _b.map((e) => Task.fromPartial(e))) || [];
        return message;
    }
    StepContent.fromPartial = fromPartial;
})(StepContent || (exports.StepContent = StepContent = {}));
function createBaseQuestState() {
    return { currentSteps: {}, stepsLeft: 0, stepsCompleted: [], requiredSteps: [] };
}
var QuestState;
(function (QuestState) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        Object.entries(message.currentSteps).forEach(([key, value]) => {
            QuestState_CurrentStepsEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.stepsLeft !== 0) {
            writer.uint32(29).fixed32(message.stepsLeft);
        }
        for (const v of message.stepsCompleted) {
            writer.uint32(34).string(v);
        }
        for (const v of message.requiredSteps) {
            writer.uint32(42).string(v);
        }
        return writer;
    }
    QuestState.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuestState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = QuestState_CurrentStepsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.currentSteps[entry2.key] = entry2.value;
                    }
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.stepsLeft = reader.fixed32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.stepsCompleted.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.requiredSteps.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    QuestState.decode = decode;
    function fromJSON(object) {
        return {
            currentSteps: isObject(object.currentSteps)
                ? Object.entries(object.currentSteps).reduce((acc, [key, value]) => {
                    acc[key] = StepContent.fromJSON(value);
                    return acc;
                }, {})
                : {},
            stepsLeft: isSet(object.stepsLeft) ? Number(object.stepsLeft) : 0,
            stepsCompleted: Array.isArray(object === null || object === void 0 ? void 0 : object.stepsCompleted) ? object.stepsCompleted.map((e) => String(e)) : [],
            requiredSteps: Array.isArray(object === null || object === void 0 ? void 0 : object.requiredSteps) ? object.requiredSteps.map((e) => String(e)) : [],
        };
    }
    QuestState.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        obj.currentSteps = {};
        if (message.currentSteps) {
            Object.entries(message.currentSteps).forEach(([k, v]) => {
                obj.currentSteps[k] = StepContent.toJSON(v);
            });
        }
        message.stepsLeft !== undefined && (obj.stepsLeft = Math.round(message.stepsLeft));
        if (message.stepsCompleted) {
            obj.stepsCompleted = message.stepsCompleted.map((e) => e);
        }
        else {
            obj.stepsCompleted = [];
        }
        if (message.requiredSteps) {
            obj.requiredSteps = message.requiredSteps.map((e) => e);
        }
        else {
            obj.requiredSteps = [];
        }
        return obj;
    }
    QuestState.toJSON = toJSON;
    function create(base) {
        return QuestState.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    QuestState.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseQuestState();
        message.currentSteps = Object.entries((_a = object.currentSteps) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = StepContent.fromPartial(value);
            }
            return acc;
        }, {});
        message.stepsLeft = (_b = object.stepsLeft) !== null && _b !== void 0 ? _b : 0;
        message.stepsCompleted = ((_c = object.stepsCompleted) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.requiredSteps = ((_d = object.requiredSteps) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        return message;
    }
    QuestState.fromPartial = fromPartial;
})(QuestState || (exports.QuestState = QuestState = {}));
function createBaseQuestState_CurrentStepsEntry() {
    return { key: "", value: undefined };
}
var QuestState_CurrentStepsEntry;
(function (QuestState_CurrentStepsEntry) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            StepContent.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    QuestState_CurrentStepsEntry.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuestState_CurrentStepsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = StepContent.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    QuestState_CurrentStepsEntry.decode = decode;
    function fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? StepContent.fromJSON(object.value) : undefined,
        };
    }
    QuestState_CurrentStepsEntry.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value ? StepContent.toJSON(message.value) : undefined);
        return obj;
    }
    QuestState_CurrentStepsEntry.toJSON = toJSON;
    function create(base) {
        return QuestState_CurrentStepsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    QuestState_CurrentStepsEntry.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseQuestState_CurrentStepsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? StepContent.fromPartial(object.value)
            : undefined;
        return message;
    }
    QuestState_CurrentStepsEntry.fromPartial = fromPartial;
})(QuestState_CurrentStepsEntry || (exports.QuestState_CurrentStepsEntry = QuestState_CurrentStepsEntry = {}));
function createBaseQuest() {
    return {
        id: "",
        name: "",
        description: "",
        definition: undefined,
        creatorAddress: "",
        imageUrl: "",
        active: false,
        createdAt: 0,
    };
}
var Quest;
(function (Quest) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.definition !== undefined) {
            QuestDefinition.encode(message.definition, writer.uint32(34).fork()).ldelim();
        }
        if (message.creatorAddress !== "") {
            writer.uint32(42).string(message.creatorAddress);
        }
        if (message.imageUrl !== "") {
            writer.uint32(50).string(message.imageUrl);
        }
        if (message.active === true) {
            writer.uint32(56).bool(message.active);
        }
        if (message.createdAt !== 0) {
            writer.uint32(69).fixed32(message.createdAt);
        }
        return writer;
    }
    Quest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.definition = QuestDefinition.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.creatorAddress = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.imageUrl = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.active = reader.bool();
                    continue;
                case 8:
                    if (tag !== 69) {
                        break;
                    }
                    message.createdAt = reader.fixed32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Quest.decode = decode;
    function fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            name: isSet(object.name) ? String(object.name) : "",
            description: isSet(object.description) ? String(object.description) : "",
            definition: isSet(object.definition) ? QuestDefinition.fromJSON(object.definition) : undefined,
            creatorAddress: isSet(object.creatorAddress) ? String(object.creatorAddress) : "",
            imageUrl: isSet(object.imageUrl) ? String(object.imageUrl) : "",
            active: isSet(object.active) ? Boolean(object.active) : false,
            createdAt: isSet(object.createdAt) ? Number(object.createdAt) : 0,
        };
    }
    Quest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.name !== undefined && (obj.name = message.name);
        message.description !== undefined && (obj.description = message.description);
        message.definition !== undefined &&
            (obj.definition = message.definition ? QuestDefinition.toJSON(message.definition) : undefined);
        message.creatorAddress !== undefined && (obj.creatorAddress = message.creatorAddress);
        message.imageUrl !== undefined && (obj.imageUrl = message.imageUrl);
        message.active !== undefined && (obj.active = message.active);
        message.createdAt !== undefined && (obj.createdAt = Math.round(message.createdAt));
        return obj;
    }
    Quest.toJSON = toJSON;
    function create(base) {
        return Quest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Quest.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseQuest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.description = (_c = object.description) !== null && _c !== void 0 ? _c : "";
        message.definition = (object.definition !== undefined && object.definition !== null)
            ? QuestDefinition.fromPartial(object.definition)
            : undefined;
        message.creatorAddress = (_d = object.creatorAddress) !== null && _d !== void 0 ? _d : "";
        message.imageUrl = (_e = object.imageUrl) !== null && _e !== void 0 ? _e : "";
        message.active = (_f = object.active) !== null && _f !== void 0 ? _f : false;
        message.createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : 0;
        return message;
    }
    Quest.fromPartial = fromPartial;
})(Quest || (exports.Quest = Quest = {}));
function createBaseQuestInstance() {
    return { id: "", quest: undefined, state: undefined };
}
var QuestInstance;
(function (QuestInstance) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.quest !== undefined) {
            Quest.encode(message.quest, writer.uint32(18).fork()).ldelim();
        }
        if (message.state !== undefined) {
            QuestState.encode(message.state, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    }
    QuestInstance.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuestInstance();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.quest = Quest.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.state = QuestState.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    QuestInstance.decode = decode;
    function fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            quest: isSet(object.quest) ? Quest.fromJSON(object.quest) : undefined,
            state: isSet(object.state) ? QuestState.fromJSON(object.state) : undefined,
        };
    }
    QuestInstance.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.quest !== undefined && (obj.quest = message.quest ? Quest.toJSON(message.quest) : undefined);
        message.state !== undefined && (obj.state = message.state ? QuestState.toJSON(message.state) : undefined);
        return obj;
    }
    QuestInstance.toJSON = toJSON;
    function create(base) {
        return QuestInstance.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    QuestInstance.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseQuestInstance();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.quest = (object.quest !== undefined && object.quest !== null) ? Quest.fromPartial(object.quest) : undefined;
        message.state = (object.state !== undefined && object.state !== null)
            ? QuestState.fromPartial(object.state)
            : undefined;
        return message;
    }
    QuestInstance.fromPartial = fromPartial;
})(QuestInstance || (exports.QuestInstance = QuestInstance = {}));
function createBaseQuestStateUpdate() {
    return { instanceId: "", questState: undefined, eventId: "" };
}
var QuestStateUpdate;
(function (QuestStateUpdate) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.instanceId !== "") {
            writer.uint32(10).string(message.instanceId);
        }
        if (message.questState !== undefined) {
            QuestState.encode(message.questState, writer.uint32(18).fork()).ldelim();
        }
        if (message.eventId !== "") {
            writer.uint32(26).string(message.eventId);
        }
        return writer;
    }
    QuestStateUpdate.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuestStateUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.instanceId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.questState = QuestState.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.eventId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    QuestStateUpdate.decode = decode;
    function fromJSON(object) {
        return {
            instanceId: isSet(object.instanceId) ? String(object.instanceId) : "",
            questState: isSet(object.questState) ? QuestState.fromJSON(object.questState) : undefined,
            eventId: isSet(object.eventId) ? String(object.eventId) : "",
        };
    }
    QuestStateUpdate.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.instanceId !== undefined && (obj.instanceId = message.instanceId);
        message.questState !== undefined &&
            (obj.questState = message.questState ? QuestState.toJSON(message.questState) : undefined);
        message.eventId !== undefined && (obj.eventId = message.eventId);
        return obj;
    }
    QuestStateUpdate.toJSON = toJSON;
    function create(base) {
        return QuestStateUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    QuestStateUpdate.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseQuestStateUpdate();
        message.instanceId = (_a = object.instanceId) !== null && _a !== void 0 ? _a : "";
        message.questState = (object.questState !== undefined && object.questState !== null)
            ? QuestState.fromPartial(object.questState)
            : undefined;
        message.eventId = (_b = object.eventId) !== null && _b !== void 0 ? _b : "";
        return message;
    }
    QuestStateUpdate.fromPartial = fromPartial;
})(QuestStateUpdate || (exports.QuestStateUpdate = QuestStateUpdate = {}));
function createBaseUserUpdate() {
    return { message: undefined, userAddress: "" };
}
var UserUpdate;
(function (UserUpdate) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.message) === null || _a === void 0 ? void 0 : _a.$case) {
            case "subscribed":
                writer.uint32(8).bool(message.message.subscribed);
                break;
            case "questStateUpdate":
                QuestStateUpdate.encode(message.message.questStateUpdate, writer.uint32(18).fork()).ldelim();
                break;
            case "newQuestStarted":
                QuestInstance.encode(message.message.newQuestStarted, writer.uint32(26).fork()).ldelim();
                break;
            case "eventIgnored":
                writer.uint32(34).string(message.message.eventIgnored);
                break;
        }
        if (message.userAddress !== "") {
            writer.uint32(42).string(message.userAddress);
        }
        return writer;
    }
    UserUpdate.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.message = { $case: "subscribed", subscribed: reader.bool() };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = {
                        $case: "questStateUpdate",
                        questStateUpdate: QuestStateUpdate.decode(reader, reader.uint32()),
                    };
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.message = {
                        $case: "newQuestStarted",
                        newQuestStarted: QuestInstance.decode(reader, reader.uint32()),
                    };
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.message = { $case: "eventIgnored", eventIgnored: reader.string() };
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.userAddress = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    UserUpdate.decode = decode;
    function fromJSON(object) {
        return {
            message: isSet(object.subscribed)
                ? { $case: "subscribed", subscribed: Boolean(object.subscribed) }
                : isSet(object.questStateUpdate)
                    ? { $case: "questStateUpdate", questStateUpdate: QuestStateUpdate.fromJSON(object.questStateUpdate) }
                    : isSet(object.newQuestStarted)
                        ? { $case: "newQuestStarted", newQuestStarted: QuestInstance.fromJSON(object.newQuestStarted) }
                        : isSet(object.eventIgnored)
                            ? { $case: "eventIgnored", eventIgnored: String(object.eventIgnored) }
                            : undefined,
            userAddress: isSet(object.userAddress) ? String(object.userAddress) : "",
        };
    }
    UserUpdate.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const obj = {};
        ((_a = message.message) === null || _a === void 0 ? void 0 : _a.$case) === "subscribed" && (obj.subscribed = (_b = message.message) === null || _b === void 0 ? void 0 : _b.subscribed);
        ((_c = message.message) === null || _c === void 0 ? void 0 : _c.$case) === "questStateUpdate" &&
            (obj.questStateUpdate = ((_d = message.message) === null || _d === void 0 ? void 0 : _d.questStateUpdate)
                ? QuestStateUpdate.toJSON((_e = message.message) === null || _e === void 0 ? void 0 : _e.questStateUpdate)
                : undefined);
        ((_f = message.message) === null || _f === void 0 ? void 0 : _f.$case) === "newQuestStarted" &&
            (obj.newQuestStarted = ((_g = message.message) === null || _g === void 0 ? void 0 : _g.newQuestStarted)
                ? QuestInstance.toJSON((_h = message.message) === null || _h === void 0 ? void 0 : _h.newQuestStarted)
                : undefined);
        ((_j = message.message) === null || _j === void 0 ? void 0 : _j.$case) === "eventIgnored" && (obj.eventIgnored = (_k = message.message) === null || _k === void 0 ? void 0 : _k.eventIgnored);
        message.userAddress !== undefined && (obj.userAddress = message.userAddress);
        return obj;
    }
    UserUpdate.toJSON = toJSON;
    function create(base) {
        return UserUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    UserUpdate.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseUserUpdate();
        if (((_a = object.message) === null || _a === void 0 ? void 0 : _a.$case) === "subscribed" &&
            ((_b = object.message) === null || _b === void 0 ? void 0 : _b.subscribed) !== undefined &&
            ((_c = object.message) === null || _c === void 0 ? void 0 : _c.subscribed) !== null) {
            message.message = { $case: "subscribed", subscribed: object.message.subscribed };
        }
        if (((_d = object.message) === null || _d === void 0 ? void 0 : _d.$case) === "questStateUpdate" &&
            ((_e = object.message) === null || _e === void 0 ? void 0 : _e.questStateUpdate) !== undefined &&
            ((_f = object.message) === null || _f === void 0 ? void 0 : _f.questStateUpdate) !== null) {
            message.message = {
                $case: "questStateUpdate",
                questStateUpdate: QuestStateUpdate.fromPartial(object.message.questStateUpdate),
            };
        }
        if (((_g = object.message) === null || _g === void 0 ? void 0 : _g.$case) === "newQuestStarted" &&
            ((_h = object.message) === null || _h === void 0 ? void 0 : _h.newQuestStarted) !== undefined &&
            ((_j = object.message) === null || _j === void 0 ? void 0 : _j.newQuestStarted) !== null) {
            message.message = {
                $case: "newQuestStarted",
                newQuestStarted: QuestInstance.fromPartial(object.message.newQuestStarted),
            };
        }
        if (((_k = object.message) === null || _k === void 0 ? void 0 : _k.$case) === "eventIgnored" &&
            ((_l = object.message) === null || _l === void 0 ? void 0 : _l.eventIgnored) !== undefined &&
            ((_m = object.message) === null || _m === void 0 ? void 0 : _m.eventIgnored) !== null) {
            message.message = { $case: "eventIgnored", eventIgnored: object.message.eventIgnored };
        }
        message.userAddress = (_o = object.userAddress) !== null && _o !== void 0 ? _o : "";
        return message;
    }
    UserUpdate.fromPartial = fromPartial;
})(UserUpdate || (exports.UserUpdate = UserUpdate = {}));
function createBaseQuests() {
    return { instances: [] };
}
var Quests;
(function (Quests) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.instances) {
            QuestInstance.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    Quests.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuests();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.instances.push(QuestInstance.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Quests.decode = decode;
    function fromJSON(object) {
        return {
            instances: Array.isArray(object === null || object === void 0 ? void 0 : object.instances) ? object.instances.map((e) => QuestInstance.fromJSON(e)) : [],
        };
    }
    Quests.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.instances) {
            obj.instances = message.instances.map((e) => e ? QuestInstance.toJSON(e) : undefined);
        }
        else {
            obj.instances = [];
        }
        return obj;
    }
    Quests.toJSON = toJSON;
    function create(base) {
        return Quests.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Quests.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseQuests();
        message.instances = ((_a = object.instances) === null || _a === void 0 ? void 0 : _a.map((e) => QuestInstance.fromPartial(e))) || [];
        return message;
    }
    Quests.fromPartial = fromPartial;
})(Quests || (exports.Quests = Quests = {}));
function createBaseGetAllQuestsResponse() {
    return { response: undefined };
}
var GetAllQuestsResponse;
(function (GetAllQuestsResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) {
            case "quests":
                Quests.encode(message.response.quests, writer.uint32(10).fork()).ldelim();
                break;
            case "internalServerError":
                InternalServerError.encode(message.response.internalServerError, writer.uint32(18).fork()).ldelim();
                break;
        }
        return writer;
    }
    GetAllQuestsResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAllQuestsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.response = { $case: "quests", quests: Quests.decode(reader, reader.uint32()) };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = {
                        $case: "internalServerError",
                        internalServerError: InternalServerError.decode(reader, reader.uint32()),
                    };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetAllQuestsResponse.decode = decode;
    function fromJSON(object) {
        return {
            response: isSet(object.quests)
                ? { $case: "quests", quests: Quests.fromJSON(object.quests) }
                : isSet(object.internalServerError)
                    ? {
                        $case: "internalServerError",
                        internalServerError: InternalServerError.fromJSON(object.internalServerError),
                    }
                    : undefined,
        };
    }
    GetAllQuestsResponse.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f;
        const obj = {};
        ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) === "quests" &&
            (obj.quests = ((_b = message.response) === null || _b === void 0 ? void 0 : _b.quests) ? Quests.toJSON((_c = message.response) === null || _c === void 0 ? void 0 : _c.quests) : undefined);
        ((_d = message.response) === null || _d === void 0 ? void 0 : _d.$case) === "internalServerError" &&
            (obj.internalServerError = ((_e = message.response) === null || _e === void 0 ? void 0 : _e.internalServerError)
                ? InternalServerError.toJSON((_f = message.response) === null || _f === void 0 ? void 0 : _f.internalServerError)
                : undefined);
        return obj;
    }
    GetAllQuestsResponse.toJSON = toJSON;
    function create(base) {
        return GetAllQuestsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetAllQuestsResponse.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseGetAllQuestsResponse();
        if (((_a = object.response) === null || _a === void 0 ? void 0 : _a.$case) === "quests" && ((_b = object.response) === null || _b === void 0 ? void 0 : _b.quests) !== undefined && ((_c = object.response) === null || _c === void 0 ? void 0 : _c.quests) !== null) {
            message.response = { $case: "quests", quests: Quests.fromPartial(object.response.quests) };
        }
        if (((_d = object.response) === null || _d === void 0 ? void 0 : _d.$case) === "internalServerError" &&
            ((_e = object.response) === null || _e === void 0 ? void 0 : _e.internalServerError) !== undefined &&
            ((_f = object.response) === null || _f === void 0 ? void 0 : _f.internalServerError) !== null) {
            message.response = {
                $case: "internalServerError",
                internalServerError: InternalServerError.fromPartial(object.response.internalServerError),
            };
        }
        return message;
    }
    GetAllQuestsResponse.fromPartial = fromPartial;
})(GetAllQuestsResponse || (exports.GetAllQuestsResponse = GetAllQuestsResponse = {}));
function createBaseGetQuestDefinitionRequest() {
    return { questId: "" };
}
var GetQuestDefinitionRequest;
(function (GetQuestDefinitionRequest) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.questId !== "") {
            writer.uint32(10).string(message.questId);
        }
        return writer;
    }
    GetQuestDefinitionRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetQuestDefinitionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.questId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetQuestDefinitionRequest.decode = decode;
    function fromJSON(object) {
        return { questId: isSet(object.questId) ? String(object.questId) : "" };
    }
    GetQuestDefinitionRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.questId !== undefined && (obj.questId = message.questId);
        return obj;
    }
    GetQuestDefinitionRequest.toJSON = toJSON;
    function create(base) {
        return GetQuestDefinitionRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetQuestDefinitionRequest.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseGetQuestDefinitionRequest();
        message.questId = (_a = object.questId) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    GetQuestDefinitionRequest.fromPartial = fromPartial;
})(GetQuestDefinitionRequest || (exports.GetQuestDefinitionRequest = GetQuestDefinitionRequest = {}));
function createBaseGetQuestDefinitionResponse() {
    return { response: undefined };
}
var GetQuestDefinitionResponse;
(function (GetQuestDefinitionResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) {
            case "quest":
                Quest.encode(message.response.quest, writer.uint32(10).fork()).ldelim();
                break;
            case "internalServerError":
                InternalServerError.encode(message.response.internalServerError, writer.uint32(18).fork()).ldelim();
                break;
        }
        return writer;
    }
    GetQuestDefinitionResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetQuestDefinitionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.response = { $case: "quest", quest: Quest.decode(reader, reader.uint32()) };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = {
                        $case: "internalServerError",
                        internalServerError: InternalServerError.decode(reader, reader.uint32()),
                    };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetQuestDefinitionResponse.decode = decode;
    function fromJSON(object) {
        return {
            response: isSet(object.quest)
                ? { $case: "quest", quest: Quest.fromJSON(object.quest) }
                : isSet(object.internalServerError)
                    ? {
                        $case: "internalServerError",
                        internalServerError: InternalServerError.fromJSON(object.internalServerError),
                    }
                    : undefined,
        };
    }
    GetQuestDefinitionResponse.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f;
        const obj = {};
        ((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) === "quest" &&
            (obj.quest = ((_b = message.response) === null || _b === void 0 ? void 0 : _b.quest) ? Quest.toJSON((_c = message.response) === null || _c === void 0 ? void 0 : _c.quest) : undefined);
        ((_d = message.response) === null || _d === void 0 ? void 0 : _d.$case) === "internalServerError" &&
            (obj.internalServerError = ((_e = message.response) === null || _e === void 0 ? void 0 : _e.internalServerError)
                ? InternalServerError.toJSON((_f = message.response) === null || _f === void 0 ? void 0 : _f.internalServerError)
                : undefined);
        return obj;
    }
    GetQuestDefinitionResponse.toJSON = toJSON;
    function create(base) {
        return GetQuestDefinitionResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetQuestDefinitionResponse.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseGetQuestDefinitionResponse();
        if (((_a = object.response) === null || _a === void 0 ? void 0 : _a.$case) === "quest" && ((_b = object.response) === null || _b === void 0 ? void 0 : _b.quest) !== undefined && ((_c = object.response) === null || _c === void 0 ? void 0 : _c.quest) !== null) {
            message.response = { $case: "quest", quest: Quest.fromPartial(object.response.quest) };
        }
        if (((_d = object.response) === null || _d === void 0 ? void 0 : _d.$case) === "internalServerError" &&
            ((_e = object.response) === null || _e === void 0 ? void 0 : _e.internalServerError) !== undefined &&
            ((_f = object.response) === null || _f === void 0 ? void 0 : _f.internalServerError) !== null) {
            message.response = {
                $case: "internalServerError",
                internalServerError: InternalServerError.fromPartial(object.response.internalServerError),
            };
        }
        return message;
    }
    GetQuestDefinitionResponse.fromPartial = fromPartial;
})(GetQuestDefinitionResponse || (exports.GetQuestDefinitionResponse = GetQuestDefinitionResponse = {}));
exports.QuestsServiceDefinition = {
    name: "QuestsService",
    fullName: "decentraland.quests.QuestsService",
    methods: {
        /** User actions */
        startQuest: {
            name: "StartQuest",
            requestType: StartQuestRequest,
            requestStream: false,
            responseType: StartQuestResponse,
            responseStream: false,
            options: {},
        },
        abortQuest: {
            name: "AbortQuest",
            requestType: AbortQuestRequest,
            requestStream: false,
            responseType: AbortQuestResponse,
            responseStream: false,
            options: {},
        },
        sendEvent: {
            name: "SendEvent",
            requestType: EventRequest,
            requestStream: false,
            responseType: EventResponse,
            responseStream: false,
            options: {},
        },
        /** Listen to changes in quest states and event processing updates */
        subscribe: {
            name: "Subscribe",
            requestType: empty_gen_1.Empty,
            requestStream: false,
            responseType: UserUpdate,
            responseStream: true,
            options: {},
        },
        /** Query quest information */
        getAllQuests: {
            name: "GetAllQuests",
            requestType: empty_gen_1.Empty,
            requestStream: false,
            responseType: GetAllQuestsResponse,
            responseStream: false,
            options: {},
        },
        getQuestDefinition: {
            name: "GetQuestDefinition",
            requestType: GetQuestDefinitionRequest,
            requestStream: false,
            responseType: GetQuestDefinitionResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=definitions.gen.js.map