import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.kernel.apis";
export interface InitRequest {
}
export interface SocialEvent {
    event: string;
    payload: string;
}
export interface GetAvatarEventsResponse {
    events: SocialEvent[];
}
export declare namespace InitRequest {
    function encode(_: InitRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): InitRequest;
    function fromJSON(_: any): InitRequest;
    function toJSON(_: InitRequest): unknown;
    function create<I extends Exact<DeepPartial<InitRequest>, I>>(base?: I): InitRequest;
    function fromPartial<I extends Exact<DeepPartial<InitRequest>, I>>(_: I): InitRequest;
}
export declare namespace SocialEvent {
    function encode(message: SocialEvent, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SocialEvent;
    function fromJSON(object: any): SocialEvent;
    function toJSON(message: SocialEvent): unknown;
    function create<I extends Exact<DeepPartial<SocialEvent>, I>>(base?: I): SocialEvent;
    function fromPartial<I extends Exact<DeepPartial<SocialEvent>, I>>(object: I): SocialEvent;
}
export declare namespace GetAvatarEventsResponse {
    function encode(message: GetAvatarEventsResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetAvatarEventsResponse;
    function fromJSON(object: any): GetAvatarEventsResponse;
    function toJSON(message: GetAvatarEventsResponse): unknown;
    function create<I extends Exact<DeepPartial<GetAvatarEventsResponse>, I>>(base?: I): GetAvatarEventsResponse;
    function fromPartial<I extends Exact<DeepPartial<GetAvatarEventsResponse>, I>>(object: I): GetAvatarEventsResponse;
}
export type SocialControllerServiceDefinition = typeof SocialControllerServiceDefinition;
export declare const SocialControllerServiceDefinition: {
    readonly name: "SocialControllerService";
    readonly fullName: "decentraland.kernel.apis.SocialControllerService";
    readonly methods: {
        /**
         * @deprecated, only available for SDK6 compatibility. This was a low level
         * API used for the AvatarScene, it will be replaced by Foreign Entities in
         * SDK7
         */
        readonly pullAvatarEvents: {
            readonly name: "PullAvatarEvents";
            readonly requestType: typeof InitRequest;
            readonly requestStream: false;
            readonly responseType: typeof GetAvatarEventsResponse;
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
