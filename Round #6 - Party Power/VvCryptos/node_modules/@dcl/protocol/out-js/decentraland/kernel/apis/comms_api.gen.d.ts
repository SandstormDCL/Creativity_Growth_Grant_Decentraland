import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.kernel.apis";
export declare enum VideoTrackSourceType {
    VTST_UNKNOWN = 0,
    VTST_CAMERA = 1,
    VTST_SCREEN_SHARE = 2,
    UNRECOGNIZED = -1
}
export declare function videoTrackSourceTypeFromJSON(object: any): VideoTrackSourceType;
export declare function videoTrackSourceTypeToJSON(object: VideoTrackSourceType): string;
export interface VideoTracksActiveStreamsRequest {
}
export interface VideoTracksActiveStreamsResponse {
    streams: VideoTracksActiveStreamsData[];
}
export interface VideoTracksActiveStreamsData {
    identity: string;
    trackSid: string;
    sourceType: VideoTrackSourceType;
}
export declare namespace VideoTracksActiveStreamsRequest {
    function encode(_: VideoTracksActiveStreamsRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): VideoTracksActiveStreamsRequest;
    function fromJSON(_: any): VideoTracksActiveStreamsRequest;
    function toJSON(_: VideoTracksActiveStreamsRequest): unknown;
    function create<I extends Exact<DeepPartial<VideoTracksActiveStreamsRequest>, I>>(base?: I): VideoTracksActiveStreamsRequest;
    function fromPartial<I extends Exact<DeepPartial<VideoTracksActiveStreamsRequest>, I>>(_: I): VideoTracksActiveStreamsRequest;
}
export declare namespace VideoTracksActiveStreamsResponse {
    function encode(message: VideoTracksActiveStreamsResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): VideoTracksActiveStreamsResponse;
    function fromJSON(object: any): VideoTracksActiveStreamsResponse;
    function toJSON(message: VideoTracksActiveStreamsResponse): unknown;
    function create<I extends Exact<DeepPartial<VideoTracksActiveStreamsResponse>, I>>(base?: I): VideoTracksActiveStreamsResponse;
    function fromPartial<I extends Exact<DeepPartial<VideoTracksActiveStreamsResponse>, I>>(object: I): VideoTracksActiveStreamsResponse;
}
export declare namespace VideoTracksActiveStreamsData {
    function encode(message: VideoTracksActiveStreamsData, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): VideoTracksActiveStreamsData;
    function fromJSON(object: any): VideoTracksActiveStreamsData;
    function toJSON(message: VideoTracksActiveStreamsData): unknown;
    function create<I extends Exact<DeepPartial<VideoTracksActiveStreamsData>, I>>(base?: I): VideoTracksActiveStreamsData;
    function fromPartial<I extends Exact<DeepPartial<VideoTracksActiveStreamsData>, I>>(object: I): VideoTracksActiveStreamsData;
}
export type CommsApiServiceDefinition = typeof CommsApiServiceDefinition;
export declare const CommsApiServiceDefinition: {
    readonly name: "CommsApiService";
    readonly fullName: "decentraland.kernel.apis.CommsApiService";
    readonly methods: {
        readonly getActiveVideoStreams: {
            readonly name: "GetActiveVideoStreams";
            readonly requestType: typeof VideoTracksActiveStreamsRequest;
            readonly requestStream: false;
            readonly responseType: typeof VideoTracksActiveStreamsResponse;
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
