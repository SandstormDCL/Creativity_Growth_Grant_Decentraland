"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommunicationsControllerServiceDefinition = exports.SendBinaryResponse = exports.SendBinaryRequest = exports.RealSendResponse = exports.RealSendRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.kernel.apis";
function createBaseRealSendRequest() {
    return { message: "" };
}
var RealSendRequest;
(function (RealSendRequest) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    }
    RealSendRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRealSendRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    RealSendRequest.decode = decode;
    function fromJSON(object) {
        return { message: isSet(object.message) ? String(object.message) : "" };
    }
    RealSendRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.message !== undefined && (obj.message = message.message);
        return obj;
    }
    RealSendRequest.toJSON = toJSON;
    function create(base) {
        return RealSendRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    RealSendRequest.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseRealSendRequest();
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    RealSendRequest.fromPartial = fromPartial;
})(RealSendRequest || (exports.RealSendRequest = RealSendRequest = {}));
function createBaseRealSendResponse() {
    return {};
}
var RealSendResponse;
(function (RealSendResponse) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    RealSendResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRealSendResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    RealSendResponse.decode = decode;
    function fromJSON(_) {
        return {};
    }
    RealSendResponse.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    RealSendResponse.toJSON = toJSON;
    function create(base) {
        return RealSendResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    RealSendResponse.create = create;
    function fromPartial(_) {
        const message = createBaseRealSendResponse();
        return message;
    }
    RealSendResponse.fromPartial = fromPartial;
})(RealSendResponse || (exports.RealSendResponse = RealSendResponse = {}));
function createBaseSendBinaryRequest() {
    return { data: [] };
}
var SendBinaryRequest;
(function (SendBinaryRequest) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.data) {
            writer.uint32(10).bytes(v);
        }
        return writer;
    }
    SendBinaryRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSendBinaryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data.push(reader.bytes());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    SendBinaryRequest.decode = decode;
    function fromJSON(object) {
        return { data: Array.isArray(object === null || object === void 0 ? void 0 : object.data) ? object.data.map((e) => bytesFromBase64(e)) : [] };
    }
    SendBinaryRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.data) {
            obj.data = message.data.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array(0)));
        }
        else {
            obj.data = [];
        }
        return obj;
    }
    SendBinaryRequest.toJSON = toJSON;
    function create(base) {
        return SendBinaryRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    SendBinaryRequest.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseSendBinaryRequest();
        message.data = ((_a = object.data) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    }
    SendBinaryRequest.fromPartial = fromPartial;
})(SendBinaryRequest || (exports.SendBinaryRequest = SendBinaryRequest = {}));
function createBaseSendBinaryResponse() {
    return { data: [] };
}
var SendBinaryResponse;
(function (SendBinaryResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.data) {
            writer.uint32(10).bytes(v);
        }
        return writer;
    }
    SendBinaryResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSendBinaryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data.push(reader.bytes());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    SendBinaryResponse.decode = decode;
    function fromJSON(object) {
        return { data: Array.isArray(object === null || object === void 0 ? void 0 : object.data) ? object.data.map((e) => bytesFromBase64(e)) : [] };
    }
    SendBinaryResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.data) {
            obj.data = message.data.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array(0)));
        }
        else {
            obj.data = [];
        }
        return obj;
    }
    SendBinaryResponse.toJSON = toJSON;
    function create(base) {
        return SendBinaryResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    SendBinaryResponse.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseSendBinaryResponse();
        message.data = ((_a = object.data) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    }
    SendBinaryResponse.fromPartial = fromPartial;
})(SendBinaryResponse || (exports.SendBinaryResponse = SendBinaryResponse = {}));
exports.CommunicationsControllerServiceDefinition = {
    name: "CommunicationsControllerService",
    fullName: "decentraland.kernel.apis.CommunicationsControllerService",
    methods: {
        /**
         * @deprecated - This API should use a bidirectional binary stream in sdk7
         * https://github.com/decentraland/sdk/issues/582
         */
        send: {
            name: "Send",
            requestType: RealSendRequest,
            requestStream: false,
            responseType: RealSendResponse,
            responseStream: false,
            options: {},
        },
        sendBinary: {
            name: "SendBinary",
            requestType: SendBinaryRequest,
            requestStream: false,
            responseType: SendBinaryResponse,
            responseStream: false,
            options: {},
        },
    },
};
const tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=communications_controller.gen.js.map