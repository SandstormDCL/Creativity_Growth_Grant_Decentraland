"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SceneServiceDefinition = exports.GetSceneResponse = exports.GetSceneRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const content_mapping_gen_1 = require("../../common/content_mapping.gen");
exports.protobufPackage = "decentraland.kernel.apis";
function createBaseGetSceneRequest() {
    return {};
}
var GetSceneRequest;
(function (GetSceneRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    GetSceneRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSceneRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetSceneRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    GetSceneRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    GetSceneRequest.toJSON = toJSON;
    function create(base) {
        return GetSceneRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetSceneRequest.create = create;
    function fromPartial(_) {
        const message = createBaseGetSceneRequest();
        return message;
    }
    GetSceneRequest.fromPartial = fromPartial;
})(GetSceneRequest || (exports.GetSceneRequest = GetSceneRequest = {}));
function createBaseGetSceneResponse() {
    return { cid: "", metadata: "", baseUrl: "", contents: [] };
}
var GetSceneResponse;
(function (GetSceneResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.cid !== "") {
            writer.uint32(10).string(message.cid);
        }
        if (message.metadata !== "") {
            writer.uint32(18).string(message.metadata);
        }
        if (message.baseUrl !== "") {
            writer.uint32(26).string(message.baseUrl);
        }
        for (const v of message.contents) {
            content_mapping_gen_1.ContentMapping.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    }
    GetSceneResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSceneResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.cid = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.metadata = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.baseUrl = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.contents.push(content_mapping_gen_1.ContentMapping.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetSceneResponse.decode = decode;
    function fromJSON(object) {
        return {
            cid: isSet(object.cid) ? String(object.cid) : "",
            metadata: isSet(object.metadata) ? String(object.metadata) : "",
            baseUrl: isSet(object.baseUrl) ? String(object.baseUrl) : "",
            contents: Array.isArray(object === null || object === void 0 ? void 0 : object.contents) ? object.contents.map((e) => content_mapping_gen_1.ContentMapping.fromJSON(e)) : [],
        };
    }
    GetSceneResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.cid !== undefined && (obj.cid = message.cid);
        message.metadata !== undefined && (obj.metadata = message.metadata);
        message.baseUrl !== undefined && (obj.baseUrl = message.baseUrl);
        if (message.contents) {
            obj.contents = message.contents.map((e) => e ? content_mapping_gen_1.ContentMapping.toJSON(e) : undefined);
        }
        else {
            obj.contents = [];
        }
        return obj;
    }
    GetSceneResponse.toJSON = toJSON;
    function create(base) {
        return GetSceneResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetSceneResponse.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseGetSceneResponse();
        message.cid = (_a = object.cid) !== null && _a !== void 0 ? _a : "";
        message.metadata = (_b = object.metadata) !== null && _b !== void 0 ? _b : "";
        message.baseUrl = (_c = object.baseUrl) !== null && _c !== void 0 ? _c : "";
        message.contents = ((_d = object.contents) === null || _d === void 0 ? void 0 : _d.map((e) => content_mapping_gen_1.ContentMapping.fromPartial(e))) || [];
        return message;
    }
    GetSceneResponse.fromPartial = fromPartial;
})(GetSceneResponse || (exports.GetSceneResponse = GetSceneResponse = {}));
exports.SceneServiceDefinition = {
    name: "SceneService",
    fullName: "decentraland.kernel.apis.SceneService",
    methods: {
        getSceneInfo: {
            name: "GetSceneInfo",
            requestType: GetSceneRequest,
            requestStream: false,
            responseType: GetSceneResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=scene.gen.js.map