import _m0 from "protobufjs/minimal";
import { Vector2, Vector3 } from "../../common/vectors.gen";
export declare const protobufPackage = "decentraland.kernel.apis";
export interface TakeAndCompareScreenshotRequest {
    /**
     * the source path in the scene where the screenshot is stored,
     *  the snapshot taken is compared with the stored one
     */
    srcStoredSnapshot: string;
    /** the camera position where is set before and while taking the screenshot, relative to base scene */
    cameraPosition: Vector3 | undefined;
    /** the camera position where is target to before and while taking the screenshot, relative to base scene */
    cameraTarget: Vector3 | undefined;
    /** width x height screenshot size */
    screenshotSize: Vector2 | undefined;
    comparisonMethod?: {
        $case: "greyPixelDiff";
        greyPixelDiff: TakeAndCompareScreenshotRequest_ComparisonMethodGreyPixelDiff;
    } | undefined;
    snapshotMode: TakeAndCompareScreenshotRequest_SnapshotMode;
}
export declare enum TakeAndCompareScreenshotRequest_SnapshotMode {
    /** SM_3D_AND_UI - only visible 3d scene and ui scene */
    SM_3D_AND_UI = 0,
    /** SM_3D_ONLY - only visible 3d scene */
    SM_3D_ONLY = 1,
    /** SM_UI_ONLY - only visible ui scene */
    SM_UI_ONLY = 2,
    UNRECOGNIZED = -1
}
export declare function takeAndCompareScreenshotRequest_SnapshotModeFromJSON(object: any): TakeAndCompareScreenshotRequest_SnapshotMode;
export declare function takeAndCompareScreenshotRequest_SnapshotModeToJSON(object: TakeAndCompareScreenshotRequest_SnapshotMode): string;
export interface TakeAndCompareScreenshotRequest_ComparisonMethodGreyPixelDiff {
}
export interface TakeAndCompareScreenshotResponse {
    storedSnapshotFound: boolean;
    comparisonMethodResult?: {
        $case: "greyPixelDiff";
        greyPixelDiff: TakeAndCompareScreenshotResponse_ComparisonMethodGreyPixelDiffResult;
    } | undefined;
}
export interface TakeAndCompareScreenshotResponse_ComparisonMethodGreyPixelDiffResult {
    similarity: number;
}
export interface TestResult {
    name: string;
    ok: boolean;
    error?: string | undefined;
    stack?: string | undefined;
    /** how many ADR-148 ticks were spent running this test */
    totalFrames: number;
    /** total time in seconds spent running this test */
    totalTime: number;
}
export interface TestResultResponse {
}
export interface TestPlan {
    tests: TestPlan_TestPlanEntry[];
}
export interface TestPlan_TestPlanEntry {
    name: string;
}
export interface TestPlanResponse {
}
export interface SetCameraTransformTestCommand {
    position: SetCameraTransformTestCommand_Vector3 | undefined;
    rotation: SetCameraTransformTestCommand_Quaternion | undefined;
}
export interface SetCameraTransformTestCommand_Vector3 {
    x: number;
    y: number;
    z: number;
}
export interface SetCameraTransformTestCommand_Quaternion {
    x: number;
    y: number;
    z: number;
    w: number;
}
export interface SetCameraTransformTestCommandResponse {
}
export declare namespace TakeAndCompareScreenshotRequest {
    function encode(message: TakeAndCompareScreenshotRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): TakeAndCompareScreenshotRequest;
    function fromJSON(object: any): TakeAndCompareScreenshotRequest;
    function toJSON(message: TakeAndCompareScreenshotRequest): unknown;
    function create<I extends Exact<DeepPartial<TakeAndCompareScreenshotRequest>, I>>(base?: I): TakeAndCompareScreenshotRequest;
    function fromPartial<I extends Exact<DeepPartial<TakeAndCompareScreenshotRequest>, I>>(object: I): TakeAndCompareScreenshotRequest;
}
export declare namespace TakeAndCompareScreenshotRequest_ComparisonMethodGreyPixelDiff {
    function encode(_: TakeAndCompareScreenshotRequest_ComparisonMethodGreyPixelDiff, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): TakeAndCompareScreenshotRequest_ComparisonMethodGreyPixelDiff;
    function fromJSON(_: any): TakeAndCompareScreenshotRequest_ComparisonMethodGreyPixelDiff;
    function toJSON(_: TakeAndCompareScreenshotRequest_ComparisonMethodGreyPixelDiff): unknown;
    function create<I extends Exact<DeepPartial<TakeAndCompareScreenshotRequest_ComparisonMethodGreyPixelDiff>, I>>(base?: I): TakeAndCompareScreenshotRequest_ComparisonMethodGreyPixelDiff;
    function fromPartial<I extends Exact<DeepPartial<TakeAndCompareScreenshotRequest_ComparisonMethodGreyPixelDiff>, I>>(_: I): TakeAndCompareScreenshotRequest_ComparisonMethodGreyPixelDiff;
}
export declare namespace TakeAndCompareScreenshotResponse {
    function encode(message: TakeAndCompareScreenshotResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): TakeAndCompareScreenshotResponse;
    function fromJSON(object: any): TakeAndCompareScreenshotResponse;
    function toJSON(message: TakeAndCompareScreenshotResponse): unknown;
    function create<I extends Exact<DeepPartial<TakeAndCompareScreenshotResponse>, I>>(base?: I): TakeAndCompareScreenshotResponse;
    function fromPartial<I extends Exact<DeepPartial<TakeAndCompareScreenshotResponse>, I>>(object: I): TakeAndCompareScreenshotResponse;
}
export declare namespace TakeAndCompareScreenshotResponse_ComparisonMethodGreyPixelDiffResult {
    function encode(message: TakeAndCompareScreenshotResponse_ComparisonMethodGreyPixelDiffResult, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): TakeAndCompareScreenshotResponse_ComparisonMethodGreyPixelDiffResult;
    function fromJSON(object: any): TakeAndCompareScreenshotResponse_ComparisonMethodGreyPixelDiffResult;
    function toJSON(message: TakeAndCompareScreenshotResponse_ComparisonMethodGreyPixelDiffResult): unknown;
    function create<I extends Exact<DeepPartial<TakeAndCompareScreenshotResponse_ComparisonMethodGreyPixelDiffResult>, I>>(base?: I): TakeAndCompareScreenshotResponse_ComparisonMethodGreyPixelDiffResult;
    function fromPartial<I extends Exact<DeepPartial<TakeAndCompareScreenshotResponse_ComparisonMethodGreyPixelDiffResult>, I>>(object: I): TakeAndCompareScreenshotResponse_ComparisonMethodGreyPixelDiffResult;
}
export declare namespace TestResult {
    function encode(message: TestResult, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): TestResult;
    function fromJSON(object: any): TestResult;
    function toJSON(message: TestResult): unknown;
    function create<I extends Exact<DeepPartial<TestResult>, I>>(base?: I): TestResult;
    function fromPartial<I extends Exact<DeepPartial<TestResult>, I>>(object: I): TestResult;
}
export declare namespace TestResultResponse {
    function encode(_: TestResultResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): TestResultResponse;
    function fromJSON(_: any): TestResultResponse;
    function toJSON(_: TestResultResponse): unknown;
    function create<I extends Exact<DeepPartial<TestResultResponse>, I>>(base?: I): TestResultResponse;
    function fromPartial<I extends Exact<DeepPartial<TestResultResponse>, I>>(_: I): TestResultResponse;
}
export declare namespace TestPlan {
    function encode(message: TestPlan, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): TestPlan;
    function fromJSON(object: any): TestPlan;
    function toJSON(message: TestPlan): unknown;
    function create<I extends Exact<DeepPartial<TestPlan>, I>>(base?: I): TestPlan;
    function fromPartial<I extends Exact<DeepPartial<TestPlan>, I>>(object: I): TestPlan;
}
export declare namespace TestPlan_TestPlanEntry {
    function encode(message: TestPlan_TestPlanEntry, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): TestPlan_TestPlanEntry;
    function fromJSON(object: any): TestPlan_TestPlanEntry;
    function toJSON(message: TestPlan_TestPlanEntry): unknown;
    function create<I extends Exact<DeepPartial<TestPlan_TestPlanEntry>, I>>(base?: I): TestPlan_TestPlanEntry;
    function fromPartial<I extends Exact<DeepPartial<TestPlan_TestPlanEntry>, I>>(object: I): TestPlan_TestPlanEntry;
}
export declare namespace TestPlanResponse {
    function encode(_: TestPlanResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): TestPlanResponse;
    function fromJSON(_: any): TestPlanResponse;
    function toJSON(_: TestPlanResponse): unknown;
    function create<I extends Exact<DeepPartial<TestPlanResponse>, I>>(base?: I): TestPlanResponse;
    function fromPartial<I extends Exact<DeepPartial<TestPlanResponse>, I>>(_: I): TestPlanResponse;
}
export declare namespace SetCameraTransformTestCommand {
    function encode(message: SetCameraTransformTestCommand, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SetCameraTransformTestCommand;
    function fromJSON(object: any): SetCameraTransformTestCommand;
    function toJSON(message: SetCameraTransformTestCommand): unknown;
    function create<I extends Exact<DeepPartial<SetCameraTransformTestCommand>, I>>(base?: I): SetCameraTransformTestCommand;
    function fromPartial<I extends Exact<DeepPartial<SetCameraTransformTestCommand>, I>>(object: I): SetCameraTransformTestCommand;
}
export declare namespace SetCameraTransformTestCommand_Vector3 {
    function encode(message: SetCameraTransformTestCommand_Vector3, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SetCameraTransformTestCommand_Vector3;
    function fromJSON(object: any): SetCameraTransformTestCommand_Vector3;
    function toJSON(message: SetCameraTransformTestCommand_Vector3): unknown;
    function create<I extends Exact<DeepPartial<SetCameraTransformTestCommand_Vector3>, I>>(base?: I): SetCameraTransformTestCommand_Vector3;
    function fromPartial<I extends Exact<DeepPartial<SetCameraTransformTestCommand_Vector3>, I>>(object: I): SetCameraTransformTestCommand_Vector3;
}
export declare namespace SetCameraTransformTestCommand_Quaternion {
    function encode(message: SetCameraTransformTestCommand_Quaternion, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SetCameraTransformTestCommand_Quaternion;
    function fromJSON(object: any): SetCameraTransformTestCommand_Quaternion;
    function toJSON(message: SetCameraTransformTestCommand_Quaternion): unknown;
    function create<I extends Exact<DeepPartial<SetCameraTransformTestCommand_Quaternion>, I>>(base?: I): SetCameraTransformTestCommand_Quaternion;
    function fromPartial<I extends Exact<DeepPartial<SetCameraTransformTestCommand_Quaternion>, I>>(object: I): SetCameraTransformTestCommand_Quaternion;
}
export declare namespace SetCameraTransformTestCommandResponse {
    function encode(_: SetCameraTransformTestCommandResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SetCameraTransformTestCommandResponse;
    function fromJSON(_: any): SetCameraTransformTestCommandResponse;
    function toJSON(_: SetCameraTransformTestCommandResponse): unknown;
    function create<I extends Exact<DeepPartial<SetCameraTransformTestCommandResponse>, I>>(base?: I): SetCameraTransformTestCommandResponse;
    function fromPartial<I extends Exact<DeepPartial<SetCameraTransformTestCommandResponse>, I>>(_: I): SetCameraTransformTestCommandResponse;
}
export type TestingServiceDefinition = typeof TestingServiceDefinition;
export declare const TestingServiceDefinition: {
    readonly name: "TestingService";
    readonly fullName: "decentraland.kernel.apis.TestingService";
    readonly methods: {
        /** sends a test result to the test runner */
        readonly logTestResult: {
            readonly name: "LogTestResult";
            readonly requestType: typeof TestResult;
            readonly requestStream: false;
            readonly responseType: typeof TestResultResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** send a list of all planned tests to the test runner */
        readonly plan: {
            readonly name: "Plan";
            readonly requestType: typeof TestPlan;
            readonly requestStream: false;
            readonly responseType: typeof TestPlanResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** sets the camera position and rotation in the engine */
        readonly setCameraTransform: {
            readonly name: "SetCameraTransform";
            readonly requestType: typeof SetCameraTransformTestCommand;
            readonly requestStream: false;
            readonly responseType: typeof SetCameraTransformTestCommandResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * @internal
         * take a screenshot and compare it with a stored one
         *  it hides the explorer hud and ui, primary player and players of avatar scenes
         */
        readonly takeAndCompareScreenshot: {
            readonly name: "TakeAndCompareScreenshot";
            readonly requestType: typeof TakeAndCompareScreenshotRequest;
            readonly requestStream: false;
            readonly responseType: typeof TakeAndCompareScreenshotResponse;
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
