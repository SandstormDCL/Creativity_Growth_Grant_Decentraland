import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.kernel.apis";
export interface FlatFetchInit {
    method?: string | undefined;
    body?: string | undefined;
    headers: {
        [key: string]: string;
    };
}
export interface FlatFetchInit_HeadersEntry {
    key: string;
    value: string;
}
export interface FlatFetchResponse {
    ok: boolean;
    status: number;
    statusText: string;
    headers: {
        [key: string]: string;
    };
    body: string;
}
export interface FlatFetchResponse_HeadersEntry {
    key: string;
    value: string;
}
export interface SignedFetchRequest {
    url: string;
    init?: FlatFetchInit | undefined;
}
export interface GetHeadersResponse {
    headers: {
        [key: string]: string;
    };
}
export interface GetHeadersResponse_HeadersEntry {
    key: string;
    value: string;
}
export declare namespace FlatFetchInit {
    function encode(message: FlatFetchInit, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): FlatFetchInit;
    function fromJSON(object: any): FlatFetchInit;
    function toJSON(message: FlatFetchInit): unknown;
    function create<I extends Exact<DeepPartial<FlatFetchInit>, I>>(base?: I): FlatFetchInit;
    function fromPartial<I extends Exact<DeepPartial<FlatFetchInit>, I>>(object: I): FlatFetchInit;
}
export declare namespace FlatFetchInit_HeadersEntry {
    function encode(message: FlatFetchInit_HeadersEntry, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): FlatFetchInit_HeadersEntry;
    function fromJSON(object: any): FlatFetchInit_HeadersEntry;
    function toJSON(message: FlatFetchInit_HeadersEntry): unknown;
    function create<I extends Exact<DeepPartial<FlatFetchInit_HeadersEntry>, I>>(base?: I): FlatFetchInit_HeadersEntry;
    function fromPartial<I extends Exact<DeepPartial<FlatFetchInit_HeadersEntry>, I>>(object: I): FlatFetchInit_HeadersEntry;
}
export declare namespace FlatFetchResponse {
    function encode(message: FlatFetchResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): FlatFetchResponse;
    function fromJSON(object: any): FlatFetchResponse;
    function toJSON(message: FlatFetchResponse): unknown;
    function create<I extends Exact<DeepPartial<FlatFetchResponse>, I>>(base?: I): FlatFetchResponse;
    function fromPartial<I extends Exact<DeepPartial<FlatFetchResponse>, I>>(object: I): FlatFetchResponse;
}
export declare namespace FlatFetchResponse_HeadersEntry {
    function encode(message: FlatFetchResponse_HeadersEntry, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): FlatFetchResponse_HeadersEntry;
    function fromJSON(object: any): FlatFetchResponse_HeadersEntry;
    function toJSON(message: FlatFetchResponse_HeadersEntry): unknown;
    function create<I extends Exact<DeepPartial<FlatFetchResponse_HeadersEntry>, I>>(base?: I): FlatFetchResponse_HeadersEntry;
    function fromPartial<I extends Exact<DeepPartial<FlatFetchResponse_HeadersEntry>, I>>(object: I): FlatFetchResponse_HeadersEntry;
}
export declare namespace SignedFetchRequest {
    function encode(message: SignedFetchRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SignedFetchRequest;
    function fromJSON(object: any): SignedFetchRequest;
    function toJSON(message: SignedFetchRequest): unknown;
    function create<I extends Exact<DeepPartial<SignedFetchRequest>, I>>(base?: I): SignedFetchRequest;
    function fromPartial<I extends Exact<DeepPartial<SignedFetchRequest>, I>>(object: I): SignedFetchRequest;
}
export declare namespace GetHeadersResponse {
    function encode(message: GetHeadersResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetHeadersResponse;
    function fromJSON(object: any): GetHeadersResponse;
    function toJSON(message: GetHeadersResponse): unknown;
    function create<I extends Exact<DeepPartial<GetHeadersResponse>, I>>(base?: I): GetHeadersResponse;
    function fromPartial<I extends Exact<DeepPartial<GetHeadersResponse>, I>>(object: I): GetHeadersResponse;
}
export declare namespace GetHeadersResponse_HeadersEntry {
    function encode(message: GetHeadersResponse_HeadersEntry, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetHeadersResponse_HeadersEntry;
    function fromJSON(object: any): GetHeadersResponse_HeadersEntry;
    function toJSON(message: GetHeadersResponse_HeadersEntry): unknown;
    function create<I extends Exact<DeepPartial<GetHeadersResponse_HeadersEntry>, I>>(base?: I): GetHeadersResponse_HeadersEntry;
    function fromPartial<I extends Exact<DeepPartial<GetHeadersResponse_HeadersEntry>, I>>(object: I): GetHeadersResponse_HeadersEntry;
}
export type SignedFetchServiceDefinition = typeof SignedFetchServiceDefinition;
export declare const SignedFetchServiceDefinition: {
    readonly name: "SignedFetchService";
    readonly fullName: "decentraland.kernel.apis.SignedFetchService";
    readonly methods: {
        /**
         * SignedFetch is used to authenticate JSON requests in name of the users,
         * a special scoped signature is generated following the https://adr.decentraland.org/adr/ADR-44
         */
        readonly signedFetch: {
            readonly name: "SignedFetch";
            readonly requestType: typeof SignedFetchRequest;
            readonly requestStream: false;
            readonly responseType: typeof FlatFetchResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getHeaders: {
            readonly name: "GetHeaders";
            readonly requestType: typeof SignedFetchRequest;
            readonly requestStream: false;
            readonly responseType: typeof GetHeadersResponse;
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
