"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserActionModuleServiceDefinition = exports.RequestTeleportResponse = exports.RequestTeleportRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.kernel.apis";
function createBaseRequestTeleportRequest() {
    return { destination: "" };
}
var RequestTeleportRequest;
(function (RequestTeleportRequest) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.destination !== "") {
            writer.uint32(10).string(message.destination);
        }
        return writer;
    }
    RequestTeleportRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestTeleportRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.destination = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    RequestTeleportRequest.decode = decode;
    function fromJSON(object) {
        return { destination: isSet(object.destination) ? String(object.destination) : "" };
    }
    RequestTeleportRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.destination !== undefined && (obj.destination = message.destination);
        return obj;
    }
    RequestTeleportRequest.toJSON = toJSON;
    function create(base) {
        return RequestTeleportRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    RequestTeleportRequest.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseRequestTeleportRequest();
        message.destination = (_a = object.destination) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    RequestTeleportRequest.fromPartial = fromPartial;
})(RequestTeleportRequest || (exports.RequestTeleportRequest = RequestTeleportRequest = {}));
function createBaseRequestTeleportResponse() {
    return {};
}
var RequestTeleportResponse;
(function (RequestTeleportResponse) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    RequestTeleportResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestTeleportResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    RequestTeleportResponse.decode = decode;
    function fromJSON(_) {
        return {};
    }
    RequestTeleportResponse.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    RequestTeleportResponse.toJSON = toJSON;
    function create(base) {
        return RequestTeleportResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    RequestTeleportResponse.create = create;
    function fromPartial(_) {
        const message = createBaseRequestTeleportResponse();
        return message;
    }
    RequestTeleportResponse.fromPartial = fromPartial;
})(RequestTeleportResponse || (exports.RequestTeleportResponse = RequestTeleportResponse = {}));
exports.UserActionModuleServiceDefinition = {
    name: "UserActionModuleService",
    fullName: "decentraland.kernel.apis.UserActionModuleService",
    methods: {
        /** @deprecated, only available for SDK6 compatibility. Use RestrictedActions/TeleportTo */
        requestTeleport: {
            name: "RequestTeleport",
            requestType: RequestTeleportRequest,
            requestStream: false,
            responseType: RequestTeleportResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=user_action_module.gen.js.map