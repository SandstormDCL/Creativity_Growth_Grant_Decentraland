import _m0 from "protobufjs/minimal";
import { ContentMapping } from "../../common/content_mapping.gen";
export declare const protobufPackage = "decentraland.kernel.apis";
export interface MappingsResponse {
    parcelId: string;
    rootCid: string;
    contents: ContentMapping[];
}
export interface Land {
    sceneId: string;
    sceneJsonData: string;
    baseUrl: string;
    baseUrlBundles: string;
    mappingsResponse: MappingsResponse | undefined;
}
export interface GetParcelRequest {
}
export interface GetParcelResponse {
    land: Land | undefined;
    cid: string;
}
export interface GetSceneIdRequest {
}
export interface GetSceneIdResponse {
    sceneId: string;
}
export interface GetIsEmptyRequest {
}
export interface GetIsEmptyResponse {
    isEmpty: boolean;
}
export declare namespace MappingsResponse {
    function encode(message: MappingsResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): MappingsResponse;
    function fromJSON(object: any): MappingsResponse;
    function toJSON(message: MappingsResponse): unknown;
    function create<I extends Exact<DeepPartial<MappingsResponse>, I>>(base?: I): MappingsResponse;
    function fromPartial<I extends Exact<DeepPartial<MappingsResponse>, I>>(object: I): MappingsResponse;
}
export declare namespace Land {
    function encode(message: Land, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): Land;
    function fromJSON(object: any): Land;
    function toJSON(message: Land): unknown;
    function create<I extends Exact<DeepPartial<Land>, I>>(base?: I): Land;
    function fromPartial<I extends Exact<DeepPartial<Land>, I>>(object: I): Land;
}
export declare namespace GetParcelRequest {
    function encode(_: GetParcelRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetParcelRequest;
    function fromJSON(_: any): GetParcelRequest;
    function toJSON(_: GetParcelRequest): unknown;
    function create<I extends Exact<DeepPartial<GetParcelRequest>, I>>(base?: I): GetParcelRequest;
    function fromPartial<I extends Exact<DeepPartial<GetParcelRequest>, I>>(_: I): GetParcelRequest;
}
export declare namespace GetParcelResponse {
    function encode(message: GetParcelResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetParcelResponse;
    function fromJSON(object: any): GetParcelResponse;
    function toJSON(message: GetParcelResponse): unknown;
    function create<I extends Exact<DeepPartial<GetParcelResponse>, I>>(base?: I): GetParcelResponse;
    function fromPartial<I extends Exact<DeepPartial<GetParcelResponse>, I>>(object: I): GetParcelResponse;
}
export declare namespace GetSceneIdRequest {
    function encode(_: GetSceneIdRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetSceneIdRequest;
    function fromJSON(_: any): GetSceneIdRequest;
    function toJSON(_: GetSceneIdRequest): unknown;
    function create<I extends Exact<DeepPartial<GetSceneIdRequest>, I>>(base?: I): GetSceneIdRequest;
    function fromPartial<I extends Exact<DeepPartial<GetSceneIdRequest>, I>>(_: I): GetSceneIdRequest;
}
export declare namespace GetSceneIdResponse {
    function encode(message: GetSceneIdResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetSceneIdResponse;
    function fromJSON(object: any): GetSceneIdResponse;
    function toJSON(message: GetSceneIdResponse): unknown;
    function create<I extends Exact<DeepPartial<GetSceneIdResponse>, I>>(base?: I): GetSceneIdResponse;
    function fromPartial<I extends Exact<DeepPartial<GetSceneIdResponse>, I>>(object: I): GetSceneIdResponse;
}
export declare namespace GetIsEmptyRequest {
    function encode(_: GetIsEmptyRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetIsEmptyRequest;
    function fromJSON(_: any): GetIsEmptyRequest;
    function toJSON(_: GetIsEmptyRequest): unknown;
    function create<I extends Exact<DeepPartial<GetIsEmptyRequest>, I>>(base?: I): GetIsEmptyRequest;
    function fromPartial<I extends Exact<DeepPartial<GetIsEmptyRequest>, I>>(_: I): GetIsEmptyRequest;
}
export declare namespace GetIsEmptyResponse {
    function encode(message: GetIsEmptyResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetIsEmptyResponse;
    function fromJSON(object: any): GetIsEmptyResponse;
    function toJSON(message: GetIsEmptyResponse): unknown;
    function create<I extends Exact<DeepPartial<GetIsEmptyResponse>, I>>(base?: I): GetIsEmptyResponse;
    function fromPartial<I extends Exact<DeepPartial<GetIsEmptyResponse>, I>>(object: I): GetIsEmptyResponse;
}
export type ParcelIdentityServiceDefinition = typeof ParcelIdentityServiceDefinition;
export declare const ParcelIdentityServiceDefinition: {
    readonly name: "ParcelIdentityService";
    readonly fullName: "decentraland.kernel.apis.ParcelIdentityService";
    readonly methods: {
        /** @deprecated, only available for SDK6 compatibility */
        readonly getParcel: {
            readonly name: "GetParcel";
            readonly requestType: typeof GetParcelRequest;
            readonly requestStream: false;
            readonly responseType: typeof GetParcelResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** @deprecated, only available for SDK6 compatibility */
        readonly getSceneId: {
            readonly name: "GetSceneId";
            readonly requestType: typeof GetSceneIdRequest;
            readonly requestStream: false;
            readonly responseType: typeof GetSceneIdResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** @deprecated, only available for SDK6 compatibility */
        readonly getIsEmpty: {
            readonly name: "GetIsEmpty";
            readonly requestType: typeof GetIsEmptyRequest;
            readonly requestStream: false;
            readonly responseType: typeof GetIsEmptyResponse;
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
