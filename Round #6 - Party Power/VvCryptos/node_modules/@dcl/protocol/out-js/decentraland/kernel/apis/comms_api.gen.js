"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommsApiServiceDefinition = exports.VideoTracksActiveStreamsData = exports.VideoTracksActiveStreamsResponse = exports.VideoTracksActiveStreamsRequest = exports.VideoTrackSourceType = exports.protobufPackage = void 0;
exports.videoTrackSourceTypeFromJSON = videoTrackSourceTypeFromJSON;
exports.videoTrackSourceTypeToJSON = videoTrackSourceTypeToJSON;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.kernel.apis";
var VideoTrackSourceType;
(function (VideoTrackSourceType) {
    VideoTrackSourceType[VideoTrackSourceType["VTST_UNKNOWN"] = 0] = "VTST_UNKNOWN";
    VideoTrackSourceType[VideoTrackSourceType["VTST_CAMERA"] = 1] = "VTST_CAMERA";
    VideoTrackSourceType[VideoTrackSourceType["VTST_SCREEN_SHARE"] = 2] = "VTST_SCREEN_SHARE";
    VideoTrackSourceType[VideoTrackSourceType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(VideoTrackSourceType || (exports.VideoTrackSourceType = VideoTrackSourceType = {}));
function videoTrackSourceTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "VTST_UNKNOWN":
            return VideoTrackSourceType.VTST_UNKNOWN;
        case 1:
        case "VTST_CAMERA":
            return VideoTrackSourceType.VTST_CAMERA;
        case 2:
        case "VTST_SCREEN_SHARE":
            return VideoTrackSourceType.VTST_SCREEN_SHARE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return VideoTrackSourceType.UNRECOGNIZED;
    }
}
function videoTrackSourceTypeToJSON(object) {
    switch (object) {
        case VideoTrackSourceType.VTST_UNKNOWN:
            return "VTST_UNKNOWN";
        case VideoTrackSourceType.VTST_CAMERA:
            return "VTST_CAMERA";
        case VideoTrackSourceType.VTST_SCREEN_SHARE:
            return "VTST_SCREEN_SHARE";
        case VideoTrackSourceType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseVideoTracksActiveStreamsRequest() {
    return {};
}
var VideoTracksActiveStreamsRequest;
(function (VideoTracksActiveStreamsRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    VideoTracksActiveStreamsRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVideoTracksActiveStreamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    VideoTracksActiveStreamsRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    VideoTracksActiveStreamsRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    VideoTracksActiveStreamsRequest.toJSON = toJSON;
    function create(base) {
        return VideoTracksActiveStreamsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    VideoTracksActiveStreamsRequest.create = create;
    function fromPartial(_) {
        const message = createBaseVideoTracksActiveStreamsRequest();
        return message;
    }
    VideoTracksActiveStreamsRequest.fromPartial = fromPartial;
})(VideoTracksActiveStreamsRequest || (exports.VideoTracksActiveStreamsRequest = VideoTracksActiveStreamsRequest = {}));
function createBaseVideoTracksActiveStreamsResponse() {
    return { streams: [] };
}
var VideoTracksActiveStreamsResponse;
(function (VideoTracksActiveStreamsResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.streams) {
            VideoTracksActiveStreamsData.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    VideoTracksActiveStreamsResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVideoTracksActiveStreamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.streams.push(VideoTracksActiveStreamsData.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    VideoTracksActiveStreamsResponse.decode = decode;
    function fromJSON(object) {
        return {
            streams: Array.isArray(object === null || object === void 0 ? void 0 : object.streams)
                ? object.streams.map((e) => VideoTracksActiveStreamsData.fromJSON(e))
                : [],
        };
    }
    VideoTracksActiveStreamsResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.streams) {
            obj.streams = message.streams.map((e) => e ? VideoTracksActiveStreamsData.toJSON(e) : undefined);
        }
        else {
            obj.streams = [];
        }
        return obj;
    }
    VideoTracksActiveStreamsResponse.toJSON = toJSON;
    function create(base) {
        return VideoTracksActiveStreamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    VideoTracksActiveStreamsResponse.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseVideoTracksActiveStreamsResponse();
        message.streams = ((_a = object.streams) === null || _a === void 0 ? void 0 : _a.map((e) => VideoTracksActiveStreamsData.fromPartial(e))) || [];
        return message;
    }
    VideoTracksActiveStreamsResponse.fromPartial = fromPartial;
})(VideoTracksActiveStreamsResponse || (exports.VideoTracksActiveStreamsResponse = VideoTracksActiveStreamsResponse = {}));
function createBaseVideoTracksActiveStreamsData() {
    return { identity: "", trackSid: "", sourceType: 0 };
}
var VideoTracksActiveStreamsData;
(function (VideoTracksActiveStreamsData) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.identity !== "") {
            writer.uint32(10).string(message.identity);
        }
        if (message.trackSid !== "") {
            writer.uint32(18).string(message.trackSid);
        }
        if (message.sourceType !== 0) {
            writer.uint32(24).int32(message.sourceType);
        }
        return writer;
    }
    VideoTracksActiveStreamsData.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVideoTracksActiveStreamsData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.identity = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.trackSid = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.sourceType = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    VideoTracksActiveStreamsData.decode = decode;
    function fromJSON(object) {
        return {
            identity: isSet(object.identity) ? String(object.identity) : "",
            trackSid: isSet(object.trackSid) ? String(object.trackSid) : "",
            sourceType: isSet(object.sourceType) ? videoTrackSourceTypeFromJSON(object.sourceType) : 0,
        };
    }
    VideoTracksActiveStreamsData.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.identity !== undefined && (obj.identity = message.identity);
        message.trackSid !== undefined && (obj.trackSid = message.trackSid);
        message.sourceType !== undefined && (obj.sourceType = videoTrackSourceTypeToJSON(message.sourceType));
        return obj;
    }
    VideoTracksActiveStreamsData.toJSON = toJSON;
    function create(base) {
        return VideoTracksActiveStreamsData.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    VideoTracksActiveStreamsData.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseVideoTracksActiveStreamsData();
        message.identity = (_a = object.identity) !== null && _a !== void 0 ? _a : "";
        message.trackSid = (_b = object.trackSid) !== null && _b !== void 0 ? _b : "";
        message.sourceType = (_c = object.sourceType) !== null && _c !== void 0 ? _c : 0;
        return message;
    }
    VideoTracksActiveStreamsData.fromPartial = fromPartial;
})(VideoTracksActiveStreamsData || (exports.VideoTracksActiveStreamsData = VideoTracksActiveStreamsData = {}));
exports.CommsApiServiceDefinition = {
    name: "CommsApiService",
    fullName: "decentraland.kernel.apis.CommsApiService",
    methods: {
        getActiveVideoStreams: {
            name: "GetActiveVideoStreams",
            requestType: VideoTracksActiveStreamsRequest,
            requestStream: false,
            responseType: VideoTracksActiveStreamsResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=comms_api.gen.js.map