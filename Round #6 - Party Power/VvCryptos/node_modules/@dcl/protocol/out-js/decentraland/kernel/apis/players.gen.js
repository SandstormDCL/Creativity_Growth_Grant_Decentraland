"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayersServiceDefinition = exports.GetConnectedPlayersRequest = exports.GetPlayersInSceneRequest = exports.GetPlayerDataRequest = exports.PlayerListResponse = exports.PlayersGetUserDataResponse = exports.Player = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const user_data_gen_1 = require("../../common/sdk/user_data.gen");
exports.protobufPackage = "decentraland.kernel.apis";
function createBasePlayer() {
    return { userId: "" };
}
var Player;
(function (Player) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        return writer;
    }
    Player.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlayer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Player.decode = decode;
    function fromJSON(object) {
        return { userId: isSet(object.userId) ? String(object.userId) : "" };
    }
    Player.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.userId !== undefined && (obj.userId = message.userId);
        return obj;
    }
    Player.toJSON = toJSON;
    function create(base) {
        return Player.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Player.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBasePlayer();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    Player.fromPartial = fromPartial;
})(Player || (exports.Player = Player = {}));
function createBasePlayersGetUserDataResponse() {
    return { data: undefined };
}
var PlayersGetUserDataResponse;
(function (PlayersGetUserDataResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.data !== undefined) {
            user_data_gen_1.UserData.encode(message.data, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    PlayersGetUserDataResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlayersGetUserDataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data = user_data_gen_1.UserData.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PlayersGetUserDataResponse.decode = decode;
    function fromJSON(object) {
        return { data: isSet(object.data) ? user_data_gen_1.UserData.fromJSON(object.data) : undefined };
    }
    PlayersGetUserDataResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.data !== undefined && (obj.data = message.data ? user_data_gen_1.UserData.toJSON(message.data) : undefined);
        return obj;
    }
    PlayersGetUserDataResponse.toJSON = toJSON;
    function create(base) {
        return PlayersGetUserDataResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PlayersGetUserDataResponse.create = create;
    function fromPartial(object) {
        const message = createBasePlayersGetUserDataResponse();
        message.data = (object.data !== undefined && object.data !== null) ? user_data_gen_1.UserData.fromPartial(object.data) : undefined;
        return message;
    }
    PlayersGetUserDataResponse.fromPartial = fromPartial;
})(PlayersGetUserDataResponse || (exports.PlayersGetUserDataResponse = PlayersGetUserDataResponse = {}));
function createBasePlayerListResponse() {
    return { players: [] };
}
var PlayerListResponse;
(function (PlayerListResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.players) {
            Player.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    PlayerListResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlayerListResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.players.push(Player.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PlayerListResponse.decode = decode;
    function fromJSON(object) {
        return { players: Array.isArray(object === null || object === void 0 ? void 0 : object.players) ? object.players.map((e) => Player.fromJSON(e)) : [] };
    }
    PlayerListResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.players) {
            obj.players = message.players.map((e) => e ? Player.toJSON(e) : undefined);
        }
        else {
            obj.players = [];
        }
        return obj;
    }
    PlayerListResponse.toJSON = toJSON;
    function create(base) {
        return PlayerListResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PlayerListResponse.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBasePlayerListResponse();
        message.players = ((_a = object.players) === null || _a === void 0 ? void 0 : _a.map((e) => Player.fromPartial(e))) || [];
        return message;
    }
    PlayerListResponse.fromPartial = fromPartial;
})(PlayerListResponse || (exports.PlayerListResponse = PlayerListResponse = {}));
function createBaseGetPlayerDataRequest() {
    return { userId: "" };
}
var GetPlayerDataRequest;
(function (GetPlayerDataRequest) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        return writer;
    }
    GetPlayerDataRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPlayerDataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetPlayerDataRequest.decode = decode;
    function fromJSON(object) {
        return { userId: isSet(object.userId) ? String(object.userId) : "" };
    }
    GetPlayerDataRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.userId !== undefined && (obj.userId = message.userId);
        return obj;
    }
    GetPlayerDataRequest.toJSON = toJSON;
    function create(base) {
        return GetPlayerDataRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetPlayerDataRequest.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseGetPlayerDataRequest();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    GetPlayerDataRequest.fromPartial = fromPartial;
})(GetPlayerDataRequest || (exports.GetPlayerDataRequest = GetPlayerDataRequest = {}));
function createBaseGetPlayersInSceneRequest() {
    return {};
}
var GetPlayersInSceneRequest;
(function (GetPlayersInSceneRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    GetPlayersInSceneRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPlayersInSceneRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetPlayersInSceneRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    GetPlayersInSceneRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    GetPlayersInSceneRequest.toJSON = toJSON;
    function create(base) {
        return GetPlayersInSceneRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetPlayersInSceneRequest.create = create;
    function fromPartial(_) {
        const message = createBaseGetPlayersInSceneRequest();
        return message;
    }
    GetPlayersInSceneRequest.fromPartial = fromPartial;
})(GetPlayersInSceneRequest || (exports.GetPlayersInSceneRequest = GetPlayersInSceneRequest = {}));
function createBaseGetConnectedPlayersRequest() {
    return {};
}
var GetConnectedPlayersRequest;
(function (GetConnectedPlayersRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    GetConnectedPlayersRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetConnectedPlayersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetConnectedPlayersRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    GetConnectedPlayersRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    GetConnectedPlayersRequest.toJSON = toJSON;
    function create(base) {
        return GetConnectedPlayersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetConnectedPlayersRequest.create = create;
    function fromPartial(_) {
        const message = createBaseGetConnectedPlayersRequest();
        return message;
    }
    GetConnectedPlayersRequest.fromPartial = fromPartial;
})(GetConnectedPlayersRequest || (exports.GetConnectedPlayersRequest = GetConnectedPlayersRequest = {}));
exports.PlayersServiceDefinition = {
    name: "PlayersService",
    fullName: "decentraland.kernel.apis.PlayersService",
    methods: {
        /**
         * Returns data about a specific player, by id
         * NOTE: To be deprecated after implementing foreign-entities and once the avatar scene uses SDK7
         */
        getPlayerData: {
            name: "GetPlayerData",
            requestType: GetPlayerDataRequest,
            requestStream: false,
            responseType: PlayersGetUserDataResponse,
            responseStream: false,
            options: {},
        },
        /**
         * Returns a list of all the ids of players who are currently standing within the parcels of the scene
         * NOTE: To be deprecated after implementing foreign-entities and once the avatar scene uses SDK7
         */
        getPlayersInScene: {
            name: "GetPlayersInScene",
            requestType: GetPlayersInSceneRequest,
            requestStream: false,
            responseType: PlayerListResponse,
            responseStream: false,
            options: {},
        },
        /**
         * Returns a list of all the ids of players who are currently connected to the same server and grouped together
         * NOTE: To be deprecated after implementing foreign-entities and once the avatar scene uses SDK7
         */
        getConnectedPlayers: {
            name: "GetConnectedPlayers",
            requestType: GetConnectedPlayersRequest,
            requestStream: false,
            responseType: PlayerListResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=players.gen.js.map