import _m0 from "protobufjs/minimal";
import { ContentMapping } from "../../common/content_mapping.gen";
import { PBRealmInfo } from "../../sdk/components/realm_info.gen";
export declare const protobufPackage = "decentraland.kernel.apis";
export interface GetRealmResponse {
    realmInfo?: PBRealmInfo | undefined;
}
export interface GetWorldTimeResponse {
    seconds: number;
}
export interface GetRealmRequest {
}
export interface GetWorldTimeRequest {
}
export interface ReadFileRequest {
    /** name of the deployed file */
    fileName: string;
}
export interface ReadFileResponse {
    /** contents of the file */
    content: Uint8Array;
    /** deployed hash/CID */
    hash: string;
}
export interface CurrentSceneEntityRequest {
}
export interface CurrentSceneEntityResponse {
    /** this is either the entityId or the full URN of the scene that is running */
    urn: string;
    /** contents of the deployed entities */
    content: ContentMapping[];
    /** JSON serialization of the entity.metadata field */
    metadataJson: string;
    /** baseUrl used to resolve all content files */
    baseUrl: string;
}
export interface GetExplorerInformationRequest {
}
export interface GetExplorerInformationResponse {
    /** the agent that current explorer is identified as */
    agent: string;
    /** options: "desktop", "mobile", "vr", "web" */
    platform: string;
    /** custom configurations set in the explorer */
    configurations: {
        [key: string]: string;
    };
}
export interface GetExplorerInformationResponse_ConfigurationsEntry {
    key: string;
    value: string;
}
export declare namespace GetRealmResponse {
    function encode(message: GetRealmResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetRealmResponse;
    function fromJSON(object: any): GetRealmResponse;
    function toJSON(message: GetRealmResponse): unknown;
    function create<I extends Exact<DeepPartial<GetRealmResponse>, I>>(base?: I): GetRealmResponse;
    function fromPartial<I extends Exact<DeepPartial<GetRealmResponse>, I>>(object: I): GetRealmResponse;
}
export declare namespace GetWorldTimeResponse {
    function encode(message: GetWorldTimeResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetWorldTimeResponse;
    function fromJSON(object: any): GetWorldTimeResponse;
    function toJSON(message: GetWorldTimeResponse): unknown;
    function create<I extends Exact<DeepPartial<GetWorldTimeResponse>, I>>(base?: I): GetWorldTimeResponse;
    function fromPartial<I extends Exact<DeepPartial<GetWorldTimeResponse>, I>>(object: I): GetWorldTimeResponse;
}
export declare namespace GetRealmRequest {
    function encode(_: GetRealmRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetRealmRequest;
    function fromJSON(_: any): GetRealmRequest;
    function toJSON(_: GetRealmRequest): unknown;
    function create<I extends Exact<DeepPartial<GetRealmRequest>, I>>(base?: I): GetRealmRequest;
    function fromPartial<I extends Exact<DeepPartial<GetRealmRequest>, I>>(_: I): GetRealmRequest;
}
export declare namespace GetWorldTimeRequest {
    function encode(_: GetWorldTimeRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetWorldTimeRequest;
    function fromJSON(_: any): GetWorldTimeRequest;
    function toJSON(_: GetWorldTimeRequest): unknown;
    function create<I extends Exact<DeepPartial<GetWorldTimeRequest>, I>>(base?: I): GetWorldTimeRequest;
    function fromPartial<I extends Exact<DeepPartial<GetWorldTimeRequest>, I>>(_: I): GetWorldTimeRequest;
}
export declare namespace ReadFileRequest {
    function encode(message: ReadFileRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): ReadFileRequest;
    function fromJSON(object: any): ReadFileRequest;
    function toJSON(message: ReadFileRequest): unknown;
    function create<I extends Exact<DeepPartial<ReadFileRequest>, I>>(base?: I): ReadFileRequest;
    function fromPartial<I extends Exact<DeepPartial<ReadFileRequest>, I>>(object: I): ReadFileRequest;
}
export declare namespace ReadFileResponse {
    function encode(message: ReadFileResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): ReadFileResponse;
    function fromJSON(object: any): ReadFileResponse;
    function toJSON(message: ReadFileResponse): unknown;
    function create<I extends Exact<DeepPartial<ReadFileResponse>, I>>(base?: I): ReadFileResponse;
    function fromPartial<I extends Exact<DeepPartial<ReadFileResponse>, I>>(object: I): ReadFileResponse;
}
export declare namespace CurrentSceneEntityRequest {
    function encode(_: CurrentSceneEntityRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): CurrentSceneEntityRequest;
    function fromJSON(_: any): CurrentSceneEntityRequest;
    function toJSON(_: CurrentSceneEntityRequest): unknown;
    function create<I extends Exact<DeepPartial<CurrentSceneEntityRequest>, I>>(base?: I): CurrentSceneEntityRequest;
    function fromPartial<I extends Exact<DeepPartial<CurrentSceneEntityRequest>, I>>(_: I): CurrentSceneEntityRequest;
}
export declare namespace CurrentSceneEntityResponse {
    function encode(message: CurrentSceneEntityResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): CurrentSceneEntityResponse;
    function fromJSON(object: any): CurrentSceneEntityResponse;
    function toJSON(message: CurrentSceneEntityResponse): unknown;
    function create<I extends Exact<DeepPartial<CurrentSceneEntityResponse>, I>>(base?: I): CurrentSceneEntityResponse;
    function fromPartial<I extends Exact<DeepPartial<CurrentSceneEntityResponse>, I>>(object: I): CurrentSceneEntityResponse;
}
export declare namespace GetExplorerInformationRequest {
    function encode(_: GetExplorerInformationRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetExplorerInformationRequest;
    function fromJSON(_: any): GetExplorerInformationRequest;
    function toJSON(_: GetExplorerInformationRequest): unknown;
    function create<I extends Exact<DeepPartial<GetExplorerInformationRequest>, I>>(base?: I): GetExplorerInformationRequest;
    function fromPartial<I extends Exact<DeepPartial<GetExplorerInformationRequest>, I>>(_: I): GetExplorerInformationRequest;
}
export declare namespace GetExplorerInformationResponse {
    function encode(message: GetExplorerInformationResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetExplorerInformationResponse;
    function fromJSON(object: any): GetExplorerInformationResponse;
    function toJSON(message: GetExplorerInformationResponse): unknown;
    function create<I extends Exact<DeepPartial<GetExplorerInformationResponse>, I>>(base?: I): GetExplorerInformationResponse;
    function fromPartial<I extends Exact<DeepPartial<GetExplorerInformationResponse>, I>>(object: I): GetExplorerInformationResponse;
}
export declare namespace GetExplorerInformationResponse_ConfigurationsEntry {
    function encode(message: GetExplorerInformationResponse_ConfigurationsEntry, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetExplorerInformationResponse_ConfigurationsEntry;
    function fromJSON(object: any): GetExplorerInformationResponse_ConfigurationsEntry;
    function toJSON(message: GetExplorerInformationResponse_ConfigurationsEntry): unknown;
    function create<I extends Exact<DeepPartial<GetExplorerInformationResponse_ConfigurationsEntry>, I>>(base?: I): GetExplorerInformationResponse_ConfigurationsEntry;
    function fromPartial<I extends Exact<DeepPartial<GetExplorerInformationResponse_ConfigurationsEntry>, I>>(object: I): GetExplorerInformationResponse_ConfigurationsEntry;
}
export type RuntimeServiceDefinition = typeof RuntimeServiceDefinition;
export declare const RuntimeServiceDefinition: {
    readonly name: "RuntimeService";
    readonly fullName: "decentraland.kernel.apis.RuntimeService";
    readonly methods: {
        /** Provides information about the current realm */
        readonly getRealm: {
            readonly name: "GetRealm";
            readonly requestType: typeof GetRealmRequest;
            readonly requestStream: false;
            readonly responseType: typeof GetRealmResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Provides information about the Decentraland Time, which is coordinated
         * across players.
         */
        readonly getWorldTime: {
            readonly name: "GetWorldTime";
            readonly requestType: typeof GetWorldTimeRequest;
            readonly requestStream: false;
            readonly responseType: typeof GetWorldTimeResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Returns the file content of a deployed asset. If the file doesn't
         * exist or cannot be retrieved, the RPC call throws an error.
         * This method is called to load any assets deployed among the scene,
         * runtime may cache this response much more than the provided "fetch" function.
         */
        readonly readFile: {
            readonly name: "ReadFile";
            readonly requestType: typeof ReadFileRequest;
            readonly requestStream: false;
            readonly responseType: typeof ReadFileResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** Returns information about the current scene. This is the replacement of GetBootstrapData */
        readonly getSceneInformation: {
            readonly name: "GetSceneInformation";
            readonly requestType: typeof CurrentSceneEntityRequest;
            readonly requestStream: false;
            readonly responseType: typeof CurrentSceneEntityResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** Provides information about the explorer */
        readonly getExplorerInformation: {
            readonly name: "GetExplorerInformation";
            readonly requestType: typeof GetExplorerInformationRequest;
            readonly requestStream: false;
            readonly responseType: typeof GetExplorerInformationResponse;
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
