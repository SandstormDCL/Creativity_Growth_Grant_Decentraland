import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.kernel.comms.rfc5";
/** Sent to the clients when the challenge is validated and they are authenticated. */
export interface WsWelcome {
    alias: number;
    peerIdentities: {
        [key: number]: string;
    };
}
export interface WsWelcome_PeerIdentitiesEntry {
    key: number;
    value: string;
}
/** Sent to the clients when a user connects and their identity is authenticated. */
export interface WsPeerJoin {
    alias: number;
    address: string;
}
/** Sent to the clients when a user gets disconnected. */
export interface WsPeerLeave {
    alias: number;
}
/** This is the data package for all user messages. */
export interface WsPeerUpdate {
    fromAlias: number;
    body: Uint8Array;
    unreliable: boolean;
}
/**
 * Sent to the clients as first message, it contains a challenge string and a
 * hint about if the same address is connected to another room. In such case,
 * after authentication, the server may decide to end the former connection. This
 * hint exists for UX purposes of the explorers for cases like multiple running
 * instances of the explorer.
 */
export interface WsChallengeRequired {
    challengeToSign: string;
    alreadyConnected: boolean;
}
/** Response to WsChallengeRequired, signed using the AuthChain mechanism. */
export interface WsSignedChallenge {
    authChainJson: string;
}
/**
 * This is the first message sent by the clients, it us used to identify the client
 * in the server.
 */
export interface WsIdentification {
    address: string;
}
/**
 * This message is received by the peers when the same address logs in in a
 * different session. It should signal that the client should be shut down and not
 * retry any new comms connection. It can also be used to reject new users joining when
 * the room capacity has been reached.
 */
export interface WsKicked {
    reason: string;
}
export interface WsPacket {
    message?: {
        $case: "welcomeMessage";
        welcomeMessage: WsWelcome;
    } | {
        $case: "peerJoinMessage";
        peerJoinMessage: WsPeerJoin;
    } | {
        $case: "peerUpdateMessage";
        peerUpdateMessage: WsPeerUpdate;
    } | {
        $case: "challengeMessage";
        challengeMessage: WsChallengeRequired;
    } | {
        $case: "signedChallengeForServer";
        signedChallengeForServer: WsSignedChallenge;
    } | {
        $case: "peerLeaveMessage";
        peerLeaveMessage: WsPeerLeave;
    } | {
        $case: "peerIdentification";
        peerIdentification: WsIdentification;
    } | {
        $case: "peerKicked";
        peerKicked: WsKicked;
    } | undefined;
}
export declare namespace WsWelcome {
    function encode(message: WsWelcome, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): WsWelcome;
    function fromJSON(object: any): WsWelcome;
    function toJSON(message: WsWelcome): unknown;
    function create<I extends Exact<DeepPartial<WsWelcome>, I>>(base?: I): WsWelcome;
    function fromPartial<I extends Exact<DeepPartial<WsWelcome>, I>>(object: I): WsWelcome;
}
export declare namespace WsWelcome_PeerIdentitiesEntry {
    function encode(message: WsWelcome_PeerIdentitiesEntry, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): WsWelcome_PeerIdentitiesEntry;
    function fromJSON(object: any): WsWelcome_PeerIdentitiesEntry;
    function toJSON(message: WsWelcome_PeerIdentitiesEntry): unknown;
    function create<I extends Exact<DeepPartial<WsWelcome_PeerIdentitiesEntry>, I>>(base?: I): WsWelcome_PeerIdentitiesEntry;
    function fromPartial<I extends Exact<DeepPartial<WsWelcome_PeerIdentitiesEntry>, I>>(object: I): WsWelcome_PeerIdentitiesEntry;
}
export declare namespace WsPeerJoin {
    function encode(message: WsPeerJoin, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): WsPeerJoin;
    function fromJSON(object: any): WsPeerJoin;
    function toJSON(message: WsPeerJoin): unknown;
    function create<I extends Exact<DeepPartial<WsPeerJoin>, I>>(base?: I): WsPeerJoin;
    function fromPartial<I extends Exact<DeepPartial<WsPeerJoin>, I>>(object: I): WsPeerJoin;
}
export declare namespace WsPeerLeave {
    function encode(message: WsPeerLeave, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): WsPeerLeave;
    function fromJSON(object: any): WsPeerLeave;
    function toJSON(message: WsPeerLeave): unknown;
    function create<I extends Exact<DeepPartial<WsPeerLeave>, I>>(base?: I): WsPeerLeave;
    function fromPartial<I extends Exact<DeepPartial<WsPeerLeave>, I>>(object: I): WsPeerLeave;
}
export declare namespace WsPeerUpdate {
    function encode(message: WsPeerUpdate, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): WsPeerUpdate;
    function fromJSON(object: any): WsPeerUpdate;
    function toJSON(message: WsPeerUpdate): unknown;
    function create<I extends Exact<DeepPartial<WsPeerUpdate>, I>>(base?: I): WsPeerUpdate;
    function fromPartial<I extends Exact<DeepPartial<WsPeerUpdate>, I>>(object: I): WsPeerUpdate;
}
export declare namespace WsChallengeRequired {
    function encode(message: WsChallengeRequired, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): WsChallengeRequired;
    function fromJSON(object: any): WsChallengeRequired;
    function toJSON(message: WsChallengeRequired): unknown;
    function create<I extends Exact<DeepPartial<WsChallengeRequired>, I>>(base?: I): WsChallengeRequired;
    function fromPartial<I extends Exact<DeepPartial<WsChallengeRequired>, I>>(object: I): WsChallengeRequired;
}
export declare namespace WsSignedChallenge {
    function encode(message: WsSignedChallenge, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): WsSignedChallenge;
    function fromJSON(object: any): WsSignedChallenge;
    function toJSON(message: WsSignedChallenge): unknown;
    function create<I extends Exact<DeepPartial<WsSignedChallenge>, I>>(base?: I): WsSignedChallenge;
    function fromPartial<I extends Exact<DeepPartial<WsSignedChallenge>, I>>(object: I): WsSignedChallenge;
}
export declare namespace WsIdentification {
    function encode(message: WsIdentification, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): WsIdentification;
    function fromJSON(object: any): WsIdentification;
    function toJSON(message: WsIdentification): unknown;
    function create<I extends Exact<DeepPartial<WsIdentification>, I>>(base?: I): WsIdentification;
    function fromPartial<I extends Exact<DeepPartial<WsIdentification>, I>>(object: I): WsIdentification;
}
export declare namespace WsKicked {
    function encode(message: WsKicked, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): WsKicked;
    function fromJSON(object: any): WsKicked;
    function toJSON(message: WsKicked): unknown;
    function create<I extends Exact<DeepPartial<WsKicked>, I>>(base?: I): WsKicked;
    function fromPartial<I extends Exact<DeepPartial<WsKicked>, I>>(object: I): WsKicked;
}
export declare namespace WsPacket {
    function encode(message: WsPacket, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): WsPacket;
    function fromJSON(object: any): WsPacket;
    function toJSON(message: WsPacket): unknown;
    function create<I extends Exact<DeepPartial<WsPacket>, I>>(base?: I): WsPacket;
    function fromPartial<I extends Exact<DeepPartial<WsPacket>, I>>(object: I): WsPacket;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
