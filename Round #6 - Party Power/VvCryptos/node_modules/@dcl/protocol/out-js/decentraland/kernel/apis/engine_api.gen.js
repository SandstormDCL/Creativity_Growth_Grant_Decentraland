"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EngineApiServiceDefinition = exports.IsServerResponse = exports.IsServerRequest = exports.CrdtMessageFromRendererResponse = exports.CrdtMessageFromRendererRequest = exports.CrdtGetStateResponse = exports.CrdtGetStateRequest = exports.CrdtSendToResponse = exports.CrdtSendToRendererRequest = exports.EventData = exports.RotationChangedPayload = exports.PositionChangedPayload = exports.ReadOnlyQuaternion = exports.ReadOnlyVector3 = exports.GenericPayload = exports.UnsubscribeResponse = exports.SubscribeResponse = exports.SubscribeRequest = exports.UnsubscribeRequest = exports.SendBatchResponse = exports.ManyEntityAction = exports.EventDataType = exports.protobufPackage = void 0;
exports.eventDataTypeFromJSON = eventDataTypeFromJSON;
exports.eventDataTypeToJSON = eventDataTypeToJSON;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const engine_interface_ecs6_gen_1 = require("../../sdk/ecs6/engine_interface_ecs6.gen");
exports.protobufPackage = "decentraland.kernel.apis";
/** Events */
var EventDataType;
(function (EventDataType) {
    EventDataType[EventDataType["EDT_GENERIC"] = 0] = "EDT_GENERIC";
    EventDataType[EventDataType["EDT_POSITION_CHANGED"] = 1] = "EDT_POSITION_CHANGED";
    EventDataType[EventDataType["EDT_ROTATION_CHANGED"] = 2] = "EDT_ROTATION_CHANGED";
    EventDataType[EventDataType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(EventDataType || (exports.EventDataType = EventDataType = {}));
function eventDataTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "EDT_GENERIC":
            return EventDataType.EDT_GENERIC;
        case 1:
        case "EDT_POSITION_CHANGED":
            return EventDataType.EDT_POSITION_CHANGED;
        case 2:
        case "EDT_ROTATION_CHANGED":
            return EventDataType.EDT_ROTATION_CHANGED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return EventDataType.UNRECOGNIZED;
    }
}
function eventDataTypeToJSON(object) {
    switch (object) {
        case EventDataType.EDT_GENERIC:
            return "EDT_GENERIC";
        case EventDataType.EDT_POSITION_CHANGED:
            return "EDT_POSITION_CHANGED";
        case EventDataType.EDT_ROTATION_CHANGED:
            return "EDT_ROTATION_CHANGED";
        case EventDataType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseManyEntityAction() {
    return { actions: [] };
}
var ManyEntityAction;
(function (ManyEntityAction) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.actions) {
            engine_interface_ecs6_gen_1.EntityAction.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    ManyEntityAction.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseManyEntityAction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.actions.push(engine_interface_ecs6_gen_1.EntityAction.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ManyEntityAction.decode = decode;
    function fromJSON(object) {
        return { actions: Array.isArray(object === null || object === void 0 ? void 0 : object.actions) ? object.actions.map((e) => engine_interface_ecs6_gen_1.EntityAction.fromJSON(e)) : [] };
    }
    ManyEntityAction.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.actions) {
            obj.actions = message.actions.map((e) => e ? engine_interface_ecs6_gen_1.EntityAction.toJSON(e) : undefined);
        }
        else {
            obj.actions = [];
        }
        return obj;
    }
    ManyEntityAction.toJSON = toJSON;
    function create(base) {
        return ManyEntityAction.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ManyEntityAction.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseManyEntityAction();
        message.actions = ((_a = object.actions) === null || _a === void 0 ? void 0 : _a.map((e) => engine_interface_ecs6_gen_1.EntityAction.fromPartial(e))) || [];
        return message;
    }
    ManyEntityAction.fromPartial = fromPartial;
})(ManyEntityAction || (exports.ManyEntityAction = ManyEntityAction = {}));
function createBaseSendBatchResponse() {
    return { events: [] };
}
var SendBatchResponse;
(function (SendBatchResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.events) {
            EventData.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    SendBatchResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSendBatchResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.events.push(EventData.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    SendBatchResponse.decode = decode;
    function fromJSON(object) {
        return { events: Array.isArray(object === null || object === void 0 ? void 0 : object.events) ? object.events.map((e) => EventData.fromJSON(e)) : [] };
    }
    SendBatchResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.events) {
            obj.events = message.events.map((e) => e ? EventData.toJSON(e) : undefined);
        }
        else {
            obj.events = [];
        }
        return obj;
    }
    SendBatchResponse.toJSON = toJSON;
    function create(base) {
        return SendBatchResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    SendBatchResponse.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseSendBatchResponse();
        message.events = ((_a = object.events) === null || _a === void 0 ? void 0 : _a.map((e) => EventData.fromPartial(e))) || [];
        return message;
    }
    SendBatchResponse.fromPartial = fromPartial;
})(SendBatchResponse || (exports.SendBatchResponse = SendBatchResponse = {}));
function createBaseUnsubscribeRequest() {
    return { eventId: "" };
}
var UnsubscribeRequest;
(function (UnsubscribeRequest) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.eventId !== "") {
            writer.uint32(10).string(message.eventId);
        }
        return writer;
    }
    UnsubscribeRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnsubscribeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.eventId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    UnsubscribeRequest.decode = decode;
    function fromJSON(object) {
        return { eventId: isSet(object.eventId) ? String(object.eventId) : "" };
    }
    UnsubscribeRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.eventId !== undefined && (obj.eventId = message.eventId);
        return obj;
    }
    UnsubscribeRequest.toJSON = toJSON;
    function create(base) {
        return UnsubscribeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    UnsubscribeRequest.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseUnsubscribeRequest();
        message.eventId = (_a = object.eventId) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    UnsubscribeRequest.fromPartial = fromPartial;
})(UnsubscribeRequest || (exports.UnsubscribeRequest = UnsubscribeRequest = {}));
function createBaseSubscribeRequest() {
    return { eventId: "" };
}
var SubscribeRequest;
(function (SubscribeRequest) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.eventId !== "") {
            writer.uint32(10).string(message.eventId);
        }
        return writer;
    }
    SubscribeRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubscribeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.eventId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    SubscribeRequest.decode = decode;
    function fromJSON(object) {
        return { eventId: isSet(object.eventId) ? String(object.eventId) : "" };
    }
    SubscribeRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.eventId !== undefined && (obj.eventId = message.eventId);
        return obj;
    }
    SubscribeRequest.toJSON = toJSON;
    function create(base) {
        return SubscribeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    SubscribeRequest.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseSubscribeRequest();
        message.eventId = (_a = object.eventId) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    SubscribeRequest.fromPartial = fromPartial;
})(SubscribeRequest || (exports.SubscribeRequest = SubscribeRequest = {}));
function createBaseSubscribeResponse() {
    return {};
}
var SubscribeResponse;
(function (SubscribeResponse) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    SubscribeResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubscribeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    SubscribeResponse.decode = decode;
    function fromJSON(_) {
        return {};
    }
    SubscribeResponse.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    SubscribeResponse.toJSON = toJSON;
    function create(base) {
        return SubscribeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    SubscribeResponse.create = create;
    function fromPartial(_) {
        const message = createBaseSubscribeResponse();
        return message;
    }
    SubscribeResponse.fromPartial = fromPartial;
})(SubscribeResponse || (exports.SubscribeResponse = SubscribeResponse = {}));
function createBaseUnsubscribeResponse() {
    return {};
}
var UnsubscribeResponse;
(function (UnsubscribeResponse) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    UnsubscribeResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnsubscribeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    UnsubscribeResponse.decode = decode;
    function fromJSON(_) {
        return {};
    }
    UnsubscribeResponse.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    UnsubscribeResponse.toJSON = toJSON;
    function create(base) {
        return UnsubscribeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    UnsubscribeResponse.create = create;
    function fromPartial(_) {
        const message = createBaseUnsubscribeResponse();
        return message;
    }
    UnsubscribeResponse.fromPartial = fromPartial;
})(UnsubscribeResponse || (exports.UnsubscribeResponse = UnsubscribeResponse = {}));
function createBaseGenericPayload() {
    return { eventId: "", eventData: "" };
}
var GenericPayload;
(function (GenericPayload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.eventId !== "") {
            writer.uint32(26).string(message.eventId);
        }
        if (message.eventData !== "") {
            writer.uint32(34).string(message.eventData);
        }
        return writer;
    }
    GenericPayload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenericPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.eventId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.eventData = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GenericPayload.decode = decode;
    function fromJSON(object) {
        return {
            eventId: isSet(object.eventId) ? String(object.eventId) : "",
            eventData: isSet(object.eventData) ? String(object.eventData) : "",
        };
    }
    GenericPayload.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.eventId !== undefined && (obj.eventId = message.eventId);
        message.eventData !== undefined && (obj.eventData = message.eventData);
        return obj;
    }
    GenericPayload.toJSON = toJSON;
    function create(base) {
        return GenericPayload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GenericPayload.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseGenericPayload();
        message.eventId = (_a = object.eventId) !== null && _a !== void 0 ? _a : "";
        message.eventData = (_b = object.eventData) !== null && _b !== void 0 ? _b : "";
        return message;
    }
    GenericPayload.fromPartial = fromPartial;
})(GenericPayload || (exports.GenericPayload = GenericPayload = {}));
function createBaseReadOnlyVector3() {
    return { x: 0, y: 0, z: 0 };
}
var ReadOnlyVector3;
(function (ReadOnlyVector3) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.x !== 0) {
            writer.uint32(13).float(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(21).float(message.y);
        }
        if (message.z !== 0) {
            writer.uint32(29).float(message.z);
        }
        return writer;
    }
    ReadOnlyVector3.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReadOnlyVector3();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.x = reader.float();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.y = reader.float();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.z = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ReadOnlyVector3.decode = decode;
    function fromJSON(object) {
        return {
            x: isSet(object.x) ? Number(object.x) : 0,
            y: isSet(object.y) ? Number(object.y) : 0,
            z: isSet(object.z) ? Number(object.z) : 0,
        };
    }
    ReadOnlyVector3.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.x !== undefined && (obj.x = message.x);
        message.y !== undefined && (obj.y = message.y);
        message.z !== undefined && (obj.z = message.z);
        return obj;
    }
    ReadOnlyVector3.toJSON = toJSON;
    function create(base) {
        return ReadOnlyVector3.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ReadOnlyVector3.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseReadOnlyVector3();
        message.x = (_a = object.x) !== null && _a !== void 0 ? _a : 0;
        message.y = (_b = object.y) !== null && _b !== void 0 ? _b : 0;
        message.z = (_c = object.z) !== null && _c !== void 0 ? _c : 0;
        return message;
    }
    ReadOnlyVector3.fromPartial = fromPartial;
})(ReadOnlyVector3 || (exports.ReadOnlyVector3 = ReadOnlyVector3 = {}));
function createBaseReadOnlyQuaternion() {
    return { x: 0, y: 0, z: 0, w: 0 };
}
var ReadOnlyQuaternion;
(function (ReadOnlyQuaternion) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.x !== 0) {
            writer.uint32(13).float(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(21).float(message.y);
        }
        if (message.z !== 0) {
            writer.uint32(29).float(message.z);
        }
        if (message.w !== 0) {
            writer.uint32(37).float(message.w);
        }
        return writer;
    }
    ReadOnlyQuaternion.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReadOnlyQuaternion();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.x = reader.float();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.y = reader.float();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.z = reader.float();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.w = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ReadOnlyQuaternion.decode = decode;
    function fromJSON(object) {
        return {
            x: isSet(object.x) ? Number(object.x) : 0,
            y: isSet(object.y) ? Number(object.y) : 0,
            z: isSet(object.z) ? Number(object.z) : 0,
            w: isSet(object.w) ? Number(object.w) : 0,
        };
    }
    ReadOnlyQuaternion.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.x !== undefined && (obj.x = message.x);
        message.y !== undefined && (obj.y = message.y);
        message.z !== undefined && (obj.z = message.z);
        message.w !== undefined && (obj.w = message.w);
        return obj;
    }
    ReadOnlyQuaternion.toJSON = toJSON;
    function create(base) {
        return ReadOnlyQuaternion.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ReadOnlyQuaternion.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseReadOnlyQuaternion();
        message.x = (_a = object.x) !== null && _a !== void 0 ? _a : 0;
        message.y = (_b = object.y) !== null && _b !== void 0 ? _b : 0;
        message.z = (_c = object.z) !== null && _c !== void 0 ? _c : 0;
        message.w = (_d = object.w) !== null && _d !== void 0 ? _d : 0;
        return message;
    }
    ReadOnlyQuaternion.fromPartial = fromPartial;
})(ReadOnlyQuaternion || (exports.ReadOnlyQuaternion = ReadOnlyQuaternion = {}));
function createBasePositionChangedPayload() {
    return { position: undefined, cameraPosition: undefined, playerHeight: 0 };
}
var PositionChangedPayload;
(function (PositionChangedPayload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.position !== undefined) {
            ReadOnlyVector3.encode(message.position, writer.uint32(10).fork()).ldelim();
        }
        if (message.cameraPosition !== undefined) {
            ReadOnlyVector3.encode(message.cameraPosition, writer.uint32(18).fork()).ldelim();
        }
        if (message.playerHeight !== 0) {
            writer.uint32(29).float(message.playerHeight);
        }
        return writer;
    }
    PositionChangedPayload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePositionChangedPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.position = ReadOnlyVector3.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.cameraPosition = ReadOnlyVector3.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.playerHeight = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PositionChangedPayload.decode = decode;
    function fromJSON(object) {
        return {
            position: isSet(object.position) ? ReadOnlyVector3.fromJSON(object.position) : undefined,
            cameraPosition: isSet(object.cameraPosition) ? ReadOnlyVector3.fromJSON(object.cameraPosition) : undefined,
            playerHeight: isSet(object.playerHeight) ? Number(object.playerHeight) : 0,
        };
    }
    PositionChangedPayload.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.position !== undefined &&
            (obj.position = message.position ? ReadOnlyVector3.toJSON(message.position) : undefined);
        message.cameraPosition !== undefined &&
            (obj.cameraPosition = message.cameraPosition ? ReadOnlyVector3.toJSON(message.cameraPosition) : undefined);
        message.playerHeight !== undefined && (obj.playerHeight = message.playerHeight);
        return obj;
    }
    PositionChangedPayload.toJSON = toJSON;
    function create(base) {
        return PositionChangedPayload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PositionChangedPayload.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBasePositionChangedPayload();
        message.position = (object.position !== undefined && object.position !== null)
            ? ReadOnlyVector3.fromPartial(object.position)
            : undefined;
        message.cameraPosition = (object.cameraPosition !== undefined && object.cameraPosition !== null)
            ? ReadOnlyVector3.fromPartial(object.cameraPosition)
            : undefined;
        message.playerHeight = (_a = object.playerHeight) !== null && _a !== void 0 ? _a : 0;
        return message;
    }
    PositionChangedPayload.fromPartial = fromPartial;
})(PositionChangedPayload || (exports.PositionChangedPayload = PositionChangedPayload = {}));
function createBaseRotationChangedPayload() {
    return { rotation: undefined, quaternion: undefined };
}
var RotationChangedPayload;
(function (RotationChangedPayload) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.rotation !== undefined) {
            ReadOnlyVector3.encode(message.rotation, writer.uint32(10).fork()).ldelim();
        }
        if (message.quaternion !== undefined) {
            ReadOnlyQuaternion.encode(message.quaternion, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    RotationChangedPayload.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRotationChangedPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.rotation = ReadOnlyVector3.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.quaternion = ReadOnlyQuaternion.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    RotationChangedPayload.decode = decode;
    function fromJSON(object) {
        return {
            rotation: isSet(object.rotation) ? ReadOnlyVector3.fromJSON(object.rotation) : undefined,
            quaternion: isSet(object.quaternion) ? ReadOnlyQuaternion.fromJSON(object.quaternion) : undefined,
        };
    }
    RotationChangedPayload.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.rotation !== undefined &&
            (obj.rotation = message.rotation ? ReadOnlyVector3.toJSON(message.rotation) : undefined);
        message.quaternion !== undefined &&
            (obj.quaternion = message.quaternion ? ReadOnlyQuaternion.toJSON(message.quaternion) : undefined);
        return obj;
    }
    RotationChangedPayload.toJSON = toJSON;
    function create(base) {
        return RotationChangedPayload.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    RotationChangedPayload.create = create;
    function fromPartial(object) {
        const message = createBaseRotationChangedPayload();
        message.rotation = (object.rotation !== undefined && object.rotation !== null)
            ? ReadOnlyVector3.fromPartial(object.rotation)
            : undefined;
        message.quaternion = (object.quaternion !== undefined && object.quaternion !== null)
            ? ReadOnlyQuaternion.fromPartial(object.quaternion)
            : undefined;
        return message;
    }
    RotationChangedPayload.fromPartial = fromPartial;
})(RotationChangedPayload || (exports.RotationChangedPayload = RotationChangedPayload = {}));
function createBaseEventData() {
    return { type: 0, generic: undefined, positionChanged: undefined, rotationChanged: undefined };
}
var EventData;
(function (EventData) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.generic !== undefined) {
            GenericPayload.encode(message.generic, writer.uint32(18).fork()).ldelim();
        }
        if (message.positionChanged !== undefined) {
            PositionChangedPayload.encode(message.positionChanged, writer.uint32(26).fork()).ldelim();
        }
        if (message.rotationChanged !== undefined) {
            RotationChangedPayload.encode(message.rotationChanged, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    }
    EventData.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.generic = GenericPayload.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.positionChanged = PositionChangedPayload.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.rotationChanged = RotationChangedPayload.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    EventData.decode = decode;
    function fromJSON(object) {
        return {
            type: isSet(object.type) ? eventDataTypeFromJSON(object.type) : 0,
            generic: isSet(object.generic) ? GenericPayload.fromJSON(object.generic) : undefined,
            positionChanged: isSet(object.positionChanged)
                ? PositionChangedPayload.fromJSON(object.positionChanged)
                : undefined,
            rotationChanged: isSet(object.rotationChanged)
                ? RotationChangedPayload.fromJSON(object.rotationChanged)
                : undefined,
        };
    }
    EventData.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.type !== undefined && (obj.type = eventDataTypeToJSON(message.type));
        message.generic !== undefined &&
            (obj.generic = message.generic ? GenericPayload.toJSON(message.generic) : undefined);
        message.positionChanged !== undefined &&
            (obj.positionChanged = message.positionChanged
                ? PositionChangedPayload.toJSON(message.positionChanged)
                : undefined);
        message.rotationChanged !== undefined &&
            (obj.rotationChanged = message.rotationChanged
                ? RotationChangedPayload.toJSON(message.rotationChanged)
                : undefined);
        return obj;
    }
    EventData.toJSON = toJSON;
    function create(base) {
        return EventData.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    EventData.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseEventData();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;
        message.generic = (object.generic !== undefined && object.generic !== null)
            ? GenericPayload.fromPartial(object.generic)
            : undefined;
        message.positionChanged = (object.positionChanged !== undefined && object.positionChanged !== null)
            ? PositionChangedPayload.fromPartial(object.positionChanged)
            : undefined;
        message.rotationChanged = (object.rotationChanged !== undefined && object.rotationChanged !== null)
            ? RotationChangedPayload.fromPartial(object.rotationChanged)
            : undefined;
        return message;
    }
    EventData.fromPartial = fromPartial;
})(EventData || (exports.EventData = EventData = {}));
function createBaseCrdtSendToRendererRequest() {
    return { data: new Uint8Array(0) };
}
var CrdtSendToRendererRequest;
(function (CrdtSendToRendererRequest) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.data.length !== 0) {
            writer.uint32(10).bytes(message.data);
        }
        return writer;
    }
    CrdtSendToRendererRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCrdtSendToRendererRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    CrdtSendToRendererRequest.decode = decode;
    function fromJSON(object) {
        return { data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0) };
    }
    CrdtSendToRendererRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.data !== undefined &&
            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array(0)));
        return obj;
    }
    CrdtSendToRendererRequest.toJSON = toJSON;
    function create(base) {
        return CrdtSendToRendererRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    CrdtSendToRendererRequest.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseCrdtSendToRendererRequest();
        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        return message;
    }
    CrdtSendToRendererRequest.fromPartial = fromPartial;
})(CrdtSendToRendererRequest || (exports.CrdtSendToRendererRequest = CrdtSendToRendererRequest = {}));
function createBaseCrdtSendToResponse() {
    return { data: [] };
}
var CrdtSendToResponse;
(function (CrdtSendToResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.data) {
            writer.uint32(10).bytes(v);
        }
        return writer;
    }
    CrdtSendToResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCrdtSendToResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data.push(reader.bytes());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    CrdtSendToResponse.decode = decode;
    function fromJSON(object) {
        return { data: Array.isArray(object === null || object === void 0 ? void 0 : object.data) ? object.data.map((e) => bytesFromBase64(e)) : [] };
    }
    CrdtSendToResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.data) {
            obj.data = message.data.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array(0)));
        }
        else {
            obj.data = [];
        }
        return obj;
    }
    CrdtSendToResponse.toJSON = toJSON;
    function create(base) {
        return CrdtSendToResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    CrdtSendToResponse.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseCrdtSendToResponse();
        message.data = ((_a = object.data) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    }
    CrdtSendToResponse.fromPartial = fromPartial;
})(CrdtSendToResponse || (exports.CrdtSendToResponse = CrdtSendToResponse = {}));
function createBaseCrdtGetStateRequest() {
    return {};
}
var CrdtGetStateRequest;
(function (CrdtGetStateRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    CrdtGetStateRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCrdtGetStateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    CrdtGetStateRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    CrdtGetStateRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    CrdtGetStateRequest.toJSON = toJSON;
    function create(base) {
        return CrdtGetStateRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    CrdtGetStateRequest.create = create;
    function fromPartial(_) {
        const message = createBaseCrdtGetStateRequest();
        return message;
    }
    CrdtGetStateRequest.fromPartial = fromPartial;
})(CrdtGetStateRequest || (exports.CrdtGetStateRequest = CrdtGetStateRequest = {}));
function createBaseCrdtGetStateResponse() {
    return { hasEntities: false, data: [] };
}
var CrdtGetStateResponse;
(function (CrdtGetStateResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.hasEntities === true) {
            writer.uint32(8).bool(message.hasEntities);
        }
        for (const v of message.data) {
            writer.uint32(18).bytes(v);
        }
        return writer;
    }
    CrdtGetStateResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCrdtGetStateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.hasEntities = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.data.push(reader.bytes());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    CrdtGetStateResponse.decode = decode;
    function fromJSON(object) {
        return {
            hasEntities: isSet(object.hasEntities) ? Boolean(object.hasEntities) : false,
            data: Array.isArray(object === null || object === void 0 ? void 0 : object.data) ? object.data.map((e) => bytesFromBase64(e)) : [],
        };
    }
    CrdtGetStateResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.hasEntities !== undefined && (obj.hasEntities = message.hasEntities);
        if (message.data) {
            obj.data = message.data.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array(0)));
        }
        else {
            obj.data = [];
        }
        return obj;
    }
    CrdtGetStateResponse.toJSON = toJSON;
    function create(base) {
        return CrdtGetStateResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    CrdtGetStateResponse.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseCrdtGetStateResponse();
        message.hasEntities = (_a = object.hasEntities) !== null && _a !== void 0 ? _a : false;
        message.data = ((_b = object.data) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    }
    CrdtGetStateResponse.fromPartial = fromPartial;
})(CrdtGetStateResponse || (exports.CrdtGetStateResponse = CrdtGetStateResponse = {}));
function createBaseCrdtMessageFromRendererRequest() {
    return {};
}
var CrdtMessageFromRendererRequest;
(function (CrdtMessageFromRendererRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    CrdtMessageFromRendererRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCrdtMessageFromRendererRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    CrdtMessageFromRendererRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    CrdtMessageFromRendererRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    CrdtMessageFromRendererRequest.toJSON = toJSON;
    function create(base) {
        return CrdtMessageFromRendererRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    CrdtMessageFromRendererRequest.create = create;
    function fromPartial(_) {
        const message = createBaseCrdtMessageFromRendererRequest();
        return message;
    }
    CrdtMessageFromRendererRequest.fromPartial = fromPartial;
})(CrdtMessageFromRendererRequest || (exports.CrdtMessageFromRendererRequest = CrdtMessageFromRendererRequest = {}));
function createBaseCrdtMessageFromRendererResponse() {
    return { data: [] };
}
var CrdtMessageFromRendererResponse;
(function (CrdtMessageFromRendererResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.data) {
            writer.uint32(10).bytes(v);
        }
        return writer;
    }
    CrdtMessageFromRendererResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCrdtMessageFromRendererResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data.push(reader.bytes());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    CrdtMessageFromRendererResponse.decode = decode;
    function fromJSON(object) {
        return { data: Array.isArray(object === null || object === void 0 ? void 0 : object.data) ? object.data.map((e) => bytesFromBase64(e)) : [] };
    }
    CrdtMessageFromRendererResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.data) {
            obj.data = message.data.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array(0)));
        }
        else {
            obj.data = [];
        }
        return obj;
    }
    CrdtMessageFromRendererResponse.toJSON = toJSON;
    function create(base) {
        return CrdtMessageFromRendererResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    CrdtMessageFromRendererResponse.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseCrdtMessageFromRendererResponse();
        message.data = ((_a = object.data) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    }
    CrdtMessageFromRendererResponse.fromPartial = fromPartial;
})(CrdtMessageFromRendererResponse || (exports.CrdtMessageFromRendererResponse = CrdtMessageFromRendererResponse = {}));
function createBaseIsServerRequest() {
    return {};
}
var IsServerRequest;
(function (IsServerRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    IsServerRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsServerRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    IsServerRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    IsServerRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    IsServerRequest.toJSON = toJSON;
    function create(base) {
        return IsServerRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    IsServerRequest.create = create;
    function fromPartial(_) {
        const message = createBaseIsServerRequest();
        return message;
    }
    IsServerRequest.fromPartial = fromPartial;
})(IsServerRequest || (exports.IsServerRequest = IsServerRequest = {}));
function createBaseIsServerResponse() {
    return { isServer: false };
}
var IsServerResponse;
(function (IsServerResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.isServer === true) {
            writer.uint32(8).bool(message.isServer);
        }
        return writer;
    }
    IsServerResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsServerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.isServer = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    IsServerResponse.decode = decode;
    function fromJSON(object) {
        return { isServer: isSet(object.isServer) ? Boolean(object.isServer) : false };
    }
    IsServerResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.isServer !== undefined && (obj.isServer = message.isServer);
        return obj;
    }
    IsServerResponse.toJSON = toJSON;
    function create(base) {
        return IsServerResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    IsServerResponse.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseIsServerResponse();
        message.isServer = (_a = object.isServer) !== null && _a !== void 0 ? _a : false;
        return message;
    }
    IsServerResponse.fromPartial = fromPartial;
})(IsServerResponse || (exports.IsServerResponse = IsServerResponse = {}));
exports.EngineApiServiceDefinition = {
    name: "EngineApiService",
    fullName: "decentraland.kernel.apis.EngineApiService",
    methods: {
        /** @deprecated */
        sendBatch: {
            name: "SendBatch",
            requestType: ManyEntityAction,
            requestStream: false,
            responseType: SendBatchResponse,
            responseStream: false,
            options: {},
        },
        /** @deprecated */
        subscribe: {
            name: "Subscribe",
            requestType: SubscribeRequest,
            requestStream: false,
            responseType: SubscribeResponse,
            responseStream: false,
            options: {},
        },
        /** @deprecated */
        unsubscribe: {
            name: "Unsubscribe",
            requestType: UnsubscribeRequest,
            requestStream: false,
            responseType: UnsubscribeResponse,
            responseStream: false,
            options: {},
        },
        /**
         * send information of the CRDT messages to the renderer. It returns the CRDT changes back from the renderer
         * like raycast responses or the player's position
         */
        crdtSendToRenderer: {
            name: "CrdtSendToRenderer",
            requestType: CrdtSendToRendererRequest,
            requestStream: false,
            responseType: CrdtSendToResponse,
            responseStream: false,
            options: {},
        },
        /**
         * retrieves the current _full_ state of the entities from the renderer. This function is used to hidrate
         * the state of the scenes when the code of the worker is stopped/resumed
         */
        crdtGetState: {
            name: "CrdtGetState",
            requestType: CrdtSendToRendererRequest,
            requestStream: false,
            responseType: CrdtGetStateResponse,
            responseStream: false,
            options: {},
        },
        /** @deprecated, this response was merged into CrdtSendToResponse */
        crdtGetMessageFromRenderer: {
            name: "CrdtGetMessageFromRenderer",
            requestType: CrdtMessageFromRendererRequest,
            requestStream: false,
            responseType: CrdtMessageFromRendererResponse,
            responseStream: false,
            options: {},
        },
        isServer: {
            name: "IsServer",
            requestType: IsServerRequest,
            requestStream: false,
            responseType: IsServerResponse,
            responseStream: false,
            options: {},
        },
    },
};
const tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=engine_api.gen.js.map