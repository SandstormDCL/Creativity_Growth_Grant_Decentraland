import _m0 from "protobufjs/minimal";
import { UserData } from "../../common/sdk/user_data.gen";
export declare const protobufPackage = "decentraland.kernel.apis";
export interface Player {
    userId: string;
}
export interface PlayersGetUserDataResponse {
    data?: UserData | undefined;
}
export interface PlayerListResponse {
    players: Player[];
}
export interface GetPlayerDataRequest {
    userId: string;
}
export interface GetPlayersInSceneRequest {
}
export interface GetConnectedPlayersRequest {
}
export declare namespace Player {
    function encode(message: Player, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): Player;
    function fromJSON(object: any): Player;
    function toJSON(message: Player): unknown;
    function create<I extends Exact<DeepPartial<Player>, I>>(base?: I): Player;
    function fromPartial<I extends Exact<DeepPartial<Player>, I>>(object: I): Player;
}
export declare namespace PlayersGetUserDataResponse {
    function encode(message: PlayersGetUserDataResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PlayersGetUserDataResponse;
    function fromJSON(object: any): PlayersGetUserDataResponse;
    function toJSON(message: PlayersGetUserDataResponse): unknown;
    function create<I extends Exact<DeepPartial<PlayersGetUserDataResponse>, I>>(base?: I): PlayersGetUserDataResponse;
    function fromPartial<I extends Exact<DeepPartial<PlayersGetUserDataResponse>, I>>(object: I): PlayersGetUserDataResponse;
}
export declare namespace PlayerListResponse {
    function encode(message: PlayerListResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PlayerListResponse;
    function fromJSON(object: any): PlayerListResponse;
    function toJSON(message: PlayerListResponse): unknown;
    function create<I extends Exact<DeepPartial<PlayerListResponse>, I>>(base?: I): PlayerListResponse;
    function fromPartial<I extends Exact<DeepPartial<PlayerListResponse>, I>>(object: I): PlayerListResponse;
}
export declare namespace GetPlayerDataRequest {
    function encode(message: GetPlayerDataRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetPlayerDataRequest;
    function fromJSON(object: any): GetPlayerDataRequest;
    function toJSON(message: GetPlayerDataRequest): unknown;
    function create<I extends Exact<DeepPartial<GetPlayerDataRequest>, I>>(base?: I): GetPlayerDataRequest;
    function fromPartial<I extends Exact<DeepPartial<GetPlayerDataRequest>, I>>(object: I): GetPlayerDataRequest;
}
export declare namespace GetPlayersInSceneRequest {
    function encode(_: GetPlayersInSceneRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetPlayersInSceneRequest;
    function fromJSON(_: any): GetPlayersInSceneRequest;
    function toJSON(_: GetPlayersInSceneRequest): unknown;
    function create<I extends Exact<DeepPartial<GetPlayersInSceneRequest>, I>>(base?: I): GetPlayersInSceneRequest;
    function fromPartial<I extends Exact<DeepPartial<GetPlayersInSceneRequest>, I>>(_: I): GetPlayersInSceneRequest;
}
export declare namespace GetConnectedPlayersRequest {
    function encode(_: GetConnectedPlayersRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetConnectedPlayersRequest;
    function fromJSON(_: any): GetConnectedPlayersRequest;
    function toJSON(_: GetConnectedPlayersRequest): unknown;
    function create<I extends Exact<DeepPartial<GetConnectedPlayersRequest>, I>>(base?: I): GetConnectedPlayersRequest;
    function fromPartial<I extends Exact<DeepPartial<GetConnectedPlayersRequest>, I>>(_: I): GetConnectedPlayersRequest;
}
export type PlayersServiceDefinition = typeof PlayersServiceDefinition;
export declare const PlayersServiceDefinition: {
    readonly name: "PlayersService";
    readonly fullName: "decentraland.kernel.apis.PlayersService";
    readonly methods: {
        /**
         * Returns data about a specific player, by id
         * NOTE: To be deprecated after implementing foreign-entities and once the avatar scene uses SDK7
         */
        readonly getPlayerData: {
            readonly name: "GetPlayerData";
            readonly requestType: typeof GetPlayerDataRequest;
            readonly requestStream: false;
            readonly responseType: typeof PlayersGetUserDataResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Returns a list of all the ids of players who are currently standing within the parcels of the scene
         * NOTE: To be deprecated after implementing foreign-entities and once the avatar scene uses SDK7
         */
        readonly getPlayersInScene: {
            readonly name: "GetPlayersInScene";
            readonly requestType: typeof GetPlayersInSceneRequest;
            readonly requestStream: false;
            readonly responseType: typeof PlayerListResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Returns a list of all the ids of players who are currently connected to the same server and grouped together
         * NOTE: To be deprecated after implementing foreign-entities and once the avatar scene uses SDK7
         */
        readonly getConnectedPlayers: {
            readonly name: "GetConnectedPlayers";
            readonly requestType: typeof GetConnectedPlayersRequest;
            readonly requestStream: false;
            readonly responseType: typeof PlayerListResponse;
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
