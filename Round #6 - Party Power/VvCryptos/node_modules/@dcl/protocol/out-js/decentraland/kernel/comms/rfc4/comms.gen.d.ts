import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.kernel.comms.rfc4";
export interface Packet {
    message?: {
        $case: "position";
        position: Position;
    } | {
        $case: "profileVersion";
        profileVersion: AnnounceProfileVersion;
    } | {
        $case: "profileRequest";
        profileRequest: ProfileRequest;
    } | {
        $case: "profileResponse";
        profileResponse: ProfileResponse;
    } | {
        $case: "chat";
        chat: Chat;
    } | {
        $case: "scene";
        scene: Scene;
    } | {
        $case: "voice";
        voice: Voice;
    } | {
        $case: "movement";
        movement: Movement;
    } | {
        $case: "playerEmote";
        playerEmote: PlayerEmote;
    } | {
        $case: "sceneEmote";
        sceneEmote: SceneEmote;
    } | {
        $case: "movementCompressed";
        movementCompressed: MovementCompressed;
    } | undefined;
    protocolVersion: number;
}
export interface Position {
    /** command number */
    index: number;
    /** world position */
    positionX: number;
    positionY: number;
    positionZ: number;
    /** quaternion */
    rotationX: number;
    rotationY: number;
    rotationZ: number;
    rotationW: number;
}
export interface Movement {
    /** command number */
    timestamp: number;
    /** world position */
    positionX: number;
    positionY: number;
    positionZ: number;
    /** velocity */
    velocityX: number;
    velocityY: number;
    velocityZ: number;
    /** animations */
    movementBlendValue: number;
    slideBlendValue: number;
    isGrounded: boolean;
    isJumping: boolean;
    isLongJump: boolean;
    isLongFall: boolean;
    isFalling: boolean;
    isStunned: boolean;
    rotationY: number;
}
export interface MovementCompressed {
    /** bit-compressed: timestamp + animations */
    temporalData: number;
    /** bit-compressed: position + velocity */
    movementData: number;
}
export interface PlayerEmote {
    incrementalId: number;
    urn: string;
}
export interface SceneEmote {
    sceneEntityId: string;
    source: string;
}
export interface AnnounceProfileVersion {
    profileVersion: number;
}
export interface ProfileRequest {
    address: string;
    profileVersion: number;
}
export interface ProfileResponse {
    serializedProfile: string;
    baseUrl: string;
}
export interface Chat {
    message: string;
    timestamp: number;
}
export interface Scene {
    sceneId: string;
    data: Uint8Array;
}
export interface Voice {
    encodedSamples: Uint8Array;
    index: number;
    codec: Voice_VoiceCodec;
}
export declare enum Voice_VoiceCodec {
    VC_OPUS = 0,
    UNRECOGNIZED = -1
}
export declare function voice_VoiceCodecFromJSON(object: any): Voice_VoiceCodec;
export declare function voice_VoiceCodecToJSON(object: Voice_VoiceCodec): string;
export declare namespace Packet {
    function encode(message: Packet, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): Packet;
    function fromJSON(object: any): Packet;
    function toJSON(message: Packet): unknown;
    function create<I extends Exact<DeepPartial<Packet>, I>>(base?: I): Packet;
    function fromPartial<I extends Exact<DeepPartial<Packet>, I>>(object: I): Packet;
}
export declare namespace Position {
    function encode(message: Position, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): Position;
    function fromJSON(object: any): Position;
    function toJSON(message: Position): unknown;
    function create<I extends Exact<DeepPartial<Position>, I>>(base?: I): Position;
    function fromPartial<I extends Exact<DeepPartial<Position>, I>>(object: I): Position;
}
export declare namespace Movement {
    function encode(message: Movement, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): Movement;
    function fromJSON(object: any): Movement;
    function toJSON(message: Movement): unknown;
    function create<I extends Exact<DeepPartial<Movement>, I>>(base?: I): Movement;
    function fromPartial<I extends Exact<DeepPartial<Movement>, I>>(object: I): Movement;
}
export declare namespace MovementCompressed {
    function encode(message: MovementCompressed, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): MovementCompressed;
    function fromJSON(object: any): MovementCompressed;
    function toJSON(message: MovementCompressed): unknown;
    function create<I extends Exact<DeepPartial<MovementCompressed>, I>>(base?: I): MovementCompressed;
    function fromPartial<I extends Exact<DeepPartial<MovementCompressed>, I>>(object: I): MovementCompressed;
}
export declare namespace PlayerEmote {
    function encode(message: PlayerEmote, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PlayerEmote;
    function fromJSON(object: any): PlayerEmote;
    function toJSON(message: PlayerEmote): unknown;
    function create<I extends Exact<DeepPartial<PlayerEmote>, I>>(base?: I): PlayerEmote;
    function fromPartial<I extends Exact<DeepPartial<PlayerEmote>, I>>(object: I): PlayerEmote;
}
export declare namespace SceneEmote {
    function encode(message: SceneEmote, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SceneEmote;
    function fromJSON(object: any): SceneEmote;
    function toJSON(message: SceneEmote): unknown;
    function create<I extends Exact<DeepPartial<SceneEmote>, I>>(base?: I): SceneEmote;
    function fromPartial<I extends Exact<DeepPartial<SceneEmote>, I>>(object: I): SceneEmote;
}
export declare namespace AnnounceProfileVersion {
    function encode(message: AnnounceProfileVersion, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): AnnounceProfileVersion;
    function fromJSON(object: any): AnnounceProfileVersion;
    function toJSON(message: AnnounceProfileVersion): unknown;
    function create<I extends Exact<DeepPartial<AnnounceProfileVersion>, I>>(base?: I): AnnounceProfileVersion;
    function fromPartial<I extends Exact<DeepPartial<AnnounceProfileVersion>, I>>(object: I): AnnounceProfileVersion;
}
export declare namespace ProfileRequest {
    function encode(message: ProfileRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): ProfileRequest;
    function fromJSON(object: any): ProfileRequest;
    function toJSON(message: ProfileRequest): unknown;
    function create<I extends Exact<DeepPartial<ProfileRequest>, I>>(base?: I): ProfileRequest;
    function fromPartial<I extends Exact<DeepPartial<ProfileRequest>, I>>(object: I): ProfileRequest;
}
export declare namespace ProfileResponse {
    function encode(message: ProfileResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): ProfileResponse;
    function fromJSON(object: any): ProfileResponse;
    function toJSON(message: ProfileResponse): unknown;
    function create<I extends Exact<DeepPartial<ProfileResponse>, I>>(base?: I): ProfileResponse;
    function fromPartial<I extends Exact<DeepPartial<ProfileResponse>, I>>(object: I): ProfileResponse;
}
export declare namespace Chat {
    function encode(message: Chat, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): Chat;
    function fromJSON(object: any): Chat;
    function toJSON(message: Chat): unknown;
    function create<I extends Exact<DeepPartial<Chat>, I>>(base?: I): Chat;
    function fromPartial<I extends Exact<DeepPartial<Chat>, I>>(object: I): Chat;
}
export declare namespace Scene {
    function encode(message: Scene, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): Scene;
    function fromJSON(object: any): Scene;
    function toJSON(message: Scene): unknown;
    function create<I extends Exact<DeepPartial<Scene>, I>>(base?: I): Scene;
    function fromPartial<I extends Exact<DeepPartial<Scene>, I>>(object: I): Scene;
}
export declare namespace Voice {
    function encode(message: Voice, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): Voice;
    function fromJSON(object: any): Voice;
    function toJSON(message: Voice): unknown;
    function create<I extends Exact<DeepPartial<Voice>, I>>(base?: I): Voice;
    function fromPartial<I extends Exact<DeepPartial<Voice>, I>>(object: I): Voice;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
