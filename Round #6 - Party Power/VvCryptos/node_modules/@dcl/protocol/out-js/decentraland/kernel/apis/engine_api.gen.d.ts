import _m0 from "protobufjs/minimal";
import { EntityAction } from "../../sdk/ecs6/engine_interface_ecs6.gen";
export declare const protobufPackage = "decentraland.kernel.apis";
/** Events */
export declare enum EventDataType {
    EDT_GENERIC = 0,
    EDT_POSITION_CHANGED = 1,
    EDT_ROTATION_CHANGED = 2,
    UNRECOGNIZED = -1
}
export declare function eventDataTypeFromJSON(object: any): EventDataType;
export declare function eventDataTypeToJSON(object: EventDataType): string;
export interface ManyEntityAction {
    actions: EntityAction[];
}
export interface SendBatchResponse {
    events: EventData[];
}
export interface UnsubscribeRequest {
    eventId: string;
}
export interface SubscribeRequest {
    eventId: string;
}
export interface SubscribeResponse {
}
export interface UnsubscribeResponse {
}
export interface GenericPayload {
    eventId: string;
    eventData: string;
}
export interface ReadOnlyVector3 {
    x: number;
    y: number;
    z: number;
}
export interface ReadOnlyQuaternion {
    x: number;
    y: number;
    z: number;
    w: number;
}
export interface PositionChangedPayload {
    position: ReadOnlyVector3 | undefined;
    cameraPosition: ReadOnlyVector3 | undefined;
    playerHeight: number;
}
export interface RotationChangedPayload {
    rotation: ReadOnlyVector3 | undefined;
    quaternion: ReadOnlyQuaternion | undefined;
}
export interface EventData {
    type: EventDataType;
    generic?: GenericPayload | undefined;
    positionChanged?: PositionChangedPayload | undefined;
    rotationChanged?: RotationChangedPayload | undefined;
}
export interface CrdtSendToRendererRequest {
    data: Uint8Array;
}
export interface CrdtSendToResponse {
    /** list of CRDT messages coming back from the renderer */
    data: Uint8Array[];
}
export interface CrdtGetStateRequest {
}
export interface CrdtGetStateResponse {
    /** returns true if the returned state has scene-created entities */
    hasEntities: boolean;
    /** static entities data (root entity, camera, etc) and scene-created entities */
    data: Uint8Array[];
}
/** deprecated */
export interface CrdtMessageFromRendererRequest {
}
/** deprecated */
export interface CrdtMessageFromRendererResponse {
    data: Uint8Array[];
}
export interface IsServerRequest {
}
export interface IsServerResponse {
    isServer: boolean;
}
export declare namespace ManyEntityAction {
    function encode(message: ManyEntityAction, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): ManyEntityAction;
    function fromJSON(object: any): ManyEntityAction;
    function toJSON(message: ManyEntityAction): unknown;
    function create<I extends Exact<DeepPartial<ManyEntityAction>, I>>(base?: I): ManyEntityAction;
    function fromPartial<I extends Exact<DeepPartial<ManyEntityAction>, I>>(object: I): ManyEntityAction;
}
export declare namespace SendBatchResponse {
    function encode(message: SendBatchResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SendBatchResponse;
    function fromJSON(object: any): SendBatchResponse;
    function toJSON(message: SendBatchResponse): unknown;
    function create<I extends Exact<DeepPartial<SendBatchResponse>, I>>(base?: I): SendBatchResponse;
    function fromPartial<I extends Exact<DeepPartial<SendBatchResponse>, I>>(object: I): SendBatchResponse;
}
export declare namespace UnsubscribeRequest {
    function encode(message: UnsubscribeRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): UnsubscribeRequest;
    function fromJSON(object: any): UnsubscribeRequest;
    function toJSON(message: UnsubscribeRequest): unknown;
    function create<I extends Exact<DeepPartial<UnsubscribeRequest>, I>>(base?: I): UnsubscribeRequest;
    function fromPartial<I extends Exact<DeepPartial<UnsubscribeRequest>, I>>(object: I): UnsubscribeRequest;
}
export declare namespace SubscribeRequest {
    function encode(message: SubscribeRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SubscribeRequest;
    function fromJSON(object: any): SubscribeRequest;
    function toJSON(message: SubscribeRequest): unknown;
    function create<I extends Exact<DeepPartial<SubscribeRequest>, I>>(base?: I): SubscribeRequest;
    function fromPartial<I extends Exact<DeepPartial<SubscribeRequest>, I>>(object: I): SubscribeRequest;
}
export declare namespace SubscribeResponse {
    function encode(_: SubscribeResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SubscribeResponse;
    function fromJSON(_: any): SubscribeResponse;
    function toJSON(_: SubscribeResponse): unknown;
    function create<I extends Exact<DeepPartial<SubscribeResponse>, I>>(base?: I): SubscribeResponse;
    function fromPartial<I extends Exact<DeepPartial<SubscribeResponse>, I>>(_: I): SubscribeResponse;
}
export declare namespace UnsubscribeResponse {
    function encode(_: UnsubscribeResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): UnsubscribeResponse;
    function fromJSON(_: any): UnsubscribeResponse;
    function toJSON(_: UnsubscribeResponse): unknown;
    function create<I extends Exact<DeepPartial<UnsubscribeResponse>, I>>(base?: I): UnsubscribeResponse;
    function fromPartial<I extends Exact<DeepPartial<UnsubscribeResponse>, I>>(_: I): UnsubscribeResponse;
}
export declare namespace GenericPayload {
    function encode(message: GenericPayload, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GenericPayload;
    function fromJSON(object: any): GenericPayload;
    function toJSON(message: GenericPayload): unknown;
    function create<I extends Exact<DeepPartial<GenericPayload>, I>>(base?: I): GenericPayload;
    function fromPartial<I extends Exact<DeepPartial<GenericPayload>, I>>(object: I): GenericPayload;
}
export declare namespace ReadOnlyVector3 {
    function encode(message: ReadOnlyVector3, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): ReadOnlyVector3;
    function fromJSON(object: any): ReadOnlyVector3;
    function toJSON(message: ReadOnlyVector3): unknown;
    function create<I extends Exact<DeepPartial<ReadOnlyVector3>, I>>(base?: I): ReadOnlyVector3;
    function fromPartial<I extends Exact<DeepPartial<ReadOnlyVector3>, I>>(object: I): ReadOnlyVector3;
}
export declare namespace ReadOnlyQuaternion {
    function encode(message: ReadOnlyQuaternion, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): ReadOnlyQuaternion;
    function fromJSON(object: any): ReadOnlyQuaternion;
    function toJSON(message: ReadOnlyQuaternion): unknown;
    function create<I extends Exact<DeepPartial<ReadOnlyQuaternion>, I>>(base?: I): ReadOnlyQuaternion;
    function fromPartial<I extends Exact<DeepPartial<ReadOnlyQuaternion>, I>>(object: I): ReadOnlyQuaternion;
}
export declare namespace PositionChangedPayload {
    function encode(message: PositionChangedPayload, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PositionChangedPayload;
    function fromJSON(object: any): PositionChangedPayload;
    function toJSON(message: PositionChangedPayload): unknown;
    function create<I extends Exact<DeepPartial<PositionChangedPayload>, I>>(base?: I): PositionChangedPayload;
    function fromPartial<I extends Exact<DeepPartial<PositionChangedPayload>, I>>(object: I): PositionChangedPayload;
}
export declare namespace RotationChangedPayload {
    function encode(message: RotationChangedPayload, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): RotationChangedPayload;
    function fromJSON(object: any): RotationChangedPayload;
    function toJSON(message: RotationChangedPayload): unknown;
    function create<I extends Exact<DeepPartial<RotationChangedPayload>, I>>(base?: I): RotationChangedPayload;
    function fromPartial<I extends Exact<DeepPartial<RotationChangedPayload>, I>>(object: I): RotationChangedPayload;
}
export declare namespace EventData {
    function encode(message: EventData, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): EventData;
    function fromJSON(object: any): EventData;
    function toJSON(message: EventData): unknown;
    function create<I extends Exact<DeepPartial<EventData>, I>>(base?: I): EventData;
    function fromPartial<I extends Exact<DeepPartial<EventData>, I>>(object: I): EventData;
}
export declare namespace CrdtSendToRendererRequest {
    function encode(message: CrdtSendToRendererRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): CrdtSendToRendererRequest;
    function fromJSON(object: any): CrdtSendToRendererRequest;
    function toJSON(message: CrdtSendToRendererRequest): unknown;
    function create<I extends Exact<DeepPartial<CrdtSendToRendererRequest>, I>>(base?: I): CrdtSendToRendererRequest;
    function fromPartial<I extends Exact<DeepPartial<CrdtSendToRendererRequest>, I>>(object: I): CrdtSendToRendererRequest;
}
export declare namespace CrdtSendToResponse {
    function encode(message: CrdtSendToResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): CrdtSendToResponse;
    function fromJSON(object: any): CrdtSendToResponse;
    function toJSON(message: CrdtSendToResponse): unknown;
    function create<I extends Exact<DeepPartial<CrdtSendToResponse>, I>>(base?: I): CrdtSendToResponse;
    function fromPartial<I extends Exact<DeepPartial<CrdtSendToResponse>, I>>(object: I): CrdtSendToResponse;
}
export declare namespace CrdtGetStateRequest {
    function encode(_: CrdtGetStateRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): CrdtGetStateRequest;
    function fromJSON(_: any): CrdtGetStateRequest;
    function toJSON(_: CrdtGetStateRequest): unknown;
    function create<I extends Exact<DeepPartial<CrdtGetStateRequest>, I>>(base?: I): CrdtGetStateRequest;
    function fromPartial<I extends Exact<DeepPartial<CrdtGetStateRequest>, I>>(_: I): CrdtGetStateRequest;
}
export declare namespace CrdtGetStateResponse {
    function encode(message: CrdtGetStateResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): CrdtGetStateResponse;
    function fromJSON(object: any): CrdtGetStateResponse;
    function toJSON(message: CrdtGetStateResponse): unknown;
    function create<I extends Exact<DeepPartial<CrdtGetStateResponse>, I>>(base?: I): CrdtGetStateResponse;
    function fromPartial<I extends Exact<DeepPartial<CrdtGetStateResponse>, I>>(object: I): CrdtGetStateResponse;
}
export declare namespace CrdtMessageFromRendererRequest {
    function encode(_: CrdtMessageFromRendererRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): CrdtMessageFromRendererRequest;
    function fromJSON(_: any): CrdtMessageFromRendererRequest;
    function toJSON(_: CrdtMessageFromRendererRequest): unknown;
    function create<I extends Exact<DeepPartial<CrdtMessageFromRendererRequest>, I>>(base?: I): CrdtMessageFromRendererRequest;
    function fromPartial<I extends Exact<DeepPartial<CrdtMessageFromRendererRequest>, I>>(_: I): CrdtMessageFromRendererRequest;
}
export declare namespace CrdtMessageFromRendererResponse {
    function encode(message: CrdtMessageFromRendererResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): CrdtMessageFromRendererResponse;
    function fromJSON(object: any): CrdtMessageFromRendererResponse;
    function toJSON(message: CrdtMessageFromRendererResponse): unknown;
    function create<I extends Exact<DeepPartial<CrdtMessageFromRendererResponse>, I>>(base?: I): CrdtMessageFromRendererResponse;
    function fromPartial<I extends Exact<DeepPartial<CrdtMessageFromRendererResponse>, I>>(object: I): CrdtMessageFromRendererResponse;
}
export declare namespace IsServerRequest {
    function encode(_: IsServerRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): IsServerRequest;
    function fromJSON(_: any): IsServerRequest;
    function toJSON(_: IsServerRequest): unknown;
    function create<I extends Exact<DeepPartial<IsServerRequest>, I>>(base?: I): IsServerRequest;
    function fromPartial<I extends Exact<DeepPartial<IsServerRequest>, I>>(_: I): IsServerRequest;
}
export declare namespace IsServerResponse {
    function encode(message: IsServerResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): IsServerResponse;
    function fromJSON(object: any): IsServerResponse;
    function toJSON(message: IsServerResponse): unknown;
    function create<I extends Exact<DeepPartial<IsServerResponse>, I>>(base?: I): IsServerResponse;
    function fromPartial<I extends Exact<DeepPartial<IsServerResponse>, I>>(object: I): IsServerResponse;
}
/** support for legacy SDK events. */
export type EngineApiServiceDefinition = typeof EngineApiServiceDefinition;
export declare const EngineApiServiceDefinition: {
    readonly name: "EngineApiService";
    readonly fullName: "decentraland.kernel.apis.EngineApiService";
    readonly methods: {
        /** @deprecated */
        readonly sendBatch: {
            readonly name: "SendBatch";
            readonly requestType: typeof ManyEntityAction;
            readonly requestStream: false;
            readonly responseType: typeof SendBatchResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** @deprecated */
        readonly subscribe: {
            readonly name: "Subscribe";
            readonly requestType: typeof SubscribeRequest;
            readonly requestStream: false;
            readonly responseType: typeof SubscribeResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** @deprecated */
        readonly unsubscribe: {
            readonly name: "Unsubscribe";
            readonly requestType: typeof UnsubscribeRequest;
            readonly requestStream: false;
            readonly responseType: typeof UnsubscribeResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * send information of the CRDT messages to the renderer. It returns the CRDT changes back from the renderer
         * like raycast responses or the player's position
         */
        readonly crdtSendToRenderer: {
            readonly name: "CrdtSendToRenderer";
            readonly requestType: typeof CrdtSendToRendererRequest;
            readonly requestStream: false;
            readonly responseType: typeof CrdtSendToResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * retrieves the current _full_ state of the entities from the renderer. This function is used to hidrate
         * the state of the scenes when the code of the worker is stopped/resumed
         */
        readonly crdtGetState: {
            readonly name: "CrdtGetState";
            readonly requestType: typeof CrdtSendToRendererRequest;
            readonly requestStream: false;
            readonly responseType: typeof CrdtGetStateResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** @deprecated, this response was merged into CrdtSendToResponse */
        readonly crdtGetMessageFromRenderer: {
            readonly name: "CrdtGetMessageFromRenderer";
            readonly requestType: typeof CrdtMessageFromRendererRequest;
            readonly requestStream: false;
            readonly responseType: typeof CrdtMessageFromRendererResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly isServer: {
            readonly name: "IsServer";
            readonly requestType: typeof IsServerRequest;
            readonly requestStream: false;
            readonly responseType: typeof IsServerResponse;
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
