"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevToolsServiceDefinition = exports.EventResponse = exports.DevToolsBody = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.kernel.apis";
function createBaseDevToolsBody() {
    return { type: "", jsonPayload: "" };
}
var DevToolsBody;
(function (DevToolsBody) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.jsonPayload !== "") {
            writer.uint32(18).string(message.jsonPayload);
        }
        return writer;
    }
    DevToolsBody.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDevToolsBody();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.jsonPayload = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    DevToolsBody.decode = decode;
    function fromJSON(object) {
        return {
            type: isSet(object.type) ? String(object.type) : "",
            jsonPayload: isSet(object.jsonPayload) ? String(object.jsonPayload) : "",
        };
    }
    DevToolsBody.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.type !== undefined && (obj.type = message.type);
        message.jsonPayload !== undefined && (obj.jsonPayload = message.jsonPayload);
        return obj;
    }
    DevToolsBody.toJSON = toJSON;
    function create(base) {
        return DevToolsBody.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    DevToolsBody.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseDevToolsBody();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : "";
        message.jsonPayload = (_b = object.jsonPayload) !== null && _b !== void 0 ? _b : "";
        return message;
    }
    DevToolsBody.fromPartial = fromPartial;
})(DevToolsBody || (exports.DevToolsBody = DevToolsBody = {}));
function createBaseEventResponse() {
    return {};
}
var EventResponse;
(function (EventResponse) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    EventResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    EventResponse.decode = decode;
    function fromJSON(_) {
        return {};
    }
    EventResponse.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    EventResponse.toJSON = toJSON;
    function create(base) {
        return EventResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    EventResponse.create = create;
    function fromPartial(_) {
        const message = createBaseEventResponse();
        return message;
    }
    EventResponse.fromPartial = fromPartial;
})(EventResponse || (exports.EventResponse = EventResponse = {}));
exports.DevToolsServiceDefinition = {
    name: "DevToolsService",
    fullName: "decentraland.kernel.apis.DevToolsService",
    methods: {
        /** @deprecated */
        event: {
            name: "Event",
            requestType: DevToolsBody,
            requestStream: false,
            responseType: EventResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=dev_tools.gen.js.map