import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.kernel.apis";
export interface RequirePaymentRequest {
    toAddress: string;
    amount: number;
    currency: string;
}
export interface RequirePaymentResponse {
    jsonAnyResponse: string;
}
export interface SignMessageRequest {
    message: {
        [key: string]: string;
    };
}
export interface SignMessageRequest_MessageEntry {
    key: string;
    value: string;
}
export interface SignMessageResponse {
    message: string;
    hexEncodedMessage: string;
    signature: string;
}
export interface ConvertMessageToObjectRequest {
    message: string;
}
export interface ConvertMessageToObjectResponse {
    dict: {
        [key: string]: string;
    };
}
export interface ConvertMessageToObjectResponse_DictEntry {
    key: string;
    value: string;
}
export interface SendAsyncRequest {
    id: number;
    method: string;
    jsonParams: string;
}
export interface SendAsyncResponse {
    jsonAnyResponse: string;
}
export interface GetUserAccountRequest {
}
export interface GetUserAccountResponse {
    address?: string | undefined;
}
export declare namespace RequirePaymentRequest {
    function encode(message: RequirePaymentRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): RequirePaymentRequest;
    function fromJSON(object: any): RequirePaymentRequest;
    function toJSON(message: RequirePaymentRequest): unknown;
    function create<I extends Exact<DeepPartial<RequirePaymentRequest>, I>>(base?: I): RequirePaymentRequest;
    function fromPartial<I extends Exact<DeepPartial<RequirePaymentRequest>, I>>(object: I): RequirePaymentRequest;
}
export declare namespace RequirePaymentResponse {
    function encode(message: RequirePaymentResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): RequirePaymentResponse;
    function fromJSON(object: any): RequirePaymentResponse;
    function toJSON(message: RequirePaymentResponse): unknown;
    function create<I extends Exact<DeepPartial<RequirePaymentResponse>, I>>(base?: I): RequirePaymentResponse;
    function fromPartial<I extends Exact<DeepPartial<RequirePaymentResponse>, I>>(object: I): RequirePaymentResponse;
}
export declare namespace SignMessageRequest {
    function encode(message: SignMessageRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SignMessageRequest;
    function fromJSON(object: any): SignMessageRequest;
    function toJSON(message: SignMessageRequest): unknown;
    function create<I extends Exact<DeepPartial<SignMessageRequest>, I>>(base?: I): SignMessageRequest;
    function fromPartial<I extends Exact<DeepPartial<SignMessageRequest>, I>>(object: I): SignMessageRequest;
}
export declare namespace SignMessageRequest_MessageEntry {
    function encode(message: SignMessageRequest_MessageEntry, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SignMessageRequest_MessageEntry;
    function fromJSON(object: any): SignMessageRequest_MessageEntry;
    function toJSON(message: SignMessageRequest_MessageEntry): unknown;
    function create<I extends Exact<DeepPartial<SignMessageRequest_MessageEntry>, I>>(base?: I): SignMessageRequest_MessageEntry;
    function fromPartial<I extends Exact<DeepPartial<SignMessageRequest_MessageEntry>, I>>(object: I): SignMessageRequest_MessageEntry;
}
export declare namespace SignMessageResponse {
    function encode(message: SignMessageResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SignMessageResponse;
    function fromJSON(object: any): SignMessageResponse;
    function toJSON(message: SignMessageResponse): unknown;
    function create<I extends Exact<DeepPartial<SignMessageResponse>, I>>(base?: I): SignMessageResponse;
    function fromPartial<I extends Exact<DeepPartial<SignMessageResponse>, I>>(object: I): SignMessageResponse;
}
export declare namespace ConvertMessageToObjectRequest {
    function encode(message: ConvertMessageToObjectRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): ConvertMessageToObjectRequest;
    function fromJSON(object: any): ConvertMessageToObjectRequest;
    function toJSON(message: ConvertMessageToObjectRequest): unknown;
    function create<I extends Exact<DeepPartial<ConvertMessageToObjectRequest>, I>>(base?: I): ConvertMessageToObjectRequest;
    function fromPartial<I extends Exact<DeepPartial<ConvertMessageToObjectRequest>, I>>(object: I): ConvertMessageToObjectRequest;
}
export declare namespace ConvertMessageToObjectResponse {
    function encode(message: ConvertMessageToObjectResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): ConvertMessageToObjectResponse;
    function fromJSON(object: any): ConvertMessageToObjectResponse;
    function toJSON(message: ConvertMessageToObjectResponse): unknown;
    function create<I extends Exact<DeepPartial<ConvertMessageToObjectResponse>, I>>(base?: I): ConvertMessageToObjectResponse;
    function fromPartial<I extends Exact<DeepPartial<ConvertMessageToObjectResponse>, I>>(object: I): ConvertMessageToObjectResponse;
}
export declare namespace ConvertMessageToObjectResponse_DictEntry {
    function encode(message: ConvertMessageToObjectResponse_DictEntry, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): ConvertMessageToObjectResponse_DictEntry;
    function fromJSON(object: any): ConvertMessageToObjectResponse_DictEntry;
    function toJSON(message: ConvertMessageToObjectResponse_DictEntry): unknown;
    function create<I extends Exact<DeepPartial<ConvertMessageToObjectResponse_DictEntry>, I>>(base?: I): ConvertMessageToObjectResponse_DictEntry;
    function fromPartial<I extends Exact<DeepPartial<ConvertMessageToObjectResponse_DictEntry>, I>>(object: I): ConvertMessageToObjectResponse_DictEntry;
}
export declare namespace SendAsyncRequest {
    function encode(message: SendAsyncRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SendAsyncRequest;
    function fromJSON(object: any): SendAsyncRequest;
    function toJSON(message: SendAsyncRequest): unknown;
    function create<I extends Exact<DeepPartial<SendAsyncRequest>, I>>(base?: I): SendAsyncRequest;
    function fromPartial<I extends Exact<DeepPartial<SendAsyncRequest>, I>>(object: I): SendAsyncRequest;
}
export declare namespace SendAsyncResponse {
    function encode(message: SendAsyncResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SendAsyncResponse;
    function fromJSON(object: any): SendAsyncResponse;
    function toJSON(message: SendAsyncResponse): unknown;
    function create<I extends Exact<DeepPartial<SendAsyncResponse>, I>>(base?: I): SendAsyncResponse;
    function fromPartial<I extends Exact<DeepPartial<SendAsyncResponse>, I>>(object: I): SendAsyncResponse;
}
export declare namespace GetUserAccountRequest {
    function encode(_: GetUserAccountRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetUserAccountRequest;
    function fromJSON(_: any): GetUserAccountRequest;
    function toJSON(_: GetUserAccountRequest): unknown;
    function create<I extends Exact<DeepPartial<GetUserAccountRequest>, I>>(base?: I): GetUserAccountRequest;
    function fromPartial<I extends Exact<DeepPartial<GetUserAccountRequest>, I>>(_: I): GetUserAccountRequest;
}
export declare namespace GetUserAccountResponse {
    function encode(message: GetUserAccountResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetUserAccountResponse;
    function fromJSON(object: any): GetUserAccountResponse;
    function toJSON(message: GetUserAccountResponse): unknown;
    function create<I extends Exact<DeepPartial<GetUserAccountResponse>, I>>(base?: I): GetUserAccountResponse;
    function fromPartial<I extends Exact<DeepPartial<GetUserAccountResponse>, I>>(object: I): GetUserAccountResponse;
}
export type EthereumControllerServiceDefinition = typeof EthereumControllerServiceDefinition;
export declare const EthereumControllerServiceDefinition: {
    readonly name: "EthereumControllerService";
    readonly fullName: "decentraland.kernel.apis.EthereumControllerService";
    readonly methods: {
        /**
         * @deprecated, only available for SDK6 compatibility. This was a low level API that can
         * be replaced by any ethereum library on top of the provider
         */
        readonly requirePayment: {
            readonly name: "RequirePayment";
            readonly requestType: typeof RequirePaymentRequest;
            readonly requestStream: false;
            readonly responseType: typeof RequirePaymentResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * @deprecated, only available for SDK6 compatibility. This was a low level API that can
         * be replaced by any ethereum library on top of the provider
         */
        readonly signMessage: {
            readonly name: "SignMessage";
            readonly requestType: typeof SignMessageRequest;
            readonly requestStream: false;
            readonly responseType: typeof SignMessageResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * @deprecated, only available for SDK6 compatibility. This was a low level API that can
         * be replaced by any ethereum library on top of the provider
         */
        readonly convertMessageToObject: {
            readonly name: "ConvertMessageToObject";
            readonly requestType: typeof ConvertMessageToObjectRequest;
            readonly requestStream: false;
            readonly responseType: typeof ConvertMessageToObjectResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly sendAsync: {
            readonly name: "SendAsync";
            readonly requestType: typeof SendAsyncRequest;
            readonly requestStream: false;
            readonly responseType: typeof SendAsyncResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * @deprecated, only available for SDK6 compatibility. This was a low level API that can
         * be replaced by any ethereum library on top of the provider
         */
        readonly getUserAccount: {
            readonly name: "GetUserAccount";
            readonly requestType: typeof GetUserAccountRequest;
            readonly requestStream: false;
            readonly responseType: typeof GetUserAccountResponse;
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
