"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParcelIdentityServiceDefinition = exports.GetIsEmptyResponse = exports.GetIsEmptyRequest = exports.GetSceneIdResponse = exports.GetSceneIdRequest = exports.GetParcelResponse = exports.GetParcelRequest = exports.Land = exports.MappingsResponse = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const content_mapping_gen_1 = require("../../common/content_mapping.gen");
exports.protobufPackage = "decentraland.kernel.apis";
function createBaseMappingsResponse() {
    return { parcelId: "", rootCid: "", contents: [] };
}
var MappingsResponse;
(function (MappingsResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.parcelId !== "") {
            writer.uint32(10).string(message.parcelId);
        }
        if (message.rootCid !== "") {
            writer.uint32(18).string(message.rootCid);
        }
        for (const v of message.contents) {
            content_mapping_gen_1.ContentMapping.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    }
    MappingsResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMappingsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.parcelId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.rootCid = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.contents.push(content_mapping_gen_1.ContentMapping.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    MappingsResponse.decode = decode;
    function fromJSON(object) {
        return {
            parcelId: isSet(object.parcelId) ? String(object.parcelId) : "",
            rootCid: isSet(object.rootCid) ? String(object.rootCid) : "",
            contents: Array.isArray(object === null || object === void 0 ? void 0 : object.contents) ? object.contents.map((e) => content_mapping_gen_1.ContentMapping.fromJSON(e)) : [],
        };
    }
    MappingsResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.parcelId !== undefined && (obj.parcelId = message.parcelId);
        message.rootCid !== undefined && (obj.rootCid = message.rootCid);
        if (message.contents) {
            obj.contents = message.contents.map((e) => e ? content_mapping_gen_1.ContentMapping.toJSON(e) : undefined);
        }
        else {
            obj.contents = [];
        }
        return obj;
    }
    MappingsResponse.toJSON = toJSON;
    function create(base) {
        return MappingsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    MappingsResponse.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMappingsResponse();
        message.parcelId = (_a = object.parcelId) !== null && _a !== void 0 ? _a : "";
        message.rootCid = (_b = object.rootCid) !== null && _b !== void 0 ? _b : "";
        message.contents = ((_c = object.contents) === null || _c === void 0 ? void 0 : _c.map((e) => content_mapping_gen_1.ContentMapping.fromPartial(e))) || [];
        return message;
    }
    MappingsResponse.fromPartial = fromPartial;
})(MappingsResponse || (exports.MappingsResponse = MappingsResponse = {}));
function createBaseLand() {
    return { sceneId: "", sceneJsonData: "", baseUrl: "", baseUrlBundles: "", mappingsResponse: undefined };
}
var Land;
(function (Land) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sceneId !== "") {
            writer.uint32(10).string(message.sceneId);
        }
        if (message.sceneJsonData !== "") {
            writer.uint32(18).string(message.sceneJsonData);
        }
        if (message.baseUrl !== "") {
            writer.uint32(26).string(message.baseUrl);
        }
        if (message.baseUrlBundles !== "") {
            writer.uint32(34).string(message.baseUrlBundles);
        }
        if (message.mappingsResponse !== undefined) {
            MappingsResponse.encode(message.mappingsResponse, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    }
    Land.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLand();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sceneId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.sceneJsonData = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.baseUrl = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.baseUrlBundles = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.mappingsResponse = MappingsResponse.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Land.decode = decode;
    function fromJSON(object) {
        return {
            sceneId: isSet(object.sceneId) ? String(object.sceneId) : "",
            sceneJsonData: isSet(object.sceneJsonData) ? String(object.sceneJsonData) : "",
            baseUrl: isSet(object.baseUrl) ? String(object.baseUrl) : "",
            baseUrlBundles: isSet(object.baseUrlBundles) ? String(object.baseUrlBundles) : "",
            mappingsResponse: isSet(object.mappingsResponse) ? MappingsResponse.fromJSON(object.mappingsResponse) : undefined,
        };
    }
    Land.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.sceneId !== undefined && (obj.sceneId = message.sceneId);
        message.sceneJsonData !== undefined && (obj.sceneJsonData = message.sceneJsonData);
        message.baseUrl !== undefined && (obj.baseUrl = message.baseUrl);
        message.baseUrlBundles !== undefined && (obj.baseUrlBundles = message.baseUrlBundles);
        message.mappingsResponse !== undefined &&
            (obj.mappingsResponse = message.mappingsResponse ? MappingsResponse.toJSON(message.mappingsResponse) : undefined);
        return obj;
    }
    Land.toJSON = toJSON;
    function create(base) {
        return Land.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Land.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseLand();
        message.sceneId = (_a = object.sceneId) !== null && _a !== void 0 ? _a : "";
        message.sceneJsonData = (_b = object.sceneJsonData) !== null && _b !== void 0 ? _b : "";
        message.baseUrl = (_c = object.baseUrl) !== null && _c !== void 0 ? _c : "";
        message.baseUrlBundles = (_d = object.baseUrlBundles) !== null && _d !== void 0 ? _d : "";
        message.mappingsResponse = (object.mappingsResponse !== undefined && object.mappingsResponse !== null)
            ? MappingsResponse.fromPartial(object.mappingsResponse)
            : undefined;
        return message;
    }
    Land.fromPartial = fromPartial;
})(Land || (exports.Land = Land = {}));
function createBaseGetParcelRequest() {
    return {};
}
var GetParcelRequest;
(function (GetParcelRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    GetParcelRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetParcelRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetParcelRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    GetParcelRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    GetParcelRequest.toJSON = toJSON;
    function create(base) {
        return GetParcelRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetParcelRequest.create = create;
    function fromPartial(_) {
        const message = createBaseGetParcelRequest();
        return message;
    }
    GetParcelRequest.fromPartial = fromPartial;
})(GetParcelRequest || (exports.GetParcelRequest = GetParcelRequest = {}));
function createBaseGetParcelResponse() {
    return { land: undefined, cid: "" };
}
var GetParcelResponse;
(function (GetParcelResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.land !== undefined) {
            Land.encode(message.land, writer.uint32(10).fork()).ldelim();
        }
        if (message.cid !== "") {
            writer.uint32(18).string(message.cid);
        }
        return writer;
    }
    GetParcelResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetParcelResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.land = Land.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.cid = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetParcelResponse.decode = decode;
    function fromJSON(object) {
        return {
            land: isSet(object.land) ? Land.fromJSON(object.land) : undefined,
            cid: isSet(object.cid) ? String(object.cid) : "",
        };
    }
    GetParcelResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.land !== undefined && (obj.land = message.land ? Land.toJSON(message.land) : undefined);
        message.cid !== undefined && (obj.cid = message.cid);
        return obj;
    }
    GetParcelResponse.toJSON = toJSON;
    function create(base) {
        return GetParcelResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetParcelResponse.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseGetParcelResponse();
        message.land = (object.land !== undefined && object.land !== null) ? Land.fromPartial(object.land) : undefined;
        message.cid = (_a = object.cid) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    GetParcelResponse.fromPartial = fromPartial;
})(GetParcelResponse || (exports.GetParcelResponse = GetParcelResponse = {}));
function createBaseGetSceneIdRequest() {
    return {};
}
var GetSceneIdRequest;
(function (GetSceneIdRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    GetSceneIdRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSceneIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetSceneIdRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    GetSceneIdRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    GetSceneIdRequest.toJSON = toJSON;
    function create(base) {
        return GetSceneIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetSceneIdRequest.create = create;
    function fromPartial(_) {
        const message = createBaseGetSceneIdRequest();
        return message;
    }
    GetSceneIdRequest.fromPartial = fromPartial;
})(GetSceneIdRequest || (exports.GetSceneIdRequest = GetSceneIdRequest = {}));
function createBaseGetSceneIdResponse() {
    return { sceneId: "" };
}
var GetSceneIdResponse;
(function (GetSceneIdResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sceneId !== "") {
            writer.uint32(10).string(message.sceneId);
        }
        return writer;
    }
    GetSceneIdResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSceneIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sceneId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetSceneIdResponse.decode = decode;
    function fromJSON(object) {
        return { sceneId: isSet(object.sceneId) ? String(object.sceneId) : "" };
    }
    GetSceneIdResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.sceneId !== undefined && (obj.sceneId = message.sceneId);
        return obj;
    }
    GetSceneIdResponse.toJSON = toJSON;
    function create(base) {
        return GetSceneIdResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetSceneIdResponse.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseGetSceneIdResponse();
        message.sceneId = (_a = object.sceneId) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    GetSceneIdResponse.fromPartial = fromPartial;
})(GetSceneIdResponse || (exports.GetSceneIdResponse = GetSceneIdResponse = {}));
function createBaseGetIsEmptyRequest() {
    return {};
}
var GetIsEmptyRequest;
(function (GetIsEmptyRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    GetIsEmptyRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetIsEmptyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetIsEmptyRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    GetIsEmptyRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    GetIsEmptyRequest.toJSON = toJSON;
    function create(base) {
        return GetIsEmptyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetIsEmptyRequest.create = create;
    function fromPartial(_) {
        const message = createBaseGetIsEmptyRequest();
        return message;
    }
    GetIsEmptyRequest.fromPartial = fromPartial;
})(GetIsEmptyRequest || (exports.GetIsEmptyRequest = GetIsEmptyRequest = {}));
function createBaseGetIsEmptyResponse() {
    return { isEmpty: false };
}
var GetIsEmptyResponse;
(function (GetIsEmptyResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.isEmpty === true) {
            writer.uint32(8).bool(message.isEmpty);
        }
        return writer;
    }
    GetIsEmptyResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetIsEmptyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.isEmpty = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetIsEmptyResponse.decode = decode;
    function fromJSON(object) {
        return { isEmpty: isSet(object.isEmpty) ? Boolean(object.isEmpty) : false };
    }
    GetIsEmptyResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.isEmpty !== undefined && (obj.isEmpty = message.isEmpty);
        return obj;
    }
    GetIsEmptyResponse.toJSON = toJSON;
    function create(base) {
        return GetIsEmptyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetIsEmptyResponse.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseGetIsEmptyResponse();
        message.isEmpty = (_a = object.isEmpty) !== null && _a !== void 0 ? _a : false;
        return message;
    }
    GetIsEmptyResponse.fromPartial = fromPartial;
})(GetIsEmptyResponse || (exports.GetIsEmptyResponse = GetIsEmptyResponse = {}));
exports.ParcelIdentityServiceDefinition = {
    name: "ParcelIdentityService",
    fullName: "decentraland.kernel.apis.ParcelIdentityService",
    methods: {
        /** @deprecated, only available for SDK6 compatibility */
        getParcel: {
            name: "GetParcel",
            requestType: GetParcelRequest,
            requestStream: false,
            responseType: GetParcelResponse,
            responseStream: false,
            options: {},
        },
        /** @deprecated, only available for SDK6 compatibility */
        getSceneId: {
            name: "GetSceneId",
            requestType: GetSceneIdRequest,
            requestStream: false,
            responseType: GetSceneIdResponse,
            responseStream: false,
            options: {},
        },
        /** @deprecated, only available for SDK6 compatibility */
        getIsEmpty: {
            name: "GetIsEmpty",
            requestType: GetIsEmptyRequest,
            requestStream: false,
            responseType: GetIsEmptyResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=parcel_identity.gen.js.map