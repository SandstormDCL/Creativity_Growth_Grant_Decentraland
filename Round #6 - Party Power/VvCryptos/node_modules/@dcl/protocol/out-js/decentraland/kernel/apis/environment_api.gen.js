"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentApiServiceDefinition = exports.GetDecentralandTimeRequest = exports.GetExplorerConfigurationRequest = exports.GetCurrentRealmRequest = exports.AreUnsafeRequestAllowedRequest = exports.GetPlatformRequest = exports.IsPreviewModeRequest = exports.GetBootstrapDataRequest = exports.GetDecentralandTimeResponse = exports.GetExplorerConfigurationResponse_ConfigurationsEntry = exports.GetExplorerConfigurationResponse = exports.GetCurrentRealmResponse = exports.EnvironmentRealm = exports.GetPlatformResponse = exports.AreUnsafeRequestAllowedResponse = exports.PreviewModeResponse = exports.BootstrapDataResponse = exports.MinimalRunnableEntity = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const content_mapping_gen_1 = require("../../common/content_mapping.gen");
exports.protobufPackage = "decentraland.kernel.apis";
function createBaseMinimalRunnableEntity() {
    return { content: [], metadataJson: "" };
}
var MinimalRunnableEntity;
(function (MinimalRunnableEntity) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.content) {
            content_mapping_gen_1.ContentMapping.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.metadataJson !== "") {
            writer.uint32(18).string(message.metadataJson);
        }
        return writer;
    }
    MinimalRunnableEntity.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMinimalRunnableEntity();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.content.push(content_mapping_gen_1.ContentMapping.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.metadataJson = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    MinimalRunnableEntity.decode = decode;
    function fromJSON(object) {
        return {
            content: Array.isArray(object === null || object === void 0 ? void 0 : object.content) ? object.content.map((e) => content_mapping_gen_1.ContentMapping.fromJSON(e)) : [],
            metadataJson: isSet(object.metadataJson) ? String(object.metadataJson) : "",
        };
    }
    MinimalRunnableEntity.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.content) {
            obj.content = message.content.map((e) => e ? content_mapping_gen_1.ContentMapping.toJSON(e) : undefined);
        }
        else {
            obj.content = [];
        }
        message.metadataJson !== undefined && (obj.metadataJson = message.metadataJson);
        return obj;
    }
    MinimalRunnableEntity.toJSON = toJSON;
    function create(base) {
        return MinimalRunnableEntity.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    MinimalRunnableEntity.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseMinimalRunnableEntity();
        message.content = ((_a = object.content) === null || _a === void 0 ? void 0 : _a.map((e) => content_mapping_gen_1.ContentMapping.fromPartial(e))) || [];
        message.metadataJson = (_b = object.metadataJson) !== null && _b !== void 0 ? _b : "";
        return message;
    }
    MinimalRunnableEntity.fromPartial = fromPartial;
})(MinimalRunnableEntity || (exports.MinimalRunnableEntity = MinimalRunnableEntity = {}));
function createBaseBootstrapDataResponse() {
    return { id: "", baseUrl: "", entity: undefined, useFPSThrottling: false };
}
var BootstrapDataResponse;
(function (BootstrapDataResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.baseUrl !== "") {
            writer.uint32(34).string(message.baseUrl);
        }
        if (message.entity !== undefined) {
            MinimalRunnableEntity.encode(message.entity, writer.uint32(18).fork()).ldelim();
        }
        if (message.useFPSThrottling === true) {
            writer.uint32(40).bool(message.useFPSThrottling);
        }
        return writer;
    }
    BootstrapDataResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBootstrapDataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.baseUrl = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.entity = MinimalRunnableEntity.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.useFPSThrottling = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    BootstrapDataResponse.decode = decode;
    function fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            baseUrl: isSet(object.baseUrl) ? String(object.baseUrl) : "",
            entity: isSet(object.entity) ? MinimalRunnableEntity.fromJSON(object.entity) : undefined,
            useFPSThrottling: isSet(object.useFPSThrottling) ? Boolean(object.useFPSThrottling) : false,
        };
    }
    BootstrapDataResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.baseUrl !== undefined && (obj.baseUrl = message.baseUrl);
        message.entity !== undefined &&
            (obj.entity = message.entity ? MinimalRunnableEntity.toJSON(message.entity) : undefined);
        message.useFPSThrottling !== undefined && (obj.useFPSThrottling = message.useFPSThrottling);
        return obj;
    }
    BootstrapDataResponse.toJSON = toJSON;
    function create(base) {
        return BootstrapDataResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    BootstrapDataResponse.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseBootstrapDataResponse();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.baseUrl = (_b = object.baseUrl) !== null && _b !== void 0 ? _b : "";
        message.entity = (object.entity !== undefined && object.entity !== null)
            ? MinimalRunnableEntity.fromPartial(object.entity)
            : undefined;
        message.useFPSThrottling = (_c = object.useFPSThrottling) !== null && _c !== void 0 ? _c : false;
        return message;
    }
    BootstrapDataResponse.fromPartial = fromPartial;
})(BootstrapDataResponse || (exports.BootstrapDataResponse = BootstrapDataResponse = {}));
function createBasePreviewModeResponse() {
    return { isPreview: false };
}
var PreviewModeResponse;
(function (PreviewModeResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.isPreview === true) {
            writer.uint32(8).bool(message.isPreview);
        }
        return writer;
    }
    PreviewModeResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePreviewModeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.isPreview = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PreviewModeResponse.decode = decode;
    function fromJSON(object) {
        return { isPreview: isSet(object.isPreview) ? Boolean(object.isPreview) : false };
    }
    PreviewModeResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.isPreview !== undefined && (obj.isPreview = message.isPreview);
        return obj;
    }
    PreviewModeResponse.toJSON = toJSON;
    function create(base) {
        return PreviewModeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PreviewModeResponse.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBasePreviewModeResponse();
        message.isPreview = (_a = object.isPreview) !== null && _a !== void 0 ? _a : false;
        return message;
    }
    PreviewModeResponse.fromPartial = fromPartial;
})(PreviewModeResponse || (exports.PreviewModeResponse = PreviewModeResponse = {}));
function createBaseAreUnsafeRequestAllowedResponse() {
    return { status: false };
}
var AreUnsafeRequestAllowedResponse;
(function (AreUnsafeRequestAllowedResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.status === true) {
            writer.uint32(8).bool(message.status);
        }
        return writer;
    }
    AreUnsafeRequestAllowedResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAreUnsafeRequestAllowedResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.status = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AreUnsafeRequestAllowedResponse.decode = decode;
    function fromJSON(object) {
        return { status: isSet(object.status) ? Boolean(object.status) : false };
    }
    AreUnsafeRequestAllowedResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.status !== undefined && (obj.status = message.status);
        return obj;
    }
    AreUnsafeRequestAllowedResponse.toJSON = toJSON;
    function create(base) {
        return AreUnsafeRequestAllowedResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AreUnsafeRequestAllowedResponse.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseAreUnsafeRequestAllowedResponse();
        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : false;
        return message;
    }
    AreUnsafeRequestAllowedResponse.fromPartial = fromPartial;
})(AreUnsafeRequestAllowedResponse || (exports.AreUnsafeRequestAllowedResponse = AreUnsafeRequestAllowedResponse = {}));
function createBaseGetPlatformResponse() {
    return { platform: "" };
}
var GetPlatformResponse;
(function (GetPlatformResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.platform !== "") {
            writer.uint32(10).string(message.platform);
        }
        return writer;
    }
    GetPlatformResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPlatformResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.platform = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetPlatformResponse.decode = decode;
    function fromJSON(object) {
        return { platform: isSet(object.platform) ? String(object.platform) : "" };
    }
    GetPlatformResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.platform !== undefined && (obj.platform = message.platform);
        return obj;
    }
    GetPlatformResponse.toJSON = toJSON;
    function create(base) {
        return GetPlatformResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetPlatformResponse.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseGetPlatformResponse();
        message.platform = (_a = object.platform) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    GetPlatformResponse.fromPartial = fromPartial;
})(GetPlatformResponse || (exports.GetPlatformResponse = GetPlatformResponse = {}));
function createBaseEnvironmentRealm() {
    return { domain: "", layer: "", room: "", serverName: "", displayName: "", protocol: "" };
}
var EnvironmentRealm;
(function (EnvironmentRealm) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.domain !== "") {
            writer.uint32(10).string(message.domain);
        }
        if (message.layer !== "") {
            writer.uint32(18).string(message.layer);
        }
        if (message.room !== "") {
            writer.uint32(26).string(message.room);
        }
        if (message.serverName !== "") {
            writer.uint32(34).string(message.serverName);
        }
        if (message.displayName !== "") {
            writer.uint32(42).string(message.displayName);
        }
        if (message.protocol !== "") {
            writer.uint32(50).string(message.protocol);
        }
        return writer;
    }
    EnvironmentRealm.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnvironmentRealm();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.domain = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.layer = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.room = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.serverName = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.displayName = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.protocol = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    EnvironmentRealm.decode = decode;
    function fromJSON(object) {
        return {
            domain: isSet(object.domain) ? String(object.domain) : "",
            layer: isSet(object.layer) ? String(object.layer) : "",
            room: isSet(object.room) ? String(object.room) : "",
            serverName: isSet(object.serverName) ? String(object.serverName) : "",
            displayName: isSet(object.displayName) ? String(object.displayName) : "",
            protocol: isSet(object.protocol) ? String(object.protocol) : "",
        };
    }
    EnvironmentRealm.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.domain !== undefined && (obj.domain = message.domain);
        message.layer !== undefined && (obj.layer = message.layer);
        message.room !== undefined && (obj.room = message.room);
        message.serverName !== undefined && (obj.serverName = message.serverName);
        message.displayName !== undefined && (obj.displayName = message.displayName);
        message.protocol !== undefined && (obj.protocol = message.protocol);
        return obj;
    }
    EnvironmentRealm.toJSON = toJSON;
    function create(base) {
        return EnvironmentRealm.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    EnvironmentRealm.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseEnvironmentRealm();
        message.domain = (_a = object.domain) !== null && _a !== void 0 ? _a : "";
        message.layer = (_b = object.layer) !== null && _b !== void 0 ? _b : "";
        message.room = (_c = object.room) !== null && _c !== void 0 ? _c : "";
        message.serverName = (_d = object.serverName) !== null && _d !== void 0 ? _d : "";
        message.displayName = (_e = object.displayName) !== null && _e !== void 0 ? _e : "";
        message.protocol = (_f = object.protocol) !== null && _f !== void 0 ? _f : "";
        return message;
    }
    EnvironmentRealm.fromPartial = fromPartial;
})(EnvironmentRealm || (exports.EnvironmentRealm = EnvironmentRealm = {}));
function createBaseGetCurrentRealmResponse() {
    return { currentRealm: undefined };
}
var GetCurrentRealmResponse;
(function (GetCurrentRealmResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.currentRealm !== undefined) {
            EnvironmentRealm.encode(message.currentRealm, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    GetCurrentRealmResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCurrentRealmResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.currentRealm = EnvironmentRealm.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetCurrentRealmResponse.decode = decode;
    function fromJSON(object) {
        return { currentRealm: isSet(object.currentRealm) ? EnvironmentRealm.fromJSON(object.currentRealm) : undefined };
    }
    GetCurrentRealmResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.currentRealm !== undefined &&
            (obj.currentRealm = message.currentRealm ? EnvironmentRealm.toJSON(message.currentRealm) : undefined);
        return obj;
    }
    GetCurrentRealmResponse.toJSON = toJSON;
    function create(base) {
        return GetCurrentRealmResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetCurrentRealmResponse.create = create;
    function fromPartial(object) {
        const message = createBaseGetCurrentRealmResponse();
        message.currentRealm = (object.currentRealm !== undefined && object.currentRealm !== null)
            ? EnvironmentRealm.fromPartial(object.currentRealm)
            : undefined;
        return message;
    }
    GetCurrentRealmResponse.fromPartial = fromPartial;
})(GetCurrentRealmResponse || (exports.GetCurrentRealmResponse = GetCurrentRealmResponse = {}));
function createBaseGetExplorerConfigurationResponse() {
    return { clientUri: "", configurations: {} };
}
var GetExplorerConfigurationResponse;
(function (GetExplorerConfigurationResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clientUri !== "") {
            writer.uint32(10).string(message.clientUri);
        }
        Object.entries(message.configurations).forEach(([key, value]) => {
            GetExplorerConfigurationResponse_ConfigurationsEntry.encode({ key: key, value }, writer.uint32(18).fork())
                .ldelim();
        });
        return writer;
    }
    GetExplorerConfigurationResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetExplorerConfigurationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clientUri = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = GetExplorerConfigurationResponse_ConfigurationsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.configurations[entry2.key] = entry2.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetExplorerConfigurationResponse.decode = decode;
    function fromJSON(object) {
        return {
            clientUri: isSet(object.clientUri) ? String(object.clientUri) : "",
            configurations: isObject(object.configurations)
                ? Object.entries(object.configurations).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    }
    GetExplorerConfigurationResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.clientUri !== undefined && (obj.clientUri = message.clientUri);
        obj.configurations = {};
        if (message.configurations) {
            Object.entries(message.configurations).forEach(([k, v]) => {
                obj.configurations[k] = v;
            });
        }
        return obj;
    }
    GetExplorerConfigurationResponse.toJSON = toJSON;
    function create(base) {
        return GetExplorerConfigurationResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetExplorerConfigurationResponse.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseGetExplorerConfigurationResponse();
        message.clientUri = (_a = object.clientUri) !== null && _a !== void 0 ? _a : "";
        message.configurations = Object.entries((_b = object.configurations) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    }
    GetExplorerConfigurationResponse.fromPartial = fromPartial;
})(GetExplorerConfigurationResponse || (exports.GetExplorerConfigurationResponse = GetExplorerConfigurationResponse = {}));
function createBaseGetExplorerConfigurationResponse_ConfigurationsEntry() {
    return { key: "", value: "" };
}
var GetExplorerConfigurationResponse_ConfigurationsEntry;
(function (GetExplorerConfigurationResponse_ConfigurationsEntry) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    }
    GetExplorerConfigurationResponse_ConfigurationsEntry.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetExplorerConfigurationResponse_ConfigurationsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetExplorerConfigurationResponse_ConfigurationsEntry.decode = decode;
    function fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
    }
    GetExplorerConfigurationResponse_ConfigurationsEntry.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    }
    GetExplorerConfigurationResponse_ConfigurationsEntry.toJSON = toJSON;
    function create(base) {
        return GetExplorerConfigurationResponse_ConfigurationsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetExplorerConfigurationResponse_ConfigurationsEntry.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseGetExplorerConfigurationResponse_ConfigurationsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    }
    GetExplorerConfigurationResponse_ConfigurationsEntry.fromPartial = fromPartial;
})(GetExplorerConfigurationResponse_ConfigurationsEntry || (exports.GetExplorerConfigurationResponse_ConfigurationsEntry = GetExplorerConfigurationResponse_ConfigurationsEntry = {}));
function createBaseGetDecentralandTimeResponse() {
    return { seconds: 0 };
}
var GetDecentralandTimeResponse;
(function (GetDecentralandTimeResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.seconds !== 0) {
            writer.uint32(8).int32(message.seconds);
        }
        return writer;
    }
    GetDecentralandTimeResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDecentralandTimeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.seconds = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetDecentralandTimeResponse.decode = decode;
    function fromJSON(object) {
        return { seconds: isSet(object.seconds) ? Number(object.seconds) : 0 };
    }
    GetDecentralandTimeResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.seconds !== undefined && (obj.seconds = Math.round(message.seconds));
        return obj;
    }
    GetDecentralandTimeResponse.toJSON = toJSON;
    function create(base) {
        return GetDecentralandTimeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetDecentralandTimeResponse.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseGetDecentralandTimeResponse();
        message.seconds = (_a = object.seconds) !== null && _a !== void 0 ? _a : 0;
        return message;
    }
    GetDecentralandTimeResponse.fromPartial = fromPartial;
})(GetDecentralandTimeResponse || (exports.GetDecentralandTimeResponse = GetDecentralandTimeResponse = {}));
function createBaseGetBootstrapDataRequest() {
    return {};
}
var GetBootstrapDataRequest;
(function (GetBootstrapDataRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    GetBootstrapDataRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetBootstrapDataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetBootstrapDataRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    GetBootstrapDataRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    GetBootstrapDataRequest.toJSON = toJSON;
    function create(base) {
        return GetBootstrapDataRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetBootstrapDataRequest.create = create;
    function fromPartial(_) {
        const message = createBaseGetBootstrapDataRequest();
        return message;
    }
    GetBootstrapDataRequest.fromPartial = fromPartial;
})(GetBootstrapDataRequest || (exports.GetBootstrapDataRequest = GetBootstrapDataRequest = {}));
function createBaseIsPreviewModeRequest() {
    return {};
}
var IsPreviewModeRequest;
(function (IsPreviewModeRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    IsPreviewModeRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsPreviewModeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    IsPreviewModeRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    IsPreviewModeRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    IsPreviewModeRequest.toJSON = toJSON;
    function create(base) {
        return IsPreviewModeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    IsPreviewModeRequest.create = create;
    function fromPartial(_) {
        const message = createBaseIsPreviewModeRequest();
        return message;
    }
    IsPreviewModeRequest.fromPartial = fromPartial;
})(IsPreviewModeRequest || (exports.IsPreviewModeRequest = IsPreviewModeRequest = {}));
function createBaseGetPlatformRequest() {
    return {};
}
var GetPlatformRequest;
(function (GetPlatformRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    GetPlatformRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPlatformRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetPlatformRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    GetPlatformRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    GetPlatformRequest.toJSON = toJSON;
    function create(base) {
        return GetPlatformRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetPlatformRequest.create = create;
    function fromPartial(_) {
        const message = createBaseGetPlatformRequest();
        return message;
    }
    GetPlatformRequest.fromPartial = fromPartial;
})(GetPlatformRequest || (exports.GetPlatformRequest = GetPlatformRequest = {}));
function createBaseAreUnsafeRequestAllowedRequest() {
    return {};
}
var AreUnsafeRequestAllowedRequest;
(function (AreUnsafeRequestAllowedRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    AreUnsafeRequestAllowedRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAreUnsafeRequestAllowedRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AreUnsafeRequestAllowedRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    AreUnsafeRequestAllowedRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    AreUnsafeRequestAllowedRequest.toJSON = toJSON;
    function create(base) {
        return AreUnsafeRequestAllowedRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AreUnsafeRequestAllowedRequest.create = create;
    function fromPartial(_) {
        const message = createBaseAreUnsafeRequestAllowedRequest();
        return message;
    }
    AreUnsafeRequestAllowedRequest.fromPartial = fromPartial;
})(AreUnsafeRequestAllowedRequest || (exports.AreUnsafeRequestAllowedRequest = AreUnsafeRequestAllowedRequest = {}));
function createBaseGetCurrentRealmRequest() {
    return {};
}
var GetCurrentRealmRequest;
(function (GetCurrentRealmRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    GetCurrentRealmRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCurrentRealmRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetCurrentRealmRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    GetCurrentRealmRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    GetCurrentRealmRequest.toJSON = toJSON;
    function create(base) {
        return GetCurrentRealmRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetCurrentRealmRequest.create = create;
    function fromPartial(_) {
        const message = createBaseGetCurrentRealmRequest();
        return message;
    }
    GetCurrentRealmRequest.fromPartial = fromPartial;
})(GetCurrentRealmRequest || (exports.GetCurrentRealmRequest = GetCurrentRealmRequest = {}));
function createBaseGetExplorerConfigurationRequest() {
    return {};
}
var GetExplorerConfigurationRequest;
(function (GetExplorerConfigurationRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    GetExplorerConfigurationRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetExplorerConfigurationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetExplorerConfigurationRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    GetExplorerConfigurationRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    GetExplorerConfigurationRequest.toJSON = toJSON;
    function create(base) {
        return GetExplorerConfigurationRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetExplorerConfigurationRequest.create = create;
    function fromPartial(_) {
        const message = createBaseGetExplorerConfigurationRequest();
        return message;
    }
    GetExplorerConfigurationRequest.fromPartial = fromPartial;
})(GetExplorerConfigurationRequest || (exports.GetExplorerConfigurationRequest = GetExplorerConfigurationRequest = {}));
function createBaseGetDecentralandTimeRequest() {
    return {};
}
var GetDecentralandTimeRequest;
(function (GetDecentralandTimeRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    GetDecentralandTimeRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDecentralandTimeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetDecentralandTimeRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    GetDecentralandTimeRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    GetDecentralandTimeRequest.toJSON = toJSON;
    function create(base) {
        return GetDecentralandTimeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetDecentralandTimeRequest.create = create;
    function fromPartial(_) {
        const message = createBaseGetDecentralandTimeRequest();
        return message;
    }
    GetDecentralandTimeRequest.fromPartial = fromPartial;
})(GetDecentralandTimeRequest || (exports.GetDecentralandTimeRequest = GetDecentralandTimeRequest = {}));
exports.EnvironmentApiServiceDefinition = {
    name: "EnvironmentApiService",
    fullName: "decentraland.kernel.apis.EnvironmentApiService",
    methods: {
        /** @deprecated, only available for SDK6 compatibility. Use runtime_api instead */
        getBootstrapData: {
            name: "GetBootstrapData",
            requestType: GetBootstrapDataRequest,
            requestStream: false,
            responseType: BootstrapDataResponse,
            responseStream: false,
            options: {},
        },
        /** @deprecated, only available for SDK6 compatibility. Needs migration */
        isPreviewMode: {
            name: "IsPreviewMode",
            requestType: IsPreviewModeRequest,
            requestStream: false,
            responseType: PreviewModeResponse,
            responseStream: false,
            options: {},
        },
        /** @deprecated, only available for SDK6 compatibility */
        getPlatform: {
            name: "GetPlatform",
            requestType: GetPlatformRequest,
            requestStream: false,
            responseType: GetPlatformResponse,
            responseStream: false,
            options: {},
        },
        /** @deprecated, only available for SDK6 compatibility */
        areUnsafeRequestAllowed: {
            name: "AreUnsafeRequestAllowed",
            requestType: AreUnsafeRequestAllowedRequest,
            requestStream: false,
            responseType: AreUnsafeRequestAllowedResponse,
            responseStream: false,
            options: {},
        },
        /** @deprecated, use GetCurrentRealm from runtime_api instead */
        getCurrentRealm: {
            name: "GetCurrentRealm",
            requestType: GetCurrentRealmRequest,
            requestStream: false,
            responseType: GetCurrentRealmResponse,
            responseStream: false,
            options: {},
        },
        /** @deprecated, only available for SDK6 compatibility */
        getExplorerConfiguration: {
            name: "GetExplorerConfiguration",
            requestType: GetExplorerConfigurationRequest,
            requestStream: false,
            responseType: GetExplorerConfigurationResponse,
            responseStream: false,
            options: {},
        },
        /** @deprecated, use GetTime from runtime_api instead */
        getDecentralandTime: {
            name: "GetDecentralandTime",
            requestType: GetDecentralandTimeRequest,
            requestStream: false,
            responseType: GetDecentralandTimeResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=environment_api.gen.js.map