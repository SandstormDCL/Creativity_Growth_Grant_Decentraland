import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.kernel.apis";
export interface RealSendRequest {
    message: string;
}
export interface RealSendResponse {
}
export interface SendBinaryRequest {
    data: Uint8Array[];
}
export interface SendBinaryResponse {
    data: Uint8Array[];
}
export declare namespace RealSendRequest {
    function encode(message: RealSendRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): RealSendRequest;
    function fromJSON(object: any): RealSendRequest;
    function toJSON(message: RealSendRequest): unknown;
    function create<I extends Exact<DeepPartial<RealSendRequest>, I>>(base?: I): RealSendRequest;
    function fromPartial<I extends Exact<DeepPartial<RealSendRequest>, I>>(object: I): RealSendRequest;
}
export declare namespace RealSendResponse {
    function encode(_: RealSendResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): RealSendResponse;
    function fromJSON(_: any): RealSendResponse;
    function toJSON(_: RealSendResponse): unknown;
    function create<I extends Exact<DeepPartial<RealSendResponse>, I>>(base?: I): RealSendResponse;
    function fromPartial<I extends Exact<DeepPartial<RealSendResponse>, I>>(_: I): RealSendResponse;
}
export declare namespace SendBinaryRequest {
    function encode(message: SendBinaryRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SendBinaryRequest;
    function fromJSON(object: any): SendBinaryRequest;
    function toJSON(message: SendBinaryRequest): unknown;
    function create<I extends Exact<DeepPartial<SendBinaryRequest>, I>>(base?: I): SendBinaryRequest;
    function fromPartial<I extends Exact<DeepPartial<SendBinaryRequest>, I>>(object: I): SendBinaryRequest;
}
export declare namespace SendBinaryResponse {
    function encode(message: SendBinaryResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SendBinaryResponse;
    function fromJSON(object: any): SendBinaryResponse;
    function toJSON(message: SendBinaryResponse): unknown;
    function create<I extends Exact<DeepPartial<SendBinaryResponse>, I>>(base?: I): SendBinaryResponse;
    function fromPartial<I extends Exact<DeepPartial<SendBinaryResponse>, I>>(object: I): SendBinaryResponse;
}
export type CommunicationsControllerServiceDefinition = typeof CommunicationsControllerServiceDefinition;
export declare const CommunicationsControllerServiceDefinition: {
    readonly name: "CommunicationsControllerService";
    readonly fullName: "decentraland.kernel.apis.CommunicationsControllerService";
    readonly methods: {
        /**
         * @deprecated - This API should use a bidirectional binary stream in sdk7
         * https://github.com/decentraland/sdk/issues/582
         */
        readonly send: {
            readonly name: "Send";
            readonly requestType: typeof RealSendRequest;
            readonly requestStream: false;
            readonly responseType: typeof RealSendResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly sendBinary: {
            readonly name: "SendBinary";
            readonly requestType: typeof SendBinaryRequest;
            readonly requestStream: false;
            readonly responseType: typeof SendBinaryResponse;
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
