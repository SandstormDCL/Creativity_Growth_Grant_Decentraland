import _m0 from "protobufjs/minimal";
import { UserData } from "../../common/sdk/user_data.gen";
export declare const protobufPackage = "decentraland.kernel.apis";
export interface GetUserDataRequest {
}
export interface GetUserDataResponse {
    data?: UserData | undefined;
}
export interface GetUserPublicKeyRequest {
}
export interface GetUserPublicKeyResponse {
    address?: string | undefined;
}
export declare namespace GetUserDataRequest {
    function encode(_: GetUserDataRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetUserDataRequest;
    function fromJSON(_: any): GetUserDataRequest;
    function toJSON(_: GetUserDataRequest): unknown;
    function create<I extends Exact<DeepPartial<GetUserDataRequest>, I>>(base?: I): GetUserDataRequest;
    function fromPartial<I extends Exact<DeepPartial<GetUserDataRequest>, I>>(_: I): GetUserDataRequest;
}
export declare namespace GetUserDataResponse {
    function encode(message: GetUserDataResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetUserDataResponse;
    function fromJSON(object: any): GetUserDataResponse;
    function toJSON(message: GetUserDataResponse): unknown;
    function create<I extends Exact<DeepPartial<GetUserDataResponse>, I>>(base?: I): GetUserDataResponse;
    function fromPartial<I extends Exact<DeepPartial<GetUserDataResponse>, I>>(object: I): GetUserDataResponse;
}
export declare namespace GetUserPublicKeyRequest {
    function encode(_: GetUserPublicKeyRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetUserPublicKeyRequest;
    function fromJSON(_: any): GetUserPublicKeyRequest;
    function toJSON(_: GetUserPublicKeyRequest): unknown;
    function create<I extends Exact<DeepPartial<GetUserPublicKeyRequest>, I>>(base?: I): GetUserPublicKeyRequest;
    function fromPartial<I extends Exact<DeepPartial<GetUserPublicKeyRequest>, I>>(_: I): GetUserPublicKeyRequest;
}
export declare namespace GetUserPublicKeyResponse {
    function encode(message: GetUserPublicKeyResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetUserPublicKeyResponse;
    function fromJSON(object: any): GetUserPublicKeyResponse;
    function toJSON(message: GetUserPublicKeyResponse): unknown;
    function create<I extends Exact<DeepPartial<GetUserPublicKeyResponse>, I>>(base?: I): GetUserPublicKeyResponse;
    function fromPartial<I extends Exact<DeepPartial<GetUserPublicKeyResponse>, I>>(object: I): GetUserPublicKeyResponse;
}
export type UserIdentityServiceDefinition = typeof UserIdentityServiceDefinition;
export declare const UserIdentityServiceDefinition: {
    readonly name: "UserIdentityService";
    readonly fullName: "decentraland.kernel.apis.UserIdentityService";
    readonly methods: {
        /** @deprecated, only available for SDK6 compatibility. UseGetUserData */
        readonly getUserPublicKey: {
            readonly name: "GetUserPublicKey";
            readonly requestType: typeof GetUserPublicKeyRequest;
            readonly requestStream: false;
            readonly responseType: typeof GetUserPublicKeyResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getUserData: {
            readonly name: "GetUserData";
            readonly requestType: typeof GetUserDataRequest;
            readonly requestStream: false;
            readonly responseType: typeof GetUserDataResponse;
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
