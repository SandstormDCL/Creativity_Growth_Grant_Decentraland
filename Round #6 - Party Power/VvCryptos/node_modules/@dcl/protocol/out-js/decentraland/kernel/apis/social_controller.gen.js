"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SocialControllerServiceDefinition = exports.GetAvatarEventsResponse = exports.SocialEvent = exports.InitRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.kernel.apis";
function createBaseInitRequest() {
    return {};
}
var InitRequest;
(function (InitRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    InitRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInitRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    InitRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    InitRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    InitRequest.toJSON = toJSON;
    function create(base) {
        return InitRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    InitRequest.create = create;
    function fromPartial(_) {
        const message = createBaseInitRequest();
        return message;
    }
    InitRequest.fromPartial = fromPartial;
})(InitRequest || (exports.InitRequest = InitRequest = {}));
function createBaseSocialEvent() {
    return { event: "", payload: "" };
}
var SocialEvent;
(function (SocialEvent) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.event !== "") {
            writer.uint32(10).string(message.event);
        }
        if (message.payload !== "") {
            writer.uint32(18).string(message.payload);
        }
        return writer;
    }
    SocialEvent.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSocialEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.event = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.payload = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    SocialEvent.decode = decode;
    function fromJSON(object) {
        return {
            event: isSet(object.event) ? String(object.event) : "",
            payload: isSet(object.payload) ? String(object.payload) : "",
        };
    }
    SocialEvent.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.event !== undefined && (obj.event = message.event);
        message.payload !== undefined && (obj.payload = message.payload);
        return obj;
    }
    SocialEvent.toJSON = toJSON;
    function create(base) {
        return SocialEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    SocialEvent.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseSocialEvent();
        message.event = (_a = object.event) !== null && _a !== void 0 ? _a : "";
        message.payload = (_b = object.payload) !== null && _b !== void 0 ? _b : "";
        return message;
    }
    SocialEvent.fromPartial = fromPartial;
})(SocialEvent || (exports.SocialEvent = SocialEvent = {}));
function createBaseGetAvatarEventsResponse() {
    return { events: [] };
}
var GetAvatarEventsResponse;
(function (GetAvatarEventsResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.events) {
            SocialEvent.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    GetAvatarEventsResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAvatarEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.events.push(SocialEvent.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetAvatarEventsResponse.decode = decode;
    function fromJSON(object) {
        return { events: Array.isArray(object === null || object === void 0 ? void 0 : object.events) ? object.events.map((e) => SocialEvent.fromJSON(e)) : [] };
    }
    GetAvatarEventsResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.events) {
            obj.events = message.events.map((e) => e ? SocialEvent.toJSON(e) : undefined);
        }
        else {
            obj.events = [];
        }
        return obj;
    }
    GetAvatarEventsResponse.toJSON = toJSON;
    function create(base) {
        return GetAvatarEventsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetAvatarEventsResponse.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseGetAvatarEventsResponse();
        message.events = ((_a = object.events) === null || _a === void 0 ? void 0 : _a.map((e) => SocialEvent.fromPartial(e))) || [];
        return message;
    }
    GetAvatarEventsResponse.fromPartial = fromPartial;
})(GetAvatarEventsResponse || (exports.GetAvatarEventsResponse = GetAvatarEventsResponse = {}));
exports.SocialControllerServiceDefinition = {
    name: "SocialControllerService",
    fullName: "decentraland.kernel.apis.SocialControllerService",
    methods: {
        /**
         * @deprecated, only available for SDK6 compatibility. This was a low level
         * API used for the AvatarScene, it will be replaced by Foreign Entities in
         * SDK7
         */
        pullAvatarEvents: {
            name: "PullAvatarEvents",
            requestType: InitRequest,
            requestStream: false,
            responseType: GetAvatarEventsResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=social_controller.gen.js.map