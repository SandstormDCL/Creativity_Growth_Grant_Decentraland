"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WsPacket = exports.WsKicked = exports.WsIdentification = exports.WsSignedChallenge = exports.WsChallengeRequired = exports.WsPeerUpdate = exports.WsPeerLeave = exports.WsPeerJoin = exports.WsWelcome_PeerIdentitiesEntry = exports.WsWelcome = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.kernel.comms.rfc5";
function createBaseWsWelcome() {
    return { alias: 0, peerIdentities: {} };
}
var WsWelcome;
(function (WsWelcome) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.alias !== 0) {
            writer.uint32(8).uint32(message.alias);
        }
        Object.entries(message.peerIdentities).forEach(([key, value]) => {
            WsWelcome_PeerIdentitiesEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        return writer;
    }
    WsWelcome.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWsWelcome();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.alias = reader.uint32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = WsWelcome_PeerIdentitiesEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.peerIdentities[entry2.key] = entry2.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    WsWelcome.decode = decode;
    function fromJSON(object) {
        return {
            alias: isSet(object.alias) ? Number(object.alias) : 0,
            peerIdentities: isObject(object.peerIdentities)
                ? Object.entries(object.peerIdentities).reduce((acc, [key, value]) => {
                    acc[Number(key)] = String(value);
                    return acc;
                }, {})
                : {},
        };
    }
    WsWelcome.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.alias !== undefined && (obj.alias = Math.round(message.alias));
        obj.peerIdentities = {};
        if (message.peerIdentities) {
            Object.entries(message.peerIdentities).forEach(([k, v]) => {
                obj.peerIdentities[k] = v;
            });
        }
        return obj;
    }
    WsWelcome.toJSON = toJSON;
    function create(base) {
        return WsWelcome.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    WsWelcome.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseWsWelcome();
        message.alias = (_a = object.alias) !== null && _a !== void 0 ? _a : 0;
        message.peerIdentities = Object.entries((_b = object.peerIdentities) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[Number(key)] = String(value);
            }
            return acc;
        }, {});
        return message;
    }
    WsWelcome.fromPartial = fromPartial;
})(WsWelcome || (exports.WsWelcome = WsWelcome = {}));
function createBaseWsWelcome_PeerIdentitiesEntry() {
    return { key: 0, value: "" };
}
var WsWelcome_PeerIdentitiesEntry;
(function (WsWelcome_PeerIdentitiesEntry) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== 0) {
            writer.uint32(8).uint32(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    }
    WsWelcome_PeerIdentitiesEntry.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWsWelcome_PeerIdentitiesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.uint32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    WsWelcome_PeerIdentitiesEntry.decode = decode;
    function fromJSON(object) {
        return { key: isSet(object.key) ? Number(object.key) : 0, value: isSet(object.value) ? String(object.value) : "" };
    }
    WsWelcome_PeerIdentitiesEntry.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = Math.round(message.key));
        message.value !== undefined && (obj.value = message.value);
        return obj;
    }
    WsWelcome_PeerIdentitiesEntry.toJSON = toJSON;
    function create(base) {
        return WsWelcome_PeerIdentitiesEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    WsWelcome_PeerIdentitiesEntry.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseWsWelcome_PeerIdentitiesEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : 0;
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    }
    WsWelcome_PeerIdentitiesEntry.fromPartial = fromPartial;
})(WsWelcome_PeerIdentitiesEntry || (exports.WsWelcome_PeerIdentitiesEntry = WsWelcome_PeerIdentitiesEntry = {}));
function createBaseWsPeerJoin() {
    return { alias: 0, address: "" };
}
var WsPeerJoin;
(function (WsPeerJoin) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.alias !== 0) {
            writer.uint32(8).uint32(message.alias);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    }
    WsPeerJoin.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWsPeerJoin();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.alias = reader.uint32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    WsPeerJoin.decode = decode;
    function fromJSON(object) {
        return {
            alias: isSet(object.alias) ? Number(object.alias) : 0,
            address: isSet(object.address) ? String(object.address) : "",
        };
    }
    WsPeerJoin.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.alias !== undefined && (obj.alias = Math.round(message.alias));
        message.address !== undefined && (obj.address = message.address);
        return obj;
    }
    WsPeerJoin.toJSON = toJSON;
    function create(base) {
        return WsPeerJoin.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    WsPeerJoin.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseWsPeerJoin();
        message.alias = (_a = object.alias) !== null && _a !== void 0 ? _a : 0;
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        return message;
    }
    WsPeerJoin.fromPartial = fromPartial;
})(WsPeerJoin || (exports.WsPeerJoin = WsPeerJoin = {}));
function createBaseWsPeerLeave() {
    return { alias: 0 };
}
var WsPeerLeave;
(function (WsPeerLeave) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.alias !== 0) {
            writer.uint32(8).uint32(message.alias);
        }
        return writer;
    }
    WsPeerLeave.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWsPeerLeave();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.alias = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    WsPeerLeave.decode = decode;
    function fromJSON(object) {
        return { alias: isSet(object.alias) ? Number(object.alias) : 0 };
    }
    WsPeerLeave.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.alias !== undefined && (obj.alias = Math.round(message.alias));
        return obj;
    }
    WsPeerLeave.toJSON = toJSON;
    function create(base) {
        return WsPeerLeave.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    WsPeerLeave.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseWsPeerLeave();
        message.alias = (_a = object.alias) !== null && _a !== void 0 ? _a : 0;
        return message;
    }
    WsPeerLeave.fromPartial = fromPartial;
})(WsPeerLeave || (exports.WsPeerLeave = WsPeerLeave = {}));
function createBaseWsPeerUpdate() {
    return { fromAlias: 0, body: new Uint8Array(0), unreliable: false };
}
var WsPeerUpdate;
(function (WsPeerUpdate) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.fromAlias !== 0) {
            writer.uint32(8).uint32(message.fromAlias);
        }
        if (message.body.length !== 0) {
            writer.uint32(18).bytes(message.body);
        }
        if (message.unreliable === true) {
            writer.uint32(24).bool(message.unreliable);
        }
        return writer;
    }
    WsPeerUpdate.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWsPeerUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.fromAlias = reader.uint32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.body = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.unreliable = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    WsPeerUpdate.decode = decode;
    function fromJSON(object) {
        return {
            fromAlias: isSet(object.fromAlias) ? Number(object.fromAlias) : 0,
            body: isSet(object.body) ? bytesFromBase64(object.body) : new Uint8Array(0),
            unreliable: isSet(object.unreliable) ? Boolean(object.unreliable) : false,
        };
    }
    WsPeerUpdate.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.fromAlias !== undefined && (obj.fromAlias = Math.round(message.fromAlias));
        message.body !== undefined &&
            (obj.body = base64FromBytes(message.body !== undefined ? message.body : new Uint8Array(0)));
        message.unreliable !== undefined && (obj.unreliable = message.unreliable);
        return obj;
    }
    WsPeerUpdate.toJSON = toJSON;
    function create(base) {
        return WsPeerUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    WsPeerUpdate.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseWsPeerUpdate();
        message.fromAlias = (_a = object.fromAlias) !== null && _a !== void 0 ? _a : 0;
        message.body = (_b = object.body) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        message.unreliable = (_c = object.unreliable) !== null && _c !== void 0 ? _c : false;
        return message;
    }
    WsPeerUpdate.fromPartial = fromPartial;
})(WsPeerUpdate || (exports.WsPeerUpdate = WsPeerUpdate = {}));
function createBaseWsChallengeRequired() {
    return { challengeToSign: "", alreadyConnected: false };
}
var WsChallengeRequired;
(function (WsChallengeRequired) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.challengeToSign !== "") {
            writer.uint32(10).string(message.challengeToSign);
        }
        if (message.alreadyConnected === true) {
            writer.uint32(16).bool(message.alreadyConnected);
        }
        return writer;
    }
    WsChallengeRequired.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWsChallengeRequired();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.challengeToSign = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.alreadyConnected = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    WsChallengeRequired.decode = decode;
    function fromJSON(object) {
        return {
            challengeToSign: isSet(object.challengeToSign) ? String(object.challengeToSign) : "",
            alreadyConnected: isSet(object.alreadyConnected) ? Boolean(object.alreadyConnected) : false,
        };
    }
    WsChallengeRequired.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.challengeToSign !== undefined && (obj.challengeToSign = message.challengeToSign);
        message.alreadyConnected !== undefined && (obj.alreadyConnected = message.alreadyConnected);
        return obj;
    }
    WsChallengeRequired.toJSON = toJSON;
    function create(base) {
        return WsChallengeRequired.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    WsChallengeRequired.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseWsChallengeRequired();
        message.challengeToSign = (_a = object.challengeToSign) !== null && _a !== void 0 ? _a : "";
        message.alreadyConnected = (_b = object.alreadyConnected) !== null && _b !== void 0 ? _b : false;
        return message;
    }
    WsChallengeRequired.fromPartial = fromPartial;
})(WsChallengeRequired || (exports.WsChallengeRequired = WsChallengeRequired = {}));
function createBaseWsSignedChallenge() {
    return { authChainJson: "" };
}
var WsSignedChallenge;
(function (WsSignedChallenge) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authChainJson !== "") {
            writer.uint32(10).string(message.authChainJson);
        }
        return writer;
    }
    WsSignedChallenge.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWsSignedChallenge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authChainJson = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    WsSignedChallenge.decode = decode;
    function fromJSON(object) {
        return { authChainJson: isSet(object.authChainJson) ? String(object.authChainJson) : "" };
    }
    WsSignedChallenge.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.authChainJson !== undefined && (obj.authChainJson = message.authChainJson);
        return obj;
    }
    WsSignedChallenge.toJSON = toJSON;
    function create(base) {
        return WsSignedChallenge.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    WsSignedChallenge.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseWsSignedChallenge();
        message.authChainJson = (_a = object.authChainJson) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    WsSignedChallenge.fromPartial = fromPartial;
})(WsSignedChallenge || (exports.WsSignedChallenge = WsSignedChallenge = {}));
function createBaseWsIdentification() {
    return { address: "" };
}
var WsIdentification;
(function (WsIdentification) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    }
    WsIdentification.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWsIdentification();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    WsIdentification.decode = decode;
    function fromJSON(object) {
        return { address: isSet(object.address) ? String(object.address) : "" };
    }
    WsIdentification.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        return obj;
    }
    WsIdentification.toJSON = toJSON;
    function create(base) {
        return WsIdentification.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    WsIdentification.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseWsIdentification();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    WsIdentification.fromPartial = fromPartial;
})(WsIdentification || (exports.WsIdentification = WsIdentification = {}));
function createBaseWsKicked() {
    return { reason: "" };
}
var WsKicked;
(function (WsKicked) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.reason !== "") {
            writer.uint32(10).string(message.reason);
        }
        return writer;
    }
    WsKicked.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWsKicked();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    WsKicked.decode = decode;
    function fromJSON(object) {
        return { reason: isSet(object.reason) ? String(object.reason) : "" };
    }
    WsKicked.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.reason !== undefined && (obj.reason = message.reason);
        return obj;
    }
    WsKicked.toJSON = toJSON;
    function create(base) {
        return WsKicked.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    WsKicked.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseWsKicked();
        message.reason = (_a = object.reason) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    WsKicked.fromPartial = fromPartial;
})(WsKicked || (exports.WsKicked = WsKicked = {}));
function createBaseWsPacket() {
    return { message: undefined };
}
var WsPacket;
(function (WsPacket) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.message) === null || _a === void 0 ? void 0 : _a.$case) {
            case "welcomeMessage":
                WsWelcome.encode(message.message.welcomeMessage, writer.uint32(10).fork()).ldelim();
                break;
            case "peerJoinMessage":
                WsPeerJoin.encode(message.message.peerJoinMessage, writer.uint32(18).fork()).ldelim();
                break;
            case "peerUpdateMessage":
                WsPeerUpdate.encode(message.message.peerUpdateMessage, writer.uint32(26).fork()).ldelim();
                break;
            case "challengeMessage":
                WsChallengeRequired.encode(message.message.challengeMessage, writer.uint32(34).fork()).ldelim();
                break;
            case "signedChallengeForServer":
                WsSignedChallenge.encode(message.message.signedChallengeForServer, writer.uint32(42).fork()).ldelim();
                break;
            case "peerLeaveMessage":
                WsPeerLeave.encode(message.message.peerLeaveMessage, writer.uint32(50).fork()).ldelim();
                break;
            case "peerIdentification":
                WsIdentification.encode(message.message.peerIdentification, writer.uint32(58).fork()).ldelim();
                break;
            case "peerKicked":
                WsKicked.encode(message.message.peerKicked, writer.uint32(66).fork()).ldelim();
                break;
        }
        return writer;
    }
    WsPacket.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWsPacket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = { $case: "welcomeMessage", welcomeMessage: WsWelcome.decode(reader, reader.uint32()) };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = { $case: "peerJoinMessage", peerJoinMessage: WsPeerJoin.decode(reader, reader.uint32()) };
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.message = {
                        $case: "peerUpdateMessage",
                        peerUpdateMessage: WsPeerUpdate.decode(reader, reader.uint32()),
                    };
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.message = {
                        $case: "challengeMessage",
                        challengeMessage: WsChallengeRequired.decode(reader, reader.uint32()),
                    };
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.message = {
                        $case: "signedChallengeForServer",
                        signedChallengeForServer: WsSignedChallenge.decode(reader, reader.uint32()),
                    };
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.message = {
                        $case: "peerLeaveMessage",
                        peerLeaveMessage: WsPeerLeave.decode(reader, reader.uint32()),
                    };
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.message = {
                        $case: "peerIdentification",
                        peerIdentification: WsIdentification.decode(reader, reader.uint32()),
                    };
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.message = { $case: "peerKicked", peerKicked: WsKicked.decode(reader, reader.uint32()) };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    WsPacket.decode = decode;
    function fromJSON(object) {
        return {
            message: isSet(object.welcomeMessage)
                ? { $case: "welcomeMessage", welcomeMessage: WsWelcome.fromJSON(object.welcomeMessage) }
                : isSet(object.peerJoinMessage)
                    ? { $case: "peerJoinMessage", peerJoinMessage: WsPeerJoin.fromJSON(object.peerJoinMessage) }
                    : isSet(object.peerUpdateMessage)
                        ? { $case: "peerUpdateMessage", peerUpdateMessage: WsPeerUpdate.fromJSON(object.peerUpdateMessage) }
                        : isSet(object.challengeMessage)
                            ? { $case: "challengeMessage", challengeMessage: WsChallengeRequired.fromJSON(object.challengeMessage) }
                            : isSet(object.signedChallengeForServer)
                                ? {
                                    $case: "signedChallengeForServer",
                                    signedChallengeForServer: WsSignedChallenge.fromJSON(object.signedChallengeForServer),
                                }
                                : isSet(object.peerLeaveMessage)
                                    ? { $case: "peerLeaveMessage", peerLeaveMessage: WsPeerLeave.fromJSON(object.peerLeaveMessage) }
                                    : isSet(object.peerIdentification)
                                        ? { $case: "peerIdentification", peerIdentification: WsIdentification.fromJSON(object.peerIdentification) }
                                        : isSet(object.peerKicked)
                                            ? { $case: "peerKicked", peerKicked: WsKicked.fromJSON(object.peerKicked) }
                                            : undefined,
        };
    }
    WsPacket.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
        const obj = {};
        ((_a = message.message) === null || _a === void 0 ? void 0 : _a.$case) === "welcomeMessage" &&
            (obj.welcomeMessage = ((_b = message.message) === null || _b === void 0 ? void 0 : _b.welcomeMessage)
                ? WsWelcome.toJSON((_c = message.message) === null || _c === void 0 ? void 0 : _c.welcomeMessage)
                : undefined);
        ((_d = message.message) === null || _d === void 0 ? void 0 : _d.$case) === "peerJoinMessage" &&
            (obj.peerJoinMessage = ((_e = message.message) === null || _e === void 0 ? void 0 : _e.peerJoinMessage)
                ? WsPeerJoin.toJSON((_f = message.message) === null || _f === void 0 ? void 0 : _f.peerJoinMessage)
                : undefined);
        ((_g = message.message) === null || _g === void 0 ? void 0 : _g.$case) === "peerUpdateMessage" &&
            (obj.peerUpdateMessage = ((_h = message.message) === null || _h === void 0 ? void 0 : _h.peerUpdateMessage)
                ? WsPeerUpdate.toJSON((_j = message.message) === null || _j === void 0 ? void 0 : _j.peerUpdateMessage)
                : undefined);
        ((_k = message.message) === null || _k === void 0 ? void 0 : _k.$case) === "challengeMessage" &&
            (obj.challengeMessage = ((_l = message.message) === null || _l === void 0 ? void 0 : _l.challengeMessage)
                ? WsChallengeRequired.toJSON((_m = message.message) === null || _m === void 0 ? void 0 : _m.challengeMessage)
                : undefined);
        ((_o = message.message) === null || _o === void 0 ? void 0 : _o.$case) === "signedChallengeForServer" &&
            (obj.signedChallengeForServer = ((_p = message.message) === null || _p === void 0 ? void 0 : _p.signedChallengeForServer)
                ? WsSignedChallenge.toJSON((_q = message.message) === null || _q === void 0 ? void 0 : _q.signedChallengeForServer)
                : undefined);
        ((_r = message.message) === null || _r === void 0 ? void 0 : _r.$case) === "peerLeaveMessage" &&
            (obj.peerLeaveMessage = ((_s = message.message) === null || _s === void 0 ? void 0 : _s.peerLeaveMessage)
                ? WsPeerLeave.toJSON((_t = message.message) === null || _t === void 0 ? void 0 : _t.peerLeaveMessage)
                : undefined);
        ((_u = message.message) === null || _u === void 0 ? void 0 : _u.$case) === "peerIdentification" &&
            (obj.peerIdentification = ((_v = message.message) === null || _v === void 0 ? void 0 : _v.peerIdentification)
                ? WsIdentification.toJSON((_w = message.message) === null || _w === void 0 ? void 0 : _w.peerIdentification)
                : undefined);
        ((_x = message.message) === null || _x === void 0 ? void 0 : _x.$case) === "peerKicked" &&
            (obj.peerKicked = ((_y = message.message) === null || _y === void 0 ? void 0 : _y.peerKicked) ? WsKicked.toJSON((_z = message.message) === null || _z === void 0 ? void 0 : _z.peerKicked) : undefined);
        return obj;
    }
    WsPacket.toJSON = toJSON;
    function create(base) {
        return WsPacket.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    WsPacket.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
        const message = createBaseWsPacket();
        if (((_a = object.message) === null || _a === void 0 ? void 0 : _a.$case) === "welcomeMessage" &&
            ((_b = object.message) === null || _b === void 0 ? void 0 : _b.welcomeMessage) !== undefined &&
            ((_c = object.message) === null || _c === void 0 ? void 0 : _c.welcomeMessage) !== null) {
            message.message = {
                $case: "welcomeMessage",
                welcomeMessage: WsWelcome.fromPartial(object.message.welcomeMessage),
            };
        }
        if (((_d = object.message) === null || _d === void 0 ? void 0 : _d.$case) === "peerJoinMessage" &&
            ((_e = object.message) === null || _e === void 0 ? void 0 : _e.peerJoinMessage) !== undefined &&
            ((_f = object.message) === null || _f === void 0 ? void 0 : _f.peerJoinMessage) !== null) {
            message.message = {
                $case: "peerJoinMessage",
                peerJoinMessage: WsPeerJoin.fromPartial(object.message.peerJoinMessage),
            };
        }
        if (((_g = object.message) === null || _g === void 0 ? void 0 : _g.$case) === "peerUpdateMessage" &&
            ((_h = object.message) === null || _h === void 0 ? void 0 : _h.peerUpdateMessage) !== undefined &&
            ((_j = object.message) === null || _j === void 0 ? void 0 : _j.peerUpdateMessage) !== null) {
            message.message = {
                $case: "peerUpdateMessage",
                peerUpdateMessage: WsPeerUpdate.fromPartial(object.message.peerUpdateMessage),
            };
        }
        if (((_k = object.message) === null || _k === void 0 ? void 0 : _k.$case) === "challengeMessage" &&
            ((_l = object.message) === null || _l === void 0 ? void 0 : _l.challengeMessage) !== undefined &&
            ((_m = object.message) === null || _m === void 0 ? void 0 : _m.challengeMessage) !== null) {
            message.message = {
                $case: "challengeMessage",
                challengeMessage: WsChallengeRequired.fromPartial(object.message.challengeMessage),
            };
        }
        if (((_o = object.message) === null || _o === void 0 ? void 0 : _o.$case) === "signedChallengeForServer" &&
            ((_p = object.message) === null || _p === void 0 ? void 0 : _p.signedChallengeForServer) !== undefined &&
            ((_q = object.message) === null || _q === void 0 ? void 0 : _q.signedChallengeForServer) !== null) {
            message.message = {
                $case: "signedChallengeForServer",
                signedChallengeForServer: WsSignedChallenge.fromPartial(object.message.signedChallengeForServer),
            };
        }
        if (((_r = object.message) === null || _r === void 0 ? void 0 : _r.$case) === "peerLeaveMessage" &&
            ((_s = object.message) === null || _s === void 0 ? void 0 : _s.peerLeaveMessage) !== undefined &&
            ((_t = object.message) === null || _t === void 0 ? void 0 : _t.peerLeaveMessage) !== null) {
            message.message = {
                $case: "peerLeaveMessage",
                peerLeaveMessage: WsPeerLeave.fromPartial(object.message.peerLeaveMessage),
            };
        }
        if (((_u = object.message) === null || _u === void 0 ? void 0 : _u.$case) === "peerIdentification" &&
            ((_v = object.message) === null || _v === void 0 ? void 0 : _v.peerIdentification) !== undefined &&
            ((_w = object.message) === null || _w === void 0 ? void 0 : _w.peerIdentification) !== null) {
            message.message = {
                $case: "peerIdentification",
                peerIdentification: WsIdentification.fromPartial(object.message.peerIdentification),
            };
        }
        if (((_x = object.message) === null || _x === void 0 ? void 0 : _x.$case) === "peerKicked" &&
            ((_y = object.message) === null || _y === void 0 ? void 0 : _y.peerKicked) !== undefined &&
            ((_z = object.message) === null || _z === void 0 ? void 0 : _z.peerKicked) !== null) {
            message.message = { $case: "peerKicked", peerKicked: WsKicked.fromPartial(object.message.peerKicked) };
        }
        return message;
    }
    WsPacket.fromPartial = fromPartial;
})(WsPacket || (exports.WsPacket = WsPacket = {}));
const tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(""));
    }
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=ws_comms.gen.js.map