"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserIdentityServiceDefinition = exports.GetUserPublicKeyResponse = exports.GetUserPublicKeyRequest = exports.GetUserDataResponse = exports.GetUserDataRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const user_data_gen_1 = require("../../common/sdk/user_data.gen");
exports.protobufPackage = "decentraland.kernel.apis";
function createBaseGetUserDataRequest() {
    return {};
}
var GetUserDataRequest;
(function (GetUserDataRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    GetUserDataRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserDataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetUserDataRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    GetUserDataRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    GetUserDataRequest.toJSON = toJSON;
    function create(base) {
        return GetUserDataRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetUserDataRequest.create = create;
    function fromPartial(_) {
        const message = createBaseGetUserDataRequest();
        return message;
    }
    GetUserDataRequest.fromPartial = fromPartial;
})(GetUserDataRequest || (exports.GetUserDataRequest = GetUserDataRequest = {}));
function createBaseGetUserDataResponse() {
    return { data: undefined };
}
var GetUserDataResponse;
(function (GetUserDataResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.data !== undefined) {
            user_data_gen_1.UserData.encode(message.data, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    GetUserDataResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserDataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data = user_data_gen_1.UserData.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetUserDataResponse.decode = decode;
    function fromJSON(object) {
        return { data: isSet(object.data) ? user_data_gen_1.UserData.fromJSON(object.data) : undefined };
    }
    GetUserDataResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.data !== undefined && (obj.data = message.data ? user_data_gen_1.UserData.toJSON(message.data) : undefined);
        return obj;
    }
    GetUserDataResponse.toJSON = toJSON;
    function create(base) {
        return GetUserDataResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetUserDataResponse.create = create;
    function fromPartial(object) {
        const message = createBaseGetUserDataResponse();
        message.data = (object.data !== undefined && object.data !== null) ? user_data_gen_1.UserData.fromPartial(object.data) : undefined;
        return message;
    }
    GetUserDataResponse.fromPartial = fromPartial;
})(GetUserDataResponse || (exports.GetUserDataResponse = GetUserDataResponse = {}));
function createBaseGetUserPublicKeyRequest() {
    return {};
}
var GetUserPublicKeyRequest;
(function (GetUserPublicKeyRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    GetUserPublicKeyRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserPublicKeyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetUserPublicKeyRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    GetUserPublicKeyRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    GetUserPublicKeyRequest.toJSON = toJSON;
    function create(base) {
        return GetUserPublicKeyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetUserPublicKeyRequest.create = create;
    function fromPartial(_) {
        const message = createBaseGetUserPublicKeyRequest();
        return message;
    }
    GetUserPublicKeyRequest.fromPartial = fromPartial;
})(GetUserPublicKeyRequest || (exports.GetUserPublicKeyRequest = GetUserPublicKeyRequest = {}));
function createBaseGetUserPublicKeyResponse() {
    return { address: undefined };
}
var GetUserPublicKeyResponse;
(function (GetUserPublicKeyResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== undefined) {
            writer.uint32(10).string(message.address);
        }
        return writer;
    }
    GetUserPublicKeyResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserPublicKeyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetUserPublicKeyResponse.decode = decode;
    function fromJSON(object) {
        return { address: isSet(object.address) ? String(object.address) : undefined };
    }
    GetUserPublicKeyResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        return obj;
    }
    GetUserPublicKeyResponse.toJSON = toJSON;
    function create(base) {
        return GetUserPublicKeyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetUserPublicKeyResponse.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseGetUserPublicKeyResponse();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : undefined;
        return message;
    }
    GetUserPublicKeyResponse.fromPartial = fromPartial;
})(GetUserPublicKeyResponse || (exports.GetUserPublicKeyResponse = GetUserPublicKeyResponse = {}));
exports.UserIdentityServiceDefinition = {
    name: "UserIdentityService",
    fullName: "decentraland.kernel.apis.UserIdentityService",
    methods: {
        /** @deprecated, only available for SDK6 compatibility. UseGetUserData */
        getUserPublicKey: {
            name: "GetUserPublicKey",
            requestType: GetUserPublicKeyRequest,
            requestStream: false,
            responseType: GetUserPublicKeyResponse,
            responseStream: false,
            options: {},
        },
        getUserData: {
            name: "GetUserData",
            requestType: GetUserDataRequest,
            requestStream: false,
            responseType: GetUserDataResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=user_identity.gen.js.map