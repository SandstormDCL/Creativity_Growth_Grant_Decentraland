"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IslandStatusMessage = exports.IslandData = exports.ClientPacket = exports.Heartbeat = exports.SignedChallengeMessage = exports.ChallengeRequestMessage = exports.ServerPacket = exports.KickedMessage = exports.JoinIslandMessage = exports.LeftIslandMessage = exports.IslandChangedMessage_PeersEntry = exports.IslandChangedMessage = exports.WelcomeMessage = exports.ChallengeResponseMessage = exports.KickedReason = exports.protobufPackage = void 0;
exports.kickedReasonFromJSON = kickedReasonFromJSON;
exports.kickedReasonToJSON = kickedReasonToJSON;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const vectors_gen_1 = require("../../../common/vectors.gen");
exports.protobufPackage = "decentraland.kernel.comms.v3";
var KickedReason;
(function (KickedReason) {
    KickedReason[KickedReason["KR_NEW_SESSION"] = 0] = "KR_NEW_SESSION";
    KickedReason[KickedReason["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(KickedReason || (exports.KickedReason = KickedReason = {}));
function kickedReasonFromJSON(object) {
    switch (object) {
        case 0:
        case "KR_NEW_SESSION":
            return KickedReason.KR_NEW_SESSION;
        case -1:
        case "UNRECOGNIZED":
        default:
            return KickedReason.UNRECOGNIZED;
    }
}
function kickedReasonToJSON(object) {
    switch (object) {
        case KickedReason.KR_NEW_SESSION:
            return "KR_NEW_SESSION";
        case KickedReason.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseChallengeResponseMessage() {
    return { challengeToSign: "", alreadyConnected: false };
}
var ChallengeResponseMessage;
(function (ChallengeResponseMessage) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.challengeToSign !== "") {
            writer.uint32(10).string(message.challengeToSign);
        }
        if (message.alreadyConnected === true) {
            writer.uint32(16).bool(message.alreadyConnected);
        }
        return writer;
    }
    ChallengeResponseMessage.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChallengeResponseMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.challengeToSign = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.alreadyConnected = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ChallengeResponseMessage.decode = decode;
    function fromJSON(object) {
        return {
            challengeToSign: isSet(object.challengeToSign) ? String(object.challengeToSign) : "",
            alreadyConnected: isSet(object.alreadyConnected) ? Boolean(object.alreadyConnected) : false,
        };
    }
    ChallengeResponseMessage.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.challengeToSign !== undefined && (obj.challengeToSign = message.challengeToSign);
        message.alreadyConnected !== undefined && (obj.alreadyConnected = message.alreadyConnected);
        return obj;
    }
    ChallengeResponseMessage.toJSON = toJSON;
    function create(base) {
        return ChallengeResponseMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ChallengeResponseMessage.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseChallengeResponseMessage();
        message.challengeToSign = (_a = object.challengeToSign) !== null && _a !== void 0 ? _a : "";
        message.alreadyConnected = (_b = object.alreadyConnected) !== null && _b !== void 0 ? _b : false;
        return message;
    }
    ChallengeResponseMessage.fromPartial = fromPartial;
})(ChallengeResponseMessage || (exports.ChallengeResponseMessage = ChallengeResponseMessage = {}));
function createBaseWelcomeMessage() {
    return { peerId: "" };
}
var WelcomeMessage;
(function (WelcomeMessage) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.peerId !== "") {
            writer.uint32(10).string(message.peerId);
        }
        return writer;
    }
    WelcomeMessage.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWelcomeMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.peerId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    WelcomeMessage.decode = decode;
    function fromJSON(object) {
        return { peerId: isSet(object.peerId) ? String(object.peerId) : "" };
    }
    WelcomeMessage.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.peerId !== undefined && (obj.peerId = message.peerId);
        return obj;
    }
    WelcomeMessage.toJSON = toJSON;
    function create(base) {
        return WelcomeMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    WelcomeMessage.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseWelcomeMessage();
        message.peerId = (_a = object.peerId) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    WelcomeMessage.fromPartial = fromPartial;
})(WelcomeMessage || (exports.WelcomeMessage = WelcomeMessage = {}));
function createBaseIslandChangedMessage() {
    return { islandId: "", connStr: "", fromIslandId: undefined, peers: {} };
}
var IslandChangedMessage;
(function (IslandChangedMessage) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.islandId !== "") {
            writer.uint32(10).string(message.islandId);
        }
        if (message.connStr !== "") {
            writer.uint32(18).string(message.connStr);
        }
        if (message.fromIslandId !== undefined) {
            writer.uint32(26).string(message.fromIslandId);
        }
        Object.entries(message.peers).forEach(([key, value]) => {
            IslandChangedMessage_PeersEntry.encode({ key: key, value }, writer.uint32(34).fork()).ldelim();
        });
        return writer;
    }
    IslandChangedMessage.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIslandChangedMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.islandId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.connStr = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.fromIslandId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    const entry4 = IslandChangedMessage_PeersEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.peers[entry4.key] = entry4.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    IslandChangedMessage.decode = decode;
    function fromJSON(object) {
        return {
            islandId: isSet(object.islandId) ? String(object.islandId) : "",
            connStr: isSet(object.connStr) ? String(object.connStr) : "",
            fromIslandId: isSet(object.fromIslandId) ? String(object.fromIslandId) : undefined,
            peers: isObject(object.peers)
                ? Object.entries(object.peers).reduce((acc, [key, value]) => {
                    acc[key] = vectors_gen_1.Position.fromJSON(value);
                    return acc;
                }, {})
                : {},
        };
    }
    IslandChangedMessage.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.islandId !== undefined && (obj.islandId = message.islandId);
        message.connStr !== undefined && (obj.connStr = message.connStr);
        message.fromIslandId !== undefined && (obj.fromIslandId = message.fromIslandId);
        obj.peers = {};
        if (message.peers) {
            Object.entries(message.peers).forEach(([k, v]) => {
                obj.peers[k] = vectors_gen_1.Position.toJSON(v);
            });
        }
        return obj;
    }
    IslandChangedMessage.toJSON = toJSON;
    function create(base) {
        return IslandChangedMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    IslandChangedMessage.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseIslandChangedMessage();
        message.islandId = (_a = object.islandId) !== null && _a !== void 0 ? _a : "";
        message.connStr = (_b = object.connStr) !== null && _b !== void 0 ? _b : "";
        message.fromIslandId = (_c = object.fromIslandId) !== null && _c !== void 0 ? _c : undefined;
        message.peers = Object.entries((_d = object.peers) !== null && _d !== void 0 ? _d : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = vectors_gen_1.Position.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    }
    IslandChangedMessage.fromPartial = fromPartial;
})(IslandChangedMessage || (exports.IslandChangedMessage = IslandChangedMessage = {}));
function createBaseIslandChangedMessage_PeersEntry() {
    return { key: "", value: undefined };
}
var IslandChangedMessage_PeersEntry;
(function (IslandChangedMessage_PeersEntry) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            vectors_gen_1.Position.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    IslandChangedMessage_PeersEntry.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIslandChangedMessage_PeersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = vectors_gen_1.Position.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    IslandChangedMessage_PeersEntry.decode = decode;
    function fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? vectors_gen_1.Position.fromJSON(object.value) : undefined,
        };
    }
    IslandChangedMessage_PeersEntry.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value ? vectors_gen_1.Position.toJSON(message.value) : undefined);
        return obj;
    }
    IslandChangedMessage_PeersEntry.toJSON = toJSON;
    function create(base) {
        return IslandChangedMessage_PeersEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    IslandChangedMessage_PeersEntry.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseIslandChangedMessage_PeersEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? vectors_gen_1.Position.fromPartial(object.value)
            : undefined;
        return message;
    }
    IslandChangedMessage_PeersEntry.fromPartial = fromPartial;
})(IslandChangedMessage_PeersEntry || (exports.IslandChangedMessage_PeersEntry = IslandChangedMessage_PeersEntry = {}));
function createBaseLeftIslandMessage() {
    return { islandId: "", peerId: "" };
}
var LeftIslandMessage;
(function (LeftIslandMessage) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.islandId !== "") {
            writer.uint32(10).string(message.islandId);
        }
        if (message.peerId !== "") {
            writer.uint32(18).string(message.peerId);
        }
        return writer;
    }
    LeftIslandMessage.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLeftIslandMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.islandId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.peerId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    LeftIslandMessage.decode = decode;
    function fromJSON(object) {
        return {
            islandId: isSet(object.islandId) ? String(object.islandId) : "",
            peerId: isSet(object.peerId) ? String(object.peerId) : "",
        };
    }
    LeftIslandMessage.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.islandId !== undefined && (obj.islandId = message.islandId);
        message.peerId !== undefined && (obj.peerId = message.peerId);
        return obj;
    }
    LeftIslandMessage.toJSON = toJSON;
    function create(base) {
        return LeftIslandMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    LeftIslandMessage.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseLeftIslandMessage();
        message.islandId = (_a = object.islandId) !== null && _a !== void 0 ? _a : "";
        message.peerId = (_b = object.peerId) !== null && _b !== void 0 ? _b : "";
        return message;
    }
    LeftIslandMessage.fromPartial = fromPartial;
})(LeftIslandMessage || (exports.LeftIslandMessage = LeftIslandMessage = {}));
function createBaseJoinIslandMessage() {
    return { islandId: "", peerId: "" };
}
var JoinIslandMessage;
(function (JoinIslandMessage) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.islandId !== "") {
            writer.uint32(10).string(message.islandId);
        }
        if (message.peerId !== "") {
            writer.uint32(18).string(message.peerId);
        }
        return writer;
    }
    JoinIslandMessage.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseJoinIslandMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.islandId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.peerId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    JoinIslandMessage.decode = decode;
    function fromJSON(object) {
        return {
            islandId: isSet(object.islandId) ? String(object.islandId) : "",
            peerId: isSet(object.peerId) ? String(object.peerId) : "",
        };
    }
    JoinIslandMessage.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.islandId !== undefined && (obj.islandId = message.islandId);
        message.peerId !== undefined && (obj.peerId = message.peerId);
        return obj;
    }
    JoinIslandMessage.toJSON = toJSON;
    function create(base) {
        return JoinIslandMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    JoinIslandMessage.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseJoinIslandMessage();
        message.islandId = (_a = object.islandId) !== null && _a !== void 0 ? _a : "";
        message.peerId = (_b = object.peerId) !== null && _b !== void 0 ? _b : "";
        return message;
    }
    JoinIslandMessage.fromPartial = fromPartial;
})(JoinIslandMessage || (exports.JoinIslandMessage = JoinIslandMessage = {}));
function createBaseKickedMessage() {
    return { reason: 0 };
}
var KickedMessage;
(function (KickedMessage) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.reason !== 0) {
            writer.uint32(8).int32(message.reason);
        }
        return writer;
    }
    KickedMessage.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKickedMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.reason = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    KickedMessage.decode = decode;
    function fromJSON(object) {
        return { reason: isSet(object.reason) ? kickedReasonFromJSON(object.reason) : 0 };
    }
    KickedMessage.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.reason !== undefined && (obj.reason = kickedReasonToJSON(message.reason));
        return obj;
    }
    KickedMessage.toJSON = toJSON;
    function create(base) {
        return KickedMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    KickedMessage.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseKickedMessage();
        message.reason = (_a = object.reason) !== null && _a !== void 0 ? _a : 0;
        return message;
    }
    KickedMessage.fromPartial = fromPartial;
})(KickedMessage || (exports.KickedMessage = KickedMessage = {}));
function createBaseServerPacket() {
    return { message: undefined };
}
var ServerPacket;
(function (ServerPacket) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.message) === null || _a === void 0 ? void 0 : _a.$case) {
            case "challengeResponse":
                ChallengeResponseMessage.encode(message.message.challengeResponse, writer.uint32(10).fork()).ldelim();
                break;
            case "welcome":
                WelcomeMessage.encode(message.message.welcome, writer.uint32(18).fork()).ldelim();
                break;
            case "islandChanged":
                IslandChangedMessage.encode(message.message.islandChanged, writer.uint32(26).fork()).ldelim();
                break;
            case "leftIsland":
                LeftIslandMessage.encode(message.message.leftIsland, writer.uint32(34).fork()).ldelim();
                break;
            case "joinIsland":
                JoinIslandMessage.encode(message.message.joinIsland, writer.uint32(42).fork()).ldelim();
                break;
            case "kicked":
                KickedMessage.encode(message.message.kicked, writer.uint32(50).fork()).ldelim();
                break;
        }
        return writer;
    }
    ServerPacket.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerPacket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = {
                        $case: "challengeResponse",
                        challengeResponse: ChallengeResponseMessage.decode(reader, reader.uint32()),
                    };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = { $case: "welcome", welcome: WelcomeMessage.decode(reader, reader.uint32()) };
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.message = {
                        $case: "islandChanged",
                        islandChanged: IslandChangedMessage.decode(reader, reader.uint32()),
                    };
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.message = { $case: "leftIsland", leftIsland: LeftIslandMessage.decode(reader, reader.uint32()) };
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.message = { $case: "joinIsland", joinIsland: JoinIslandMessage.decode(reader, reader.uint32()) };
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.message = { $case: "kicked", kicked: KickedMessage.decode(reader, reader.uint32()) };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ServerPacket.decode = decode;
    function fromJSON(object) {
        return {
            message: isSet(object.challengeResponse)
                ? { $case: "challengeResponse", challengeResponse: ChallengeResponseMessage.fromJSON(object.challengeResponse) }
                : isSet(object.welcome)
                    ? { $case: "welcome", welcome: WelcomeMessage.fromJSON(object.welcome) }
                    : isSet(object.islandChanged)
                        ? { $case: "islandChanged", islandChanged: IslandChangedMessage.fromJSON(object.islandChanged) }
                        : isSet(object.leftIsland)
                            ? { $case: "leftIsland", leftIsland: LeftIslandMessage.fromJSON(object.leftIsland) }
                            : isSet(object.joinIsland)
                                ? { $case: "joinIsland", joinIsland: JoinIslandMessage.fromJSON(object.joinIsland) }
                                : isSet(object.kicked)
                                    ? { $case: "kicked", kicked: KickedMessage.fromJSON(object.kicked) }
                                    : undefined,
        };
    }
    ServerPacket.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        const obj = {};
        ((_a = message.message) === null || _a === void 0 ? void 0 : _a.$case) === "challengeResponse" &&
            (obj.challengeResponse = ((_b = message.message) === null || _b === void 0 ? void 0 : _b.challengeResponse)
                ? ChallengeResponseMessage.toJSON((_c = message.message) === null || _c === void 0 ? void 0 : _c.challengeResponse)
                : undefined);
        ((_d = message.message) === null || _d === void 0 ? void 0 : _d.$case) === "welcome" &&
            (obj.welcome = ((_e = message.message) === null || _e === void 0 ? void 0 : _e.welcome) ? WelcomeMessage.toJSON((_f = message.message) === null || _f === void 0 ? void 0 : _f.welcome) : undefined);
        ((_g = message.message) === null || _g === void 0 ? void 0 : _g.$case) === "islandChanged" &&
            (obj.islandChanged = ((_h = message.message) === null || _h === void 0 ? void 0 : _h.islandChanged)
                ? IslandChangedMessage.toJSON((_j = message.message) === null || _j === void 0 ? void 0 : _j.islandChanged)
                : undefined);
        ((_k = message.message) === null || _k === void 0 ? void 0 : _k.$case) === "leftIsland" &&
            (obj.leftIsland = ((_l = message.message) === null || _l === void 0 ? void 0 : _l.leftIsland)
                ? LeftIslandMessage.toJSON((_m = message.message) === null || _m === void 0 ? void 0 : _m.leftIsland)
                : undefined);
        ((_o = message.message) === null || _o === void 0 ? void 0 : _o.$case) === "joinIsland" &&
            (obj.joinIsland = ((_p = message.message) === null || _p === void 0 ? void 0 : _p.joinIsland)
                ? JoinIslandMessage.toJSON((_q = message.message) === null || _q === void 0 ? void 0 : _q.joinIsland)
                : undefined);
        ((_r = message.message) === null || _r === void 0 ? void 0 : _r.$case) === "kicked" &&
            (obj.kicked = ((_s = message.message) === null || _s === void 0 ? void 0 : _s.kicked) ? KickedMessage.toJSON((_t = message.message) === null || _t === void 0 ? void 0 : _t.kicked) : undefined);
        return obj;
    }
    ServerPacket.toJSON = toJSON;
    function create(base) {
        return ServerPacket.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ServerPacket.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        const message = createBaseServerPacket();
        if (((_a = object.message) === null || _a === void 0 ? void 0 : _a.$case) === "challengeResponse" &&
            ((_b = object.message) === null || _b === void 0 ? void 0 : _b.challengeResponse) !== undefined &&
            ((_c = object.message) === null || _c === void 0 ? void 0 : _c.challengeResponse) !== null) {
            message.message = {
                $case: "challengeResponse",
                challengeResponse: ChallengeResponseMessage.fromPartial(object.message.challengeResponse),
            };
        }
        if (((_d = object.message) === null || _d === void 0 ? void 0 : _d.$case) === "welcome" && ((_e = object.message) === null || _e === void 0 ? void 0 : _e.welcome) !== undefined && ((_f = object.message) === null || _f === void 0 ? void 0 : _f.welcome) !== null) {
            message.message = { $case: "welcome", welcome: WelcomeMessage.fromPartial(object.message.welcome) };
        }
        if (((_g = object.message) === null || _g === void 0 ? void 0 : _g.$case) === "islandChanged" &&
            ((_h = object.message) === null || _h === void 0 ? void 0 : _h.islandChanged) !== undefined &&
            ((_j = object.message) === null || _j === void 0 ? void 0 : _j.islandChanged) !== null) {
            message.message = {
                $case: "islandChanged",
                islandChanged: IslandChangedMessage.fromPartial(object.message.islandChanged),
            };
        }
        if (((_k = object.message) === null || _k === void 0 ? void 0 : _k.$case) === "leftIsland" &&
            ((_l = object.message) === null || _l === void 0 ? void 0 : _l.leftIsland) !== undefined &&
            ((_m = object.message) === null || _m === void 0 ? void 0 : _m.leftIsland) !== null) {
            message.message = { $case: "leftIsland", leftIsland: LeftIslandMessage.fromPartial(object.message.leftIsland) };
        }
        if (((_o = object.message) === null || _o === void 0 ? void 0 : _o.$case) === "joinIsland" &&
            ((_p = object.message) === null || _p === void 0 ? void 0 : _p.joinIsland) !== undefined &&
            ((_q = object.message) === null || _q === void 0 ? void 0 : _q.joinIsland) !== null) {
            message.message = { $case: "joinIsland", joinIsland: JoinIslandMessage.fromPartial(object.message.joinIsland) };
        }
        if (((_r = object.message) === null || _r === void 0 ? void 0 : _r.$case) === "kicked" && ((_s = object.message) === null || _s === void 0 ? void 0 : _s.kicked) !== undefined && ((_t = object.message) === null || _t === void 0 ? void 0 : _t.kicked) !== null) {
            message.message = { $case: "kicked", kicked: KickedMessage.fromPartial(object.message.kicked) };
        }
        return message;
    }
    ServerPacket.fromPartial = fromPartial;
})(ServerPacket || (exports.ServerPacket = ServerPacket = {}));
function createBaseChallengeRequestMessage() {
    return { address: "" };
}
var ChallengeRequestMessage;
(function (ChallengeRequestMessage) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    }
    ChallengeRequestMessage.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChallengeRequestMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ChallengeRequestMessage.decode = decode;
    function fromJSON(object) {
        return { address: isSet(object.address) ? String(object.address) : "" };
    }
    ChallengeRequestMessage.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        return obj;
    }
    ChallengeRequestMessage.toJSON = toJSON;
    function create(base) {
        return ChallengeRequestMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ChallengeRequestMessage.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseChallengeRequestMessage();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    ChallengeRequestMessage.fromPartial = fromPartial;
})(ChallengeRequestMessage || (exports.ChallengeRequestMessage = ChallengeRequestMessage = {}));
function createBaseSignedChallengeMessage() {
    return { authChainJson: "" };
}
var SignedChallengeMessage;
(function (SignedChallengeMessage) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authChainJson !== "") {
            writer.uint32(10).string(message.authChainJson);
        }
        return writer;
    }
    SignedChallengeMessage.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSignedChallengeMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authChainJson = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    SignedChallengeMessage.decode = decode;
    function fromJSON(object) {
        return { authChainJson: isSet(object.authChainJson) ? String(object.authChainJson) : "" };
    }
    SignedChallengeMessage.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.authChainJson !== undefined && (obj.authChainJson = message.authChainJson);
        return obj;
    }
    SignedChallengeMessage.toJSON = toJSON;
    function create(base) {
        return SignedChallengeMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    SignedChallengeMessage.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseSignedChallengeMessage();
        message.authChainJson = (_a = object.authChainJson) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    SignedChallengeMessage.fromPartial = fromPartial;
})(SignedChallengeMessage || (exports.SignedChallengeMessage = SignedChallengeMessage = {}));
function createBaseHeartbeat() {
    return { position: undefined, desiredRoom: undefined };
}
var Heartbeat;
(function (Heartbeat) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.position !== undefined) {
            vectors_gen_1.Position.encode(message.position, writer.uint32(10).fork()).ldelim();
        }
        if (message.desiredRoom !== undefined) {
            writer.uint32(18).string(message.desiredRoom);
        }
        return writer;
    }
    Heartbeat.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHeartbeat();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.position = vectors_gen_1.Position.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.desiredRoom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Heartbeat.decode = decode;
    function fromJSON(object) {
        return {
            position: isSet(object.position) ? vectors_gen_1.Position.fromJSON(object.position) : undefined,
            desiredRoom: isSet(object.desiredRoom) ? String(object.desiredRoom) : undefined,
        };
    }
    Heartbeat.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.position !== undefined && (obj.position = message.position ? vectors_gen_1.Position.toJSON(message.position) : undefined);
        message.desiredRoom !== undefined && (obj.desiredRoom = message.desiredRoom);
        return obj;
    }
    Heartbeat.toJSON = toJSON;
    function create(base) {
        return Heartbeat.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Heartbeat.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseHeartbeat();
        message.position = (object.position !== undefined && object.position !== null)
            ? vectors_gen_1.Position.fromPartial(object.position)
            : undefined;
        message.desiredRoom = (_a = object.desiredRoom) !== null && _a !== void 0 ? _a : undefined;
        return message;
    }
    Heartbeat.fromPartial = fromPartial;
})(Heartbeat || (exports.Heartbeat = Heartbeat = {}));
function createBaseClientPacket() {
    return { message: undefined };
}
var ClientPacket;
(function (ClientPacket) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.message) === null || _a === void 0 ? void 0 : _a.$case) {
            case "challengeRequest":
                ChallengeRequestMessage.encode(message.message.challengeRequest, writer.uint32(10).fork()).ldelim();
                break;
            case "signedChallenge":
                SignedChallengeMessage.encode(message.message.signedChallenge, writer.uint32(18).fork()).ldelim();
                break;
            case "heartbeat":
                Heartbeat.encode(message.message.heartbeat, writer.uint32(26).fork()).ldelim();
                break;
        }
        return writer;
    }
    ClientPacket.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientPacket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = {
                        $case: "challengeRequest",
                        challengeRequest: ChallengeRequestMessage.decode(reader, reader.uint32()),
                    };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = {
                        $case: "signedChallenge",
                        signedChallenge: SignedChallengeMessage.decode(reader, reader.uint32()),
                    };
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.message = { $case: "heartbeat", heartbeat: Heartbeat.decode(reader, reader.uint32()) };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ClientPacket.decode = decode;
    function fromJSON(object) {
        return {
            message: isSet(object.challengeRequest)
                ? { $case: "challengeRequest", challengeRequest: ChallengeRequestMessage.fromJSON(object.challengeRequest) }
                : isSet(object.signedChallenge)
                    ? { $case: "signedChallenge", signedChallenge: SignedChallengeMessage.fromJSON(object.signedChallenge) }
                    : isSet(object.heartbeat)
                        ? { $case: "heartbeat", heartbeat: Heartbeat.fromJSON(object.heartbeat) }
                        : undefined,
        };
    }
    ClientPacket.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const obj = {};
        ((_a = message.message) === null || _a === void 0 ? void 0 : _a.$case) === "challengeRequest" &&
            (obj.challengeRequest = ((_b = message.message) === null || _b === void 0 ? void 0 : _b.challengeRequest)
                ? ChallengeRequestMessage.toJSON((_c = message.message) === null || _c === void 0 ? void 0 : _c.challengeRequest)
                : undefined);
        ((_d = message.message) === null || _d === void 0 ? void 0 : _d.$case) === "signedChallenge" &&
            (obj.signedChallenge = ((_e = message.message) === null || _e === void 0 ? void 0 : _e.signedChallenge)
                ? SignedChallengeMessage.toJSON((_f = message.message) === null || _f === void 0 ? void 0 : _f.signedChallenge)
                : undefined);
        ((_g = message.message) === null || _g === void 0 ? void 0 : _g.$case) === "heartbeat" &&
            (obj.heartbeat = ((_h = message.message) === null || _h === void 0 ? void 0 : _h.heartbeat) ? Heartbeat.toJSON((_j = message.message) === null || _j === void 0 ? void 0 : _j.heartbeat) : undefined);
        return obj;
    }
    ClientPacket.toJSON = toJSON;
    function create(base) {
        return ClientPacket.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ClientPacket.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseClientPacket();
        if (((_a = object.message) === null || _a === void 0 ? void 0 : _a.$case) === "challengeRequest" &&
            ((_b = object.message) === null || _b === void 0 ? void 0 : _b.challengeRequest) !== undefined &&
            ((_c = object.message) === null || _c === void 0 ? void 0 : _c.challengeRequest) !== null) {
            message.message = {
                $case: "challengeRequest",
                challengeRequest: ChallengeRequestMessage.fromPartial(object.message.challengeRequest),
            };
        }
        if (((_d = object.message) === null || _d === void 0 ? void 0 : _d.$case) === "signedChallenge" &&
            ((_e = object.message) === null || _e === void 0 ? void 0 : _e.signedChallenge) !== undefined &&
            ((_f = object.message) === null || _f === void 0 ? void 0 : _f.signedChallenge) !== null) {
            message.message = {
                $case: "signedChallenge",
                signedChallenge: SignedChallengeMessage.fromPartial(object.message.signedChallenge),
            };
        }
        if (((_g = object.message) === null || _g === void 0 ? void 0 : _g.$case) === "heartbeat" &&
            ((_h = object.message) === null || _h === void 0 ? void 0 : _h.heartbeat) !== undefined &&
            ((_j = object.message) === null || _j === void 0 ? void 0 : _j.heartbeat) !== null) {
            message.message = { $case: "heartbeat", heartbeat: Heartbeat.fromPartial(object.message.heartbeat) };
        }
        return message;
    }
    ClientPacket.fromPartial = fromPartial;
})(ClientPacket || (exports.ClientPacket = ClientPacket = {}));
function createBaseIslandData() {
    return { id: "", peers: [], maxPeers: 0, center: undefined, radius: 0 };
}
var IslandData;
(function (IslandData) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        for (const v of message.peers) {
            writer.uint32(18).string(v);
        }
        if (message.maxPeers !== 0) {
            writer.uint32(24).uint32(message.maxPeers);
        }
        if (message.center !== undefined) {
            vectors_gen_1.Position.encode(message.center, writer.uint32(34).fork()).ldelim();
        }
        if (message.radius !== 0) {
            writer.uint32(41).double(message.radius);
        }
        return writer;
    }
    IslandData.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIslandData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.peers.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.maxPeers = reader.uint32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.center = vectors_gen_1.Position.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 41) {
                        break;
                    }
                    message.radius = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    IslandData.decode = decode;
    function fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            peers: Array.isArray(object === null || object === void 0 ? void 0 : object.peers) ? object.peers.map((e) => String(e)) : [],
            maxPeers: isSet(object.maxPeers) ? Number(object.maxPeers) : 0,
            center: isSet(object.center) ? vectors_gen_1.Position.fromJSON(object.center) : undefined,
            radius: isSet(object.radius) ? Number(object.radius) : 0,
        };
    }
    IslandData.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        if (message.peers) {
            obj.peers = message.peers.map((e) => e);
        }
        else {
            obj.peers = [];
        }
        message.maxPeers !== undefined && (obj.maxPeers = Math.round(message.maxPeers));
        message.center !== undefined && (obj.center = message.center ? vectors_gen_1.Position.toJSON(message.center) : undefined);
        message.radius !== undefined && (obj.radius = message.radius);
        return obj;
    }
    IslandData.toJSON = toJSON;
    function create(base) {
        return IslandData.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    IslandData.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseIslandData();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.peers = ((_b = object.peers) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.maxPeers = (_c = object.maxPeers) !== null && _c !== void 0 ? _c : 0;
        message.center = (object.center !== undefined && object.center !== null)
            ? vectors_gen_1.Position.fromPartial(object.center)
            : undefined;
        message.radius = (_d = object.radius) !== null && _d !== void 0 ? _d : 0;
        return message;
    }
    IslandData.fromPartial = fromPartial;
})(IslandData || (exports.IslandData = IslandData = {}));
function createBaseIslandStatusMessage() {
    return { data: [] };
}
var IslandStatusMessage;
(function (IslandStatusMessage) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.data) {
            IslandData.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    IslandStatusMessage.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIslandStatusMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data.push(IslandData.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    IslandStatusMessage.decode = decode;
    function fromJSON(object) {
        return { data: Array.isArray(object === null || object === void 0 ? void 0 : object.data) ? object.data.map((e) => IslandData.fromJSON(e)) : [] };
    }
    IslandStatusMessage.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.data) {
            obj.data = message.data.map((e) => e ? IslandData.toJSON(e) : undefined);
        }
        else {
            obj.data = [];
        }
        return obj;
    }
    IslandStatusMessage.toJSON = toJSON;
    function create(base) {
        return IslandStatusMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    IslandStatusMessage.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseIslandStatusMessage();
        message.data = ((_a = object.data) === null || _a === void 0 ? void 0 : _a.map((e) => IslandData.fromPartial(e))) || [];
        return message;
    }
    IslandStatusMessage.fromPartial = fromPartial;
})(IslandStatusMessage || (exports.IslandStatusMessage = IslandStatusMessage = {}));
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=archipelago.gen.js.map