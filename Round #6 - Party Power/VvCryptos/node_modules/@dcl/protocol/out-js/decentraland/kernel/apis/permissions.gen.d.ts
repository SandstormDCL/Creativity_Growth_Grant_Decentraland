import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.kernel.apis";
export declare enum PermissionItem {
    PI_ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE = 0,
    PI_ALLOW_TO_TRIGGER_AVATAR_EMOTE = 1,
    PI_USE_WEB3_API = 2,
    PI_USE_WEBSOCKET = 3,
    PI_USE_FETCH = 4,
    PI_ALLOW_MEDIA_HOSTNAMES = 5,
    PI_OPEN_EXTERNAL_LINK = 6,
    UNRECOGNIZED = -1
}
export declare function permissionItemFromJSON(object: any): PermissionItem;
export declare function permissionItemToJSON(object: PermissionItem): string;
export interface PermissionResponse {
    hasPermission: boolean;
}
export interface HasPermissionRequest {
    permission: PermissionItem;
}
export interface HasManyPermissionRequest {
    permissions: PermissionItem[];
}
export interface HasManyPermissionResponse {
    hasManyPermission: boolean[];
}
export declare namespace PermissionResponse {
    function encode(message: PermissionResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PermissionResponse;
    function fromJSON(object: any): PermissionResponse;
    function toJSON(message: PermissionResponse): unknown;
    function create<I extends Exact<DeepPartial<PermissionResponse>, I>>(base?: I): PermissionResponse;
    function fromPartial<I extends Exact<DeepPartial<PermissionResponse>, I>>(object: I): PermissionResponse;
}
export declare namespace HasPermissionRequest {
    function encode(message: HasPermissionRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): HasPermissionRequest;
    function fromJSON(object: any): HasPermissionRequest;
    function toJSON(message: HasPermissionRequest): unknown;
    function create<I extends Exact<DeepPartial<HasPermissionRequest>, I>>(base?: I): HasPermissionRequest;
    function fromPartial<I extends Exact<DeepPartial<HasPermissionRequest>, I>>(object: I): HasPermissionRequest;
}
export declare namespace HasManyPermissionRequest {
    function encode(message: HasManyPermissionRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): HasManyPermissionRequest;
    function fromJSON(object: any): HasManyPermissionRequest;
    function toJSON(message: HasManyPermissionRequest): unknown;
    function create<I extends Exact<DeepPartial<HasManyPermissionRequest>, I>>(base?: I): HasManyPermissionRequest;
    function fromPartial<I extends Exact<DeepPartial<HasManyPermissionRequest>, I>>(object: I): HasManyPermissionRequest;
}
export declare namespace HasManyPermissionResponse {
    function encode(message: HasManyPermissionResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): HasManyPermissionResponse;
    function fromJSON(object: any): HasManyPermissionResponse;
    function toJSON(message: HasManyPermissionResponse): unknown;
    function create<I extends Exact<DeepPartial<HasManyPermissionResponse>, I>>(base?: I): HasManyPermissionResponse;
    function fromPartial<I extends Exact<DeepPartial<HasManyPermissionResponse>, I>>(object: I): HasManyPermissionResponse;
}
export type PermissionsServiceDefinition = typeof PermissionsServiceDefinition;
export declare const PermissionsServiceDefinition: {
    readonly name: "PermissionsService";
    readonly fullName: "decentraland.kernel.apis.PermissionsService";
    readonly methods: {
        /** @deprecated, only available for SDK6 compatibility */
        readonly hasPermission: {
            readonly name: "HasPermission";
            readonly requestType: typeof HasPermissionRequest;
            readonly requestStream: false;
            readonly responseType: typeof PermissionResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** @deprecated, only available for SDK6 compatibility */
        readonly hasManyPermissions: {
            readonly name: "HasManyPermissions";
            readonly requestType: typeof HasManyPermissionRequest;
            readonly requestStream: false;
            readonly responseType: typeof HasManyPermissionResponse;
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
