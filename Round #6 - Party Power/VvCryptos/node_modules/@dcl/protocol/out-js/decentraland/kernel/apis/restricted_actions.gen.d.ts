import _m0 from "protobufjs/minimal";
import { Vector2, Vector3 } from "../../common/vectors.gen";
export declare const protobufPackage = "decentraland.kernel.apis";
export interface MovePlayerToRequest {
    newRelativePosition: Vector3 | undefined;
    cameraTarget?: Vector3 | undefined;
}
export interface TeleportToRequest {
    worldCoordinates: Vector2 | undefined;
}
export interface TriggerEmoteRequest {
    predefinedEmote: string;
}
export interface ChangeRealmRequest {
    realm: string;
    message?: string | undefined;
}
export interface OpenExternalUrlRequest {
    url: string;
}
export interface OpenNftDialogRequest {
    urn: string;
}
export interface UnblockPointerRequest {
}
export interface CommsAdapterRequest {
    connectionString: string;
}
export interface TriggerSceneEmoteRequest {
    src: string;
    loop?: boolean | undefined;
}
export interface SuccessResponse {
    success: boolean;
}
export interface TriggerEmoteResponse {
}
export interface MovePlayerToResponse {
}
export interface TeleportToResponse {
}
export declare namespace MovePlayerToRequest {
    function encode(message: MovePlayerToRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): MovePlayerToRequest;
    function fromJSON(object: any): MovePlayerToRequest;
    function toJSON(message: MovePlayerToRequest): unknown;
    function create<I extends Exact<DeepPartial<MovePlayerToRequest>, I>>(base?: I): MovePlayerToRequest;
    function fromPartial<I extends Exact<DeepPartial<MovePlayerToRequest>, I>>(object: I): MovePlayerToRequest;
}
export declare namespace TeleportToRequest {
    function encode(message: TeleportToRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): TeleportToRequest;
    function fromJSON(object: any): TeleportToRequest;
    function toJSON(message: TeleportToRequest): unknown;
    function create<I extends Exact<DeepPartial<TeleportToRequest>, I>>(base?: I): TeleportToRequest;
    function fromPartial<I extends Exact<DeepPartial<TeleportToRequest>, I>>(object: I): TeleportToRequest;
}
export declare namespace TriggerEmoteRequest {
    function encode(message: TriggerEmoteRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): TriggerEmoteRequest;
    function fromJSON(object: any): TriggerEmoteRequest;
    function toJSON(message: TriggerEmoteRequest): unknown;
    function create<I extends Exact<DeepPartial<TriggerEmoteRequest>, I>>(base?: I): TriggerEmoteRequest;
    function fromPartial<I extends Exact<DeepPartial<TriggerEmoteRequest>, I>>(object: I): TriggerEmoteRequest;
}
export declare namespace ChangeRealmRequest {
    function encode(message: ChangeRealmRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): ChangeRealmRequest;
    function fromJSON(object: any): ChangeRealmRequest;
    function toJSON(message: ChangeRealmRequest): unknown;
    function create<I extends Exact<DeepPartial<ChangeRealmRequest>, I>>(base?: I): ChangeRealmRequest;
    function fromPartial<I extends Exact<DeepPartial<ChangeRealmRequest>, I>>(object: I): ChangeRealmRequest;
}
export declare namespace OpenExternalUrlRequest {
    function encode(message: OpenExternalUrlRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): OpenExternalUrlRequest;
    function fromJSON(object: any): OpenExternalUrlRequest;
    function toJSON(message: OpenExternalUrlRequest): unknown;
    function create<I extends Exact<DeepPartial<OpenExternalUrlRequest>, I>>(base?: I): OpenExternalUrlRequest;
    function fromPartial<I extends Exact<DeepPartial<OpenExternalUrlRequest>, I>>(object: I): OpenExternalUrlRequest;
}
export declare namespace OpenNftDialogRequest {
    function encode(message: OpenNftDialogRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): OpenNftDialogRequest;
    function fromJSON(object: any): OpenNftDialogRequest;
    function toJSON(message: OpenNftDialogRequest): unknown;
    function create<I extends Exact<DeepPartial<OpenNftDialogRequest>, I>>(base?: I): OpenNftDialogRequest;
    function fromPartial<I extends Exact<DeepPartial<OpenNftDialogRequest>, I>>(object: I): OpenNftDialogRequest;
}
export declare namespace UnblockPointerRequest {
    function encode(_: UnblockPointerRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): UnblockPointerRequest;
    function fromJSON(_: any): UnblockPointerRequest;
    function toJSON(_: UnblockPointerRequest): unknown;
    function create<I extends Exact<DeepPartial<UnblockPointerRequest>, I>>(base?: I): UnblockPointerRequest;
    function fromPartial<I extends Exact<DeepPartial<UnblockPointerRequest>, I>>(_: I): UnblockPointerRequest;
}
export declare namespace CommsAdapterRequest {
    function encode(message: CommsAdapterRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): CommsAdapterRequest;
    function fromJSON(object: any): CommsAdapterRequest;
    function toJSON(message: CommsAdapterRequest): unknown;
    function create<I extends Exact<DeepPartial<CommsAdapterRequest>, I>>(base?: I): CommsAdapterRequest;
    function fromPartial<I extends Exact<DeepPartial<CommsAdapterRequest>, I>>(object: I): CommsAdapterRequest;
}
export declare namespace TriggerSceneEmoteRequest {
    function encode(message: TriggerSceneEmoteRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): TriggerSceneEmoteRequest;
    function fromJSON(object: any): TriggerSceneEmoteRequest;
    function toJSON(message: TriggerSceneEmoteRequest): unknown;
    function create<I extends Exact<DeepPartial<TriggerSceneEmoteRequest>, I>>(base?: I): TriggerSceneEmoteRequest;
    function fromPartial<I extends Exact<DeepPartial<TriggerSceneEmoteRequest>, I>>(object: I): TriggerSceneEmoteRequest;
}
export declare namespace SuccessResponse {
    function encode(message: SuccessResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SuccessResponse;
    function fromJSON(object: any): SuccessResponse;
    function toJSON(message: SuccessResponse): unknown;
    function create<I extends Exact<DeepPartial<SuccessResponse>, I>>(base?: I): SuccessResponse;
    function fromPartial<I extends Exact<DeepPartial<SuccessResponse>, I>>(object: I): SuccessResponse;
}
export declare namespace TriggerEmoteResponse {
    function encode(_: TriggerEmoteResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): TriggerEmoteResponse;
    function fromJSON(_: any): TriggerEmoteResponse;
    function toJSON(_: TriggerEmoteResponse): unknown;
    function create<I extends Exact<DeepPartial<TriggerEmoteResponse>, I>>(base?: I): TriggerEmoteResponse;
    function fromPartial<I extends Exact<DeepPartial<TriggerEmoteResponse>, I>>(_: I): TriggerEmoteResponse;
}
export declare namespace MovePlayerToResponse {
    function encode(_: MovePlayerToResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): MovePlayerToResponse;
    function fromJSON(_: any): MovePlayerToResponse;
    function toJSON(_: MovePlayerToResponse): unknown;
    function create<I extends Exact<DeepPartial<MovePlayerToResponse>, I>>(base?: I): MovePlayerToResponse;
    function fromPartial<I extends Exact<DeepPartial<MovePlayerToResponse>, I>>(_: I): MovePlayerToResponse;
}
export declare namespace TeleportToResponse {
    function encode(_: TeleportToResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): TeleportToResponse;
    function fromJSON(_: any): TeleportToResponse;
    function toJSON(_: TeleportToResponse): unknown;
    function create<I extends Exact<DeepPartial<TeleportToResponse>, I>>(base?: I): TeleportToResponse;
    function fromPartial<I extends Exact<DeepPartial<TeleportToResponse>, I>>(_: I): TeleportToResponse;
}
export type RestrictedActionsServiceDefinition = typeof RestrictedActionsServiceDefinition;
export declare const RestrictedActionsServiceDefinition: {
    readonly name: "RestrictedActionsService";
    readonly fullName: "decentraland.kernel.apis.RestrictedActionsService";
    readonly methods: {
        /** MovePlayerTo will move the player in a position relative to the current scene */
        readonly movePlayerTo: {
            readonly name: "MovePlayerTo";
            readonly requestType: typeof MovePlayerToRequest;
            readonly requestStream: false;
            readonly responseType: typeof MovePlayerToResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** TeleportTo will move the user to the specified world LAND parcel coordinates */
        readonly teleportTo: {
            readonly name: "TeleportTo";
            readonly requestType: typeof TeleportToRequest;
            readonly requestStream: false;
            readonly responseType: typeof TeleportToResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** TriggerEmote will trigger an emote in this current user */
        readonly triggerEmote: {
            readonly name: "TriggerEmote";
            readonly requestType: typeof TriggerEmoteRequest;
            readonly requestStream: false;
            readonly responseType: typeof TriggerEmoteResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** ChangeRealm prompts the user to change to a specific realm */
        readonly changeRealm: {
            readonly name: "ChangeRealm";
            readonly requestType: typeof ChangeRealmRequest;
            readonly requestStream: false;
            readonly responseType: typeof SuccessResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** OpenExternalUrl prompts the user to open an external link */
        readonly openExternalUrl: {
            readonly name: "OpenExternalUrl";
            readonly requestType: typeof OpenExternalUrlRequest;
            readonly requestStream: false;
            readonly responseType: typeof SuccessResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** OpenNftDialog opens an NFT dialog. */
        readonly openNftDialog: {
            readonly name: "OpenNftDialog";
            readonly requestType: typeof OpenNftDialogRequest;
            readonly requestStream: false;
            readonly responseType: typeof SuccessResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Asks the explorer to connect to other communications adapter, this feature
         * can be used to join private game servers
         */
        readonly setCommunicationsAdapter: {
            readonly name: "SetCommunicationsAdapter";
            readonly requestType: typeof CommsAdapterRequest;
            readonly requestStream: false;
            readonly responseType: typeof SuccessResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        /** TriggerSceneEmote will trigger an scene emote file in this current user */
        readonly triggerSceneEmote: {
            readonly name: "TriggerSceneEmote";
            readonly requestType: typeof TriggerSceneEmoteRequest;
            readonly requestStream: false;
            readonly responseType: typeof SuccessResponse;
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
