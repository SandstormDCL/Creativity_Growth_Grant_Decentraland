import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.kernel.apis";
export interface RequestTeleportRequest {
    destination: string;
}
export interface RequestTeleportResponse {
}
export declare namespace RequestTeleportRequest {
    function encode(message: RequestTeleportRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): RequestTeleportRequest;
    function fromJSON(object: any): RequestTeleportRequest;
    function toJSON(message: RequestTeleportRequest): unknown;
    function create<I extends Exact<DeepPartial<RequestTeleportRequest>, I>>(base?: I): RequestTeleportRequest;
    function fromPartial<I extends Exact<DeepPartial<RequestTeleportRequest>, I>>(object: I): RequestTeleportRequest;
}
export declare namespace RequestTeleportResponse {
    function encode(_: RequestTeleportResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): RequestTeleportResponse;
    function fromJSON(_: any): RequestTeleportResponse;
    function toJSON(_: RequestTeleportResponse): unknown;
    function create<I extends Exact<DeepPartial<RequestTeleportResponse>, I>>(base?: I): RequestTeleportResponse;
    function fromPartial<I extends Exact<DeepPartial<RequestTeleportResponse>, I>>(_: I): RequestTeleportResponse;
}
export type UserActionModuleServiceDefinition = typeof UserActionModuleServiceDefinition;
export declare const UserActionModuleServiceDefinition: {
    readonly name: "UserActionModuleService";
    readonly fullName: "decentraland.kernel.apis.UserActionModuleService";
    readonly methods: {
        /** @deprecated, only available for SDK6 compatibility. Use RestrictedActions/TeleportTo */
        readonly requestTeleport: {
            readonly name: "RequestTeleport";
            readonly requestType: typeof RequestTeleportRequest;
            readonly requestStream: false;
            readonly responseType: typeof RequestTeleportResponse;
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
