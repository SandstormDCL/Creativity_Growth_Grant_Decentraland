import { YGUnit } from '@dcl/ecs';
import { Position, PositionUnit, PositionShorthand } from './types';
type PropName = 'position' | 'margin' | 'padding';
type PropKey = `${PropName}${Capitalize<keyof Position>}`;
type PropKeyUnit = `${PropName}${Capitalize<keyof Position>}Unit`;
type PositionParsed = {
    [key in PropKey]?: number;
} & {
    [key in PropKeyUnit]?: YGUnit;
};
export declare function parsePosition<T extends PropName>(position: PositionShorthand | Partial<Position> | undefined, prop: T): Partial<PositionParsed>;
type HeightWidth = 'height' | 'width';
type SizePropName = HeightWidth | `max${Capitalize<HeightWidth>}` | `min${Capitalize<HeightWidth>}`;
type SizePropKeyUnit = `${SizePropName}Unit`;
type SizeReturnType = {
    [key in SizePropName]: number;
} & {
    [key in SizePropKeyUnit]: YGUnit;
};
export declare function parseSize(val: PositionUnit | 'auto' | undefined, key: SizePropName): Partial<SizeReturnType>;
export {};
