"use strict";
/// <reference types="node" />
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashV1 = exports.hashV0 = void 0;
const crypto = __importStar(require("crypto"));
const multiformats = __importStar(require("multiformats"));
const ipfs_unixfs_importer_1 = require("ipfs-unixfs-importer");
/**
 * Calculates a Qm prefixed hash for Decentraland (NOT CIDv0) from a readable stream
 *
 * @public
 * @deprecated use hashV1 instead, this function exists for backwards compatibility reasons.
 */
async function hashV0(stream) {
    const hash = crypto.createHash("sha256");
    if (stream instanceof Uint8Array) {
        hash.update(stream);
    }
    else if (Symbol.asyncIterator in stream) {
        for await (const chunk of stream) {
            hash.update(chunk);
        }
    }
    else {
        throw new Error("Invalid value provided to hashStreamV0. Expected AsyncGenerator<Uint8Array> | AsyncIterable<Uint8Array> | Uint8Array");
    }
    return multiformats.CID.createV0(multiformats.digest.create(0x12, hash.digest())).toString();
}
exports.hashV0 = hashV0;
/**
 * Calculates a CIDv1 from a readable stream
 * @public
 */
async function hashV1(content) {
    const block = {
        get: (cid) => Promise.reject(new Error(`unexpected block API get for ${cid}`)),
        put: () => Promise.reject(new Error("unexpected block API put")),
    };
    let lastCid;
    async function* wrap() {
        yield content;
    }
    if (content instanceof Uint8Array) {
        for await (const { cid } of (0, ipfs_unixfs_importer_1.importer)([{ content: wrap() }], block, {
            cidVersion: 1,
            onlyHash: true,
            rawLeaves: true,
        })) {
            lastCid = cid;
        }
    }
    else if (Symbol.asyncIterator in content) {
        for await (const { cid } of (0, ipfs_unixfs_importer_1.importer)([{ content }], block, {
            cidVersion: 1,
            onlyHash: true,
            rawLeaves: true,
        })) {
            lastCid = cid;
        }
    }
    else {
        throw new Error("Invalid value provided to hashStreamV1. Expected AsyncGenerator<Uint8Array> | AsyncIterable<Uint8Array> | Uint8Array");
    }
    return `${lastCid}`;
}
exports.hashV1 = hashV1;
//# sourceMappingURL=node.js.map