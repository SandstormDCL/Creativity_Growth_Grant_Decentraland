/**
 * EntityContent as specified in ADR32
 * @public
 */
export type EntityContentItemReference = {
    file: string;
    hash: string;
};
/**
 * Calculates the content hash of multiple files to be used consistently by the builder
 * and other content-based applications when hashes need to be stored on-chain.
 *
 * Returns the CIDv1 of the data prepared to sign
 * @public
 */
export declare function calculateMultipleHashesADR32(contents: EntityContentItemReference[], metadata?: any): Promise<{
    data: Uint8Array;
    hash: string;
}>;
/**
 * Calculates the content hash of multiple files to be used consistently by the builder
 * and other content-based applications when hashes need to be stored on-chain.
 *
 * @deprecated this is maintained only for compatibility reasons with calculateBufferHash (Qm prefix)
 * @public
 */
export declare function calculateMultipleHashesADR32LegacyQmHash(contents: EntityContentItemReference[], metadata?: any): Promise<{
    data: Uint8Array;
    hash: string;
}>;
//# sourceMappingURL=ADR32.d.ts.map