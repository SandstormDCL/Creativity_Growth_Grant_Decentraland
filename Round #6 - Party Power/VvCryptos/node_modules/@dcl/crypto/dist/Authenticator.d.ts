import { SignatureValidator } from './contracts/SignatureValidator';
import { AuthIdentity, AuthChain, EthAddress, AuthLinkType, IdentityType, AuthLink, Signature, ValidationResult } from './types';
import { createEthereumMessageHash as utilsCreateEthereumMessage } from './crypto';
export declare const VALID_SIGNATURE: string;
export declare const ERC1654_MAGIC_VALUE = "1626ba7e";
export declare namespace Authenticator {
    /** Validate that the signature belongs to the Ethereum address */
    function validateSignature(expectedFinalAuthority: string, authChain: AuthChain, provider: any, dateToValidateExpirationInMillis?: number): Promise<ValidationResult>;
    function isValidAuthChain(authChain: AuthChain): boolean;
    function createEIP1271MessageHash(msg: string): Uint8Array;
    function createSimpleAuthChain(finalPayload: string, ownerAddress: EthAddress, signature: Signature): AuthChain;
    function createAuthChain(ownerIdentity: IdentityType, ephemeralIdentity: IdentityType, ephemeralMinutesDuration: number, entityId: string): AuthChain;
    function initializeAuthChain(ethAddress: EthAddress, ephemeralIdentity: IdentityType, ephemeralMinutesDuration: number, signer: (message: string) => Promise<string>): Promise<AuthIdentity>;
    function signPayload(authIdentity: AuthIdentity, entityId: string): AuthLink[];
    const createEthereumMessageHash: typeof utilsCreateEthereumMessage;
    function createSignature(identity: IdentityType, message: string | Uint8Array): string;
    function ownerAddress(authChain: AuthChain): EthAddress;
    function getEphemeralMessage(ephemeralAddress: string, expiration: Date): string;
}
declare type ValidatorType = (authority: string, authLink: AuthLink, options?: ValidationOptions) => Promise<{
    error?: string;
    nextAuthority?: string;
}>;
declare type ValidationOptions = {
    dateToValidateExpirationInMillis: number;
    provider?: any;
};
export declare const SIGNER_VALIDATOR: ValidatorType;
export declare const ECDSA_SIGNED_ENTITY_VALIDATOR: ValidatorType;
export declare const ECDSA_PERSONAL_EPHEMERAL_VALIDATOR: ValidatorType;
export declare const ECDSA_EIP_1654_EPHEMERAL_VALIDATOR: ValidatorType;
export declare const EIP_1654_SIGNED_ENTITY_VALIDATOR: ValidatorType;
export declare function getEphemeralSignatureType(signature: string): AuthLinkType;
export declare function getSignedIdentitySignatureType(signature: string): AuthLinkType;
export declare function parseEmphemeralPayload(payload: string): {
    message: string;
    ephemeralAddress: string;
    expiration: number;
};
export declare function isValidEIP1271Signature(signatureValidator: SignatureValidator, message: string, signature: string, block?: number): Promise<boolean>;
export {};
