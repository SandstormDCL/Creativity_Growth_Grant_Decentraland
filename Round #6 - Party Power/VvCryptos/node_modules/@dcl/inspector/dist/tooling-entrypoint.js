"use strict";var yf=Object.create;var Hn=Object.defineProperty;var hf=Object.getOwnPropertyDescriptor;var Tf=Object.getOwnPropertyNames;var Sf=Object.getPrototypeOf,bf=Object.prototype.hasOwnProperty;var Ye=(e,a)=>()=>(a||e((a={exports:{}}).exports,a),a.exports),gf=(e,a)=>{for(var s in a)Hn(e,s,{get:a[s],enumerable:!0})},Di=(e,a,s,t)=>{if(a&&typeof a=="object"||typeof a=="function")for(let i of Tf(a))!bf.call(e,i)&&i!==s&&Hn(e,i,{get:()=>a[i],enumerable:!(t=hf(a,i))||t.enumerable});return e};var h=(e,a,s)=>(s=e!=null?yf(Sf(e)):{},Di(a||!e||!e.__esModule?Hn(s,"default",{value:e,enumerable:!0}):s,e)),Bf=e=>Di(Hn({},"__esModule",{value:!0}),e);var Mr=Ye(an=>{"use strict";var up=an&&an.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(an,"__esModule",{value:!0});an.Transport=void 0;var pp=up(require("mitt")),Ii=class{constructor(){this.events=(0,pp.default)()}emit(a,s){this.events.emit(a,s)}addEventListener(a,s){this.events.on(a,s)}removeEventListener(a,s){this.events.off(a,s)}};an.Transport=Ii});var ff=Ye(Dr=>{"use strict";Object.defineProperty(Dr,"__esModule",{value:!0});Dr.InMemoryTransport=void 0;var lp=Mr(),xi=class extends lp.Transport{constructor(){super(...arguments),this.others=new Set,this.connect=a=>{this.others.add(a)},this.disconnect=a=>{this.others.delete(a)}}send(a){for(let s of this.others)s.emit("message",a)}};Dr.InMemoryTransport=xi});var df=Ye(Ur=>{"use strict";Object.defineProperty(Ur,"__esModule",{value:!0});Ur.MessageTransport=void 0;var Ap=Mr(),wi=class extends Ap.Transport{constructor(a,s,t="*"){super(),this.source=a,this.target=s,this.origin=t,this.handler=i=>{i.data&&this.emit("message",i.data)},this.source.addEventListener("message",this.handler)}send(a){this.target.postMessage(a,this.origin)}dispose(){this.source.removeEventListener("message",this.handler)}};Ur.MessageTransport=wi});var uf=Ye(sn=>{"use strict";Object.defineProperty(sn,"__esModule",{value:!0});sn.MessageTransport=sn.InMemoryTransport=void 0;var mp=ff();Object.defineProperty(sn,"InMemoryTransport",{enumerable:!0,get:function(){return mp.InMemoryTransport}});var Ep=df();Object.defineProperty(sn,"MessageTransport",{enumerable:!0,get:function(){return Ep.MessageTransport}})});var Af=Ye(He=>{"use strict";var lf=He&&He.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(He,"__esModule",{value:!0});He.RPC=void 0;var Cp=lf(require("mitt")),pf=lf(require("fp-future")),Wn=class e{constructor(a,s){this.id=a,this.transport=s,this.currentId=0,this.events=(0,Cp.default)(),this.promises=new Map,this.handlers=new Map,this.ready=!1,this.queue=[],this.handler=async i=>{if(this.isMessage(i))switch(i.type){case e.MessageType.EVENT:{if(this.isEvent(i.payload)){let n=i.payload;this.events.emit(n.type,n.data)}break}case e.MessageType.REQUEST:{if(this.isRequest(i.payload)){let n=i.payload;try{let c=this.handlers.get(n.method);if(!c)throw new Error(`Method "${n.method}" not implemented`);let r=await c(n.params),o=this.createMessage("response",{id:n.id,method:n.method,success:!0,result:r});this.send(o)}catch(c){let r=this.createMessage("response",{id:n.id,method:n.method,success:!1,error:c.message});this.send(r)}}break}case e.MessageType.RESPONSE:{if(this.isResponse(i.payload)){let n=i.payload;if(this.promises.has(n.id)){let c=this.promises.get(n.id);n.success?c.resolve(n.result):c.reject(new Error(n.error)),this.promises.delete(n.id)}}break}case e.MessageType.CONNECTION:if(this.isConnection(i.payload)){let n=i.payload;if(this.ready||(this.ready=!0),n.type==="ping"){let r=this.createMessage("connection",{type:"pong"});this.send(r)}let c=(0,pf.default)();for(requestAnimationFrame(c.resolve),await c;this.queue.length>0;){let r=this.queue.shift();this.send(r)}}}},this.createMessage=(i,n)=>({id:this.id,type:i,payload:n}),this.transport.addEventListener("message",this.handler);let t=this.createMessage("connection",{type:"ping"});this.transport.send(t)}send(a){this.ready?this.transport.send(a):this.queue.push(a)}isMessage(a){let s=Object.values(e.MessageType).filter(t=>typeof t=="string");return a&&a.id===this.id&&typeof a.type=="string"&&s.includes(a.type)&&typeof a.payload=="object"&&a.payload!==null}isEvent(a){return a&&typeof a.type=="string"}isRequest(a){return a&&typeof a.method=="string"&&typeof a.id=="number"}isResponse(a){return a&&typeof a.method=="string"&&typeof a.id=="number"}isConnection(a){return a&&(a.type==="ping"||a.type==="pong")}on(a,s){this.events.on(a,s)}off(a,s){this.events.off(a,s)}emit(a,s){this.send({id:this.id,type:e.MessageType.EVENT,payload:{type:a,data:s}})}async request(a,s){let t=(0,pf.default)(),i=this.currentId++;this.promises.set(i,t);let n=this.createMessage("request",{id:i,method:a,params:s});return this.send(n),t}handle(a,s){this.handlers.set(a,s)}dispose(){this.transport.removeEventListener("message",this.handler)}};He.RPC=Wn;(function(e){let a;(function(s){s.REQUEST="request",s.RESPONSE="response",s.EVENT="event",s.CONNECTION="connection"})(a=e.MessageType||(e.MessageType={}))})(Wn||(He.RPC=Wn={}))});var Gn=Ye(Ee=>{"use strict";var yp=Ee&&Ee.__createBinding||(Object.create?function(e,a,s,t){t===void 0&&(t=s);var i=Object.getOwnPropertyDescriptor(a,s);(!i||("get"in i?!a.__esModule:i.writable||i.configurable))&&(i={enumerable:!0,get:function(){return a[s]}}),Object.defineProperty(e,t,i)}:function(e,a,s,t){t===void 0&&(t=s),e[t]=a[s]}),_i=Ee&&Ee.__exportStar||function(e,a){for(var s in e)s!=="default"&&!Object.prototype.hasOwnProperty.call(a,s)&&yp(a,e,s)};Object.defineProperty(Ee,"__esModule",{value:!0});_i(uf(),Ee);_i(Mr(),Ee);_i(Af(),Ee)});var Tp={};gf(Tp,{Asset:()=>le,AssetCatalogResponse:()=>Vr,AssetData:()=>Fr,CameraClient:()=>ki,CrdtStreamMessage:()=>Kn,DataServiceDefinition:()=>If,Empty:()=>oe,GetFilesRequest:()=>Qr,GetFilesResponse:()=>Wr,GetFilesResponse_File:()=>_e,IframeStorage:()=>Pi,ImportAssetRequest:()=>zr,ImportAssetRequest_ContentEntry:()=>jn,InspectorPreferencesMessage:()=>Jn,SaveFileRequest:()=>Gr,SceneMetricsClient:()=>Mi,UiClient:()=>Ni,UndoRedoResponse:()=>Yn,createDataLayerHost:()=>dp,createEngineContext:()=>vn,createIframeStorage:()=>hp,createInMemoryStorage:()=>Zc,dumpEngineToComposite:()=>Qn,dumpEngineToCrdtCommands:()=>gi,serializeEngine:()=>yi});module.exports=Bf(Tp);var I=h(require("protobufjs/minimal"));function Ui(){return{}}var oe;(c=>{function e(r,o=I.default.Writer.create()){return o}c.encode=e;function a(r,o){let f=r instanceof I.default.Reader?r:I.default.Reader.create(r),u=o===void 0?f.len:f.pos+o,l=Ui();for(;f.pos<u;){let p=f.uint32();switch(p>>>3){}if((p&7)===4||p===0)break;f.skipType(p&7)}return l}c.decode=a;function s(r){return{}}c.fromJSON=s;function t(r){return{}}c.toJSON=t;function i(r){return c.fromPartial(r??{})}c.create=i;function n(r){return Ui()}c.fromPartial=n})(oe||={});function vi(){return{type:""}}var Yn;(c=>{function e(r,o=I.default.Writer.create()){return r.type!==""&&o.uint32(10).string(r.type),o}c.encode=e;function a(r,o){let f=r instanceof I.default.Reader?r:I.default.Reader.create(r),u=o===void 0?f.len:f.pos+o,l=vi();for(;f.pos<u;){let p=f.uint32();switch(p>>>3){case 1:if(p!==10)break;l.type=f.string();continue}if((p&7)===4||p===0)break;f.skipType(p&7)}return l}c.decode=a;function s(r){return{type:G(r.type)?String(r.type):""}}c.fromJSON=s;function t(r){let o={};return r.type!==void 0&&(o.type=r.type),o}c.toJSON=t;function i(r){return c.fromPartial(r??{})}c.create=i;function n(r){let o=vi();return o.type=r.type??"",o}c.fromPartial=n})(Yn||={});function Li(){return{data:new Uint8Array(0)}}var Kn;(c=>{function e(r,o=I.default.Writer.create()){return r.data.length!==0&&o.uint32(10).bytes(r.data),o}c.encode=e;function a(r,o){let f=r instanceof I.default.Reader?r:I.default.Reader.create(r),u=o===void 0?f.len:f.pos+o,l=Li();for(;f.pos<u;){let p=f.uint32();switch(p>>>3){case 1:if(p!==10)break;l.data=f.bytes();continue}if((p&7)===4||p===0)break;f.skipType(p&7)}return l}c.decode=a;function s(r){return{data:G(r.data)?je(r.data):new Uint8Array(0)}}c.fromJSON=s;function t(r){let o={};return r.data!==void 0&&(o.data=Je(r.data!==void 0?r.data:new Uint8Array(0))),o}c.toJSON=t;function i(r){return c.fromPartial(r??{})}c.create=i;function n(r){let o=Li();return o.data=r.data??new Uint8Array(0),o}c.fromPartial=n})(Kn||={});function Fi(){return{data:new Uint8Array(0)}}var Fr;(c=>{function e(r,o=I.default.Writer.create()){return r.data.length!==0&&o.uint32(10).bytes(r.data),o}c.encode=e;function a(r,o){let f=r instanceof I.default.Reader?r:I.default.Reader.create(r),u=o===void 0?f.len:f.pos+o,l=Fi();for(;f.pos<u;){let p=f.uint32();switch(p>>>3){case 1:if(p!==10)break;l.data=f.bytes();continue}if((p&7)===4||p===0)break;f.skipType(p&7)}return l}c.decode=a;function s(r){return{data:G(r.data)?je(r.data):new Uint8Array(0)}}c.fromJSON=s;function t(r){let o={};return r.data!==void 0&&(o.data=Je(r.data!==void 0?r.data:new Uint8Array(0))),o}c.toJSON=t;function i(r){return c.fromPartial(r??{})}c.create=i;function n(r){let o=Fi();return o.data=r.data??new Uint8Array(0),o}c.fromPartial=n})(Fr||={});function Qi(){return{path:"",ignore:[]}}var Qr;(c=>{function e(r,o=I.default.Writer.create()){r.path!==""&&o.uint32(10).string(r.path);for(let f of r.ignore)o.uint32(18).string(f);return o}c.encode=e;function a(r,o){let f=r instanceof I.default.Reader?r:I.default.Reader.create(r),u=o===void 0?f.len:f.pos+o,l=Qi();for(;f.pos<u;){let p=f.uint32();switch(p>>>3){case 1:if(p!==10)break;l.path=f.string();continue;case 2:if(p!==18)break;l.ignore.push(f.string());continue}if((p&7)===4||p===0)break;f.skipType(p&7)}return l}c.decode=a;function s(r){return{path:G(r.path)?String(r.path):"",ignore:Array.isArray(r?.ignore)?r.ignore.map(o=>String(o)):[]}}c.fromJSON=s;function t(r){let o={};return r.path!==void 0&&(o.path=r.path),r.ignore?o.ignore=r.ignore.map(f=>f):o.ignore=[],o}c.toJSON=t;function i(r){return c.fromPartial(r??{})}c.create=i;function n(r){let o=Qi();return o.path=r.path??"",o.ignore=r.ignore?.map(f=>f)||[],o}c.fromPartial=n})(Qr||={});function Wi(){return{files:[]}}var Wr;(c=>{function e(r,o=I.default.Writer.create()){for(let f of r.files)_e.encode(f,o.uint32(10).fork()).ldelim();return o}c.encode=e;function a(r,o){let f=r instanceof I.default.Reader?r:I.default.Reader.create(r),u=o===void 0?f.len:f.pos+o,l=Wi();for(;f.pos<u;){let p=f.uint32();switch(p>>>3){case 1:if(p!==10)break;l.files.push(_e.decode(f,f.uint32()));continue}if((p&7)===4||p===0)break;f.skipType(p&7)}return l}c.decode=a;function s(r){return{files:Array.isArray(r?.files)?r.files.map(o=>_e.fromJSON(o)):[]}}c.fromJSON=s;function t(r){let o={};return r.files?o.files=r.files.map(f=>f?_e.toJSON(f):void 0):o.files=[],o}c.toJSON=t;function i(r){return c.fromPartial(r??{})}c.create=i;function n(r){let o=Wi();return o.files=r.files?.map(f=>_e.fromPartial(f))||[],o}c.fromPartial=n})(Wr||={});function Gi(){return{path:"",content:new Uint8Array(0)}}var _e;(c=>{function e(r,o=I.default.Writer.create()){return r.path!==""&&o.uint32(10).string(r.path),r.content.length!==0&&o.uint32(18).bytes(r.content),o}c.encode=e;function a(r,o){let f=r instanceof I.default.Reader?r:I.default.Reader.create(r),u=o===void 0?f.len:f.pos+o,l=Gi();for(;f.pos<u;){let p=f.uint32();switch(p>>>3){case 1:if(p!==10)break;l.path=f.string();continue;case 2:if(p!==18)break;l.content=f.bytes();continue}if((p&7)===4||p===0)break;f.skipType(p&7)}return l}c.decode=a;function s(r){return{path:G(r.path)?String(r.path):"",content:G(r.content)?je(r.content):new Uint8Array(0)}}c.fromJSON=s;function t(r){let o={};return r.path!==void 0&&(o.path=r.path),r.content!==void 0&&(o.content=Je(r.content!==void 0?r.content:new Uint8Array(0))),o}c.toJSON=t;function i(r){return c.fromPartial(r??{})}c.create=i;function n(r){let o=Gi();return o.path=r.path??"",o.content=r.content??new Uint8Array(0),o}c.fromPartial=n})(_e||={});function Vi(){return{path:"",content:new Uint8Array(0)}}var Gr;(c=>{function e(r,o=I.default.Writer.create()){return r.path!==""&&o.uint32(10).string(r.path),r.content.length!==0&&o.uint32(18).bytes(r.content),o}c.encode=e;function a(r,o){let f=r instanceof I.default.Reader?r:I.default.Reader.create(r),u=o===void 0?f.len:f.pos+o,l=Vi();for(;f.pos<u;){let p=f.uint32();switch(p>>>3){case 1:if(p!==10)break;l.path=f.string();continue;case 2:if(p!==18)break;l.content=f.bytes();continue}if((p&7)===4||p===0)break;f.skipType(p&7)}return l}c.decode=a;function s(r){return{path:G(r.path)?String(r.path):"",content:G(r.content)?je(r.content):new Uint8Array(0)}}c.fromJSON=s;function t(r){let o={};return r.path!==void 0&&(o.path=r.path),r.content!==void 0&&(o.content=Je(r.content!==void 0?r.content:new Uint8Array(0))),o}c.toJSON=t;function i(r){return c.fromPartial(r??{})}c.create=i;function n(r){let o=Vi();return o.path=r.path??"",o.content=r.content??new Uint8Array(0),o}c.fromPartial=n})(Gr||={});function zi(){return{path:""}}var le;(c=>{function e(r,o=I.default.Writer.create()){return r.path!==""&&o.uint32(10).string(r.path),o}c.encode=e;function a(r,o){let f=r instanceof I.default.Reader?r:I.default.Reader.create(r),u=o===void 0?f.len:f.pos+o,l=zi();for(;f.pos<u;){let p=f.uint32();switch(p>>>3){case 1:if(p!==10)break;l.path=f.string();continue}if((p&7)===4||p===0)break;f.skipType(p&7)}return l}c.decode=a;function s(r){return{path:G(r.path)?String(r.path):""}}c.fromJSON=s;function t(r){let o={};return r.path!==void 0&&(o.path=r.path),o}c.toJSON=t;function i(r){return c.fromPartial(r??{})}c.create=i;function n(r){let o=zi();return o.path=r.path??"",o}c.fromPartial=n})(le||={});function Hi(){return{basePath:"",assets:[]}}var Vr;(c=>{function e(r,o=I.default.Writer.create()){r.basePath!==""&&o.uint32(10).string(r.basePath);for(let f of r.assets)le.encode(f,o.uint32(18).fork()).ldelim();return o}c.encode=e;function a(r,o){let f=r instanceof I.default.Reader?r:I.default.Reader.create(r),u=o===void 0?f.len:f.pos+o,l=Hi();for(;f.pos<u;){let p=f.uint32();switch(p>>>3){case 1:if(p!==10)break;l.basePath=f.string();continue;case 2:if(p!==18)break;l.assets.push(le.decode(f,f.uint32()));continue}if((p&7)===4||p===0)break;f.skipType(p&7)}return l}c.decode=a;function s(r){return{basePath:G(r.basePath)?String(r.basePath):"",assets:Array.isArray(r?.assets)?r.assets.map(o=>le.fromJSON(o)):[]}}c.fromJSON=s;function t(r){let o={};return r.basePath!==void 0&&(o.basePath=r.basePath),r.assets?o.assets=r.assets.map(f=>f?le.toJSON(f):void 0):o.assets=[],o}c.toJSON=t;function i(r){return c.fromPartial(r??{})}c.create=i;function n(r){let o=Hi();return o.basePath=r.basePath??"",o.assets=r.assets?.map(f=>le.fromPartial(f))||[],o}c.fromPartial=n})(Vr||={});function Yi(){return{basePath:"",assetPackageName:"",content:new Map}}var zr;(c=>{function e(r,o=I.default.Writer.create()){return r.basePath!==""&&o.uint32(10).string(r.basePath),r.assetPackageName!==""&&o.uint32(18).string(r.assetPackageName),r.content.forEach((f,u)=>{jn.encode({key:u,value:f},o.uint32(26).fork()).ldelim()}),o}c.encode=e;function a(r,o){let f=r instanceof I.default.Reader?r:I.default.Reader.create(r),u=o===void 0?f.len:f.pos+o,l=Yi();for(;f.pos<u;){let p=f.uint32();switch(p>>>3){case 1:if(p!==10)break;l.basePath=f.string();continue;case 2:if(p!==18)break;l.assetPackageName=f.string();continue;case 3:if(p!==26)break;let A=jn.decode(f,f.uint32());A.value!==void 0&&l.content.set(A.key,A.value);continue}if((p&7)===4||p===0)break;f.skipType(p&7)}return l}c.decode=a;function s(r){return{basePath:G(r.basePath)?String(r.basePath):"",assetPackageName:G(r.assetPackageName)?String(r.assetPackageName):"",content:xf(r.content)?Object.entries(r.content).reduce((o,[f,u])=>(o.set(f,je(u)),o),new Map):new Map}}c.fromJSON=s;function t(r){let o={};return r.basePath!==void 0&&(o.basePath=r.basePath),r.assetPackageName!==void 0&&(o.assetPackageName=r.assetPackageName),o.content={},r.content&&r.content.forEach((f,u)=>{o.content[u]=Je(f)}),o}c.toJSON=t;function i(r){return c.fromPartial(r??{})}c.create=i;function n(r){let o=Yi();return o.basePath=r.basePath??"",o.assetPackageName=r.assetPackageName??"",o.content=(()=>{let f=new Map;return(r.content??new Map).forEach((u,l)=>{u!==void 0&&f.set(l,u)}),f})(),o}c.fromPartial=n})(zr||={});function Ki(){return{key:"",value:new Uint8Array(0)}}var jn;(c=>{function e(r,o=I.default.Writer.create()){return r.key!==""&&o.uint32(10).string(r.key),r.value.length!==0&&o.uint32(18).bytes(r.value),o}c.encode=e;function a(r,o){let f=r instanceof I.default.Reader?r:I.default.Reader.create(r),u=o===void 0?f.len:f.pos+o,l=Ki();for(;f.pos<u;){let p=f.uint32();switch(p>>>3){case 1:if(p!==10)break;l.key=f.string();continue;case 2:if(p!==18)break;l.value=f.bytes();continue}if((p&7)===4||p===0)break;f.skipType(p&7)}return l}c.decode=a;function s(r){return{key:G(r.key)?String(r.key):"",value:G(r.value)?je(r.value):new Uint8Array(0)}}c.fromJSON=s;function t(r){let o={};return r.key!==void 0&&(o.key=r.key),r.value!==void 0&&(o.value=Je(r.value!==void 0?r.value:new Uint8Array(0))),o}c.toJSON=t;function i(r){return c.fromPartial(r??{})}c.create=i;function n(r){let o=Ki();return o.key=r.key??"",o.value=r.value??new Uint8Array(0),o}c.fromPartial=n})(jn||={});function ji(){return{freeCameraInvertRotation:!1,autosaveEnabled:!1}}var Jn;(c=>{function e(r,o=I.default.Writer.create()){return r.freeCameraInvertRotation===!0&&o.uint32(8).bool(r.freeCameraInvertRotation),r.autosaveEnabled===!0&&o.uint32(16).bool(r.autosaveEnabled),o}c.encode=e;function a(r,o){let f=r instanceof I.default.Reader?r:I.default.Reader.create(r),u=o===void 0?f.len:f.pos+o,l=ji();for(;f.pos<u;){let p=f.uint32();switch(p>>>3){case 1:if(p!==8)break;l.freeCameraInvertRotation=f.bool();continue;case 2:if(p!==16)break;l.autosaveEnabled=f.bool();continue}if((p&7)===4||p===0)break;f.skipType(p&7)}return l}c.decode=a;function s(r){return{freeCameraInvertRotation:G(r.freeCameraInvertRotation)?!!r.freeCameraInvertRotation:!1,autosaveEnabled:G(r.autosaveEnabled)?!!r.autosaveEnabled:!1}}c.fromJSON=s;function t(r){let o={};return r.freeCameraInvertRotation!==void 0&&(o.freeCameraInvertRotation=r.freeCameraInvertRotation),r.autosaveEnabled!==void 0&&(o.autosaveEnabled=r.autosaveEnabled),o}c.toJSON=t;function i(r){return c.fromPartial(r??{})}c.create=i;function n(r){let o=ji();return o.freeCameraInvertRotation=r.freeCameraInvertRotation??!1,o.autosaveEnabled=r.autosaveEnabled??!1,o}c.fromPartial=n})(Jn||={});var If={name:"DataService",fullName:"DataService",methods:{crdtStream:{name:"CrdtStream",requestType:Kn,requestStream:!0,responseType:Kn,responseStream:!0,options:{}},undo:{name:"Undo",requestType:oe,requestStream:!1,responseType:Yn,responseStream:!1,options:{}},redo:{name:"Redo",requestType:oe,requestStream:!1,responseType:Yn,responseStream:!1,options:{}},getFiles:{name:"getFiles",requestType:Qr,requestStream:!1,responseType:Wr,responseStream:!1,options:{}},saveFile:{name:"saveFile",requestType:Gr,requestStream:!1,responseType:oe,responseStream:!1,options:{}},getAssetCatalog:{name:"GetAssetCatalog",requestType:oe,requestStream:!1,responseType:Vr,responseStream:!1,options:{}},getAssetData:{name:"GetAssetData",requestType:le,requestStream:!1,responseType:Fr,responseStream:!1,options:{}},importAsset:{name:"ImportAsset",requestType:zr,requestStream:!1,responseType:oe,responseStream:!1,options:{}},removeAsset:{name:"RemoveAsset",requestType:le,requestStream:!1,responseType:oe,responseStream:!1,options:{}},save:{name:"Save",requestType:oe,requestStream:!1,responseType:oe,responseStream:!1,options:{}},getInspectorPreferences:{name:"GetInspectorPreferences",requestType:oe,requestStream:!1,responseType:Jn,responseStream:!1,options:{}},setInspectorPreferences:{name:"SetInspectorPreferences",requestType:Jn,requestStream:!1,responseType:oe,responseStream:!1,options:{}}}},Ke=(()=>{if(typeof globalThis<"u")return globalThis;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();function je(e){if(Ke.Buffer)return Uint8Array.from(Ke.Buffer.from(e,"base64"));{let a=Ke.atob(e),s=new Uint8Array(a.length);for(let t=0;t<a.length;++t)s[t]=a.charCodeAt(t);return s}}function Je(e){if(Ke.Buffer)return Ke.Buffer.from(e).toString("base64");{let a=[];return e.forEach(s=>{a.push(String.fromCharCode(s))}),Ke.btoa(a.join(""))}}function xf(e){return typeof e=="object"&&e!==null}function G(e){return e!=null}var Re=h(require("protobufjs/minimal"));function wf(){return{states:[]}}var qe;(function(e){function a(t,i=Re.default.Writer.create()){for(let n of t.states)qn.encode(n,i.uint32(10).fork()).ldelim();return i}e.encode=a;function s(t,i){let n=t instanceof Re.default.Reader?t:Re.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=wf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.states.push(qn.decode(n,n.uint32()));continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(qe||(qe={}));function _f(){return{clip:"",playing:void 0,weight:void 0,speed:void 0,loop:void 0,shouldReset:void 0}}var qn;(function(e){function a(t,i=Re.default.Writer.create()){return t.clip!==""&&i.uint32(18).string(t.clip),t.playing!==void 0&&i.uint32(24).bool(t.playing),t.weight!==void 0&&i.uint32(37).float(t.weight),t.speed!==void 0&&i.uint32(45).float(t.speed),t.loop!==void 0&&i.uint32(48).bool(t.loop),t.shouldReset!==void 0&&i.uint32(56).bool(t.shouldReset),i}e.encode=a;function s(t,i){let n=t instanceof Re.default.Reader?t:Re.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=_f();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 2:if(o!==18)break;r.clip=n.string();continue;case 3:if(o!==24)break;r.playing=n.bool();continue;case 4:if(o!==37)break;r.weight=n.float();continue;case 5:if(o!==45)break;r.speed=n.float();continue;case 6:if(o!==48)break;r.loop=n.bool();continue;case 7:if(o!==56)break;r.shouldReset=n.bool();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(qn||(qn={}));var Ji={COMPONENT_ID:1042,serialize(e,a){let s=qe.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return qe.decode(e.buffer(),e.remainingBytes())},create(){return qe.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBAnimator"}};var Xn=h(require("protobufjs/minimal"));function Rf(){return{state:0,timestamp:0}}var Xe;(function(e){function a(t,i=Xn.default.Writer.create()){return t.state!==0&&i.uint32(8).int32(t.state),t.timestamp!==0&&i.uint32(16).uint32(t.timestamp),i}e.encode=a;function s(t,i){let n=t instanceof Xn.default.Reader?t:Xn.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Rf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.state=n.int32();continue;case 2:if(o!==16)break;r.timestamp=n.uint32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Xe||(Xe={}));var qi={COMPONENT_ID:1105,serialize(e,a){let s=Xe.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return Xe.decode(e.buffer(),e.remainingBytes())},create(){return Xe.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBAudioEvent"}};var Zn=h(require("protobufjs/minimal"));function kf(){return{playing:void 0,volume:void 0,loop:void 0,pitch:void 0,audioClipUrl:"",currentTime:void 0,global:void 0}}var Ze;(function(e){function a(t,i=Zn.default.Writer.create()){return t.playing!==void 0&&i.uint32(8).bool(t.playing),t.volume!==void 0&&i.uint32(21).float(t.volume),t.loop!==void 0&&i.uint32(24).bool(t.loop),t.pitch!==void 0&&i.uint32(37).float(t.pitch),t.audioClipUrl!==""&&i.uint32(42).string(t.audioClipUrl),t.currentTime!==void 0&&i.uint32(53).float(t.currentTime),t.global!==void 0&&i.uint32(56).bool(t.global),i}e.encode=a;function s(t,i){let n=t instanceof Zn.default.Reader?t:Zn.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=kf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.playing=n.bool();continue;case 2:if(o!==21)break;r.volume=n.float();continue;case 3:if(o!==24)break;r.loop=n.bool();continue;case 4:if(o!==37)break;r.pitch=n.float();continue;case 5:if(o!==42)break;r.audioClipUrl=n.string();continue;case 6:if(o!==53)break;r.currentTime=n.float();continue;case 7:if(o!==56)break;r.global=n.bool();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Ze||(Ze={}));var Xi={COMPONENT_ID:1020,serialize(e,a){let s=Ze.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return Ze.decode(e.buffer(),e.remainingBytes())},create(){return Ze.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBAudioSource"}};var $n=h(require("protobufjs/minimal"));function Of(){return{playing:void 0,volume:void 0,url:""}}var $e;(function(e){function a(t,i=$n.default.Writer.create()){return t.playing!==void 0&&i.uint32(8).bool(t.playing),t.volume!==void 0&&i.uint32(21).float(t.volume),t.url!==""&&i.uint32(26).string(t.url),i}e.encode=a;function s(t,i){let n=t instanceof $n.default.Reader?t:$n.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Of();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.playing=n.bool();continue;case 2:if(o!==21)break;r.volume=n.float();continue;case 3:if(o!==26)break;r.url=n.string();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})($e||($e={}));var Zi={COMPONENT_ID:1021,serialize(e,a){let s=$e.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return $e.decode(e.buffer(),e.remainingBytes())},create(){return $e.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBAudioStream"}};var eo=h(require("protobufjs/minimal"));var $i;(function(e){e[e.AAPT_POSITION=0]="AAPT_POSITION",e[e.AAPT_NAME_TAG=1]="AAPT_NAME_TAG",e[e.AAPT_HEAD=4]="AAPT_HEAD",e[e.AAPT_NECK=5]="AAPT_NECK",e[e.AAPT_SPINE=6]="AAPT_SPINE",e[e.AAPT_SPINE1=7]="AAPT_SPINE1",e[e.AAPT_SPINE2=8]="AAPT_SPINE2",e[e.AAPT_HIP=9]="AAPT_HIP",e[e.AAPT_LEFT_SHOULDER=10]="AAPT_LEFT_SHOULDER",e[e.AAPT_LEFT_ARM=11]="AAPT_LEFT_ARM",e[e.AAPT_LEFT_FOREARM=12]="AAPT_LEFT_FOREARM",e[e.AAPT_LEFT_HAND=2]="AAPT_LEFT_HAND",e[e.AAPT_LEFT_HAND_INDEX=13]="AAPT_LEFT_HAND_INDEX",e[e.AAPT_RIGHT_SHOULDER=14]="AAPT_RIGHT_SHOULDER",e[e.AAPT_RIGHT_ARM=15]="AAPT_RIGHT_ARM",e[e.AAPT_RIGHT_FOREARM=16]="AAPT_RIGHT_FOREARM",e[e.AAPT_RIGHT_HAND=3]="AAPT_RIGHT_HAND",e[e.AAPT_RIGHT_HAND_INDEX=17]="AAPT_RIGHT_HAND_INDEX",e[e.AAPT_LEFT_UP_LEG=18]="AAPT_LEFT_UP_LEG",e[e.AAPT_LEFT_LEG=19]="AAPT_LEFT_LEG",e[e.AAPT_LEFT_FOOT=20]="AAPT_LEFT_FOOT",e[e.AAPT_LEFT_TOE_BASE=21]="AAPT_LEFT_TOE_BASE",e[e.AAPT_RIGHT_UP_LEG=22]="AAPT_RIGHT_UP_LEG",e[e.AAPT_RIGHT_LEG=23]="AAPT_RIGHT_LEG",e[e.AAPT_RIGHT_FOOT=24]="AAPT_RIGHT_FOOT",e[e.AAPT_RIGHT_TOE_BASE=25]="AAPT_RIGHT_TOE_BASE"})($i||($i={}));function Nf(){return{avatarId:void 0,anchorPointId:0}}var et;(function(e){function a(t,i=eo.default.Writer.create()){return t.avatarId!==void 0&&i.uint32(10).string(t.avatarId),t.anchorPointId!==0&&i.uint32(16).int32(t.anchorPointId),i}e.encode=a;function s(t,i){let n=t instanceof eo.default.Reader?t:eo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Nf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.avatarId=n.string();continue;case 2:if(o!==16)break;r.anchorPointId=n.int32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(et||(et={}));var ea={COMPONENT_ID:1073,serialize(e,a){let s=et.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return et.decode(e.buffer(),e.remainingBytes())},create(){return et.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBAvatarAttach"}};var to=h(require("protobufjs/minimal"));var ke=h(require("protobufjs/minimal"));function Pf(){return{r:0,g:0,b:0}}var P;(function(e){function a(t,i=ke.default.Writer.create()){return t.r!==0&&i.uint32(13).float(t.r),t.g!==0&&i.uint32(21).float(t.g),t.b!==0&&i.uint32(29).float(t.b),i}e.encode=a;function s(t,i){let n=t instanceof ke.default.Reader?t:ke.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Pf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==13)break;r.r=n.float();continue;case 2:if(o!==21)break;r.g=n.float();continue;case 3:if(o!==29)break;r.b=n.float();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(P||(P={}));function Mf(){return{r:0,g:0,b:0,a:0}}var D;(function(e){function a(t,i=ke.default.Writer.create()){return t.r!==0&&i.uint32(13).float(t.r),t.g!==0&&i.uint32(21).float(t.g),t.b!==0&&i.uint32(29).float(t.b),t.a!==0&&i.uint32(37).float(t.a),i}e.encode=a;function s(t,i){let n=t instanceof ke.default.Reader?t:ke.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Mf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==13)break;r.r=n.float();continue;case 2:if(o!==21)break;r.g=n.float();continue;case 3:if(o!==29)break;r.b=n.float();continue;case 4:if(o!==37)break;r.a=n.float();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(D||(D={}));function Df(){return{skinColor:void 0,eyesColor:void 0,hairColor:void 0,bodyShapeUrn:"",name:""}}var tt;(function(e){function a(t,i=to.default.Writer.create()){return t.skinColor!==void 0&&P.encode(t.skinColor,i.uint32(10).fork()).ldelim(),t.eyesColor!==void 0&&P.encode(t.eyesColor,i.uint32(18).fork()).ldelim(),t.hairColor!==void 0&&P.encode(t.hairColor,i.uint32(26).fork()).ldelim(),t.bodyShapeUrn!==""&&i.uint32(34).string(t.bodyShapeUrn),t.name!==""&&i.uint32(42).string(t.name),i}e.encode=a;function s(t,i){let n=t instanceof to.default.Reader?t:to.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Df();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.skinColor=P.decode(n,n.uint32());continue;case 2:if(o!==18)break;r.eyesColor=P.decode(n,n.uint32());continue;case 3:if(o!==26)break;r.hairColor=P.decode(n,n.uint32());continue;case 4:if(o!==34)break;r.bodyShapeUrn=n.string();continue;case 5:if(o!==42)break;r.name=n.string();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(tt||(tt={}));var ta={COMPONENT_ID:1087,serialize(e,a){let s=tt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return tt.decode(e.buffer(),e.remainingBytes())},create(){return tt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBAvatarBase"}};var no=h(require("protobufjs/minimal"));function Uf(){return{emoteUrn:"",loop:!1,timestamp:0}}var nt;(function(e){function a(t,i=no.default.Writer.create()){return t.emoteUrn!==""&&i.uint32(10).string(t.emoteUrn),t.loop===!0&&i.uint32(16).bool(t.loop),t.timestamp!==0&&i.uint32(24).uint32(t.timestamp),i}e.encode=a;function s(t,i){let n=t instanceof no.default.Reader?t:no.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Uf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.emoteUrn=n.string();continue;case 2:if(o!==16)break;r.loop=n.bool();continue;case 3:if(o!==24)break;r.timestamp=n.uint32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(nt||(nt={}));var na={COMPONENT_ID:1088,serialize(e,a){let s=nt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return nt.decode(e.buffer(),e.remainingBytes())},create(){return nt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBAvatarEmoteCommand"}};var oo=h(require("protobufjs/minimal"));function vf(){return{wearableUrns:[],emoteUrns:[]}}var ot;(function(e){function a(t,i=oo.default.Writer.create()){for(let n of t.wearableUrns)i.uint32(10).string(n);for(let n of t.emoteUrns)i.uint32(18).string(n);return i}e.encode=a;function s(t,i){let n=t instanceof oo.default.Reader?t:oo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=vf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.wearableUrns.push(n.string());continue;case 2:if(o!==18)break;r.emoteUrns.push(n.string());continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(ot||(ot={}));var oa={COMPONENT_ID:1091,serialize(e,a){let s=ot.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return ot.decode(e.buffer(),e.remainingBytes())},create(){return ot.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBAvatarEquippedData"}};var ro=h(require("protobufjs/minimal"));var J=h(require("protobufjs/minimal"));function Lf(){return{x:0,y:0,z:0}}var ra;(function(e){function a(t,i=J.default.Writer.create()){return t.x!==0&&i.uint32(13).float(t.x),t.y!==0&&i.uint32(21).float(t.y),t.z!==0&&i.uint32(29).float(t.z),i}e.encode=a;function s(t,i){let n=t instanceof J.default.Reader?t:J.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Lf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==13)break;r.x=n.float();continue;case 2:if(o!==21)break;r.y=n.float();continue;case 3:if(o!==29)break;r.z=n.float();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(ra||(ra={}));function Ff(){return{x:0,y:0,z:0}}var x;(function(e){function a(t,i=J.default.Writer.create()){return t.x!==0&&i.uint32(13).float(t.x),t.y!==0&&i.uint32(21).float(t.y),t.z!==0&&i.uint32(29).float(t.z),i}e.encode=a;function s(t,i){let n=t instanceof J.default.Reader?t:J.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Ff();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==13)break;r.x=n.float();continue;case 2:if(o!==21)break;r.y=n.float();continue;case 3:if(o!==29)break;r.z=n.float();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(x||(x={}));function Qf(){return{x:0,y:0}}var Oe;(function(e){function a(t,i=J.default.Writer.create()){return t.x!==0&&i.uint32(13).float(t.x),t.y!==0&&i.uint32(21).float(t.y),i}e.encode=a;function s(t,i){let n=t instanceof J.default.Reader?t:J.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Qf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==13)break;r.x=n.float();continue;case 2:if(o!==21)break;r.y=n.float();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Oe||(Oe={}));function Wf(){return{x:0,y:0,z:0,w:0}}var Ne;(function(e){function a(t,i=J.default.Writer.create()){return t.x!==0&&i.uint32(13).float(t.x),t.y!==0&&i.uint32(21).float(t.y),t.z!==0&&i.uint32(29).float(t.z),t.w!==0&&i.uint32(37).float(t.w),i}e.encode=a;function s(t,i){let n=t instanceof J.default.Reader?t:J.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Wf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==13)break;r.x=n.float();continue;case 2:if(o!==21)break;r.y=n.float();continue;case 3:if(o!==29)break;r.z=n.float();continue;case 4:if(o!==37)break;r.w=n.float();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Ne||(Ne={}));var ia;(function(e){e[e.AMT_HIDE_AVATARS=0]="AMT_HIDE_AVATARS",e[e.AMT_DISABLE_PASSPORTS=1]="AMT_DISABLE_PASSPORTS"})(ia||(ia={}));function Gf(){return{area:void 0,excludeIds:[],modifiers:[]}}var rt;(function(e){function a(t,i=ro.default.Writer.create()){t.area!==void 0&&x.encode(t.area,i.uint32(10).fork()).ldelim();for(let n of t.excludeIds)i.uint32(18).string(n);i.uint32(26).fork();for(let n of t.modifiers)i.int32(n);return i.ldelim(),i}e.encode=a;function s(t,i){let n=t instanceof ro.default.Reader?t:ro.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Gf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.area=x.decode(n,n.uint32());continue;case 2:if(o!==18)break;r.excludeIds.push(n.string());continue;case 3:if(o===24){r.modifiers.push(n.int32());continue}if(o===26){let f=n.uint32()+n.pos;for(;n.pos<f;)r.modifiers.push(n.int32());continue}break}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(rt||(rt={}));var aa={COMPONENT_ID:1070,serialize(e,a){let s=rt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return rt.decode(e.buffer(),e.remainingBytes())},create(){return rt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBAvatarModifierArea"}};var Hr=h(require("long")),Pe=h(require("protobufjs/minimal"));function Vf(){return{id:"",name:void 0,bodyShape:void 0,skinColor:void 0,hairColor:void 0,eyeColor:void 0,expressionTriggerId:void 0,expressionTriggerTimestamp:void 0,talking:void 0,wearables:[],emotes:[]}}var it;(function(e){function a(t,i=Pe.default.Writer.create()){t.id!==""&&i.uint32(10).string(t.id),t.name!==void 0&&i.uint32(18).string(t.name),t.bodyShape!==void 0&&i.uint32(26).string(t.bodyShape),t.skinColor!==void 0&&P.encode(t.skinColor,i.uint32(34).fork()).ldelim(),t.hairColor!==void 0&&P.encode(t.hairColor,i.uint32(42).fork()).ldelim(),t.eyeColor!==void 0&&P.encode(t.eyeColor,i.uint32(50).fork()).ldelim(),t.expressionTriggerId!==void 0&&i.uint32(58).string(t.expressionTriggerId),t.expressionTriggerTimestamp!==void 0&&i.uint32(64).int64(t.expressionTriggerTimestamp),t.talking!==void 0&&i.uint32(72).bool(t.talking);for(let n of t.wearables)i.uint32(82).string(n);for(let n of t.emotes)i.uint32(90).string(n);return i}e.encode=a;function s(t,i){let n=t instanceof Pe.default.Reader?t:Pe.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Vf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.id=n.string();continue;case 2:if(o!==18)break;r.name=n.string();continue;case 3:if(o!==26)break;r.bodyShape=n.string();continue;case 4:if(o!==34)break;r.skinColor=P.decode(n,n.uint32());continue;case 5:if(o!==42)break;r.hairColor=P.decode(n,n.uint32());continue;case 6:if(o!==50)break;r.eyeColor=P.decode(n,n.uint32());continue;case 7:if(o!==58)break;r.expressionTriggerId=n.string();continue;case 8:if(o!==64)break;r.expressionTriggerTimestamp=Hf(n.int64());continue;case 9:if(o!==72)break;r.talking=n.bool();continue;case 10:if(o!==82)break;r.wearables.push(n.string());continue;case 11:if(o!==90)break;r.emotes.push(n.string());continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(it||(it={}));var zf=(()=>{if(typeof globalThis<"u")return globalThis;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();function Hf(e){if(e.gt(Number.MAX_SAFE_INTEGER))throw new zf.Error("Value is larger than Number.MAX_SAFE_INTEGER");return e.toNumber()}Pe.default.util.Long!==Hr.default&&(Pe.default.util.Long=Hr.default,Pe.default.configure());var sa={COMPONENT_ID:1080,serialize(e,a){let s=it.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return it.decode(e.buffer(),e.remainingBytes())},create(){return it.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBAvatarShape"}};var io=h(require("protobufjs/minimal"));var ca;(function(e){e[e.BM_NONE=0]="BM_NONE",e[e.BM_X=1]="BM_X",e[e.BM_Y=2]="BM_Y",e[e.BM_Z=4]="BM_Z",e[e.BM_ALL=7]="BM_ALL"})(ca||(ca={}));function Yf(){return{billboardMode:void 0}}var at;(function(e){function a(t,i=io.default.Writer.create()){return t.billboardMode!==void 0&&i.uint32(8).int32(t.billboardMode),i}e.encode=a;function s(t,i){let n=t instanceof io.default.Reader?t:io.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Yf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.billboardMode=n.int32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(at||(at={}));var fa={COMPONENT_ID:1090,serialize(e,a){let s=at.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return at.decode(e.buffer(),e.remainingBytes())},create(){return at.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBBillboard"}};var ao=h(require("protobufjs/minimal"));function Kf(){return{mode:0}}var st;(function(e){function a(t,i=ao.default.Writer.create()){return t.mode!==0&&i.uint32(8).int32(t.mode),i}e.encode=a;function s(t,i){let n=t instanceof ao.default.Reader?t:ao.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Kf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.mode=n.int32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(st||(st={}));var da={COMPONENT_ID:1072,serialize(e,a){let s=st.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return st.decode(e.buffer(),e.remainingBytes())},create(){return st.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBCameraMode"}};var so=h(require("protobufjs/minimal"));function jf(){return{area:void 0,mode:0}}var ct;(function(e){function a(t,i=so.default.Writer.create()){return t.area!==void 0&&x.encode(t.area,i.uint32(10).fork()).ldelim(),t.mode!==0&&i.uint32(16).int32(t.mode),i}e.encode=a;function s(t,i){let n=t instanceof so.default.Reader?t:so.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=jf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.area=x.decode(n,n.uint32());continue;case 2:if(o!==16)break;r.mode=n.int32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(ct||(ct={}));var ua={COMPONENT_ID:1071,serialize(e,a){let s=ct.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return ct.decode(e.buffer(),e.remainingBytes())},create(){return ct.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBCameraModeArea"}};var co=h(require("protobufjs/minimal"));function Jf(){return{frameNumber:0,totalRuntime:0,tickNumber:0}}var ft;(function(e){function a(t,i=co.default.Writer.create()){return t.frameNumber!==0&&i.uint32(8).uint32(t.frameNumber),t.totalRuntime!==0&&i.uint32(21).float(t.totalRuntime),t.tickNumber!==0&&i.uint32(24).uint32(t.tickNumber),i}e.encode=a;function s(t,i){let n=t instanceof co.default.Reader?t:co.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Jf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.frameNumber=n.uint32();continue;case 2:if(o!==21)break;r.totalRuntime=n.float();continue;case 3:if(o!==24)break;r.tickNumber=n.uint32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(ft||(ft={}));var pa={COMPONENT_ID:1048,serialize(e,a){let s=ft.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return ft.decode(e.buffer(),e.remainingBytes())},create(){return ft.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBEngineInfo"}};var fo=h(require("protobufjs/minimal"));function qf(){return{src:"",visibleMeshesCollisionMask:void 0,invisibleMeshesCollisionMask:void 0}}var dt;(function(e){function a(t,i=fo.default.Writer.create()){return t.src!==""&&i.uint32(10).string(t.src),t.visibleMeshesCollisionMask!==void 0&&i.uint32(32).uint32(t.visibleMeshesCollisionMask),t.invisibleMeshesCollisionMask!==void 0&&i.uint32(40).uint32(t.invisibleMeshesCollisionMask),i}e.encode=a;function s(t,i){let n=t instanceof fo.default.Reader?t:fo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=qf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.src=n.string();continue;case 4:if(o!==32)break;r.visibleMeshesCollisionMask=n.uint32();continue;case 5:if(o!==40)break;r.invisibleMeshesCollisionMask=n.uint32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(dt||(dt={}));var la={COMPONENT_ID:1041,serialize(e,a){let s=dt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return dt.decode(e.buffer(),e.remainingBytes())},create(){return dt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBGltfContainer"}};var uo=h(require("protobufjs/minimal"));function Xf(){return{currentState:0}}var ut;(function(e){function a(t,i=uo.default.Writer.create()){return t.currentState!==0&&i.uint32(8).int32(t.currentState),i}e.encode=a;function s(t,i){let n=t instanceof uo.default.Reader?t:uo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Xf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.currentState=n.int32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(ut||(ut={}));var Aa={COMPONENT_ID:1049,serialize(e,a){let s=ut.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return ut.decode(e.buffer(),e.remainingBytes())},create(){return ut.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBGltfContainerLoadingState"}};var Me=h(require("protobufjs/minimal"));function Zf(){return{mode:void 0}}var pt;(function(e){function a(t,i=Me.default.Writer.create()){switch(t.mode?.$case){case"standard":po.encode(t.mode.standard,i.uint32(10).fork()).ldelim();break}return i}e.encode=a;function s(t,i){let n=t instanceof Me.default.Reader?t:Me.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Zf();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.mode={$case:"standard",standard:po.decode(n,n.uint32())};continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(pt||(pt={}));function $f(){return{disableAll:void 0,disableWalk:void 0,disableJog:void 0,disableRun:void 0,disableJump:void 0,disableEmote:void 0}}var po;(function(e){function a(t,i=Me.default.Writer.create()){return t.disableAll!==void 0&&i.uint32(8).bool(t.disableAll),t.disableWalk!==void 0&&i.uint32(16).bool(t.disableWalk),t.disableJog!==void 0&&i.uint32(24).bool(t.disableJog),t.disableRun!==void 0&&i.uint32(32).bool(t.disableRun),t.disableJump!==void 0&&i.uint32(40).bool(t.disableJump),t.disableEmote!==void 0&&i.uint32(48).bool(t.disableEmote),i}e.encode=a;function s(t,i){let n=t instanceof Me.default.Reader?t:Me.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=$f();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.disableAll=n.bool();continue;case 2:if(o!==16)break;r.disableWalk=n.bool();continue;case 3:if(o!==24)break;r.disableJog=n.bool();continue;case 4:if(o!==32)break;r.disableRun=n.bool();continue;case 5:if(o!==40)break;r.disableJump=n.bool();continue;case 6:if(o!==48)break;r.disableEmote=n.bool();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(po||(po={}));var ma={COMPONENT_ID:1078,serialize(e,a){let s=pt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return pt.decode(e.buffer(),e.remainingBytes())},create(){return pt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBInputModifier"}};var lo=h(require("protobufjs/minimal"));function ed(){return{virtualCameraEntity:void 0}}var lt;(function(e){function a(t,i=lo.default.Writer.create()){return t.virtualCameraEntity!==void 0&&i.uint32(8).uint32(t.virtualCameraEntity),i}e.encode=a;function s(t,i){let n=t instanceof lo.default.Reader?t:lo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=ed();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.virtualCameraEntity=n.uint32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(lt||(lt={}));var Ea={COMPONENT_ID:1075,serialize(e,a){let s=lt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return lt.decode(e.buffer(),e.remainingBytes())},create(){return lt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBMainCamera"}};var ce=h(require("protobufjs/minimal"));var q=h(require("protobufjs/minimal"));var Ca;(function(e){e[e.TWM_REPEAT=0]="TWM_REPEAT",e[e.TWM_CLAMP=1]="TWM_CLAMP",e[e.TWM_MIRROR=2]="TWM_MIRROR"})(Ca||(Ca={}));var ya;(function(e){e[e.TFM_POINT=0]="TFM_POINT",e[e.TFM_BILINEAR=1]="TFM_BILINEAR",e[e.TFM_TRILINEAR=2]="TFM_TRILINEAR"})(ya||(ya={}));function td(){return{src:"",wrapMode:void 0,filterMode:void 0,offset:void 0,tiling:void 0}}var Ao;(function(e){function a(t,i=q.default.Writer.create()){return t.src!==""&&i.uint32(10).string(t.src),t.wrapMode!==void 0&&i.uint32(16).int32(t.wrapMode),t.filterMode!==void 0&&i.uint32(24).int32(t.filterMode),t.offset!==void 0&&Oe.encode(t.offset,i.uint32(34).fork()).ldelim(),t.tiling!==void 0&&Oe.encode(t.tiling,i.uint32(42).fork()).ldelim(),i}e.encode=a;function s(t,i){let n=t instanceof q.default.Reader?t:q.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=td();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.src=n.string();continue;case 2:if(o!==16)break;r.wrapMode=n.int32();continue;case 3:if(o!==24)break;r.filterMode=n.int32();continue;case 4:if(o!==34)break;r.offset=Oe.decode(n,n.uint32());continue;case 5:if(o!==42)break;r.tiling=Oe.decode(n,n.uint32());continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Ao||(Ao={}));function nd(){return{userId:"",wrapMode:void 0,filterMode:void 0}}var mo;(function(e){function a(t,i=q.default.Writer.create()){return t.userId!==""&&i.uint32(10).string(t.userId),t.wrapMode!==void 0&&i.uint32(16).int32(t.wrapMode),t.filterMode!==void 0&&i.uint32(24).int32(t.filterMode),i}e.encode=a;function s(t,i){let n=t instanceof q.default.Reader?t:q.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=nd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.userId=n.string();continue;case 2:if(o!==16)break;r.wrapMode=n.int32();continue;case 3:if(o!==24)break;r.filterMode=n.int32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(mo||(mo={}));function od(){return{videoPlayerEntity:0,wrapMode:void 0,filterMode:void 0}}var Eo;(function(e){function a(t,i=q.default.Writer.create()){return t.videoPlayerEntity!==0&&i.uint32(8).uint32(t.videoPlayerEntity),t.wrapMode!==void 0&&i.uint32(16).int32(t.wrapMode),t.filterMode!==void 0&&i.uint32(24).int32(t.filterMode),i}e.encode=a;function s(t,i){let n=t instanceof q.default.Reader?t:q.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=od();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.videoPlayerEntity=n.uint32();continue;case 2:if(o!==16)break;r.wrapMode=n.int32();continue;case 3:if(o!==24)break;r.filterMode=n.int32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Eo||(Eo={}));function rd(){return{tex:void 0}}var F;(function(e){function a(t,i=q.default.Writer.create()){switch(t.tex?.$case){case"texture":Ao.encode(t.tex.texture,i.uint32(10).fork()).ldelim();break;case"avatarTexture":mo.encode(t.tex.avatarTexture,i.uint32(18).fork()).ldelim();break;case"videoTexture":Eo.encode(t.tex.videoTexture,i.uint32(26).fork()).ldelim();break}return i}e.encode=a;function s(t,i){let n=t instanceof q.default.Reader?t:q.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=rd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.tex={$case:"texture",texture:Ao.decode(n,n.uint32())};continue;case 2:if(o!==18)break;r.tex={$case:"avatarTexture",avatarTexture:mo.decode(n,n.uint32())};continue;case 3:if(o!==26)break;r.tex={$case:"videoTexture",videoTexture:Eo.decode(n,n.uint32())};continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(F||(F={}));var ha;(function(e){e[e.MTM_OPAQUE=0]="MTM_OPAQUE",e[e.MTM_ALPHA_TEST=1]="MTM_ALPHA_TEST",e[e.MTM_ALPHA_BLEND=2]="MTM_ALPHA_BLEND",e[e.MTM_ALPHA_TEST_AND_ALPHA_BLEND=3]="MTM_ALPHA_TEST_AND_ALPHA_BLEND",e[e.MTM_AUTO=4]="MTM_AUTO"})(ha||(ha={}));function id(){return{material:void 0}}var At;(function(e){function a(t,i=ce.default.Writer.create()){switch(t.material?.$case){case"unlit":Co.encode(t.material.unlit,i.uint32(10).fork()).ldelim();break;case"pbr":yo.encode(t.material.pbr,i.uint32(18).fork()).ldelim();break}return i}e.encode=a;function s(t,i){let n=t instanceof ce.default.Reader?t:ce.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=id();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.material={$case:"unlit",unlit:Co.decode(n,n.uint32())};continue;case 2:if(o!==18)break;r.material={$case:"pbr",pbr:yo.decode(n,n.uint32())};continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(At||(At={}));function ad(){return{texture:void 0,alphaTest:void 0,castShadows:void 0,diffuseColor:void 0,alphaTexture:void 0}}var Co;(function(e){function a(t,i=ce.default.Writer.create()){return t.texture!==void 0&&F.encode(t.texture,i.uint32(10).fork()).ldelim(),t.alphaTest!==void 0&&i.uint32(21).float(t.alphaTest),t.castShadows!==void 0&&i.uint32(24).bool(t.castShadows),t.diffuseColor!==void 0&&D.encode(t.diffuseColor,i.uint32(34).fork()).ldelim(),t.alphaTexture!==void 0&&F.encode(t.alphaTexture,i.uint32(42).fork()).ldelim(),i}e.encode=a;function s(t,i){let n=t instanceof ce.default.Reader?t:ce.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=ad();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.texture=F.decode(n,n.uint32());continue;case 2:if(o!==21)break;r.alphaTest=n.float();continue;case 3:if(o!==24)break;r.castShadows=n.bool();continue;case 4:if(o!==34)break;r.diffuseColor=D.decode(n,n.uint32());continue;case 5:if(o!==42)break;r.alphaTexture=F.decode(n,n.uint32());continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Co||(Co={}));function sd(){return{texture:void 0,alphaTest:void 0,castShadows:void 0,alphaTexture:void 0,emissiveTexture:void 0,bumpTexture:void 0,albedoColor:void 0,emissiveColor:void 0,reflectivityColor:void 0,transparencyMode:void 0,metallic:void 0,roughness:void 0,specularIntensity:void 0,emissiveIntensity:void 0,directIntensity:void 0}}var yo;(function(e){function a(t,i=ce.default.Writer.create()){return t.texture!==void 0&&F.encode(t.texture,i.uint32(10).fork()).ldelim(),t.alphaTest!==void 0&&i.uint32(21).float(t.alphaTest),t.castShadows!==void 0&&i.uint32(24).bool(t.castShadows),t.alphaTexture!==void 0&&F.encode(t.alphaTexture,i.uint32(34).fork()).ldelim(),t.emissiveTexture!==void 0&&F.encode(t.emissiveTexture,i.uint32(42).fork()).ldelim(),t.bumpTexture!==void 0&&F.encode(t.bumpTexture,i.uint32(50).fork()).ldelim(),t.albedoColor!==void 0&&D.encode(t.albedoColor,i.uint32(58).fork()).ldelim(),t.emissiveColor!==void 0&&P.encode(t.emissiveColor,i.uint32(66).fork()).ldelim(),t.reflectivityColor!==void 0&&P.encode(t.reflectivityColor,i.uint32(74).fork()).ldelim(),t.transparencyMode!==void 0&&i.uint32(80).int32(t.transparencyMode),t.metallic!==void 0&&i.uint32(93).float(t.metallic),t.roughness!==void 0&&i.uint32(101).float(t.roughness),t.specularIntensity!==void 0&&i.uint32(117).float(t.specularIntensity),t.emissiveIntensity!==void 0&&i.uint32(125).float(t.emissiveIntensity),t.directIntensity!==void 0&&i.uint32(133).float(t.directIntensity),i}e.encode=a;function s(t,i){let n=t instanceof ce.default.Reader?t:ce.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=sd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.texture=F.decode(n,n.uint32());continue;case 2:if(o!==21)break;r.alphaTest=n.float();continue;case 3:if(o!==24)break;r.castShadows=n.bool();continue;case 4:if(o!==34)break;r.alphaTexture=F.decode(n,n.uint32());continue;case 5:if(o!==42)break;r.emissiveTexture=F.decode(n,n.uint32());continue;case 6:if(o!==50)break;r.bumpTexture=F.decode(n,n.uint32());continue;case 7:if(o!==58)break;r.albedoColor=D.decode(n,n.uint32());continue;case 8:if(o!==66)break;r.emissiveColor=P.decode(n,n.uint32());continue;case 9:if(o!==74)break;r.reflectivityColor=P.decode(n,n.uint32());continue;case 10:if(o!==80)break;r.transparencyMode=n.int32();continue;case 11:if(o!==93)break;r.metallic=n.float();continue;case 12:if(o!==101)break;r.roughness=n.float();continue;case 14:if(o!==117)break;r.specularIntensity=n.float();continue;case 15:if(o!==125)break;r.emissiveIntensity=n.float();continue;case 16:if(o!==133)break;r.directIntensity=n.float();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(yo||(yo={}));var Ta={COMPONENT_ID:1017,serialize(e,a){let s=At.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return At.decode(e.buffer(),e.remainingBytes())},create(){return At.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBMaterial"}};var V=h(require("protobufjs/minimal"));var Sa;(function(e){e[e.CL_NONE=0]="CL_NONE",e[e.CL_POINTER=1]="CL_POINTER",e[e.CL_PHYSICS=2]="CL_PHYSICS",e[e.CL_RESERVED1=4]="CL_RESERVED1",e[e.CL_RESERVED2=8]="CL_RESERVED2",e[e.CL_RESERVED3=16]="CL_RESERVED3",e[e.CL_RESERVED4=32]="CL_RESERVED4",e[e.CL_RESERVED5=64]="CL_RESERVED5",e[e.CL_RESERVED6=128]="CL_RESERVED6",e[e.CL_CUSTOM1=256]="CL_CUSTOM1",e[e.CL_CUSTOM2=512]="CL_CUSTOM2",e[e.CL_CUSTOM3=1024]="CL_CUSTOM3",e[e.CL_CUSTOM4=2048]="CL_CUSTOM4",e[e.CL_CUSTOM5=4096]="CL_CUSTOM5",e[e.CL_CUSTOM6=8192]="CL_CUSTOM6",e[e.CL_CUSTOM7=16384]="CL_CUSTOM7",e[e.CL_CUSTOM8=32768]="CL_CUSTOM8"})(Sa||(Sa={}));function cd(){return{collisionMask:void 0,mesh:void 0}}var mt;(function(e){function a(t,i=V.default.Writer.create()){switch(t.collisionMask!==void 0&&i.uint32(8).uint32(t.collisionMask),t.mesh?.$case){case"box":ho.encode(t.mesh.box,i.uint32(18).fork()).ldelim();break;case"sphere":bo.encode(t.mesh.sphere,i.uint32(26).fork()).ldelim();break;case"cylinder":To.encode(t.mesh.cylinder,i.uint32(34).fork()).ldelim();break;case"plane":So.encode(t.mesh.plane,i.uint32(42).fork()).ldelim();break}return i}e.encode=a;function s(t,i){let n=t instanceof V.default.Reader?t:V.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=cd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.collisionMask=n.uint32();continue;case 2:if(o!==18)break;r.mesh={$case:"box",box:ho.decode(n,n.uint32())};continue;case 3:if(o!==26)break;r.mesh={$case:"sphere",sphere:bo.decode(n,n.uint32())};continue;case 4:if(o!==34)break;r.mesh={$case:"cylinder",cylinder:To.decode(n,n.uint32())};continue;case 5:if(o!==42)break;r.mesh={$case:"plane",plane:So.decode(n,n.uint32())};continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(mt||(mt={}));function fd(){return{}}var ho;(function(e){function a(t,i=V.default.Writer.create()){return i}e.encode=a;function s(t,i){let n=t instanceof V.default.Reader?t:V.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=fd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(ho||(ho={}));function dd(){return{radiusTop:void 0,radiusBottom:void 0}}var To;(function(e){function a(t,i=V.default.Writer.create()){return t.radiusTop!==void 0&&i.uint32(13).float(t.radiusTop),t.radiusBottom!==void 0&&i.uint32(21).float(t.radiusBottom),i}e.encode=a;function s(t,i){let n=t instanceof V.default.Reader?t:V.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=dd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==13)break;r.radiusTop=n.float();continue;case 2:if(o!==21)break;r.radiusBottom=n.float();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(To||(To={}));function ud(){return{}}var So;(function(e){function a(t,i=V.default.Writer.create()){return i}e.encode=a;function s(t,i){let n=t instanceof V.default.Reader?t:V.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=ud();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(So||(So={}));function pd(){return{}}var bo;(function(e){function a(t,i=V.default.Writer.create()){return i}e.encode=a;function s(t,i){let n=t instanceof V.default.Reader?t:V.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=pd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(bo||(bo={}));var ba={COMPONENT_ID:1019,serialize(e,a){let s=mt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return mt.decode(e.buffer(),e.remainingBytes())},create(){return mt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBMeshCollider"}};var z=h(require("protobufjs/minimal"));function ld(){return{mesh:void 0}}var Et;(function(e){function a(t,i=z.default.Writer.create()){switch(t.mesh?.$case){case"box":go.encode(t.mesh.box,i.uint32(10).fork()).ldelim();break;case"sphere":xo.encode(t.mesh.sphere,i.uint32(18).fork()).ldelim();break;case"cylinder":Bo.encode(t.mesh.cylinder,i.uint32(26).fork()).ldelim();break;case"plane":Io.encode(t.mesh.plane,i.uint32(34).fork()).ldelim();break}return i}e.encode=a;function s(t,i){let n=t instanceof z.default.Reader?t:z.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=ld();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.mesh={$case:"box",box:go.decode(n,n.uint32())};continue;case 2:if(o!==18)break;r.mesh={$case:"sphere",sphere:xo.decode(n,n.uint32())};continue;case 3:if(o!==26)break;r.mesh={$case:"cylinder",cylinder:Bo.decode(n,n.uint32())};continue;case 4:if(o!==34)break;r.mesh={$case:"plane",plane:Io.decode(n,n.uint32())};continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Et||(Et={}));function Ad(){return{uvs:[]}}var go;(function(e){function a(t,i=z.default.Writer.create()){i.uint32(10).fork();for(let n of t.uvs)i.float(n);return i.ldelim(),i}e.encode=a;function s(t,i){let n=t instanceof z.default.Reader?t:z.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Ad();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o===13){r.uvs.push(n.float());continue}if(o===10){let f=n.uint32()+n.pos;for(;n.pos<f;)r.uvs.push(n.float());continue}break}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(go||(go={}));function md(){return{radiusTop:void 0,radiusBottom:void 0}}var Bo;(function(e){function a(t,i=z.default.Writer.create()){return t.radiusTop!==void 0&&i.uint32(13).float(t.radiusTop),t.radiusBottom!==void 0&&i.uint32(21).float(t.radiusBottom),i}e.encode=a;function s(t,i){let n=t instanceof z.default.Reader?t:z.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=md();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==13)break;r.radiusTop=n.float();continue;case 2:if(o!==21)break;r.radiusBottom=n.float();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Bo||(Bo={}));function Ed(){return{uvs:[]}}var Io;(function(e){function a(t,i=z.default.Writer.create()){i.uint32(10).fork();for(let n of t.uvs)i.float(n);return i.ldelim(),i}e.encode=a;function s(t,i){let n=t instanceof z.default.Reader?t:z.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Ed();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o===13){r.uvs.push(n.float());continue}if(o===10){let f=n.uint32()+n.pos;for(;n.pos<f;)r.uvs.push(n.float());continue}break}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Io||(Io={}));function Cd(){return{}}var xo;(function(e){function a(t,i=z.default.Writer.create()){return i}e.encode=a;function s(t,i){let n=t instanceof z.default.Reader?t:z.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Cd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(xo||(xo={}));var ga={COMPONENT_ID:1018,serialize(e,a){let s=Et.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return Et.decode(e.buffer(),e.remainingBytes())},create(){return Et.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBMeshRenderer"}};var wo=h(require("protobufjs/minimal"));var Ba;(function(e){e[e.NFT_CLASSIC=0]="NFT_CLASSIC",e[e.NFT_BAROQUE_ORNAMENT=1]="NFT_BAROQUE_ORNAMENT",e[e.NFT_DIAMOND_ORNAMENT=2]="NFT_DIAMOND_ORNAMENT",e[e.NFT_MINIMAL_WIDE=3]="NFT_MINIMAL_WIDE",e[e.NFT_MINIMAL_GREY=4]="NFT_MINIMAL_GREY",e[e.NFT_BLOCKY=5]="NFT_BLOCKY",e[e.NFT_GOLD_EDGES=6]="NFT_GOLD_EDGES",e[e.NFT_GOLD_CARVED=7]="NFT_GOLD_CARVED",e[e.NFT_GOLD_WIDE=8]="NFT_GOLD_WIDE",e[e.NFT_GOLD_ROUNDED=9]="NFT_GOLD_ROUNDED",e[e.NFT_METAL_MEDIUM=10]="NFT_METAL_MEDIUM",e[e.NFT_METAL_WIDE=11]="NFT_METAL_WIDE",e[e.NFT_METAL_SLIM=12]="NFT_METAL_SLIM",e[e.NFT_METAL_ROUNDED=13]="NFT_METAL_ROUNDED",e[e.NFT_PINS=14]="NFT_PINS",e[e.NFT_MINIMAL_BLACK=15]="NFT_MINIMAL_BLACK",e[e.NFT_MINIMAL_WHITE=16]="NFT_MINIMAL_WHITE",e[e.NFT_TAPE=17]="NFT_TAPE",e[e.NFT_WOOD_SLIM=18]="NFT_WOOD_SLIM",e[e.NFT_WOOD_WIDE=19]="NFT_WOOD_WIDE",e[e.NFT_WOOD_TWIGS=20]="NFT_WOOD_TWIGS",e[e.NFT_CANVAS=21]="NFT_CANVAS",e[e.NFT_NONE=22]="NFT_NONE"})(Ba||(Ba={}));function yd(){return{urn:"",style:void 0,color:void 0}}var Ct;(function(e){function a(t,i=wo.default.Writer.create()){return t.urn!==""&&i.uint32(10).string(t.urn),t.style!==void 0&&i.uint32(16).int32(t.style),t.color!==void 0&&P.encode(t.color,i.uint32(26).fork()).ldelim(),i}e.encode=a;function s(t,i){let n=t instanceof wo.default.Reader?t:wo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=yd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.urn=n.string();continue;case 2:if(o!==16)break;r.style=n.int32();continue;case 3:if(o!==26)break;r.color=P.decode(n,n.uint32());continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Ct||(Ct={}));var Ia={COMPONENT_ID:1040,serialize(e,a){let s=Ct.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return Ct.decode(e.buffer(),e.remainingBytes())},create(){return Ct.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBNftShape"}};var _o=h(require("protobufjs/minimal"));function hd(){return{address:"",isGuest:!1}}var yt;(function(e){function a(t,i=_o.default.Writer.create()){return t.address!==""&&i.uint32(10).string(t.address),t.isGuest===!0&&i.uint32(24).bool(t.isGuest),i}e.encode=a;function s(t,i){let n=t instanceof _o.default.Reader?t:_o.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=hd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.address=n.string();continue;case 3:if(o!==24)break;r.isGuest=n.bool();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(yt||(yt={}));var xa={COMPONENT_ID:1089,serialize(e,a){let s=yt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return yt.decode(e.buffer(),e.remainingBytes())},create(){return yt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBPlayerIdentityData"}};var fe=h(require("protobufjs/minimal"));function Td(){return{pointerEvents:[]}}var ht;(function(e){function a(t,i=fe.default.Writer.create()){for(let n of t.pointerEvents)ko.encode(n,i.uint32(10).fork()).ldelim();return i}e.encode=a;function s(t,i){let n=t instanceof fe.default.Reader?t:fe.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Td();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.pointerEvents.push(ko.decode(n,n.uint32()));continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(ht||(ht={}));function Sd(){return{button:void 0,hoverText:void 0,maxDistance:void 0,showFeedback:void 0,showHighlight:void 0}}var Ro;(function(e){function a(t,i=fe.default.Writer.create()){return t.button!==void 0&&i.uint32(8).int32(t.button),t.hoverText!==void 0&&i.uint32(18).string(t.hoverText),t.maxDistance!==void 0&&i.uint32(29).float(t.maxDistance),t.showFeedback!==void 0&&i.uint32(32).bool(t.showFeedback),t.showHighlight!==void 0&&i.uint32(40).bool(t.showHighlight),i}e.encode=a;function s(t,i){let n=t instanceof fe.default.Reader?t:fe.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Sd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.button=n.int32();continue;case 2:if(o!==18)break;r.hoverText=n.string();continue;case 3:if(o!==29)break;r.maxDistance=n.float();continue;case 4:if(o!==32)break;r.showFeedback=n.bool();continue;case 5:if(o!==40)break;r.showHighlight=n.bool();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Ro||(Ro={}));function bd(){return{eventType:0,eventInfo:void 0}}var ko;(function(e){function a(t,i=fe.default.Writer.create()){return t.eventType!==0&&i.uint32(8).int32(t.eventType),t.eventInfo!==void 0&&Ro.encode(t.eventInfo,i.uint32(18).fork()).ldelim(),i}e.encode=a;function s(t,i){let n=t instanceof fe.default.Reader?t:fe.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=bd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.eventType=n.int32();continue;case 2:if(o!==18)break;r.eventInfo=Ro.decode(n,n.uint32());continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(ko||(ko={}));var wa={COMPONENT_ID:1062,serialize(e,a){let s=ht.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return ht.decode(e.buffer(),e.remainingBytes())},create(){return ht.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBPointerEvents"}};var No=h(require("protobufjs/minimal"));var Oo=h(require("protobufjs/minimal"));function gd(){return{position:void 0,globalOrigin:void 0,direction:void 0,normalHit:void 0,length:0,meshName:void 0,entityId:void 0}}var ye;(function(e){function a(t,i=Oo.default.Writer.create()){return t.position!==void 0&&x.encode(t.position,i.uint32(10).fork()).ldelim(),t.globalOrigin!==void 0&&x.encode(t.globalOrigin,i.uint32(18).fork()).ldelim(),t.direction!==void 0&&x.encode(t.direction,i.uint32(26).fork()).ldelim(),t.normalHit!==void 0&&x.encode(t.normalHit,i.uint32(34).fork()).ldelim(),t.length!==0&&i.uint32(45).float(t.length),t.meshName!==void 0&&i.uint32(50).string(t.meshName),t.entityId!==void 0&&i.uint32(56).uint32(t.entityId),i}e.encode=a;function s(t,i){let n=t instanceof Oo.default.Reader?t:Oo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=gd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.position=x.decode(n,n.uint32());continue;case 2:if(o!==18)break;r.globalOrigin=x.decode(n,n.uint32());continue;case 3:if(o!==26)break;r.direction=x.decode(n,n.uint32());continue;case 4:if(o!==34)break;r.normalHit=x.decode(n,n.uint32());continue;case 5:if(o!==45)break;r.length=n.float();continue;case 6:if(o!==50)break;r.meshName=n.string();continue;case 7:if(o!==56)break;r.entityId=n.uint32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(ye||(ye={}));function Bd(){return{button:0,hit:void 0,state:0,timestamp:0,analog:void 0,tickNumber:0}}var Tt;(function(e){function a(t,i=No.default.Writer.create()){return t.button!==0&&i.uint32(8).int32(t.button),t.hit!==void 0&&ye.encode(t.hit,i.uint32(18).fork()).ldelim(),t.state!==0&&i.uint32(32).int32(t.state),t.timestamp!==0&&i.uint32(40).uint32(t.timestamp),t.analog!==void 0&&i.uint32(53).float(t.analog),t.tickNumber!==0&&i.uint32(56).uint32(t.tickNumber),i}e.encode=a;function s(t,i){let n=t instanceof No.default.Reader?t:No.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Bd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.button=n.int32();continue;case 2:if(o!==18)break;r.hit=ye.decode(n,n.uint32());continue;case 4:if(o!==32)break;r.state=n.int32();continue;case 5:if(o!==40)break;r.timestamp=n.uint32();continue;case 6:if(o!==53)break;r.analog=n.float();continue;case 7:if(o!==56)break;r.tickNumber=n.uint32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Tt||(Tt={}));var _a={COMPONENT_ID:1063,serialize(e,a){let s=Tt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return Tt.decode(e.buffer(),e.remainingBytes())},create(){return Tt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBPointerEventsResult"}};var Po=h(require("protobufjs/minimal"));function Id(){return{isPointerLocked:!1}}var St;(function(e){function a(t,i=Po.default.Writer.create()){return t.isPointerLocked===!0&&i.uint32(8).bool(t.isPointerLocked),i}e.encode=a;function s(t,i){let n=t instanceof Po.default.Reader?t:Po.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Id();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.isPointerLocked=n.bool();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(St||(St={}));var Ra={COMPONENT_ID:1074,serialize(e,a){let s=St.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return St.decode(e.buffer(),e.remainingBytes())},create(){return St.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBPointerLock"}};var Mo=h(require("protobufjs/minimal"));var ka;(function(e){e[e.RQT_HIT_FIRST=0]="RQT_HIT_FIRST",e[e.RQT_QUERY_ALL=1]="RQT_QUERY_ALL",e[e.RQT_NONE=2]="RQT_NONE"})(ka||(ka={}));function xd(){return{timestamp:void 0,originOffset:void 0,direction:void 0,maxDistance:0,queryType:0,continuous:void 0,collisionMask:void 0}}var bt;(function(e){function a(t,i=Mo.default.Writer.create()){switch(t.timestamp!==void 0&&i.uint32(8).uint32(t.timestamp),t.originOffset!==void 0&&x.encode(t.originOffset,i.uint32(18).fork()).ldelim(),t.direction?.$case){case"localDirection":x.encode(t.direction.localDirection,i.uint32(50).fork()).ldelim();break;case"globalDirection":x.encode(t.direction.globalDirection,i.uint32(26).fork()).ldelim();break;case"globalTarget":x.encode(t.direction.globalTarget,i.uint32(58).fork()).ldelim();break;case"targetEntity":i.uint32(80).uint32(t.direction.targetEntity);break}return t.maxDistance!==0&&i.uint32(37).float(t.maxDistance),t.queryType!==0&&i.uint32(40).int32(t.queryType),t.continuous!==void 0&&i.uint32(64).bool(t.continuous),t.collisionMask!==void 0&&i.uint32(72).uint32(t.collisionMask),i}e.encode=a;function s(t,i){let n=t instanceof Mo.default.Reader?t:Mo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=xd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.timestamp=n.uint32();continue;case 2:if(o!==18)break;r.originOffset=x.decode(n,n.uint32());continue;case 6:if(o!==50)break;r.direction={$case:"localDirection",localDirection:x.decode(n,n.uint32())};continue;case 3:if(o!==26)break;r.direction={$case:"globalDirection",globalDirection:x.decode(n,n.uint32())};continue;case 7:if(o!==58)break;r.direction={$case:"globalTarget",globalTarget:x.decode(n,n.uint32())};continue;case 10:if(o!==80)break;r.direction={$case:"targetEntity",targetEntity:n.uint32()};continue;case 4:if(o!==37)break;r.maxDistance=n.float();continue;case 5:if(o!==40)break;r.queryType=n.int32();continue;case 8:if(o!==64)break;r.continuous=n.bool();continue;case 9:if(o!==72)break;r.collisionMask=n.uint32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(bt||(bt={}));var Oa={COMPONENT_ID:1067,serialize(e,a){let s=bt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return bt.decode(e.buffer(),e.remainingBytes())},create(){return bt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBRaycast"}};var Do=h(require("protobufjs/minimal"));function wd(){return{timestamp:void 0,globalOrigin:void 0,direction:void 0,hits:[],tickNumber:0}}var gt;(function(e){function a(t,i=Do.default.Writer.create()){t.timestamp!==void 0&&i.uint32(8).uint32(t.timestamp),t.globalOrigin!==void 0&&x.encode(t.globalOrigin,i.uint32(18).fork()).ldelim(),t.direction!==void 0&&x.encode(t.direction,i.uint32(26).fork()).ldelim();for(let n of t.hits)ye.encode(n,i.uint32(34).fork()).ldelim();return t.tickNumber!==0&&i.uint32(40).uint32(t.tickNumber),i}e.encode=a;function s(t,i){let n=t instanceof Do.default.Reader?t:Do.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=wd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.timestamp=n.uint32();continue;case 2:if(o!==18)break;r.globalOrigin=x.decode(n,n.uint32());continue;case 3:if(o!==26)break;r.direction=x.decode(n,n.uint32());continue;case 4:if(o!==34)break;r.hits.push(ye.decode(n,n.uint32()));continue;case 5:if(o!==40)break;r.tickNumber=n.uint32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(gt||(gt={}));var Na={COMPONENT_ID:1068,serialize(e,a){let s=gt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return gt.decode(e.buffer(),e.remainingBytes())},create(){return gt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBRaycastResult"}};var Uo=h(require("protobufjs/minimal"));function _d(){return{baseUrl:"",realmName:"",networkId:0,commsAdapter:"",isPreview:!1,room:void 0,isConnectedSceneRoom:void 0}}var Bt;(function(e){function a(t,i=Uo.default.Writer.create()){return t.baseUrl!==""&&i.uint32(10).string(t.baseUrl),t.realmName!==""&&i.uint32(18).string(t.realmName),t.networkId!==0&&i.uint32(24).int32(t.networkId),t.commsAdapter!==""&&i.uint32(34).string(t.commsAdapter),t.isPreview===!0&&i.uint32(40).bool(t.isPreview),t.room!==void 0&&i.uint32(50).string(t.room),t.isConnectedSceneRoom!==void 0&&i.uint32(56).bool(t.isConnectedSceneRoom),i}e.encode=a;function s(t,i){let n=t instanceof Uo.default.Reader?t:Uo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=_d();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.baseUrl=n.string();continue;case 2:if(o!==18)break;r.realmName=n.string();continue;case 3:if(o!==24)break;r.networkId=n.int32();continue;case 4:if(o!==34)break;r.commsAdapter=n.string();continue;case 5:if(o!==40)break;r.isPreview=n.bool();continue;case 6:if(o!==50)break;r.room=n.string();continue;case 7:if(o!==56)break;r.isConnectedSceneRoom=n.bool();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Bt||(Bt={}));var Pa={COMPONENT_ID:1106,serialize(e,a){let s=Bt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return Bt.decode(e.buffer(),e.remainingBytes())},create(){return Bt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBRealmInfo"}};var vo=h(require("protobufjs/minimal"));function Rd(){return{text:"",font:void 0,fontSize:void 0,fontAutoSize:void 0,textAlign:void 0,width:void 0,height:void 0,paddingTop:void 0,paddingRight:void 0,paddingBottom:void 0,paddingLeft:void 0,lineSpacing:void 0,lineCount:void 0,textWrapping:void 0,shadowBlur:void 0,shadowOffsetX:void 0,shadowOffsetY:void 0,outlineWidth:void 0,shadowColor:void 0,outlineColor:void 0,textColor:void 0}}var It;(function(e){function a(t,i=vo.default.Writer.create()){return t.text!==""&&i.uint32(10).string(t.text),t.font!==void 0&&i.uint32(16).int32(t.font),t.fontSize!==void 0&&i.uint32(29).float(t.fontSize),t.fontAutoSize!==void 0&&i.uint32(32).bool(t.fontAutoSize),t.textAlign!==void 0&&i.uint32(40).int32(t.textAlign),t.width!==void 0&&i.uint32(53).float(t.width),t.height!==void 0&&i.uint32(61).float(t.height),t.paddingTop!==void 0&&i.uint32(69).float(t.paddingTop),t.paddingRight!==void 0&&i.uint32(77).float(t.paddingRight),t.paddingBottom!==void 0&&i.uint32(85).float(t.paddingBottom),t.paddingLeft!==void 0&&i.uint32(93).float(t.paddingLeft),t.lineSpacing!==void 0&&i.uint32(101).float(t.lineSpacing),t.lineCount!==void 0&&i.uint32(104).int32(t.lineCount),t.textWrapping!==void 0&&i.uint32(112).bool(t.textWrapping),t.shadowBlur!==void 0&&i.uint32(125).float(t.shadowBlur),t.shadowOffsetX!==void 0&&i.uint32(133).float(t.shadowOffsetX),t.shadowOffsetY!==void 0&&i.uint32(141).float(t.shadowOffsetY),t.outlineWidth!==void 0&&i.uint32(149).float(t.outlineWidth),t.shadowColor!==void 0&&P.encode(t.shadowColor,i.uint32(154).fork()).ldelim(),t.outlineColor!==void 0&&P.encode(t.outlineColor,i.uint32(162).fork()).ldelim(),t.textColor!==void 0&&D.encode(t.textColor,i.uint32(170).fork()).ldelim(),i}e.encode=a;function s(t,i){let n=t instanceof vo.default.Reader?t:vo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Rd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.text=n.string();continue;case 2:if(o!==16)break;r.font=n.int32();continue;case 3:if(o!==29)break;r.fontSize=n.float();continue;case 4:if(o!==32)break;r.fontAutoSize=n.bool();continue;case 5:if(o!==40)break;r.textAlign=n.int32();continue;case 6:if(o!==53)break;r.width=n.float();continue;case 7:if(o!==61)break;r.height=n.float();continue;case 8:if(o!==69)break;r.paddingTop=n.float();continue;case 9:if(o!==77)break;r.paddingRight=n.float();continue;case 10:if(o!==85)break;r.paddingBottom=n.float();continue;case 11:if(o!==93)break;r.paddingLeft=n.float();continue;case 12:if(o!==101)break;r.lineSpacing=n.float();continue;case 13:if(o!==104)break;r.lineCount=n.int32();continue;case 14:if(o!==112)break;r.textWrapping=n.bool();continue;case 15:if(o!==125)break;r.shadowBlur=n.float();continue;case 16:if(o!==133)break;r.shadowOffsetX=n.float();continue;case 17:if(o!==141)break;r.shadowOffsetY=n.float();continue;case 18:if(o!==149)break;r.outlineWidth=n.float();continue;case 19:if(o!==154)break;r.shadowColor=P.decode(n,n.uint32());continue;case 20:if(o!==162)break;r.outlineColor=P.decode(n,n.uint32());continue;case 21:if(o!==170)break;r.textColor=D.decode(n,n.uint32());continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(It||(It={}));var Ma={COMPONENT_ID:1030,serialize(e,a){let s=It.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return It.decode(e.buffer(),e.remainingBytes())},create(){return It.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBTextShape"}};var X=h(require("protobufjs/minimal"));var Da;(function(e){e[e.EF_LINEAR=0]="EF_LINEAR",e[e.EF_EASEINQUAD=1]="EF_EASEINQUAD",e[e.EF_EASEOUTQUAD=2]="EF_EASEOUTQUAD",e[e.EF_EASEQUAD=3]="EF_EASEQUAD",e[e.EF_EASEINSINE=4]="EF_EASEINSINE",e[e.EF_EASEOUTSINE=5]="EF_EASEOUTSINE",e[e.EF_EASESINE=6]="EF_EASESINE",e[e.EF_EASEINEXPO=7]="EF_EASEINEXPO",e[e.EF_EASEOUTEXPO=8]="EF_EASEOUTEXPO",e[e.EF_EASEEXPO=9]="EF_EASEEXPO",e[e.EF_EASEINELASTIC=10]="EF_EASEINELASTIC",e[e.EF_EASEOUTELASTIC=11]="EF_EASEOUTELASTIC",e[e.EF_EASEELASTIC=12]="EF_EASEELASTIC",e[e.EF_EASEINBOUNCE=13]="EF_EASEINBOUNCE",e[e.EF_EASEOUTBOUNCE=14]="EF_EASEOUTBOUNCE",e[e.EF_EASEBOUNCE=15]="EF_EASEBOUNCE",e[e.EF_EASEINCUBIC=16]="EF_EASEINCUBIC",e[e.EF_EASEOUTCUBIC=17]="EF_EASEOUTCUBIC",e[e.EF_EASECUBIC=18]="EF_EASECUBIC",e[e.EF_EASEINQUART=19]="EF_EASEINQUART",e[e.EF_EASEOUTQUART=20]="EF_EASEOUTQUART",e[e.EF_EASEQUART=21]="EF_EASEQUART",e[e.EF_EASEINQUINT=22]="EF_EASEINQUINT",e[e.EF_EASEOUTQUINT=23]="EF_EASEOUTQUINT",e[e.EF_EASEQUINT=24]="EF_EASEQUINT",e[e.EF_EASEINCIRC=25]="EF_EASEINCIRC",e[e.EF_EASEOUTCIRC=26]="EF_EASEOUTCIRC",e[e.EF_EASECIRC=27]="EF_EASECIRC",e[e.EF_EASEINBACK=28]="EF_EASEINBACK",e[e.EF_EASEOUTBACK=29]="EF_EASEOUTBACK",e[e.EF_EASEBACK=30]="EF_EASEBACK"})(Da||(Da={}));function kd(){return{duration:0,easingFunction:0,mode:void 0,playing:void 0,currentTime:void 0}}var Ae;(function(e){function a(t,i=X.default.Writer.create()){switch(t.duration!==0&&i.uint32(13).float(t.duration),t.easingFunction!==0&&i.uint32(16).int32(t.easingFunction),t.mode?.$case){case"move":Lo.encode(t.mode.move,i.uint32(26).fork()).ldelim();break;case"rotate":Fo.encode(t.mode.rotate,i.uint32(34).fork()).ldelim();break;case"scale":Qo.encode(t.mode.scale,i.uint32(42).fork()).ldelim();break}return t.playing!==void 0&&i.uint32(48).bool(t.playing),t.currentTime!==void 0&&i.uint32(61).float(t.currentTime),i}e.encode=a;function s(t,i){let n=t instanceof X.default.Reader?t:X.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=kd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==13)break;r.duration=n.float();continue;case 2:if(o!==16)break;r.easingFunction=n.int32();continue;case 3:if(o!==26)break;r.mode={$case:"move",move:Lo.decode(n,n.uint32())};continue;case 4:if(o!==34)break;r.mode={$case:"rotate",rotate:Fo.decode(n,n.uint32())};continue;case 5:if(o!==42)break;r.mode={$case:"scale",scale:Qo.decode(n,n.uint32())};continue;case 6:if(o!==48)break;r.playing=n.bool();continue;case 7:if(o!==61)break;r.currentTime=n.float();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Ae||(Ae={}));function Od(){return{start:void 0,end:void 0,faceDirection:void 0}}var Lo;(function(e){function a(t,i=X.default.Writer.create()){return t.start!==void 0&&x.encode(t.start,i.uint32(10).fork()).ldelim(),t.end!==void 0&&x.encode(t.end,i.uint32(18).fork()).ldelim(),t.faceDirection!==void 0&&i.uint32(24).bool(t.faceDirection),i}e.encode=a;function s(t,i){let n=t instanceof X.default.Reader?t:X.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Od();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.start=x.decode(n,n.uint32());continue;case 2:if(o!==18)break;r.end=x.decode(n,n.uint32());continue;case 3:if(o!==24)break;r.faceDirection=n.bool();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Lo||(Lo={}));function Nd(){return{start:void 0,end:void 0}}var Fo;(function(e){function a(t,i=X.default.Writer.create()){return t.start!==void 0&&Ne.encode(t.start,i.uint32(10).fork()).ldelim(),t.end!==void 0&&Ne.encode(t.end,i.uint32(18).fork()).ldelim(),i}e.encode=a;function s(t,i){let n=t instanceof X.default.Reader?t:X.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Nd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.start=Ne.decode(n,n.uint32());continue;case 2:if(o!==18)break;r.end=Ne.decode(n,n.uint32());continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Fo||(Fo={}));function Pd(){return{start:void 0,end:void 0}}var Qo;(function(e){function a(t,i=X.default.Writer.create()){return t.start!==void 0&&x.encode(t.start,i.uint32(10).fork()).ldelim(),t.end!==void 0&&x.encode(t.end,i.uint32(18).fork()).ldelim(),i}e.encode=a;function s(t,i){let n=t instanceof X.default.Reader?t:X.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Pd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.start=x.decode(n,n.uint32());continue;case 2:if(o!==18)break;r.end=x.decode(n,n.uint32());continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Qo||(Qo={}));var Ua={COMPONENT_ID:1102,serialize(e,a){let s=Ae.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return Ae.decode(e.buffer(),e.remainingBytes())},create(){return Ae.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBTween"}};var Wo=h(require("protobufjs/minimal"));var va;(function(e){e[e.TL_RESTART=0]="TL_RESTART",e[e.TL_YOYO=1]="TL_YOYO"})(va||(va={}));function Md(){return{sequence:[],loop:void 0}}var xt;(function(e){function a(t,i=Wo.default.Writer.create()){for(let n of t.sequence)Ae.encode(n,i.uint32(10).fork()).ldelim();return t.loop!==void 0&&i.uint32(16).int32(t.loop),i}e.encode=a;function s(t,i){let n=t instanceof Wo.default.Reader?t:Wo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Md();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.sequence.push(Ae.decode(n,n.uint32()));continue;case 2:if(o!==16)break;r.loop=n.int32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(xt||(xt={}));var La={COMPONENT_ID:1104,serialize(e,a){let s=xt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return xt.decode(e.buffer(),e.remainingBytes())},create(){return xt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBTweenSequence"}};var Go=h(require("protobufjs/minimal"));var Fa;(function(e){e[e.TS_ACTIVE=0]="TS_ACTIVE",e[e.TS_COMPLETED=1]="TS_COMPLETED",e[e.TS_PAUSED=2]="TS_PAUSED"})(Fa||(Fa={}));function Dd(){return{state:0,currentTime:0}}var wt;(function(e){function a(t,i=Go.default.Writer.create()){return t.state!==0&&i.uint32(8).int32(t.state),t.currentTime!==0&&i.uint32(21).float(t.currentTime),i}e.encode=a;function s(t,i){let n=t instanceof Go.default.Reader?t:Go.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Dd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.state=n.int32();continue;case 2:if(o!==21)break;r.currentTime=n.float();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(wt||(wt={}));var Qa={COMPONENT_ID:1103,serialize(e,a){let s=wt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return wt.decode(e.buffer(),e.remainingBytes())},create(){return wt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBTweenState"}};var Vo=h(require("protobufjs/minimal"));var De=h(require("protobufjs/minimal"));function Ud(){return{top:0,left:0,right:0,bottom:0}}var he;(function(e){function a(t,i=De.default.Writer.create()){return t.top!==0&&i.uint32(13).float(t.top),t.left!==0&&i.uint32(21).float(t.left),t.right!==0&&i.uint32(29).float(t.right),t.bottom!==0&&i.uint32(37).float(t.bottom),i}e.encode=a;function s(t,i){let n=t instanceof De.default.Reader?t:De.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Ud();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==13)break;r.top=n.float();continue;case 2:if(o!==21)break;r.left=n.float();continue;case 3:if(o!==29)break;r.right=n.float();continue;case 4:if(o!==37)break;r.bottom=n.float();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(he||(he={}));function vd(){return{x:0,y:0,width:0,height:0}}var Wa;(function(e){function a(t,i=De.default.Writer.create()){return t.x!==0&&i.uint32(13).float(t.x),t.y!==0&&i.uint32(21).float(t.y),t.width!==0&&i.uint32(29).float(t.width),t.height!==0&&i.uint32(37).float(t.height),i}e.encode=a;function s(t,i){let n=t instanceof De.default.Reader?t:De.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=vd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==13)break;r.x=n.float();continue;case 2:if(o!==21)break;r.y=n.float();continue;case 3:if(o!==29)break;r.width=n.float();continue;case 4:if(o!==37)break;r.height=n.float();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Wa||(Wa={}));var Ga;(function(e){e[e.NINE_SLICES=0]="NINE_SLICES",e[e.CENTER=1]="CENTER",e[e.STRETCH=2]="STRETCH"})(Ga||(Ga={}));function Ld(){return{color:void 0,texture:void 0,textureMode:0,textureSlices:void 0,uvs:[]}}var _t;(function(e){function a(t,i=Vo.default.Writer.create()){t.color!==void 0&&D.encode(t.color,i.uint32(10).fork()).ldelim(),t.texture!==void 0&&F.encode(t.texture,i.uint32(18).fork()).ldelim(),t.textureMode!==0&&i.uint32(24).int32(t.textureMode),t.textureSlices!==void 0&&he.encode(t.textureSlices,i.uint32(34).fork()).ldelim(),i.uint32(42).fork();for(let n of t.uvs)i.float(n);return i.ldelim(),i}e.encode=a;function s(t,i){let n=t instanceof Vo.default.Reader?t:Vo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Ld();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.color=D.decode(n,n.uint32());continue;case 2:if(o!==18)break;r.texture=F.decode(n,n.uint32());continue;case 3:if(o!==24)break;r.textureMode=n.int32();continue;case 4:if(o!==34)break;r.textureSlices=he.decode(n,n.uint32());continue;case 5:if(o===45){r.uvs.push(n.float());continue}if(o===42){let f=n.uint32()+n.pos;for(;n.pos<f;)r.uvs.push(n.float());continue}break}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(_t||(_t={}));var Va={COMPONENT_ID:1053,serialize(e,a){let s=_t.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return _t.decode(e.buffer(),e.remainingBytes())},create(){return _t.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBUiBackground"}};var zo=h(require("protobufjs/minimal"));function Fd(){return{devicePixelRatio:0,width:0,height:0,interactableArea:void 0}}var Rt;(function(e){function a(t,i=zo.default.Writer.create()){return t.devicePixelRatio!==0&&i.uint32(13).float(t.devicePixelRatio),t.width!==0&&i.uint32(16).int32(t.width),t.height!==0&&i.uint32(24).int32(t.height),t.interactableArea!==void 0&&he.encode(t.interactableArea,i.uint32(34).fork()).ldelim(),i}e.encode=a;function s(t,i){let n=t instanceof zo.default.Reader?t:zo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Fd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==13)break;r.devicePixelRatio=n.float();continue;case 2:if(o!==16)break;r.width=n.int32();continue;case 3:if(o!==24)break;r.height=n.int32();continue;case 4:if(o!==34)break;r.interactableArea=he.decode(n,n.uint32());continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Rt||(Rt={}));var za={COMPONENT_ID:1054,serialize(e,a){let s=Rt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return Rt.decode(e.buffer(),e.remainingBytes())},create(){return Rt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBUiCanvasInformation"}};var Ho=h(require("protobufjs/minimal"));function Qd(){return{acceptEmpty:!1,emptyLabel:void 0,options:[],selectedIndex:void 0,disabled:!1,color:void 0,textAlign:void 0,font:void 0,fontSize:void 0}}var kt;(function(e){function a(t,i=Ho.default.Writer.create()){t.acceptEmpty===!0&&i.uint32(8).bool(t.acceptEmpty),t.emptyLabel!==void 0&&i.uint32(18).string(t.emptyLabel);for(let n of t.options)i.uint32(26).string(n);return t.selectedIndex!==void 0&&i.uint32(32).int32(t.selectedIndex),t.disabled===!0&&i.uint32(40).bool(t.disabled),t.color!==void 0&&D.encode(t.color,i.uint32(50).fork()).ldelim(),t.textAlign!==void 0&&i.uint32(80).int32(t.textAlign),t.font!==void 0&&i.uint32(88).int32(t.font),t.fontSize!==void 0&&i.uint32(96).int32(t.fontSize),i}e.encode=a;function s(t,i){let n=t instanceof Ho.default.Reader?t:Ho.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Qd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.acceptEmpty=n.bool();continue;case 2:if(o!==18)break;r.emptyLabel=n.string();continue;case 3:if(o!==26)break;r.options.push(n.string());continue;case 4:if(o!==32)break;r.selectedIndex=n.int32();continue;case 5:if(o!==40)break;r.disabled=n.bool();continue;case 6:if(o!==50)break;r.color=D.decode(n,n.uint32());continue;case 10:if(o!==80)break;r.textAlign=n.int32();continue;case 11:if(o!==88)break;r.font=n.int32();continue;case 12:if(o!==96)break;r.fontSize=n.int32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(kt||(kt={}));var Ha={COMPONENT_ID:1094,serialize(e,a){let s=kt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return kt.decode(e.buffer(),e.remainingBytes())},create(){return kt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBUiDropdown"}};var Yo=h(require("protobufjs/minimal"));function Wd(){return{value:0}}var Ot;(function(e){function a(t,i=Yo.default.Writer.create()){return t.value!==0&&i.uint32(8).int32(t.value),i}e.encode=a;function s(t,i){let n=t instanceof Yo.default.Reader?t:Yo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Wd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.value=n.int32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Ot||(Ot={}));var Ya={COMPONENT_ID:1096,serialize(e,a){let s=Ot.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return Ot.decode(e.buffer(),e.remainingBytes())},create(){return Ot.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBUiDropdownResult"}};var Ko=h(require("protobufjs/minimal"));function Gd(){return{placeholder:"",color:void 0,placeholderColor:void 0,disabled:!1,textAlign:void 0,font:void 0,fontSize:void 0,value:void 0}}var Nt;(function(e){function a(t,i=Ko.default.Writer.create()){return t.placeholder!==""&&i.uint32(10).string(t.placeholder),t.color!==void 0&&D.encode(t.color,i.uint32(18).fork()).ldelim(),t.placeholderColor!==void 0&&D.encode(t.placeholderColor,i.uint32(26).fork()).ldelim(),t.disabled===!0&&i.uint32(32).bool(t.disabled),t.textAlign!==void 0&&i.uint32(80).int32(t.textAlign),t.font!==void 0&&i.uint32(88).int32(t.font),t.fontSize!==void 0&&i.uint32(96).int32(t.fontSize),t.value!==void 0&&i.uint32(106).string(t.value),i}e.encode=a;function s(t,i){let n=t instanceof Ko.default.Reader?t:Ko.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Gd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.placeholder=n.string();continue;case 2:if(o!==18)break;r.color=D.decode(n,n.uint32());continue;case 3:if(o!==26)break;r.placeholderColor=D.decode(n,n.uint32());continue;case 4:if(o!==32)break;r.disabled=n.bool();continue;case 10:if(o!==80)break;r.textAlign=n.int32();continue;case 11:if(o!==88)break;r.font=n.int32();continue;case 12:if(o!==96)break;r.fontSize=n.int32();continue;case 13:if(o!==106)break;r.value=n.string();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Nt||(Nt={}));var Ka={COMPONENT_ID:1093,serialize(e,a){let s=Nt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return Nt.decode(e.buffer(),e.remainingBytes())},create(){return Nt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBUiInput"}};var jo=h(require("protobufjs/minimal"));function Vd(){return{value:"",isSubmit:void 0}}var Pt;(function(e){function a(t,i=jo.default.Writer.create()){return t.value!==""&&i.uint32(10).string(t.value),t.isSubmit!==void 0&&i.uint32(16).bool(t.isSubmit),i}e.encode=a;function s(t,i){let n=t instanceof jo.default.Reader?t:jo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Vd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.value=n.string();continue;case 2:if(o!==16)break;r.isSubmit=n.bool();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Pt||(Pt={}));var ja={COMPONENT_ID:1095,serialize(e,a){let s=Pt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return Pt.decode(e.buffer(),e.remainingBytes())},create(){return Pt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBUiInputResult"}};var Jo=h(require("protobufjs/minimal"));var Ja;(function(e){e[e.TW_WRAP=0]="TW_WRAP",e[e.TW_NO_WRAP=1]="TW_NO_WRAP"})(Ja||(Ja={}));function zd(){return{value:"",color:void 0,textAlign:void 0,font:void 0,fontSize:void 0,textWrap:void 0}}var Mt;(function(e){function a(t,i=Jo.default.Writer.create()){return t.value!==""&&i.uint32(10).string(t.value),t.color!==void 0&&D.encode(t.color,i.uint32(18).fork()).ldelim(),t.textAlign!==void 0&&i.uint32(24).int32(t.textAlign),t.font!==void 0&&i.uint32(32).int32(t.font),t.fontSize!==void 0&&i.uint32(40).int32(t.fontSize),t.textWrap!==void 0&&i.uint32(48).int32(t.textWrap),i}e.encode=a;function s(t,i){let n=t instanceof Jo.default.Reader?t:Jo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=zd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.value=n.string();continue;case 2:if(o!==18)break;r.color=D.decode(n,n.uint32());continue;case 3:if(o!==24)break;r.textAlign=n.int32();continue;case 4:if(o!==32)break;r.font=n.int32();continue;case 5:if(o!==40)break;r.fontSize=n.int32();continue;case 6:if(o!==48)break;r.textWrap=n.int32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Mt||(Mt={}));var qa={COMPONENT_ID:1052,serialize(e,a){let s=Mt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return Mt.decode(e.buffer(),e.remainingBytes())},create(){return Mt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBUiText"}};var qo=h(require("protobufjs/minimal"));var Xa;(function(e){e[e.YGPT_RELATIVE=0]="YGPT_RELATIVE",e[e.YGPT_ABSOLUTE=1]="YGPT_ABSOLUTE"})(Xa||(Xa={}));var Za;(function(e){e[e.YGA_AUTO=0]="YGA_AUTO",e[e.YGA_FLEX_START=1]="YGA_FLEX_START",e[e.YGA_CENTER=2]="YGA_CENTER",e[e.YGA_FLEX_END=3]="YGA_FLEX_END",e[e.YGA_STRETCH=4]="YGA_STRETCH",e[e.YGA_BASELINE=5]="YGA_BASELINE",e[e.YGA_SPACE_BETWEEN=6]="YGA_SPACE_BETWEEN",e[e.YGA_SPACE_AROUND=7]="YGA_SPACE_AROUND"})(Za||(Za={}));var $a;(function(e){e[e.YGU_UNDEFINED=0]="YGU_UNDEFINED",e[e.YGU_POINT=1]="YGU_POINT",e[e.YGU_PERCENT=2]="YGU_PERCENT",e[e.YGU_AUTO=3]="YGU_AUTO"})($a||($a={}));var es;(function(e){e[e.YGFD_ROW=0]="YGFD_ROW",e[e.YGFD_COLUMN=1]="YGFD_COLUMN",e[e.YGFD_COLUMN_REVERSE=2]="YGFD_COLUMN_REVERSE",e[e.YGFD_ROW_REVERSE=3]="YGFD_ROW_REVERSE"})(es||(es={}));var ts;(function(e){e[e.YGW_NO_WRAP=0]="YGW_NO_WRAP",e[e.YGW_WRAP=1]="YGW_WRAP",e[e.YGW_WRAP_REVERSE=2]="YGW_WRAP_REVERSE"})(ts||(ts={}));var ns;(function(e){e[e.YGJ_FLEX_START=0]="YGJ_FLEX_START",e[e.YGJ_CENTER=1]="YGJ_CENTER",e[e.YGJ_FLEX_END=2]="YGJ_FLEX_END",e[e.YGJ_SPACE_BETWEEN=3]="YGJ_SPACE_BETWEEN",e[e.YGJ_SPACE_AROUND=4]="YGJ_SPACE_AROUND",e[e.YGJ_SPACE_EVENLY=5]="YGJ_SPACE_EVENLY"})(ns||(ns={}));var os;(function(e){e[e.YGO_VISIBLE=0]="YGO_VISIBLE",e[e.YGO_HIDDEN=1]="YGO_HIDDEN",e[e.YGO_SCROLL=2]="YGO_SCROLL"})(os||(os={}));var rs;(function(e){e[e.YGD_FLEX=0]="YGD_FLEX",e[e.YGD_NONE=1]="YGD_NONE"})(rs||(rs={}));var is;(function(e){e[e.YGE_LEFT=0]="YGE_LEFT",e[e.YGE_TOP=1]="YGE_TOP",e[e.YGE_RIGHT=2]="YGE_RIGHT",e[e.YGE_BOTTOM=3]="YGE_BOTTOM",e[e.YGE_START=4]="YGE_START",e[e.YGE_END=5]="YGE_END",e[e.YGE_HORIZONTAL=6]="YGE_HORIZONTAL",e[e.YGE_VERTICAL=7]="YGE_VERTICAL",e[e.YGE_ALL=8]="YGE_ALL"})(is||(is={}));var as;(function(e){e[e.PFM_NONE=0]="PFM_NONE",e[e.PFM_BLOCK=1]="PFM_BLOCK"})(as||(as={}));function Hd(){return{parent:0,rightOf:0,alignContent:void 0,alignItems:void 0,flexWrap:void 0,flexShrink:void 0,positionType:0,alignSelf:0,flexDirection:0,justifyContent:0,overflow:0,display:0,flexBasisUnit:0,flexBasis:0,flexGrow:0,widthUnit:0,width:0,heightUnit:0,height:0,minWidthUnit:0,minWidth:0,minHeightUnit:0,minHeight:0,maxWidthUnit:0,maxWidth:0,maxHeightUnit:0,maxHeight:0,positionLeftUnit:0,positionLeft:0,positionTopUnit:0,positionTop:0,positionRightUnit:0,positionRight:0,positionBottomUnit:0,positionBottom:0,marginLeftUnit:0,marginLeft:0,marginTopUnit:0,marginTop:0,marginRightUnit:0,marginRight:0,marginBottomUnit:0,marginBottom:0,paddingLeftUnit:0,paddingLeft:0,paddingTopUnit:0,paddingTop:0,paddingRightUnit:0,paddingRight:0,paddingBottomUnit:0,paddingBottom:0,pointerFilter:void 0}}var Dt;(function(e){function a(t,i=qo.default.Writer.create()){return t.parent!==0&&i.uint32(8).int32(t.parent),t.rightOf!==0&&i.uint32(16).int32(t.rightOf),t.alignContent!==void 0&&i.uint32(24).int32(t.alignContent),t.alignItems!==void 0&&i.uint32(32).int32(t.alignItems),t.flexWrap!==void 0&&i.uint32(40).int32(t.flexWrap),t.flexShrink!==void 0&&i.uint32(53).float(t.flexShrink),t.positionType!==0&&i.uint32(56).int32(t.positionType),t.alignSelf!==0&&i.uint32(64).int32(t.alignSelf),t.flexDirection!==0&&i.uint32(72).int32(t.flexDirection),t.justifyContent!==0&&i.uint32(80).int32(t.justifyContent),t.overflow!==0&&i.uint32(88).int32(t.overflow),t.display!==0&&i.uint32(96).int32(t.display),t.flexBasisUnit!==0&&i.uint32(104).int32(t.flexBasisUnit),t.flexBasis!==0&&i.uint32(117).float(t.flexBasis),t.flexGrow!==0&&i.uint32(125).float(t.flexGrow),t.widthUnit!==0&&i.uint32(128).int32(t.widthUnit),t.width!==0&&i.uint32(141).float(t.width),t.heightUnit!==0&&i.uint32(144).int32(t.heightUnit),t.height!==0&&i.uint32(157).float(t.height),t.minWidthUnit!==0&&i.uint32(160).int32(t.minWidthUnit),t.minWidth!==0&&i.uint32(173).float(t.minWidth),t.minHeightUnit!==0&&i.uint32(176).int32(t.minHeightUnit),t.minHeight!==0&&i.uint32(189).float(t.minHeight),t.maxWidthUnit!==0&&i.uint32(192).int32(t.maxWidthUnit),t.maxWidth!==0&&i.uint32(205).float(t.maxWidth),t.maxHeightUnit!==0&&i.uint32(208).int32(t.maxHeightUnit),t.maxHeight!==0&&i.uint32(221).float(t.maxHeight),t.positionLeftUnit!==0&&i.uint32(224).int32(t.positionLeftUnit),t.positionLeft!==0&&i.uint32(237).float(t.positionLeft),t.positionTopUnit!==0&&i.uint32(240).int32(t.positionTopUnit),t.positionTop!==0&&i.uint32(253).float(t.positionTop),t.positionRightUnit!==0&&i.uint32(256).int32(t.positionRightUnit),t.positionRight!==0&&i.uint32(269).float(t.positionRight),t.positionBottomUnit!==0&&i.uint32(272).int32(t.positionBottomUnit),t.positionBottom!==0&&i.uint32(285).float(t.positionBottom),t.marginLeftUnit!==0&&i.uint32(288).int32(t.marginLeftUnit),t.marginLeft!==0&&i.uint32(301).float(t.marginLeft),t.marginTopUnit!==0&&i.uint32(304).int32(t.marginTopUnit),t.marginTop!==0&&i.uint32(317).float(t.marginTop),t.marginRightUnit!==0&&i.uint32(320).int32(t.marginRightUnit),t.marginRight!==0&&i.uint32(333).float(t.marginRight),t.marginBottomUnit!==0&&i.uint32(336).int32(t.marginBottomUnit),t.marginBottom!==0&&i.uint32(349).float(t.marginBottom),t.paddingLeftUnit!==0&&i.uint32(352).int32(t.paddingLeftUnit),t.paddingLeft!==0&&i.uint32(365).float(t.paddingLeft),t.paddingTopUnit!==0&&i.uint32(368).int32(t.paddingTopUnit),t.paddingTop!==0&&i.uint32(381).float(t.paddingTop),t.paddingRightUnit!==0&&i.uint32(384).int32(t.paddingRightUnit),t.paddingRight!==0&&i.uint32(397).float(t.paddingRight),t.paddingBottomUnit!==0&&i.uint32(400).int32(t.paddingBottomUnit),t.paddingBottom!==0&&i.uint32(413).float(t.paddingBottom),t.pointerFilter!==void 0&&i.uint32(416).int32(t.pointerFilter),i}e.encode=a;function s(t,i){let n=t instanceof qo.default.Reader?t:qo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Hd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.parent=n.int32();continue;case 2:if(o!==16)break;r.rightOf=n.int32();continue;case 3:if(o!==24)break;r.alignContent=n.int32();continue;case 4:if(o!==32)break;r.alignItems=n.int32();continue;case 5:if(o!==40)break;r.flexWrap=n.int32();continue;case 6:if(o!==53)break;r.flexShrink=n.float();continue;case 7:if(o!==56)break;r.positionType=n.int32();continue;case 8:if(o!==64)break;r.alignSelf=n.int32();continue;case 9:if(o!==72)break;r.flexDirection=n.int32();continue;case 10:if(o!==80)break;r.justifyContent=n.int32();continue;case 11:if(o!==88)break;r.overflow=n.int32();continue;case 12:if(o!==96)break;r.display=n.int32();continue;case 13:if(o!==104)break;r.flexBasisUnit=n.int32();continue;case 14:if(o!==117)break;r.flexBasis=n.float();continue;case 15:if(o!==125)break;r.flexGrow=n.float();continue;case 16:if(o!==128)break;r.widthUnit=n.int32();continue;case 17:if(o!==141)break;r.width=n.float();continue;case 18:if(o!==144)break;r.heightUnit=n.int32();continue;case 19:if(o!==157)break;r.height=n.float();continue;case 20:if(o!==160)break;r.minWidthUnit=n.int32();continue;case 21:if(o!==173)break;r.minWidth=n.float();continue;case 22:if(o!==176)break;r.minHeightUnit=n.int32();continue;case 23:if(o!==189)break;r.minHeight=n.float();continue;case 24:if(o!==192)break;r.maxWidthUnit=n.int32();continue;case 25:if(o!==205)break;r.maxWidth=n.float();continue;case 26:if(o!==208)break;r.maxHeightUnit=n.int32();continue;case 27:if(o!==221)break;r.maxHeight=n.float();continue;case 28:if(o!==224)break;r.positionLeftUnit=n.int32();continue;case 29:if(o!==237)break;r.positionLeft=n.float();continue;case 30:if(o!==240)break;r.positionTopUnit=n.int32();continue;case 31:if(o!==253)break;r.positionTop=n.float();continue;case 32:if(o!==256)break;r.positionRightUnit=n.int32();continue;case 33:if(o!==269)break;r.positionRight=n.float();continue;case 34:if(o!==272)break;r.positionBottomUnit=n.int32();continue;case 35:if(o!==285)break;r.positionBottom=n.float();continue;case 36:if(o!==288)break;r.marginLeftUnit=n.int32();continue;case 37:if(o!==301)break;r.marginLeft=n.float();continue;case 38:if(o!==304)break;r.marginTopUnit=n.int32();continue;case 39:if(o!==317)break;r.marginTop=n.float();continue;case 40:if(o!==320)break;r.marginRightUnit=n.int32();continue;case 41:if(o!==333)break;r.marginRight=n.float();continue;case 42:if(o!==336)break;r.marginBottomUnit=n.int32();continue;case 43:if(o!==349)break;r.marginBottom=n.float();continue;case 44:if(o!==352)break;r.paddingLeftUnit=n.int32();continue;case 45:if(o!==365)break;r.paddingLeft=n.float();continue;case 46:if(o!==368)break;r.paddingTopUnit=n.int32();continue;case 47:if(o!==381)break;r.paddingTop=n.float();continue;case 48:if(o!==384)break;r.paddingRightUnit=n.int32();continue;case 49:if(o!==397)break;r.paddingRight=n.float();continue;case 50:if(o!==400)break;r.paddingBottomUnit=n.int32();continue;case 51:if(o!==413)break;r.paddingBottom=n.float();continue;case 52:if(o!==416)break;r.pointerFilter=n.int32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Dt||(Dt={}));var ss={COMPONENT_ID:1050,serialize(e,a){let s=Dt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return Dt.decode(e.buffer(),e.remainingBytes())},create(){return Dt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBUiTransform"}};var Xo=h(require("protobufjs/minimal"));var cs;(function(e){e[e.VS_NONE=0]="VS_NONE",e[e.VS_ERROR=1]="VS_ERROR",e[e.VS_LOADING=2]="VS_LOADING",e[e.VS_READY=3]="VS_READY",e[e.VS_PLAYING=4]="VS_PLAYING",e[e.VS_BUFFERING=5]="VS_BUFFERING",e[e.VS_SEEKING=6]="VS_SEEKING",e[e.VS_PAUSED=7]="VS_PAUSED"})(cs||(cs={}));function Yd(){return{timestamp:0,tickNumber:0,currentOffset:0,videoLength:0,state:0}}var Ut;(function(e){function a(t,i=Xo.default.Writer.create()){return t.timestamp!==0&&i.uint32(8).uint32(t.timestamp),t.tickNumber!==0&&i.uint32(16).uint32(t.tickNumber),t.currentOffset!==0&&i.uint32(29).float(t.currentOffset),t.videoLength!==0&&i.uint32(37).float(t.videoLength),t.state!==0&&i.uint32(40).int32(t.state),i}e.encode=a;function s(t,i){let n=t instanceof Xo.default.Reader?t:Xo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Yd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.timestamp=n.uint32();continue;case 2:if(o!==16)break;r.tickNumber=n.uint32();continue;case 3:if(o!==29)break;r.currentOffset=n.float();continue;case 4:if(o!==37)break;r.videoLength=n.float();continue;case 5:if(o!==40)break;r.state=n.int32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Ut||(Ut={}));var fs={COMPONENT_ID:1044,serialize(e,a){let s=Ut.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return Ut.decode(e.buffer(),e.remainingBytes())},create(){return Ut.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBVideoEvent"}};var Zo=h(require("protobufjs/minimal"));function Kd(){return{src:"",playing:void 0,position:void 0,volume:void 0,playbackRate:void 0,loop:void 0}}var vt;(function(e){function a(t,i=Zo.default.Writer.create()){return t.src!==""&&i.uint32(10).string(t.src),t.playing!==void 0&&i.uint32(16).bool(t.playing),t.position!==void 0&&i.uint32(29).float(t.position),t.volume!==void 0&&i.uint32(37).float(t.volume),t.playbackRate!==void 0&&i.uint32(45).float(t.playbackRate),t.loop!==void 0&&i.uint32(48).bool(t.loop),i}e.encode=a;function s(t,i){let n=t instanceof Zo.default.Reader?t:Zo.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Kd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.src=n.string();continue;case 2:if(o!==16)break;r.playing=n.bool();continue;case 3:if(o!==29)break;r.position=n.float();continue;case 4:if(o!==37)break;r.volume=n.float();continue;case 5:if(o!==45)break;r.playbackRate=n.float();continue;case 6:if(o!==48)break;r.loop=n.bool();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(vt||(vt={}));var ds={COMPONENT_ID:1043,serialize(e,a){let s=vt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return vt.decode(e.buffer(),e.remainingBytes())},create(){return vt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBVideoPlayer"}};var er=h(require("protobufjs/minimal"));var $o=h(require("protobufjs/minimal"));function jd(){return{transitionMode:void 0}}var fn;(function(e){function a(t,i=$o.default.Writer.create()){switch(t.transitionMode?.$case){case"time":i.uint32(13).float(t.transitionMode.time);break;case"speed":i.uint32(21).float(t.transitionMode.speed);break}return i}e.encode=a;function s(t,i){let n=t instanceof $o.default.Reader?t:$o.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=jd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==13)break;r.transitionMode={$case:"time",time:n.float()};continue;case 2:if(o!==21)break;r.transitionMode={$case:"speed",speed:n.float()};continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(fn||(fn={}));function Jd(){return{defaultTransition:void 0,lookAtEntity:void 0}}var Lt;(function(e){function a(t,i=er.default.Writer.create()){return t.defaultTransition!==void 0&&fn.encode(t.defaultTransition,i.uint32(10).fork()).ldelim(),t.lookAtEntity!==void 0&&i.uint32(16).uint32(t.lookAtEntity),i}e.encode=a;function s(t,i){let n=t instanceof er.default.Reader?t:er.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=Jd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==10)break;r.defaultTransition=fn.decode(n,n.uint32());continue;case 2:if(o!==16)break;r.lookAtEntity=n.uint32();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Lt||(Lt={}));var us={COMPONENT_ID:1076,serialize(e,a){let s=Lt.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return Lt.decode(e.buffer(),e.remainingBytes())},create(){return Lt.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBVirtualCamera"}};var tr=h(require("protobufjs/minimal"));function qd(){return{visible:void 0}}var Ft;(function(e){function a(t,i=tr.default.Writer.create()){return t.visible!==void 0&&i.uint32(8).bool(t.visible),i}e.encode=a;function s(t,i){let n=t instanceof tr.default.Reader?t:tr.default.Reader.create(t),c=i===void 0?n.len:n.pos+i,r=qd();for(;n.pos<c;){let o=n.uint32();switch(o>>>3){case 1:if(o!==8)break;r.visible=n.bool();continue}if((o&7)===4||o===0)break;n.skipType(o&7)}return r}e.decode=s})(Ft||(Ft={}));var ps={COMPONENT_ID:1081,serialize(e,a){let s=Ft.encode(e),t=new Uint8Array(s.finish(),0,s.len);a.writeBuffer(t,!1)},deserialize(e){return Ft.decode(e.buffer(),e.remainingBytes())},create(){return Ft.decode(new Uint8Array)},jsonSchema:{type:"object",properties:{},serializationType:"protocol-buffer",protocolBuffer:"PBVisibilityComponent"}};var Yr=e=>e.defineComponentFromSchema("core::Animator",Ji),nr=e=>e.defineValueSetComponentFromSchema("core::AudioEvent",qi,{timestampFunction:a=>a.timestamp,maxElements:100}),or=e=>e.defineComponentFromSchema("core::AudioSource",Xi),rr=e=>e.defineComponentFromSchema("core::AudioStream",Zi),Qt=e=>e.defineComponentFromSchema("core::AvatarAttach",ea),ls=e=>e.defineComponentFromSchema("core::AvatarBase",ta),As=e=>e.defineValueSetComponentFromSchema("core::AvatarEmoteCommand",na,{timestampFunction:a=>a.timestamp,maxElements:100}),ms=e=>e.defineComponentFromSchema("core::AvatarEquippedData",oa),Es=e=>e.defineComponentFromSchema("core::AvatarModifierArea",aa),Cs=e=>e.defineComponentFromSchema("core::AvatarShape",sa),Wt=e=>e.defineComponentFromSchema("core::Billboard",fa),ys=e=>e.defineComponentFromSchema("core::CameraMode",da),hs=e=>e.defineComponentFromSchema("core::CameraModeArea",ua),Ts=e=>e.defineComponentFromSchema("core::EngineInfo",pa),Te=e=>e.defineComponentFromSchema("core::GltfContainer",la),Ss=e=>e.defineComponentFromSchema("core::GltfContainerLoadingState",Aa),Kr=e=>e.defineComponentFromSchema("core::InputModifier",ma),bs=e=>e.defineComponentFromSchema("core::MainCamera",Ea),jr=e=>e.defineComponentFromSchema("core::Material",Ta),Jr=e=>e.defineComponentFromSchema("core::MeshCollider",ba),qr=e=>e.defineComponentFromSchema("core::MeshRenderer",ga),ir=e=>e.defineComponentFromSchema("core::NftShape",Ia),gs=e=>e.defineComponentFromSchema("core::PlayerIdentityData",xa),ae=e=>e.defineComponentFromSchema("core::PointerEvents",wa),Xr=e=>e.defineValueSetComponentFromSchema("core::PointerEventsResult",_a,{timestampFunction:a=>a.timestamp,maxElements:100}),Bs=e=>e.defineComponentFromSchema("core::PointerLock",Ra),Zr=e=>e.defineComponentFromSchema("core::Raycast",Oa),$r=e=>e.defineComponentFromSchema("core::RaycastResult",Na),Is=e=>e.defineComponentFromSchema("core::RealmInfo",Pa),ar=e=>e.defineComponentFromSchema("core::TextShape",Ma),ei=e=>e.defineComponentFromSchema("core::Tween",Ua),Se=e=>e.defineComponentFromSchema("core::TweenSequence",La),sr=e=>e.defineComponentFromSchema("core::TweenState",Qa),cr=e=>e.defineComponentFromSchema("core::UiBackground",Va),xs=e=>e.defineComponentFromSchema("core::UiCanvasInformation",za),ws=e=>e.defineComponentFromSchema("core::UiDropdown",Ha),_s=e=>e.defineComponentFromSchema("core::UiDropdownResult",Ya),Rs=e=>e.defineComponentFromSchema("core::UiInput",Ka),ks=e=>e.defineComponentFromSchema("core::UiInputResult",ja),fr=e=>e.defineComponentFromSchema("core::UiText",qa),Gt=e=>e.defineComponentFromSchema("core::UiTransform",ss),ti=e=>e.defineValueSetComponentFromSchema("core::VideoEvent",fs,{timestampFunction:a=>a.timestamp,maxElements:100}),Ue=e=>e.defineComponentFromSchema("core::VideoPlayer",ds),ni=e=>e.defineComponentFromSchema("core::VirtualCamera",us),Vt=e=>e.defineComponentFromSchema("core::VisibilityComponent",ps),oi={"core::Animator":Yr,"core::AudioEvent":nr,"core::AudioSource":or,"core::AudioStream":rr,"core::AvatarAttach":Qt,"core::AvatarBase":ls,"core::AvatarEmoteCommand":As,"core::AvatarEquippedData":ms,"core::AvatarModifierArea":Es,"core::AvatarShape":Cs,"core::Billboard":Wt,"core::CameraMode":ys,"core::CameraModeArea":hs,"core::EngineInfo":Ts,"core::GltfContainer":Te,"core::GltfContainerLoadingState":Ss,"core::InputModifier":Kr,"core::MainCamera":bs,"core::Material":jr,"core::MeshCollider":Jr,"core::MeshRenderer":qr,"core::NftShape":ir,"core::PlayerIdentityData":gs,"core::PointerEvents":ae,"core::PointerEventsResult":Xr,"core::PointerLock":Bs,"core::Raycast":Zr,"core::RaycastResult":$r,"core::RealmInfo":Is,"core::TextShape":ar,"core::Tween":ei,"core::TweenSequence":Se,"core::TweenState":sr,"core::UiBackground":cr,"core::UiCanvasInformation":xs,"core::UiDropdown":ws,"core::UiDropdownResult":_s,"core::UiInput":Rs,"core::UiInputResult":ks,"core::UiText":fr,"core::UiTransform":Gt,"core::VideoEvent":ti,"core::VideoPlayer":Ue,"core::VirtualCamera":ni,"core::VisibilityComponent":Vt};function Os(e){let a=Yr(e);function s(t,i){let n=a.getMutableOrNull(t);if(!n)return[null,null];let c=n.states.find(r=>r.clip===i);return c?[n,c]:[n,null]}return{...a,getClipOrNull(t,i){let[n,c]=s(t,i);return c},getClip(t,i){let[n,c]=s(t,i);if(!n)throw new Error(`There is no Animator found in the entity ${t}`);if(!c)throw new Error(`The Animator component of ${t} has no the state ${i}`);return c},playSingleAnimation(t,i,n=!0){let[c,r]=s(t,i);if(!c||!r)return!1;for(let o of c.states)o.playing=!1,o.shouldReset=!0;return r.playing=!0,r.shouldReset=n,!0},stopAllAnimations(t,i=!0){let n=a.getMutableOrNull(t);if(!n)return!1;for(let c of n.states)c.playing=!1,c.shouldReset=i;return!0}}}function Ns(e){let a=or(e);return{...a,playSound(s,t,i=!0){let n=a.getMutableOrNull(s);return n?(n.audioClipUrl=t,n.playing=!0,n.currentTime=i?0:n.currentTime,!0):!1},stopSound(s,t=!0){let i=a.getMutableOrNull(s);return i?(i.playing=!1,i.currentTime=t?0:i.currentTime,!0):!1}}}var Zd={Common(e){return{tex:{$case:"texture",texture:e}}},Avatar(e){return{tex:{$case:"avatarTexture",avatarTexture:e}}},Video(e){return{tex:{$case:"videoTexture",videoTexture:e}}}};function dr(e){let a=jr(e);return{...a,Texture:Zd,setBasicMaterial(s,t){a.createOrReplace(s,{material:{$case:"unlit",unlit:t}})},setPbrMaterial(s,t){a.createOrReplace(s,{material:{$case:"pbr",pbr:t}})}}}function Ps(e){let a=Jr(e);function s(t){if(Array.isArray(t))return t.map(i=>i).reduce((i,n)=>i|n,0);if(t)return t}return{...a,setBox(t,i){a.createOrReplace(t,{mesh:{$case:"box",box:{}},collisionMask:s(i)})},setPlane(t,i){a.createOrReplace(t,{mesh:{$case:"plane",plane:{}},collisionMask:s(i)})},setCylinder(t,i,n,c){a.createOrReplace(t,{mesh:{$case:"cylinder",cylinder:{radiusBottom:i,radiusTop:n}},collisionMask:s(c)})},setSphere(t,i){a.createOrReplace(t,{mesh:{$case:"sphere",sphere:{}},collisionMask:s(i)})}}}function Ms(e){let a=qr(e);return{...a,setBox(s,t){a.createOrReplace(s,{mesh:{$case:"box",box:{uvs:t||[]}}})},setPlane(s,t){a.createOrReplace(s,{mesh:{$case:"plane",plane:{uvs:t||[]}}})},setCylinder(s,t,i){a.createOrReplace(s,{mesh:{$case:"cylinder",cylinder:{radiusBottom:t,radiusTop:i}}})},setSphere(s){a.createOrReplace(s,{mesh:{$case:"sphere",sphere:{}}})}}}var $d={Move(e){return{$case:"move",move:e}},Rotate(e){return{$case:"rotate",rotate:e}},Scale(e){return{$case:"scale",scale:e}}};function Ds(e){return{...ei(e),Mode:$d}}var ur=e=>({serialize(a,s){s.writeUint32(a.length);for(let t of a)e.serialize(t,s)},deserialize(a){let s=[],t=a.readUint32();for(let i=0;i<t;i++)s.push(e.deserialize(a));return s},create(){return[]},jsonSchema:{type:"array",items:e.jsonSchema,serializationType:"array"}});var dn={serialize(e,a){a.writeInt8(e?1:0)},deserialize(e){return e.readInt8()===1},create(){return!1},jsonSchema:{type:"boolean",serializationType:"boolean"}};var un={serialize(e,a){a.writeInt64(BigInt(e))},deserialize(e){return Number(e.readInt64())},create(){return 0},jsonSchema:{type:"integer",serializationType:"int64"}},be={serialize(e,a){a.writeInt32(e)},deserialize(e){return e.readInt32()},create(){return 0},jsonSchema:{type:"integer",serializationType:"int32"}},pn={serialize(e,a){a.writeInt16(e)},deserialize(e){return e.readInt16()},create(){return 0},jsonSchema:{type:"integer",serializationType:"int16"}},ln={serialize(e,a){a.writeInt8(e)},deserialize(e){return e.readInt8()},create(){return 0},jsonSchema:{type:"integer",serializationType:"int8"}};var pr={serialize(e,a){a.writeUtf8String(e)},deserialize(e){return e.readUtf8String()},create(){return""},jsonSchema:{type:"string",serializationType:"utf8-string"}},An=pr;function eu(e){let t=0,i=0;for(let n in e){if(typeof e[n]=="number"){if(e[n]>2147483647||e[n]<-2147483648)throw new Error("Enum member values must be numbers within the range of -2147483648 to 2147483647.");t++}i++}if(i!==t*2)throw new Error("All enum member values must be of numeric type.")}function tu(e){for(let a in e)if(typeof e[a]!="string")throw new Error("All enum member values must be of string type.")}var nu="enum-int",lr=(e,a)=>(eu(e),{serialize(s,t){be.serialize(s,t)},deserialize(s){return be.deserialize(s)},create(){return a},jsonSchema:{type:"integer",enum:Object.values(e).filter(s=>Number.isInteger(s)),default:a,serializationType:nu,enumObject:e}}),ou="enum-string",Ar=(e,a)=>(tu(e),{serialize(s,t){pr.serialize(s,t)},deserialize(s){return pr.deserialize(s)},create(){return a},jsonSchema:{type:"string",enum:Object.values(e),default:a,serializationType:ou,enumObject:e}});var zt={serialize(e,a){a.writeFloat32(e)},deserialize(e){return e.readFloat32()},create(){return 0},jsonSchema:{type:"number",serializationType:"float32"}},mn={serialize(e,a){a.writeFloat64(e)},deserialize(e){return e.readFloat64()},create(){return 0},jsonSchema:{type:"number",serializationType:"float64"}};var En={serialize(e,a){a.writeFloat32(e.r),a.writeFloat32(e.g),a.writeFloat32(e.b)},deserialize(e){return{r:e.readFloat32(),g:e.readFloat32(),b:e.readFloat32()}},create(){return{r:0,g:0,b:0}},jsonSchema:{type:"object",properties:{r:{type:"number"},g:{type:"number"},b:{type:"number"}},serializationType:"color3"}};var Cn={serialize(e,a){a.writeFloat32(e.r),a.writeFloat32(e.g),a.writeFloat32(e.b),a.writeFloat32(e.a)},deserialize(e){return{r:e.readFloat32(),g:e.readFloat32(),b:e.readFloat32(),a:e.readFloat32()}},create(){return{r:0,g:0,b:0,a:0}},jsonSchema:{type:"object",properties:{r:{type:"number"},g:{type:"number"},b:{type:"number"},a:{type:"number"}},serializationType:"color4"}};var yn={serialize(e,a){a.writeInt32(e)},deserialize(e){return e.readInt32()},create(){return 0},jsonSchema:{type:"integer",serializationType:"entity"}};var hn={serialize(e,a){a.writeFloat32(e.x),a.writeFloat32(e.y),a.writeFloat32(e.z),a.writeFloat32(e.w)},deserialize(e){return{x:e.readFloat32(),y:e.readFloat32(),z:e.readFloat32(),w:e.readFloat32()}},create(){return{x:0,y:0,z:0,w:0}},jsonSchema:{type:"object",properties:{x:{type:"number"},y:{type:"number"},z:{type:"number"},w:{type:"number"}},serializationType:"quaternion"}};var Tn={serialize(e,a){a.writeFloat32(e.x),a.writeFloat32(e.y),a.writeFloat32(e.z)},deserialize(e){return{x:e.readFloat32(),y:e.readFloat32(),z:e.readFloat32()}},create(){return{x:0,y:0,z:0}},jsonSchema:{type:"object",properties:{x:{type:"number"},y:{type:"number"},z:{type:"number"},w:{type:"number"}},serializationType:"vector3"}};var mr=(e,a)=>{let s=Object.keys(e).reduce((t,i)=>(t[i]=e[i].jsonSchema,t),{});return{serialize(t,i){for(let n in e)e[n].serialize(t[n],i)},deserialize(t){let i={};for(let n in e)i[n]=e[n].deserialize(t);return i},create(){let t={};for(let i in e)t[i]=e[i].create();return{...t,...a}},extend:t=>{let i={};for(let n in e)i[n]=e[n].create();return{...i,...a,...t}},jsonSchema:{type:"object",properties:s,serializationType:"map"}}};var Er=e=>({serialize(a,s){a?(s.writeInt8(1),e.serialize(a,s)):s.writeInt8(0)},deserialize(a){if(a.readInt8())return e.deserialize(a)},create(){},jsonSchema:{type:e.jsonSchema.type,serializationType:"optional",optionalJsonSchema:e.jsonSchema}});var Cr=e=>{let a=Object.keys(e),s=a.reduce((i,n,c)=>(i[n]=c,i),{}),t=a.reduce((i,n)=>(i[n]=e[n].jsonSchema,i),{});return{serialize({$case:i,value:n},c){let r=s[i.toString()]+1;c.writeUint8(r),e[i].serialize(n,c)},deserialize(i){let n=a[i.readInt8()-1],c=e[n].deserialize(i);return{$case:n,value:c}},create(){return{}},jsonSchema:{type:"object",properties:t,serializationType:"one-of"}}};var Us=(e,a)=>a.includes(e.serializationType),ru=e=>Us(e,["one-of"]),iu=()=>({type:{type:"object",serializationType:"unknown"},value:void 0}),yr=e=>Us(e,["array","map"]),ri=(e,a,s)=>{let t=e[s],i=a[s];if(ru(t)){let n=i;if(!n.$case)return iu();let c=t.properties[n.$case];return yr(c)&&(a[s]={[n.$case]:n.value}),{type:c,value:n.value}}return{type:t,value:i}};var vs={[dn.jsonSchema.serializationType]:dn,[An.jsonSchema.serializationType]:An,[zt.jsonSchema.serializationType]:zt,[mn.jsonSchema.serializationType]:mn,[ln.jsonSchema.serializationType]:ln,[pn.jsonSchema.serializationType]:pn,[be.jsonSchema.serializationType]:be,[un.jsonSchema.serializationType]:un,[Tn.jsonSchema.serializationType]:Tn,[hn.jsonSchema.serializationType]:hn,[En.jsonSchema.serializationType]:En,[Cn.jsonSchema.serializationType]:Cn,[yn.jsonSchema.serializationType]:yn};function Ht(e){if(vs[e.serializationType])return vs[e.serializationType];if(e.serializationType==="map"){let a=e,s={};for(let t in a.properties)s[t]=Ht(a.properties[t]);return mr(s)}if(e.serializationType==="optional")return Er(Ht(e.optionalJsonSchema));if(e.serializationType==="array")return ur(Ht(e.items));if(e.serializationType==="enum-int"){let a=e;return lr(a.enumObject,a.default)}if(e.serializationType==="enum-string"){let a=e;return Ar(a.enumObject,a.default)}if(e.serializationType==="one-of"){let a=e,s={};for(let t in a.properties)s[t]=Ht(a.properties[t]);return Cr(s)}throw new Error(`${e.serializationType} is not supported as reverse schema generation.`)}function hr(e,a,s){if(e.serializationType==="map"){let{properties:t}=e,i=a;for(let n in t){let{type:c,value:r}=ri(t,i,n);if(c.serializationType!=="unknown")if(yr(c))hr(c,r,s);else{let o=s(r,c);o.changed&&(i[n]=o.value)}}}else if(e.serializationType==="array"){let{items:t}=e,i=a;for(let n=0,c=i.length;n<c;n++){let{type:r,value:o}=ri({items:t},{items:i[n]},"items");if(yr(r))hr(r,o,s);else{let f=s(o,r);f.changed&&(i[n]=f.value)}}}}var d;(function(e){e.Boolean=dn,e.String=An,e.Float=zt,e.Double=mn,e.Byte=ln,e.Short=pn,e.Int=be,e.Int64=un,e.Number=zt,e.Vector3=Tn,e.Quaternion=hn,e.Color3=En,e.Color4=Cn,e.Entity=yn,e.EnumNumber=lr,e.EnumString=Ar,e.Array=ur,e.Map=mr,e.Optional=Er,e.OneOf=Cr,e.fromJson=Ht,e.mutateNestedValues=hr})(d||(d={}));function au(e){return e.defineComponent("core-schema::Name",{value:d.String})}var Ls=au;function su(e){return e.defineComponent("core-schema::Sync-Components",{componentIds:d.Array(d.Int64)})}var Fs=su;function cu(e){return e.defineComponent("core-schema::Network-Entity",{networkId:d.Int64,entityId:d.Entity})}var Qs=cu;function fu(e){return e.defineComponent("core-schema::Network-Parent",{networkId:d.Int64,entityId:d.Entity})}var Ws=fu;var Yt={serialize(e,a){let s=a.incrementWriteOffset(44);a.setFloat32(s,e.position.x),a.setFloat32(s+4,e.position.y),a.setFloat32(s+8,e.position.z),a.setFloat32(s+12,e.rotation.x),a.setFloat32(s+16,e.rotation.y),a.setFloat32(s+20,e.rotation.z),a.setFloat32(s+24,e.rotation.w),a.setFloat32(s+28,e.scale.x),a.setFloat32(s+32,e.scale.y),a.setFloat32(s+36,e.scale.z),a.setUint32(s+40,e.parent||0)},deserialize(e){let a=e.incrementReadOffset(44);return{position:{x:e.getFloat32(a),y:e.getFloat32(a+4),z:e.getFloat32(a+8)},rotation:{x:e.getFloat32(a+12),y:e.getFloat32(a+16),z:e.getFloat32(a+20),w:e.getFloat32(a+24)},scale:{x:e.getFloat32(a+28),y:e.getFloat32(a+32),z:e.getFloat32(a+36)},parent:e.getUint32(a+40)}},create(){return{position:{x:0,y:0,z:0},scale:{x:1,y:1,z:1},rotation:{x:0,y:0,z:0,w:1},parent:0}},extend(e){return{position:{x:0,y:0,z:0},scale:{x:1,y:1,z:1},rotation:{x:0,y:0,z:0,w:1},parent:0,...e}},jsonSchema:{type:"object",properties:{position:{type:"object",properties:{x:{type:"number"},y:{type:"number"},z:{type:"number"}}},scale:{type:"object",properties:{x:{type:"number"},y:{type:"number"},z:{type:"number"}}},rotation:{type:"object",properties:{x:{type:"number"},y:{type:"number"},z:{type:"number"},w:{type:"number"}}},parent:{type:"integer"}},serializationType:"transform"}};function Gs(e){let a=e.defineComponentFromSchema("core::Transform",Yt);return{...a,create(s,t){return a.create(s,Yt.extend(t))},createOrReplace(s,t){return a.createOrReplace(s,Yt.extend(t))}}}function Vs(e){let a=rr(e),s=nr(e);return{...a,getAudioState(t){return!a.getMutableOrNull(t)||!s.has(t)?void 0:Array.from(s.get(t)).pop()}}}var ii;(function(e){e[e.MS_NONE=0]="MS_NONE",e[e.MS_ERROR=1]="MS_ERROR",e[e.MS_LOADING=2]="MS_LOADING",e[e.MS_READY=3]="MS_READY",e[e.MS_PLAYING=4]="MS_PLAYING",e[e.MS_BUFFERING=5]="MS_BUFFERING",e[e.MS_SEEKING=6]="MS_SEEKING",e[e.MS_PAUSED=7]="MS_PAUSED"})(ii||(ii={}));var Z=e=>Gs(e),Sn=e=>dr(e),bn=e=>Os(e),gn=e=>Ns(e),ai=e=>Vs(e),Bn=e=>Ms(e),In=e=>Ps(e),ve=e=>Ds(e);var ge=e=>Ls(e),xn=e=>Fs(e),de=e=>Qs(e),wn=e=>Ws(e);var si={"core::Transform":1,"core::Animator":1042,"core::AudioEvent":1105,"core::AudioSource":1020,"core::AudioStream":1021,"core::AvatarAttach":1073,"core::AvatarBase":1087,"core::AvatarEmoteCommand":1088,"core::AvatarEquippedData":1091,"core::AvatarModifierArea":1070,"core::AvatarShape":1080,"core::Billboard":1090,"core::CameraMode":1072,"core::CameraModeArea":1071,"core::EngineInfo":1048,"core::GltfContainer":1041,"core::GltfContainerLoadingState":1049,"core::InputModifier":1078,"core::MainCamera":1075,"core::MapPin":1097,"core::Material":1017,"core::MeshCollider":1019,"core::MeshRenderer":1018,"core::NftShape":1040,"core::PlayerIdentityData":1089,"core::PointerEvents":1062,"core::PointerEventsResult":1063,"core::PointerLock":1074,"core::Raycast":1067,"core::RaycastResult":1068,"core::RealmInfo":1106,"core::TextShape":1030,"core::Tween":1102,"core::TweenSequence":1104,"core::TweenState":1103,"core::UiBackground":1053,"core::UiCanvasInformation":1054,"core::UiDropdown":1094,"core::UiDropdownResult":1096,"core::UiInput":1093,"core::UiInputResult":1095,"core::UiText":1052,"core::UiTransform":1050,"core::VideoEvent":1044,"core::VideoPlayer":1043,"core::VirtualCamera":1076,"core::VisibilityComponent":1081};var Hs=h(require("@protobufjs/utf8"));var du=new Int32Array([0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117]);function uu(e,a){let s=~~a^-1;for(let t=0;t<e.length;t++)s=du[(s^e[t])&255]^s>>>8;return s^-1}function zs(e,a=0){return uu(e,a)>>>0}var pu=2048;function ue(e){if(si[e])return si[e];let a=new Uint8Array(128);return Hs.write(e,a,0),(zs(a)+pu&4294967295)>>>0}var ci=typeof DEBUG=="boolean"&&DEBUG||typeof process=="object"&&(process.env?.NODE_ENV!=="production"||process.env?.NODE_ENV==="development")||!1;function fi(e,a){if(ci&&e&&typeof e=="object"&&typeof e.then=="function")throw new Error(a);return e}function Ys(){let e=new Map;return{addTo(a,s){if(s<0)return!1;let t=e.get(a);return t!==void 0&&t>=s||e.set(a,s),!0},has(a,s){let t=e.get(a);return t!==void 0&&t>=s},getMap(){return e}}}var Le=65535,lu=4294901760,oh=Le+1,Ks=Le,Au=512,pe;(function(e){function a(t){return[(t&Le)>>>0,((t&lu)>>16&Le)>>>0]}e.fromEntityId=a;function s(t,i){return(t&Le|(i&Le)<<16)>>>0}e.toEntityId=s})(pe||(pe={}));var re;(function(e){e[e.Unknown=0]="Unknown",e[e.UsedEntity=1]="UsedEntity",e[e.Removed=2]="Removed",e[e.Reserved=3]="Reserved"})(re||(re={}));function js(e){let a=e?.reservedStaticEntities??Au,s=a,t=new Set,i=[],n=Ys();function c(){if(s>Ks-1)throw new Error(`It fails trying to generate an entity out of range ${Ks}.`);let A=s++,y=n.getMap().has(A)?n.getMap().get(A)+1:0,E=pe.toEntityId(A,y);return t.has(E)?c():(t.add(E),E)}function r(){if(t.size+a>=s)return c();for(let[y,E]of n.getMap())if(E<Le){let m=pe.toEntityId(y,E+1);if(!t.has(m)&&!i.includes(m))return t.add(m),m}return c()}function o(A){return A<a?!1:(t.has(A)?(t.delete(A),i.push(A)):u(A),!0)}function f(){let A=i;if(A.length){i=[];for(let y of A){let[E,m]=pe.fromEntityId(y);n.addTo(E,m)}}return A}function u(A){let[y,E]=pe.fromEntityId(A);n.addTo(y,E);for(let m=0;m<=E;m++)t.delete(pe.toEntityId(y,m));return!0}function l(A){let[y,E]=pe.fromEntityId(A);if(n.has(y,E))return!1;if(E>0){for(let m=0;m<=E-1;m++)t.delete(pe.toEntityId(y,m));n.addTo(y,E-1)}return t.add(A),!0}function p(A){let[y,E]=pe.fromEntityId(A);if(y<a)return re.Reserved;if(t.has(A))return re.UsedEntity;let m=n.getMap().get(y);return m!==void 0&&m>=E?re.Removed:re.Unknown}return{generateEntity:r,removeEntity:o,getExistingEntities(){return new Set(t)},getEntityState:p,releaseRemovedEntities:f,updateRemovedEntity:u,updateUsedEntity:l}}var Kt=h(require("@protobufjs/utf8")),N=function(e,a,s,t){if(s==="a"&&!t)throw new TypeError("Private accessor was defined without a getter");if(typeof a=="function"?e!==a||!t:!a.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return s==="m"?t:s==="a"?t.call(e):t?t.value:a.get(e)},k,j,Q;function mu(e,a){let s=Math.max(e,a)+1024;return Math.ceil(s/1024)*1024}var Eu=10240,O=class{constructor(a,s,t){k.add(this),this._buffer=a||new Uint8Array(Eu),this.view=new DataView(this._buffer.buffer,this._buffer.byteOffset),this.woffset=t??(a?this._buffer.length:null)??0,this.roffset=s??0}buffer(){return this._buffer}bufferLength(){return this._buffer.length}resetBuffer(){this.roffset=0,this.woffset=0}currentReadOffset(){return this.roffset}currentWriteOffset(){return this.woffset}incrementReadOffset(a){return N(this,k,"m",Q).call(this,a)}remainingBytes(){return this.woffset-this.roffset}readFloat32(){return this.view.getFloat32(N(this,k,"m",Q).call(this,4),!0)}readFloat64(){return this.view.getFloat64(N(this,k,"m",Q).call(this,8),!0)}readInt8(){return this.view.getInt8(N(this,k,"m",Q).call(this,1))}readInt16(){return this.view.getInt16(N(this,k,"m",Q).call(this,2),!0)}readInt32(){return this.view.getInt32(N(this,k,"m",Q).call(this,4),!0)}readInt64(){return this.view.getBigInt64(N(this,k,"m",Q).call(this,8),!0)}readUint8(){return this.view.getUint8(N(this,k,"m",Q).call(this,1))}readUint16(){return this.view.getUint16(N(this,k,"m",Q).call(this,2),!0)}readUint32(){return this.view.getUint32(N(this,k,"m",Q).call(this,4),!0)}readUint64(){return this.view.getBigUint64(N(this,k,"m",Q).call(this,8),!0)}readBuffer(){let a=this.view.getUint32(N(this,k,"m",Q).call(this,4),!0);return this._buffer.subarray(N(this,k,"m",Q).call(this,a),N(this,k,"m",Q).call(this,0))}readUtf8String(){let a=this.view.getUint32(N(this,k,"m",Q).call(this,4),!0);return Kt.read(this._buffer,N(this,k,"m",Q).call(this,a),N(this,k,"m",Q).call(this,0))}incrementWriteOffset(a){return N(this,k,"m",j).call(this,a)}toBinary(){return this._buffer.subarray(0,this.woffset)}toCopiedBinary(){return new Uint8Array(this.toBinary())}writeBuffer(a,s=!0){s&&this.writeUint32(a.byteLength);let t=N(this,k,"m",j).call(this,a.byteLength);this._buffer.set(a,t)}writeUtf8String(a,s=!0){let t=Kt.length(a);s&&this.writeUint32(t);let i=N(this,k,"m",j).call(this,t);Kt.write(a,this._buffer,i)}writeFloat32(a){let s=N(this,k,"m",j).call(this,4);this.view.setFloat32(s,a,!0)}writeFloat64(a){let s=N(this,k,"m",j).call(this,8);this.view.setFloat64(s,a,!0)}writeInt8(a){let s=N(this,k,"m",j).call(this,1);this.view.setInt8(s,a)}writeInt16(a){let s=N(this,k,"m",j).call(this,2);this.view.setInt16(s,a,!0)}writeInt32(a){let s=N(this,k,"m",j).call(this,4);this.view.setInt32(s,a,!0)}writeInt64(a){let s=N(this,k,"m",j).call(this,8);this.view.setBigInt64(s,a,!0)}writeUint8(a){let s=N(this,k,"m",j).call(this,1);this.view.setUint8(s,a)}writeUint16(a){let s=N(this,k,"m",j).call(this,2);this.view.setUint16(s,a,!0)}writeUint32(a){let s=N(this,k,"m",j).call(this,4);this.view.setUint32(s,a,!0)}writeUint64(a){let s=N(this,k,"m",j).call(this,8);this.view.setBigUint64(s,a,!0)}getFloat32(a){return this.view.getFloat32(a,!0)}getFloat64(a){return this.view.getFloat64(a,!0)}getInt8(a){return this.view.getInt8(a)}getInt16(a){return this.view.getInt16(a,!0)}getInt32(a){return this.view.getInt32(a,!0)}getInt64(a){return this.view.getBigInt64(a,!0)}getUint8(a){return this.view.getUint8(a)}getUint16(a){return this.view.getUint16(a,!0)}getUint32(a){return this.view.getUint32(a,!0)}getUint64(a){return this.view.getBigUint64(a,!0)}setFloat32(a,s){this.view.setFloat32(a,s,!0)}setFloat64(a,s){this.view.setFloat64(a,s,!0)}setInt8(a,s){this.view.setInt8(a,s)}setInt16(a,s){this.view.setInt16(a,s,!0)}setInt32(a,s){this.view.setInt32(a,s,!0)}setInt64(a,s){this.view.setBigInt64(a,s,!0)}setUint8(a,s){this.view.setUint8(a,s)}setUint16(a,s){this.view.setUint16(a,s,!0)}setUint32(a,s){this.view.setUint32(a,s,!0)}setUint64(a,s){this.view.setBigUint64(a,s,!0)}};k=new WeakSet,j=function(a){if(this.woffset+a>this._buffer.byteLength){let s=mu(this._buffer.byteLength,this.woffset+a),t=new Uint8Array(s);t.set(this._buffer);let i=this._buffer.byteOffset;this._buffer=t,this.view=new DataView(this._buffer.buffer,i)}return this.woffset+=a,this.woffset-a},Q=function(a){if(this.roffset+a>this.woffset)throw new Error("Outside of the bounds of writen data.");return this.roffset+=a,this.roffset-a};var C;(function(e){e[e.RESERVED=0]="RESERVED",e[e.PUT_COMPONENT=1]="PUT_COMPONENT",e[e.DELETE_COMPONENT=2]="DELETE_COMPONENT",e[e.DELETE_ENTITY=3]="DELETE_ENTITY",e[e.APPEND_VALUE=4]="APPEND_VALUE",e[e.PUT_COMPONENT_NETWORK=5]="PUT_COMPONENT_NETWORK",e[e.DELETE_COMPONENT_NETWORK=6]="DELETE_COMPONENT_NETWORK",e[e.DELETE_ENTITY_NETWORK=7]="DELETE_ENTITY_NETWORK",e[e.MAX_MESSAGE_TYPE=8]="MAX_MESSAGE_TYPE"})(C||(C={}));var v=8,$;(function(e){e[e.StateUpdatedTimestamp=1]="StateUpdatedTimestamp",e[e.StateOutdatedTimestamp=2]="StateOutdatedTimestamp",e[e.NoChanges=3]="NoChanges",e[e.StateOutdatedData=4]="StateOutdatedData",e[e.StateUpdatedData=5]="StateUpdatedData",e[e.EntityWasDeleted=6]="EntityWasDeleted",e[e.EntityDeleted=7]="EntityDeleted"})($||($={}));var W;(function(e){function a(n){let c=n.remainingBytes();if(c<v)return!1;let r=n.getUint32(n.currentReadOffset());return!(c<r)}e.validate=a;function s(n){return a(n)?{length:n.readUint32(),type:n.readUint32()}:null}e.readHeader=s;function t(n){if(!a(n))return null;let c=n.currentReadOffset();return{length:n.getUint32(c),type:n.getUint32(c+4)}}e.getHeader=t;function i(n){let c=t(n);return c?(n.incrementReadOffset(c.length),!0):!1}e.consumeMessage=i})(W||(W={}));var me;(function(e){e.MESSAGE_HEADER_LENGTH=12;function a(t,i,n,c){let r=v+e.MESSAGE_HEADER_LENGTH,o=c.incrementWriteOffset(r);c.setUint32(o,r),c.setUint32(o+4,C.DELETE_COMPONENT),c.setUint32(o+8,t),c.setUint32(o+12,i),c.setUint32(o+16,n)}e.write=a;function s(t){let i=W.readHeader(t);if(!i)return null;if(i.type!==C.DELETE_COMPONENT)throw new Error("DeleteComponentOperation tried to read another message type.");return{...i,entityId:t.readUint32(),componentId:t.readUint32(),timestamp:t.readUint32()}}e.read=s})(me||(me={}));var Fe;(function(e){e.MESSAGE_HEADER_LENGTH=16;function a(t,i,n,c,r){let o=r.incrementWriteOffset(v+e.MESSAGE_HEADER_LENGTH);r.writeBuffer(c,!1);let f=r.currentWriteOffset()-o;r.setUint32(o,f),r.setUint32(o+4,C.APPEND_VALUE),r.setUint32(o+8,t),r.setUint32(o+12,n),r.setUint32(o+16,i);let u=f-e.MESSAGE_HEADER_LENGTH-v;r.setUint32(o+20,u)}e.write=a;function s(t){let i=W.readHeader(t);if(!i)return null;if(i.type!==C.APPEND_VALUE)throw new Error("AppendValueOperation tried to read another message type.");return{...i,entityId:t.readUint32(),componentId:t.readUint32(),timestamp:t.readUint32(),data:t.readBuffer()}}e.read=s})(Fe||(Fe={}));var Qe;(function(e){e.MESSAGE_HEADER_LENGTH=4;function a(t,i){i.writeUint32(v+4),i.writeUint32(C.DELETE_ENTITY),i.writeUint32(t)}e.write=a;function s(t){let i=W.readHeader(t);if(!i)return null;if(i.type!==C.DELETE_ENTITY)throw new Error("DeleteEntity tried to read another message type.");return{...i,entityId:t.readUint32()}}e.read=s})(Qe||(Qe={}));var ie;(function(e){e.MESSAGE_HEADER_LENGTH=16;function a(t,i,n,c,r){let o=r.incrementWriteOffset(v+e.MESSAGE_HEADER_LENGTH);r.writeBuffer(c,!1);let f=r.currentWriteOffset()-o;r.setUint32(o,f),r.setUint32(o+4,C.PUT_COMPONENT),r.setUint32(o+8,t),r.setUint32(o+12,n),r.setUint32(o+16,i);let u=f-e.MESSAGE_HEADER_LENGTH-v;r.setUint32(o+20,u)}e.write=a;function s(t){let i=W.readHeader(t);if(!i)return null;if(i.type!==C.PUT_COMPONENT)throw new Error("PutComponentOperation tried to read another message type.");return{...i,entityId:t.readUint32(),componentId:t.readUint32(),timestamp:t.readUint32(),data:t.readBuffer()}}e.read=s})(ie||(ie={}));var jt;(function(e){e.MESSAGE_HEADER_LENGTH=20;function a(t,i,n,c,r,o){let f=o.incrementWriteOffset(v+e.MESSAGE_HEADER_LENGTH);o.writeBuffer(r,!1);let u=o.currentWriteOffset()-f;o.setUint32(f,u),o.setUint32(f+4,C.PUT_COMPONENT_NETWORK),o.setUint32(f+8,t),o.setUint32(f+12,n),o.setUint32(f+16,i),o.setUint32(f+20,c);let l=u-e.MESSAGE_HEADER_LENGTH-v;o.setUint32(f+24,l)}e.write=a;function s(t){let i=W.readHeader(t);if(!i)return null;if(i.type!==C.PUT_COMPONENT_NETWORK)throw new Error("PutComponentNetworkOperation tried to read another message type.");return{...i,entityId:t.readUint32(),componentId:t.readUint32(),timestamp:t.readUint32(),networkId:t.readUint32(),data:t.readBuffer()}}e.read=s})(jt||(jt={}));var Jt;(function(e){e.MESSAGE_HEADER_LENGTH=16;function a(t,i,n,c,r){let o=v+e.MESSAGE_HEADER_LENGTH,f=r.incrementWriteOffset(o);r.setUint32(f,o),r.setUint32(f+4,C.DELETE_COMPONENT_NETWORK),r.setUint32(f+8,t),r.setUint32(f+12,i),r.setUint32(f+16,n),r.setUint32(f+20,c)}e.write=a;function s(t){let i=W.readHeader(t);if(!i)return null;if(i.type!==C.DELETE_COMPONENT_NETWORK)throw new Error("DeleteComponentOperation tried to read another message type.");return{...i,entityId:t.readUint32(),componentId:t.readUint32(),timestamp:t.readUint32(),networkId:t.readUint32()}}e.read=s})(Jt||(Jt={}));var qt;(function(e){e.MESSAGE_HEADER_LENGTH=8;function a(t,i,n){n.writeUint32(v+4),n.writeUint32(C.DELETE_ENTITY_NETWORK),n.writeUint32(t),n.writeUint32(i)}e.write=a;function s(t){let i=W.readHeader(t);if(!i)return null;if(i.type!==C.DELETE_ENTITY_NETWORK)throw new Error("DeleteEntityNetwork tried to read another message type.");return{...i,entityId:t.readUint32(),networkId:t.readUint32()}}e.read=s})(qt||(qt={}));function Tr(e){return[C.DELETE_COMPONENT_NETWORK,C.DELETE_ENTITY_NETWORK,C.PUT_COMPONENT_NETWORK].includes(e.type)}function Js(e,a,s,t){let i=s.currentWriteOffset();e.type===C.PUT_COMPONENT_NETWORK?ie.write(a,e.timestamp,e.componentId,e.data,s):e.type===C.DELETE_COMPONENT_NETWORK?me.write(a,e.componentId,e.timestamp,s):e.type===C.DELETE_ENTITY_NETWORK&&Qe.write(a,s),t.writeBuffer(s.buffer().subarray(i,s.currentWriteOffset()),!1)}function qs(e,a,s,t){let i=s.currentWriteOffset();e.type===C.PUT_COMPONENT?jt.write(a.entityId,e.timestamp,e.componentId,a.networkId,e.data,s):e.type===C.DELETE_COMPONENT?Jt.write(a.entityId,e.componentId,e.timestamp,a.networkId,s):e.type===C.DELETE_ENTITY&&qt.write(a.entityId,a.networkId,s),t.writeBuffer(s.buffer().subarray(i,s.currentWriteOffset()),!1)}var di=new O;function Sr(e,a,s){di.resetBuffer();let t=a;if(!t&&"data"in e&&(t=Yt.deserialize(new O(e.data))),!t)throw new Error("Invalid parent transform");let i={...t,parent:s};return Yt.serialize(i,di),di.toBinary()}function Xs(e,a){let s=[],t=de(e),i=wn(e),n=Z(e),c=[],r=[];function o(y){return function(m){let T=new O(m),b;for(;b=W.getHeader(T);){let w=T.currentReadOffset(),_;b.type===C.DELETE_COMPONENT?_=me.read(T):b.type===C.DELETE_COMPONENT_NETWORK?_=Jt.read(T):b.type===C.PUT_COMPONENT?_=ie.read(T):b.type===C.PUT_COMPONENT_NETWORK?_=jt.read(T):b.type===C.DELETE_ENTITY?_=Qe.read(T):b.type===C.DELETE_ENTITY_NETWORK?_=qt.read(T):b.type===C.APPEND_VALUE?_=Fe.read(T):T.incrementReadOffset(b.length),_&&c.push({..._,transportId:y,messageBuffer:T.buffer().subarray(w,T.currentReadOffset())})}}}function f(y){return y.splice(0,y.length)}function u(y){if("networkId"in y){for(let[m,T]of e.getEntitiesWith(t))if(T.networkId===y.networkId&&T.entityId===y.entityId)return{entityId:m,network:T}}return{entityId:y.entityId}}async function l(){let y=f(c),E=[];for(let m of y){let{entityId:T,network:b}=u(m);if(Tr(m)&&!b&&(T=e.addEntity(),b={entityId:m.entityId,networkId:m.networkId},t.createOrReplace(T,b)),m.type===C.DELETE_ENTITY||m.type===C.DELETE_ENTITY_NETWORK)E.push(T),r.push(m);else{let w=e.entityContainer.getEntityState(T);if(w===re.Removed)continue;w===re.Unknown&&e.entityContainer.updateUsedEntity(T);let _=e.getComponentOrNull(m.componentId);if(_){m.type===C.PUT_COMPONENT&&_.componentId===n.componentId&&t.has(T)&&i.has(T)&&(m.data=Sr(m));let[H,Ce]=_.updateFromCrdt({...m,entityId:T});H||(r.push(m),a&&a(T,m.type,_,Ce))}else r.push(m)}}for(let m of E){for(let T of e.componentsIter())T.entityDeleted(m,!0);e.entityContainer.updateRemovedEntity(m),a&&a(m,C.DELETE_ENTITY)}}async function p(y){let E=f(r),m=new O;for(let b of e.componentsIter())for(let w of b.getCrdtUpdates()){let _=m.currentWriteOffset();if(s.some(H=>H.filter(w))&&(w.type===C.PUT_COMPONENT?ie.write(w.entityId,w.timestamp,w.componentId,w.data,m):w.type===C.DELETE_COMPONENT?me.write(w.entityId,b.componentId,w.timestamp,m):w.type===C.APPEND_VALUE&&Fe.write(w.entityId,w.timestamp,w.componentId,w.data,m),E.push({...w,messageBuffer:m.buffer().subarray(_,m.currentWriteOffset())}),a)){let H=w.type===C.PUT_COMPONENT||w.type===C.APPEND_VALUE?b.get(w.entityId):void 0;a(w.entityId,w.type,b,H)}}for(let b of y){let w=m.currentWriteOffset();Qe.write(b,m),E.push({type:C.DELETE_ENTITY,entityId:b,messageBuffer:m.buffer().subarray(w,m.currentWriteOffset())}),a&&a(b,C.DELETE_ENTITY)}let T=new O;for(let b in s){let w=Number(b),_=s[w],H=_.type==="renderer",Ce=_.type==="network";T.resetBuffer();let S=new O;for(let B of E){if(B.transportId===w||!_.filter(B))continue;let{entityId:M}=u(B),Y="componentId"in B&&B.componentId===n.componentId&&n.has(M)&&i.has(M)&&t.has(M);if(H&&B.type===C.PUT_COMPONENT&&Y){let K=u(i.get(M)),we=Sr(B,n.get(M),K.entityId),zn=S.currentWriteOffset();ie.write(M,B.timestamp,B.componentId,we,S),T.writeBuffer(S.buffer().subarray(zn,S.currentWriteOffset()),!1);continue}if(H&&Tr(B)){let K="data"in B?B.data:new Uint8Array;if(Y){let we=u(i.get(M));K=Sr(B,n.get(M),we.entityId)}Js({...B,data:K},M,S,T);continue}if(Ce&&!Tr(B)){let K=t.getOrNull(B.entityId);if(K){qs(B,K,S,T);continue}}T.writeBuffer(B.messageBuffer,!1)}let R=T.currentWriteOffset()?T.toBinary():new Uint8Array([]);await _.send(R)}}function A(y){let E=s.push(y)-1;y.onmessage=o(E)}return{sendMessages:p,receiveMessages:l,addTransport:A}}var Zs;(function(e){let a;(function(s){s[s.NETWORKED=0]="NETWORKED",s[s.RENDERER=1]="RENDERER"})(a=e.SynchronizedEntityType||(e.SynchronizedEntityType={}))})(Zs||(Zs={}));function Xt(e,a){if(e===a)return 0;if(e===null&&a!==null)return-1;if(e!==null&&a===null)return 1;if(e instanceof Uint8Array&&a instanceof Uint8Array){let s=e.byteLength-a.byteLength;if(s!==0)return s>0?1:-1;let t;for(let i=0,n=e.byteLength;i<n;i++)if(t=e[i]-a[i],t!==0)return t>0?1:-1;return 0}if(typeof e=="string"){let s=e.length-a.length;return s!==0?s>0?1:-1:e.localeCompare(a)}return e>a?1:-1}function ui(e){return Object.freeze({...e})}function yu(e,a){let s=(a.get(e)||0)+1;return a.set(e,s),s}function hu(e,a,s,t){return function(n,c){for(let[r,o]of a)if(!(c&&!c(r)))if(t.has(r)){let f=t.get(r),u=new O;s.serialize(f,u),ie.write(r,o,e,u.toBinary(),n)}else me.write(r,e,o,n)}}function Tu(e,a,s,t){function i(n){let{entityId:c,timestamp:r}=n,o=a.get(c);if(o===void 0||o<r)return $.StateUpdatedTimestamp;if(o>r)return $.StateOutdatedTimestamp;if(n.type===C.DELETE_COMPONENT&&!t.has(c))return $.NoChanges;let f=0;if(t.has(c)){let u=new O;s.serialize(t.get(c),u),f=Xt(u.toBinary(),n.data||null)}else f=Xt(null,n.data);return f===0?$.NoChanges:f>0?$.StateOutdatedData:$.StateUpdatedData}return n=>{if(n.type!==C.PUT_COMPONENT&&n.type!==C.PUT_COMPONENT_NETWORK&&n.type!==C.DELETE_COMPONENT&&n.type!==C.DELETE_COMPONENT_NETWORK)return[null,t.get(n.entityId)];let c=i(n),r=n.entityId;switch(c){case $.StateUpdatedData:case $.StateUpdatedTimestamp:{if(a.set(r,n.timestamp),n.type===C.PUT_COMPONENT||n.type===C.PUT_COMPONENT_NETWORK){let o=new O(n.data);t.set(r,s.deserialize(o))}else t.delete(r);return[null,t.get(r)]}case $.StateOutdatedTimestamp:case $.StateOutdatedData:if(t.has(r)){let o=new O;return s.serialize(t.get(r),o),[{type:C.PUT_COMPONENT,componentId:e,data:o.toBinary(),entityId:r,timestamp:a.get(r)},t.get(r)]}else return[{type:C.DELETE_COMPONENT,componentId:e,entityId:r,timestamp:a.get(r)},void 0]}return[null,t.get(r)]}}function Su(e,a,s,t,i){return function*(){for(let n of s){let c=yu(n,a);if(i.has(n)){let r=new O;t.serialize(i.get(n),r),yield{type:C.PUT_COMPONENT,componentId:e,entityId:n,data:r.toBinary(),timestamp:c}}else yield{type:C.DELETE_COMPONENT,componentId:e,entityId:n,timestamp:c}}s.clear()}}function pi(e,a,s){let t=new Map,i=new Set,n=new Map,c=new Map;return{get componentId(){return a},get componentName(){return e},get componentType(){return 0},schema:s,has(r){return t.has(r)},deleteFrom(r,o=!0){let f=t.get(r);return t.delete(r)&&o&&i.add(r),f||null},entityDeleted(r,o){t.delete(r)&&o&&i.add(r)},getOrNull(r){let o=t.get(r);return o?ui(o):null},get(r){let o=t.get(r);if(!o)throw new Error(`[getFrom] Component ${e} for entity #${r} not found`);return ui(o)},create(r,o){if(t.get(r))throw new Error(`[create] Component ${e} for ${r} already exists`);let u=o===void 0?s.create():s.extend?s.extend(o):o;return t.set(r,u),i.add(r),u},createOrReplace(r,o){let f=o===void 0?s.create():s.extend?s.extend(o):o;return t.set(r,f),i.add(r),f},getMutableOrNull(r){let o=t.get(r);return o?(i.add(r),o):null},getOrCreateMutable(r,o){let f=t.get(r);return f?(i.add(r),f):this.create(r,o)},getMutable(r){let o=this.getMutableOrNull(r);if(o===null)throw new Error(`[mutable] Component ${e} for ${r} not found`);return o},*iterator(){for(let[r,o]of t)yield[r,o]},*dirtyIterator(){for(let r of i)yield r},getCrdtUpdates:Su(a,n,i,s,t),updateFromCrdt:Tu(a,n,s,t),dumpCrdtStateToBuffer:hu(a,n,s,t),onChange(r,o){let f=c.get(r)??[];f.push(o),c.set(r,f)},__onChangeCallbacks(r,o){let f=c.get(r);if(f)for(let u of f)u(o)}}}function $s(){let e=[];function a(){e.sort((i,n)=>n.priority-i.priority)}function s(i,n,c){let r=c??i.name;if(e.find(o=>o.fn===i))throw new Error(`System ${JSON.stringify(r)} already added to the engine`);e.push({fn:i,priority:n,name:r}),a()}function t(i){let n=-1;return typeof i=="string"?n=e.findIndex(c=>c.name===i):n=e.findIndex(c=>c.fn===i),n===-1?!1:(e.splice(n,1),a(),!0)}return{add:s,remove:t,getSystems(){return e}}}var li=tc(new Set);function ec(){throw new Error("The set is frozen")}function tc(e){return e.add=ec,e.clear=ec,e}function bu(e,a){return e.timestamp>a.timestamp?1:-1}function nc(e,a,s,t){let i=new Map,n=new Set,c=[],r=new Map;function o(p){let A=p.raw.length;return A>1&&p.raw[A-1].timestamp<=p.raw[A-2].timestamp}function f(p){let A=i.get(p);if(A){for(o(A)&&A.raw.sort(bu);A.raw.length>t.maxElements;)A.raw.shift();let y=tc(new Set(A?.raw.map(E=>E.value)));return A.frozenSet=y,y}else return li}function u(p,A){let y=i.get(p);y||(y={raw:[],frozenSet:li},i.set(p,y));let E=s.extend?s.extend(A):A,m=t.timestampFunction(E);return ci&&Object.freeze(E),y.raw.push({value:E,timestamp:m}),{set:f(p),value:E}}return{get componentId(){return a},get componentName(){return e},get componentType(){return 1},schema:s,has(p){return i.has(p)},entityDeleted(p){i.delete(p)},get(p){let A=i.get(p);return A?A.frozenSet:li},addValue(p,A){let{set:y,value:E}=u(p,A);n.add(p);let m=new O;return s.serialize(E,m),c.push({componentId:a,data:m.toBinary(),entityId:p,timestamp:0,type:C.APPEND_VALUE}),y},*iterator(){for(let[p,A]of i)yield[p,A.frozenSet]},*dirtyIterator(){for(let p of n)yield p},getCrdtUpdates(){return n.clear(),c.splice(0,c.length)},updateFromCrdt(p){if(p.type===C.APPEND_VALUE){let A=new O(p.data),{value:y}=u(p.entityId,s.deserialize(A));return[null,y]}return[null,void 0]},dumpCrdtStateToBuffer:function(p,A){for(let[y,{raw:E}]of i)if(!(A&&!A(y)))for(let m of E){let T=new O;s.serialize(m.value,T),Fe.write(y,0,a,T.toBinary(),p)}},onChange(p,A){let y=r.get(p)??[];y.push(A),r.set(p,y)},__onChangeCallbacks(p,A){let y=r.get(p);if(y)for(let E of y)E(A)}}}function*oc(e,a){if(a.has(e)){a.delete(e);for(let[s,t]of a)t.parent===e&&(yield*oc(s,a));yield e}}function rc(e,a,s){let t=new Map(e.getEntitiesWith(s));return oc(a,t)}function ic(e,a){let s=wn(e),t=de(e);e.removeEntity(a);let i=t.getOrNull(a);if(i)for(let[n,c]of e.getEntitiesWith(s))c.entityId===i.entityId&&c.networkId===i.networkId&&ic(e,n)}function ac(e,a){let s=Z(e);if(de(e).has(a))return ic(e,a);for(let i of rc(e,a,s))e.removeEntity(i)}var yT=1<<20;var br;(function(e){e[e.LastWriteWinElementSet=0]="LastWriteWinElementSet",e[e.GrowOnlyValueSet=1]="GrowOnlyValueSet"})(br||(br={}));function Bu(e){let a=e?.entityContainer??js(),s=new Map,t=$s(),i=!1;function n(S,R=1e5,B){t.add(S,R,B)}function c(S){return t.remove(S)}function r(){return a.generateEntity()}function o(S){for(let[,R]of s)R.componentName!=="core-schema::Network-Entity"&&R.entityDeleted(S,!0);return a.removeEntity(S)}function f(S){return ac({removeEntity:o,defineComponentFromSchema:l,getEntitiesWith:m,defineComponent:A},S)}function u(S,R){if(i)throw new Error("Engine is already sealed. No components can be added at this stage");let B=ue(S);if(s.get(B))throw new Error(`Component number ${B} was already registered.`);if(R.componentName!==S)throw new Error(`Component name doesn't match componentDefinition.componentName ${S} != ${R.componentName}`);if(R.componentId!==B)throw new Error(`Component number doesn't match componentDefinition.componentId ${B} != ${R.componentId}`);return s.set(B,R),R}function l(S,R){let B=ue(S),M=s.get(B);if(M)return M;if(i)throw new Error("Engine is already sealed. No components can be added at this stage");let Y=pi(S,B,R);return s.set(B,Y),Y}function p(S,R,B){let M=ue(S),Y=s.get(M);if(Y)return Y;if(i)throw new Error("Engine is already sealed. No components can be added at this stage");let K=nc(S,M,R,B);return s.set(M,K),K}function A(S,R,B){let M=ue(S),Y=s.get(M);if(Y)return Y;if(i)throw new Error("Engine is already sealed. No components can be added at this stage");let K=d.Map(R,B),we=pi(S,M,K),zn={...we,create(vr,Lr){return we.create(vr,Lr)},createOrReplace(vr,Lr){return we.createOrReplace(vr,Lr)}};return s.set(M,zn),zn}function y(S){let R=typeof S=="number"?S:ue(S),B=s.get(R);if(!B)throw new Error(`Component ${S} not found. You need to declare the components at the beginnig of the engine declaration`);return B}function E(S){let R=typeof S=="number"?S:ue(S);return s.get(R)??null}function*m(...S){for(let[R,...B]of b(...S))yield[R,...B.map(M=>M.get(R))]}function T(S){let R=ge({defineComponent:A});for(let[B,M]of m(R))if(M.value===S)return B;return null}function*b(...S){let[R,...B]=S;for(let[M]of R.iterator()){let Y=!0;for(let K of B)if(!K.has(M)){Y=!1;break}Y&&(yield[M,...S])}}function w(){return t.getSystems()}function _(){return s.values()}function H(S){if(i)throw new Error("Engine is already sealed. No components can be removed at this stage");let R=typeof S=="number"?S:ue(S);s.delete(R)}Z({defineComponentFromSchema:l});function Ce(){i||(i=!0)}return{addEntity:r,removeEntity:o,removeEntityWithChildren:f,addSystem:n,getSystems:w,removeSystem:c,defineComponent:A,defineComponentFromSchema:l,defineValueSetComponentFromSchema:p,getEntitiesWith:m,getComponent:y,getComponentOrNull:E,getEntityOrNullByName:T,removeComponentDefinition:H,registerComponentDefinition:u,entityContainer:a,componentsIter:_,seal:Ce}}function gr(e){let a=Bu(e),t=Xs(a,(n,c,r,o)=>{if(c===C.DELETE_ENTITY)for(let f of a.componentsIter())f?.__onChangeCallbacks(n,void 0);else r?.__onChangeCallbacks(n,o);return e?.onChangeFunction(n,c,r,o)});async function i(n){await t.receiveMessages();for(let r of a.getSystems()){let o=r.fn(n);fi(o,`A system (${r.name||"anonymous"}) returned a thenable. Systems cannot be async functions. Documentation: https://dcl.gg/sdk/sync-systems`)}let c=a.entityContainer.releaseRemovedEntities();await t.sendMessages(c)}return{_id:Date.now(),addEntity:a.addEntity,removeEntity:a.removeEntity,removeEntityWithChildren:a.removeEntityWithChildren,addSystem:a.addSystem,removeSystem:a.removeSystem,defineComponent:a.defineComponent,defineComponentFromSchema:a.defineComponentFromSchema,defineValueSetComponentFromSchema:a.defineValueSetComponentFromSchema,registerComponentDefinition:a.registerComponentDefinition,getEntitiesWith:a.getEntitiesWith,getComponent:a.getComponent,getComponentOrNull:a.getComponentOrNull,removeComponentDefinition:a.removeComponentDefinition,componentsIter:a.componentsIter,seal:a.seal,getEntityOrNullByName:a.getEntityOrNullByName,update:i,RootEntity:0,PlayerEntity:1,CameraEntity:2,getEntityState:a.entityContainer.getEntityState,addTransport:t.addTransport,entityContainer:a.entityContainer}}var Ai=new Map;function sc(e){if(Ai.has(e._id))return Ai.get(e._id);let a=ve(e),s=sr(e),t=Se(e),i=new Map;function n(u){let l=s.getOrNull(u),p=a.getOrNull(u),A=i.get(u);return!l||!p?!1:!!((c(u)||l.state===1)&&!A?.completed&&(A?.frames??0)>2)}function c(u){let l=a.getOrNull(u),p=i.get(u)?.tween;if(l&&!p||!l&&p)return!0;let A=new O;return a.schema.serialize(l,A),Xt(A.toBinary(),p)}let r=[];e.addSystem(()=>{for(let u of r)u();r.length=0;for(let[u,l]of e.getEntitiesWith(a)){if(c(u)){let A=new O;a.schema.serialize(l,A),i.set(u,{tween:A.toBinary(),frames:0,completed:!1,changed:!0});continue}let p=i.get(u);if(p.frames+=1,p.changed=!1,n(u)){p.frames=0,p.completed=!0;let A=t.getOrNull(u);if(!A)continue;let{sequence:y}=A;if(y&&y.length){let[E,...m]=y;a.createOrReplace(u,E);let T=t.getMutable(u);T.sequence=m,A.loop===0&&T.sequence.push(l)}else A.loop===1?a.createOrReplace(u,o(l)):A.loop===0&&(a.deleteFrom(u),i.delete(u),r.push(()=>{a.createOrReplace(u,l)}))}}},Number.NEGATIVE_INFINITY);function o(u){if(u.mode?.$case==="move"&&u.mode.move)return{...u,mode:{...u.mode,move:{start:u.mode.move.end,end:u.mode.move.start}}};if(u.mode?.$case==="rotate"&&u.mode.rotate)return{...u,mode:{...u.mode,rotate:{start:u.mode.rotate.end,end:u.mode.rotate.start}}};if(u.mode?.$case==="scale"&&u.mode.scale)return{...u,mode:{...u.mode,scale:{start:u.mode.scale.end,end:u.mode.scale.start}}};throw new Error("Invalid tween")}let f={tweenCompleted:n};return Ai.set(e._id,f),f}function cc(e){let a=ae(e),s=In(e),t=Te(e),i=Gt(e),n=new Set,c=0;function r(o){if(c+=o,!(c<=10)){c=0;for(let[f]of e.getEntitiesWith(a)){if(n.has(f)||t.has(f)||i.has(f))continue;let u=s.getOrNull(f);u&&(u.collisionMask===void 0||u.collisionMask&1)||(n.add(f),console.log(`\u26A0\uFE0F Missing MeshCollider component on entity ${f}. Add a MeshCollider to the entity so it can be clickeable by the player.
See https://docs.decentraland.org/creator/development-guide/sdk7/colliders/#pointer-blocking`))}}}e.removeSystem(r),e.addSystem(r)}var Zt=gr();var cS=sc(Zt);cc(Zt);var fc;(function(e){e[e.CT_FIRST_PERSON=0]="CT_FIRST_PERSON",e[e.CT_THIRD_PERSON=1]="CT_THIRD_PERSON",e[e.CT_CINEMATIC=2]="CT_CINEMATIC"})(fc||(fc={}));var dc;(function(e){e[e.IA_POINTER=0]="IA_POINTER",e[e.IA_PRIMARY=1]="IA_PRIMARY",e[e.IA_SECONDARY=2]="IA_SECONDARY",e[e.IA_ANY=3]="IA_ANY",e[e.IA_FORWARD=4]="IA_FORWARD",e[e.IA_BACKWARD=5]="IA_BACKWARD",e[e.IA_RIGHT=6]="IA_RIGHT",e[e.IA_LEFT=7]="IA_LEFT",e[e.IA_JUMP=8]="IA_JUMP",e[e.IA_WALK=9]="IA_WALK",e[e.IA_ACTION_3=10]="IA_ACTION_3",e[e.IA_ACTION_4=11]="IA_ACTION_4",e[e.IA_ACTION_5=12]="IA_ACTION_5",e[e.IA_ACTION_6=13]="IA_ACTION_6"})(dc||(dc={}));var uc;(function(e){e[e.PET_UP=0]="PET_UP",e[e.PET_DOWN=1]="PET_DOWN",e[e.PET_HOVER_ENTER=2]="PET_HOVER_ENTER",e[e.PET_HOVER_LEAVE=3]="PET_HOVER_LEAVE"})(uc||(uc={}));var pc;(function(e){e[e.UNKNOWN=0]="UNKNOWN",e[e.LOADING=1]="LOADING",e[e.NOT_FOUND=2]="NOT_FOUND",e[e.FINISHED_WITH_ERROR=3]="FINISHED_WITH_ERROR",e[e.FINISHED=4]="FINISHED"})(pc||(pc={}));var lc;(function(e){e[e.TAM_TOP_LEFT=0]="TAM_TOP_LEFT",e[e.TAM_TOP_CENTER=1]="TAM_TOP_CENTER",e[e.TAM_TOP_RIGHT=2]="TAM_TOP_RIGHT",e[e.TAM_MIDDLE_LEFT=3]="TAM_MIDDLE_LEFT",e[e.TAM_MIDDLE_CENTER=4]="TAM_MIDDLE_CENTER",e[e.TAM_MIDDLE_RIGHT=5]="TAM_MIDDLE_RIGHT",e[e.TAM_BOTTOM_LEFT=6]="TAM_BOTTOM_LEFT",e[e.TAM_BOTTOM_CENTER=7]="TAM_BOTTOM_CENTER",e[e.TAM_BOTTOM_RIGHT=8]="TAM_BOTTOM_RIGHT"})(lc||(lc={}));var Ac;(function(e){e[e.F_SANS_SERIF=0]="F_SANS_SERIF",e[e.F_SERIF=1]="F_SERIF",e[e.F_MONOSPACE=2]="F_MONOSPACE"})(Ac||(Ac={}));function _n(e){let a=e.getComponentOrNull("composite::root");return a||e.defineComponent("composite::root",{src:d.String,entities:d.Array(d.Map({src:d.Entity,dest:d.Entity}))})}var Iu="/";function xu(e,a=!1){let s="",t=0,i=-1,n=0,c;for(let r=0;r<=e.length;++r){if(r<e.length)c=e.charCodeAt(r);else{if(c===47)break;c=47}if(c===47){if(!(i===r-1||n===1))if(i!==r-1&&n===2){if(s.length<2||t!==2||s.charCodeAt(s.length-1)!==46||s.charCodeAt(s.length-2)!==46){if(s.length>2){let o=s.lastIndexOf("/");if(o!==s.length-1){o===-1?(s="",t=0):(s=s.slice(0,o),t=s.length-1-s.lastIndexOf("/")),i=r,n=0;continue}}else if(s.length===2||s.length===1){s="",t=0,i=r,n=0;continue}}a&&(s.length>0?s+="/..":s="..",t=2)}else s.length>0?s+="/"+e.slice(i+1,r):s=e.slice(i+1,r),t=r-i-1;i=r,n=0}else c===46&&n!==-1?++n:n=-1}return s}function Br(...e){let a="",s=!1,t;for(let i=e.length-1;i>=-1&&!s;i--){let n;i>=0?n=e[i]:(t===void 0&&(t=Iu),n=t),n.length!==0&&(a=n+"/"+a,s=n.charCodeAt(0)===47)}return a=xu(a,!s),s?a.length>0?"/"+a:"/":a.length>0?a:"."}function mc(e){if(e.length===0)return".";let a=e.charCodeAt(0),s=a===47,t=-1,i=!0;for(let n=e.length-1;n>=1;--n)if(a=e.charCodeAt(n),a===47){if(!i){t=n;break}}else i=!1;return t===-1?s?"/":".":s&&t===1?"//":e.slice(0,t)}function Ir(e,a){return(e.startsWith(".")?Br(a,e):Br(e)).substring(1)}var Be;(function(e){e[e.EMM_NONE=0]="EMM_NONE",e[e.EMM_NEXT_AVAILABLE=1]="EMM_NEXT_AVAILABLE",e[e.EMM_DIRECT_MAPPING=2]="EMM_DIRECT_MAPPING"})(Be||(Be={}));function Ec(e,a){return a.data?.$case==="json"?a.data.json:e.schema.deserialize(new O(a.data?.binary))}function _u(e,a){let s=e.getComponentOrNull(a.name);if(s)return s;if(a.name.startsWith("core::")){if(a.name in oi)return oi[a.name](e);throw new Error(`The core component ${a.name} was not found.`)}else{if(a.jsonSchema)return e.defineComponentFromSchema(a.name,d.fromJson(a.jsonSchema));throw new Error(`${a.name} is not defined and there is no schema to define it.`)}}function Ru(e,a,s,{entityMapping:t}){let i=s.get(a);if(i)return i;if(t?.type===Be.EMM_DIRECT_MAPPING){let c=t.getCompositeEntity(a);return s.set(a,c),c}let n=t?.type===Be.EMM_NEXT_AVAILABLE?t.getNextAvailableEntity():e.addEntity();if(n===null)throw new Error("There is no more entities to allocate");return s.set(a,n),n}function mi(e,a,s,t){let{rootEntity:i,alreadyRequestedSrc:n,entityMapping:c}=t,r=n||new Set,o=mc(Br(a.src)),f=ue("core::Transform"),u=_n(e),l=new Map,p=m=>Ru(e,m,l,t),A=i??p(0);i&&l.set(0,i);let y=a.composite.components.find(m=>m.name===u.componentName);if(y)for(let[m,T]of y.data){let b=Ec(u,T),w=Ir(b.src,o),_=s.getCompositeOrNull(w),H=p(m);if(_){if(r.has(_.src)||_.src===a.src)throw new Error(`Composite ${a.src} has a recursive instanciation while try to instance ${_.src}. Previous instances: ${r.toString()}`);mi(e,_,s,{rootEntity:H,alreadyRequestedSrc:new Set(r).add(_.src),entityMapping:c?.type===Be.EMM_NEXT_AVAILABLE?c:void 0})}}for(let m of a.composite.components){if(m.name===u.componentName)continue;let T=_u(e,m);for(let[b,w]of m.data){let _=Ec(T,w),H=p(b),Ce=T.create(H,_);if(T.componentId===f){let S=Ce;S.parent?S.parent=p(S.parent):S.parent=p(0)}else d.mutateNestedValues(T.schema.jsonSchema,Ce,(S,R)=>R.serializationType==="entity"?{changed:!0,value:p(S)}:{changed:!1})}}let E=u.getMutableOrNull(A)||u.create(A);for(let[m,T]of l)E.entities.push({src:m,dest:T});return E.src=a.src,A}var te=h(require("protobufjs/minimal"));var ee=h(require("protobufjs/minimal"));var Cc;(function(e){e[e.NULL_VALUE=0]="NULL_VALUE"})(Cc||(Cc={}));function ku(e){switch(e){case 0:case"NULL_VALUE":return 0;default:throw new Sc.Error("Unrecognized enum value "+e+" for enum NullValue")}}function Ou(e){switch(e){case 0:return"NULL_VALUE";default:throw new Sc.Error("Unrecognized enum value "+e+" for enum NullValue")}}function yc(){return{fields:new Map}}var $t;(function(e){function a(r,o=ee.default.Writer.create()){return r.fields.forEach((f,u)=>{f!==void 0&&xr.encode({key:u,value:f},o.uint32(10).fork()).ldelim()}),o}e.encode=a;function s(r,o){let f=r instanceof ee.default.Reader?r:ee.default.Reader.create(r),u=o===void 0?f.len:f.pos+o,l=yc();for(;f.pos<u;){let p=f.uint32();switch(p>>>3){case 1:if(p!==10)break;let A=xr.decode(f,f.uint32());A.value!==void 0&&l.fields.set(A.key,A.value);continue}if((p&7)===4||p===0)break;f.skipType(p&7)}return l}e.decode=s;function t(r){return{fields:Pu(r.fields)?Object.entries(r.fields).reduce((o,[f,u])=>(o.set(f,u),o),new Map):new Map}}e.fromJSON=t;function i(r){let o={};return o.fields={},r.fields&&r.fields.forEach((f,u)=>{o.fields[u]=f}),o}e.toJSON=i;function n(r){let o=yc();return r!==void 0&&Object.keys(r).forEach(f=>{o.fields.set(f,r[f])}),o}e.wrap=n;function c(r){let o={};return[...r.fields.keys()].forEach(f=>{o[f]=r.fields.get(f)}),o}e.unwrap=c})($t||($t={}));function Nu(){return{key:"",value:void 0}}var xr;(function(e){function a(n,c=ee.default.Writer.create()){return n.key!==""&&c.uint32(10).string(n.key),n.value!==void 0&&L.encode(L.wrap(n.value),c.uint32(18).fork()).ldelim(),c}e.encode=a;function s(n,c){let r=n instanceof ee.default.Reader?n:ee.default.Reader.create(n),o=c===void 0?r.len:r.pos+c,f=Nu();for(;r.pos<o;){let u=r.uint32();switch(u>>>3){case 1:if(u!==10)break;f.key=r.string();continue;case 2:if(u!==18)break;f.value=L.unwrap(L.decode(r,r.uint32()));continue}if((u&7)===4||u===0)break;r.skipType(u&7)}return f}e.decode=s;function t(n){return{key:Ie(n.key)?String(n.key):"",value:Ie(n?.value)?n.value:void 0}}e.fromJSON=t;function i(n){let c={};return n.key!==void 0&&(c.key=n.key),n.value!==void 0&&(c.value=n.value),c}e.toJSON=i})(xr||(xr={}));function hc(){return{kind:void 0}}var L;(function(e){function a(r,o=ee.default.Writer.create()){switch(r.kind?.$case){case"nullValue":o.uint32(8).int32(r.kind.nullValue);break;case"numberValue":o.uint32(17).double(r.kind.numberValue);break;case"stringValue":o.uint32(26).string(r.kind.stringValue);break;case"boolValue":o.uint32(32).bool(r.kind.boolValue);break;case"structValue":$t.encode($t.wrap(r.kind.structValue),o.uint32(42).fork()).ldelim();break;case"listValue":en.encode(en.wrap(r.kind.listValue),o.uint32(50).fork()).ldelim();break}return o}e.encode=a;function s(r,o){let f=r instanceof ee.default.Reader?r:ee.default.Reader.create(r),u=o===void 0?f.len:f.pos+o,l=hc();for(;f.pos<u;){let p=f.uint32();switch(p>>>3){case 1:if(p!==8)break;l.kind={$case:"nullValue",nullValue:f.int32()};continue;case 2:if(p!==17)break;l.kind={$case:"numberValue",numberValue:f.double()};continue;case 3:if(p!==26)break;l.kind={$case:"stringValue",stringValue:f.string()};continue;case 4:if(p!==32)break;l.kind={$case:"boolValue",boolValue:f.bool()};continue;case 5:if(p!==42)break;l.kind={$case:"structValue",structValue:$t.unwrap($t.decode(f,f.uint32()))};continue;case 6:if(p!==50)break;l.kind={$case:"listValue",listValue:en.unwrap(en.decode(f,f.uint32()))};continue}if((p&7)===4||p===0)break;f.skipType(p&7)}return l}e.decode=s;function t(r){return{kind:Ie(r.nullValue)?{$case:"nullValue",nullValue:ku(r.nullValue)}:Ie(r.numberValue)?{$case:"numberValue",numberValue:Number(r.numberValue)}:Ie(r.stringValue)?{$case:"stringValue",stringValue:String(r.stringValue)}:Ie(r.boolValue)?{$case:"boolValue",boolValue:!!r.boolValue}:Ie(r.structValue)?{$case:"structValue",structValue:r.structValue}:Ie(r.listValue)?{$case:"listValue",listValue:[...r.listValue]}:void 0}}e.fromJSON=t;function i(r){let o={};return r.kind?.$case==="nullValue"&&(o.nullValue=r.kind?.nullValue!==void 0?Ou(r.kind?.nullValue):void 0),r.kind?.$case==="numberValue"&&(o.numberValue=r.kind?.numberValue),r.kind?.$case==="stringValue"&&(o.stringValue=r.kind?.stringValue),r.kind?.$case==="boolValue"&&(o.boolValue=r.kind?.boolValue),r.kind?.$case==="structValue"&&(o.structValue=r.kind?.structValue),r.kind?.$case==="listValue"&&(o.listValue=r.kind?.listValue),o}e.toJSON=i;function n(r){let o=hc();if(r===null)o.kind={$case:"nullValue",nullValue:0};else if(typeof r=="boolean")o.kind={$case:"boolValue",boolValue:r};else if(typeof r=="number")o.kind={$case:"numberValue",numberValue:r};else if(typeof r=="string")o.kind={$case:"stringValue",stringValue:r};else if(Array.isArray(r))o.kind={$case:"listValue",listValue:r};else if(typeof r=="object")o.kind={$case:"structValue",structValue:r};else if(typeof r<"u")throw new Error("Unsupported any value type: "+typeof r);return o}e.wrap=n;function c(r){return r.kind?.$case==="nullValue"?null:r.kind?.$case==="numberValue"?r.kind?.numberValue:r.kind?.$case==="stringValue"?r.kind?.stringValue:r.kind?.$case==="boolValue"?r.kind?.boolValue:r.kind?.$case==="structValue"?r.kind?.structValue:r.kind?.$case==="listValue"?r.kind?.listValue:void 0}e.unwrap=c})(L||(L={}));function Tc(){return{values:[]}}var en;(function(e){function a(r,o=ee.default.Writer.create()){for(let f of r.values)L.encode(L.wrap(f),o.uint32(10).fork()).ldelim();return o}e.encode=a;function s(r,o){let f=r instanceof ee.default.Reader?r:ee.default.Reader.create(r),u=o===void 0?f.len:f.pos+o,l=Tc();for(;f.pos<u;){let p=f.uint32();switch(p>>>3){case 1:if(p!==10)break;l.values.push(L.unwrap(L.decode(f,f.uint32())));continue}if((p&7)===4||p===0)break;f.skipType(p&7)}return l}e.decode=s;function t(r){return{values:Array.isArray(r?.values)?[...r.values]:[]}}e.fromJSON=t;function i(r){let o={};return r.values?o.values=r.values.map(f=>f):o.values=[],o}e.toJSON=i;function n(r){let o=Tc();return o.values=r??[],o}e.wrap=n;function c(r){return r?.hasOwnProperty("values")&&Array.isArray(r.values)?r.values:r}e.unwrap=c})(en||(en={}));var Sc=(()=>{if(typeof globalThis<"u")return globalThis;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();function Pu(e){return typeof e=="object"&&e!==null}function Ie(e){return e!=null}function Mu(){return{data:void 0}}var xe;(function(e){function a(n,c=te.default.Writer.create()){switch(n.data?.$case){case"json":L.encode(L.wrap(n.data.json),c.uint32(10).fork()).ldelim();break;case"binary":c.uint32(18).bytes(n.data.binary);break}return c}e.encode=a;function s(n,c){let r=n instanceof te.default.Reader?n:te.default.Reader.create(n),o=c===void 0?r.len:r.pos+c,f=Mu();for(;r.pos<o;){let u=r.uint32();switch(u>>>3){case 1:if(u!==10)break;f.data={$case:"json",json:L.unwrap(L.decode(r,r.uint32()))};continue;case 2:if(u!==18)break;f.data={$case:"binary",binary:r.bytes()};continue}if((u&7)===4||u===0)break;r.skipType(u&7)}return f}e.decode=s;function t(n){return{data:Ge(n.json)?{$case:"json",json:n.json}:Ge(n.binary)?{$case:"binary",binary:Lu(n.binary)}:void 0}}e.fromJSON=t;function i(n){let c={};return n.data?.$case==="json"&&(c.json=n.data?.json),n.data?.$case==="binary"&&(c.binary=n.data?.binary!==void 0?Fu(n.data?.binary):void 0),c}e.toJSON=i})(xe||(xe={}));function Du(){return{name:"",jsonSchema:void 0,data:new Map}}var tn;(function(e){function a(n,c=te.default.Writer.create()){return n.name!==""&&c.uint32(10).string(n.name),n.jsonSchema!==void 0&&L.encode(L.wrap(n.jsonSchema),c.uint32(18).fork()).ldelim(),n.data.forEach((r,o)=>{wr.encode({key:o,value:r},c.uint32(26).fork()).ldelim()}),c}e.encode=a;function s(n,c){let r=n instanceof te.default.Reader?n:te.default.Reader.create(n),o=c===void 0?r.len:r.pos+c,f=Du();for(;r.pos<o;){let u=r.uint32();switch(u>>>3){case 1:if(u!==10)break;f.name=r.string();continue;case 2:if(u!==18)break;f.jsonSchema=L.unwrap(L.decode(r,r.uint32()));continue;case 3:if(u!==26)break;let l=wr.decode(r,r.uint32());l.value!==void 0&&f.data.set(l.key,l.value);continue}if((u&7)===4||u===0)break;r.skipType(u&7)}return f}e.decode=s;function t(n){return{name:Ge(n.name)?String(n.name):"",jsonSchema:Ge(n?.jsonSchema)?n.jsonSchema:void 0,data:Qu(n.data)?Object.entries(n.data).reduce((c,[r,o])=>(c.set(Number(r),xe.fromJSON(o)),c),new Map):new Map}}e.fromJSON=t;function i(n){let c={};return n.name!==void 0&&(c.name=n.name),n.jsonSchema!==void 0&&(c.jsonSchema=n.jsonSchema),c.data={},n.data&&n.data.forEach((r,o)=>{c.data[o]=xe.toJSON(r)}),c}e.toJSON=i})(tn||(tn={}));function Uu(){return{key:0,value:void 0}}var wr;(function(e){function a(n,c=te.default.Writer.create()){return n.key!==0&&c.uint32(8).int32(n.key),n.value!==void 0&&xe.encode(n.value,c.uint32(18).fork()).ldelim(),c}e.encode=a;function s(n,c){let r=n instanceof te.default.Reader?n:te.default.Reader.create(n),o=c===void 0?r.len:r.pos+c,f=Uu();for(;r.pos<o;){let u=r.uint32();switch(u>>>3){case 1:if(u!==8)break;f.key=r.int32();continue;case 2:if(u!==18)break;f.value=xe.decode(r,r.uint32());continue}if((u&7)===4||u===0)break;r.skipType(u&7)}return f}e.decode=s;function t(n){return{key:Ge(n.key)?Number(n.key):0,value:Ge(n.value)?xe.fromJSON(n.value):void 0}}e.fromJSON=t;function i(n){let c={};return n.key!==void 0&&(c.key=Math.round(n.key)),n.value!==void 0&&(c.value=n.value?xe.toJSON(n.value):void 0),c}e.toJSON=i})(wr||(wr={}));function vu(){return{version:0,components:[]}}var We;(function(e){function a(n,c=te.default.Writer.create()){n.version!==0&&c.uint32(8).int32(n.version);for(let r of n.components)tn.encode(r,c.uint32(18).fork()).ldelim();return c}e.encode=a;function s(n,c){let r=n instanceof te.default.Reader?n:te.default.Reader.create(n),o=c===void 0?r.len:r.pos+c,f=vu();for(;r.pos<o;){let u=r.uint32();switch(u>>>3){case 1:if(u!==8)break;f.version=r.int32();continue;case 2:if(u!==18)break;f.components.push(tn.decode(r,r.uint32()));continue}if((u&7)===4||u===0)break;r.skipType(u&7)}return f}e.decode=s;function t(n){return{version:Ge(n.version)?Number(n.version):0,components:Array.isArray(n?.components)?n.components.map(c=>tn.fromJSON(c)):[]}}e.fromJSON=t;function i(n){let c={};return n.version!==void 0&&(c.version=Math.round(n.version)),n.components?c.components=n.components.map(r=>r?tn.toJSON(r):void 0):c.components=[],c}e.toJSON=i})(We||(We={}));var nn=(()=>{if(typeof globalThis<"u")return globalThis;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw"Unable to locate global object"})();function Lu(e){if(nn.Buffer)return Uint8Array.from(nn.Buffer.from(e,"base64"));{let a=nn.atob(e),s=new Uint8Array(a.length);for(let t=0;t<a.length;++t)s[t]=a.charCodeAt(t);return s}}function Fu(e){if(nn.Buffer)return nn.Buffer.from(e).toString("base64");{let a=[];return e.forEach(s=>{a.push(String.fromCharCode(s))}),nn.btoa(a.join(""))}}function Qu(e){return typeof e=="object"&&e!==null}function Ge(e){return e!=null}var ne;(function(e){function a(r){return We.fromJSON(r)}e.fromJson=a;function s(r){return We.decode(r)}e.fromBinary=s;function t(r){return We.toJSON(r)}e.toJson=t;function i(r){return We.encode(r).finish()}e.toBinary=i;function n(r,o,f,u={}){mi(r,o,f,u)}e.instance=n;function c(r,o="/"){return Ir(r,o)}e.resolveAndNormalizePath=c})(ne||(ne={}));var _r=Z(Zt);var bc=ge(Zt);function gc(e,a,s){let i=Bc(U.ACTION_TYPES,e).getOrCreateMutable(e.RootEntity),n={type:a,jsonSchema:JSON.stringify(s?.jsonSchema||d.Map({}).jsonSchema)};i.value=[...i.value.filter(c=>c.type!==n.type),n]}var U;(function(e){e.ACTION_TYPES="asset-packs::ActionTypes",e.ACTIONS="asset-packs::Actions",e.COUNTER="asset-packs::Counter",e.TRIGGERS="asset-packs::Triggers",e.STATES="asset-packs::States",e.COUNTER_BAR="asset-packs::CounterBar"})(U||(U={}));var Rn;(function(e){e.MOVE_ITEM="move_item",e.ROTATE_ITEM="rotate_item",e.SCALE_ITEM="scale_item"})(Rn||(Rn={}));var kn;(function(e){e.LINEAR="linear",e.EASEINQUAD="easeinquad",e.EASEOUTQUAD="easeoutquad",e.EASEQUAD="easequad",e.EASEINSINE="easeinsine",e.EASEOUTSINE="easeoutsine",e.EASESINE="easeinoutsine",e.EASEINEXPO="easeinexpo",e.EASEOUTEXPO="easeoutexpo",e.EASEEXPO="easeinoutexpo",e.EASEINELASTIC="easeinelastic",e.EASEOUTELASTIC="easeoutelastic",e.EASEELASTIC="easeinoutelastic",e.EASEINBOUNCE="easeinbounce",e.EASEOUTEBOUNCE="easeoutbounce",e.EASEBOUNCE="easeinoutbounce"})(kn||(kn={}));var g;(function(e){e.PLAY_ANIMATION="play_animation",e.STOP_ANIMATION="stop_animation",e.SET_STATE="set_state",e.START_TWEEN="start_tween",e.SET_COUNTER="set_counter",e.INCREMENT_COUNTER="increment_counter",e.DECREASE_COUNTER="decrease_counter",e.PLAY_SOUND="play_sound",e.STOP_SOUND="stop_sound",e.SET_VISIBILITY="set_visibility",e.ATTACH_TO_PLAYER="attach_to_player",e.DETACH_FROM_PLAYER="detach_from_player",e.PLAY_VIDEO_STREAM="play_video_stream",e.STOP_VIDEO_STREAM="stop_video_stream",e.PLAY_AUDIO_STREAM="play_audio_stream",e.STOP_AUDIO_STREAM="stop_audio_stream",e.TELEPORT_PLAYER="teleport_player",e.MOVE_PLAYER="move_player",e.PLAY_DEFAULT_EMOTE="play_default_emote",e.PLAY_CUSTOM_EMOTE="play_custom_emote",e.OPEN_LINK="open_link",e.SHOW_TEXT="show_text",e.HIDE_TEXT="hide_text",e.START_DELAY="start_delay",e.STOP_DELAY="stop_delay",e.START_LOOP="start_loop",e.STOP_LOOP="stop_loop",e.CLONE_ENTITY="clone_entity",e.REMOVE_ENTITY="remove_entity",e.SHOW_IMAGE="show_image",e.HIDE_IMAGE="hide_image",e.DAMAGE="damage",e.MOVE_PLAYER_HERE="move_player_here",e.PLACE_ON_PLAYER="place_on_player",e.ROTATE_AS_PLAYER="rotate_as_player",e.PLACE_ON_CAMERA="place_on_camera",e.ROTATE_AS_CAMERA="rotate_as_camera",e.SET_POSITION="set_position",e.SET_ROTATION="set_rotation",e.SET_SCALE="set_scale",e.FOLLOW_PLAYER="follow_player",e.STOP_FOLLOWING_PLAYER="stop_following_player",e.RANDOM="random",e.BATCH="batch",e.HEAL_PLAYER="heal_player"})(g||(g={}));var On;(function(e){e.ON_CLICK="on_click",e.ON_INPUT_ACTION="on_input_action",e.ON_STATE_CHANGE="on_state_change",e.ON_SPAWN="on_spawn",e.ON_TWEEN_END="on_tween_end",e.ON_COUNTER_CHANGE="on_counter_change",e.ON_PLAYER_ENTERS_AREA="on_player_enters_area",e.ON_PLAYER_LEAVES_AREA="on_player_leaves_area",e.ON_DELAY="on_delay",e.ON_LOOP="on_loop",e.ON_CLONE="on_clone",e.ON_CLICK_IMAGE="on_click_image",e.ON_DAMAGE="on_damage",e.ON_GLOBAL_CLICK="on_global_click",e.ON_GLOBAL_PRIMARY="on_global_primary",e.ON_GLOBAL_SECONDARY="on_global_secondary",e.ON_TICK="on_tick",e.ON_HEAL_PLAYER="on_heal_player",e.ON_PLAYER_SPAWN="on_player_spawn"})(On||(On={}));var Nn;(function(e){e.WHEN_STATE_IS="when_state_is",e.WHEN_STATE_IS_NOT="when_state_is_not",e.WHEN_COUNTER_EQUALS="when_counter_equals",e.WHEN_COUNTER_IS_GREATER_THAN="when_counter_is_greater_than",e.WHEN_COUNTER_IS_LESS_THAN="when_counter_is_less_than",e.WHEN_DISTANCE_TO_PLAYER_LESS_THAN="when_distance_to_player_less_than",e.WHEN_DISTANCE_TO_PLAYER_GREATER_THAN="when_distance_to_player_greater_than",e.WHEN_PREVIOUS_STATE_IS="when_previous_state_is",e.WHEN_PREVIOUS_STATE_IS_NOT="when_previous_state_is_not"})(Nn||(Nn={}));var Pn;(function(e){e.AND="and",e.OR="or"})(Pn||(Pn={}));var Ve;(function(e){e[e.TAM_TOP_LEFT=0]="TAM_TOP_LEFT",e[e.TAM_TOP_CENTER=1]="TAM_TOP_CENTER",e[e.TAM_TOP_RIGHT=2]="TAM_TOP_RIGHT",e[e.TAM_MIDDLE_LEFT=3]="TAM_MIDDLE_LEFT",e[e.TAM_MIDDLE_CENTER=4]="TAM_MIDDLE_CENTER",e[e.TAM_MIDDLE_RIGHT=5]="TAM_MIDDLE_RIGHT",e[e.TAM_BOTTOM_LEFT=6]="TAM_BOTTOM_LEFT",e[e.TAM_BOTTOM_CENTER=7]="TAM_BOTTOM_CENTER",e[e.TAM_BOTTOM_RIGHT=8]="TAM_BOTTOM_RIGHT"})(Ve||(Ve={}));var Mn;(function(e){e[e.F_SANS_SERIF=0]="F_SANS_SERIF",e[e.F_SERIF=1]="F_SERIF",e[e.F_MONOSPACE=2]="F_MONOSPACE"})(Mn||(Mn={}));var Dn;(function(e){e[e.CL_NONE=0]="CL_NONE",e[e.CL_POINTER=1]="CL_POINTER",e[e.CL_PHYSICS=2]="CL_PHYSICS",e[e.CL_RESERVED1=4]="CL_RESERVED1",e[e.CL_RESERVED2=8]="CL_RESERVED2",e[e.CL_RESERVED3=16]="CL_RESERVED3",e[e.CL_RESERVED4=32]="CL_RESERVED4",e[e.CL_RESERVED5=64]="CL_RESERVED5",e[e.CL_RESERVED6=128]="CL_RESERVED6",e[e.CL_CUSTOM1=256]="CL_CUSTOM1",e[e.CL_CUSTOM2=512]="CL_CUSTOM2",e[e.CL_CUSTOM3=1024]="CL_CUSTOM3",e[e.CL_CUSTOM4=2048]="CL_CUSTOM4",e[e.CL_CUSTOM5=4096]="CL_CUSTOM5",e[e.CL_CUSTOM6=8192]="CL_CUSTOM6",e[e.CL_CUSTOM7=16384]="CL_CUSTOM7",e[e.CL_CUSTOM8=32768]="CL_CUSTOM8"})(Dn||(Dn={}));var Un;(function(e){e.ALL="all",e.PLAYER="player",e.NON_PLAYER="non_player"})(Un||(Un={}));function Ei(e){return{Animator:bn(e),Transform:Z(e),AudioSource:gn(e),AvatarAttach:Qt(e),VisibilityComponent:Vt(e),GltfContainer:Te(e),UiTransform:Gt(e),UiText:fr(e),UiBackground:cr(e),VideoPlayer:Ue(e),Material:Sn(e),MeshRenderer:Bn(e),Billboard:Wt(e),Name:ge(e),Tween:ve(e),TweenSequence:Se(e),PointerEvents:ae(e),NetworkEntity:de(e),SyncComponents:xn(e)}}var Wu=h(require("mitt"));var wb=[U.ACTIONS,U.STATES,U.COUNTER];var Gu={[g.PLAY_ANIMATION]:d.Map({animation:d.String,loop:d.Optional(d.Boolean)}),[g.STOP_ANIMATION]:d.Map({}),[g.SET_STATE]:d.Map({state:d.String}),[g.START_TWEEN]:d.Map({type:d.EnumString(Rn,Rn.MOVE_ITEM),end:d.Vector3,interpolationType:d.EnumString(kn,kn.LINEAR),duration:d.Float,relative:d.Boolean}),[g.SET_COUNTER]:d.Map({counter:d.Int}),[g.INCREMENT_COUNTER]:d.Map({amount:d.Optional(d.Int)}),[g.DECREASE_COUNTER]:d.Map({amount:d.Optional(d.Int)}),[g.PLAY_SOUND]:d.Map({src:d.String,loop:d.Optional(d.Boolean),volume:d.Optional(d.Float)}),[g.STOP_SOUND]:d.Map({}),[g.SET_VISIBILITY]:d.Map({visible:d.Boolean,physicsCollider:d.Optional(d.Boolean),collider:d.Optional(d.EnumNumber(Dn,Dn.CL_POINTER))}),[g.ATTACH_TO_PLAYER]:d.Map({anchorPointId:d.Int}),[g.DETACH_FROM_PLAYER]:d.Map({}),[g.PLAY_VIDEO_STREAM]:d.Map({src:d.Optional(d.String),loop:d.Optional(d.Boolean),volume:d.Optional(d.Float),dclCast:d.Optional(d.Boolean)}),[g.STOP_VIDEO_STREAM]:d.Map({}),[g.PLAY_AUDIO_STREAM]:d.Map({url:d.String,volume:d.Optional(d.Float)}),[g.STOP_AUDIO_STREAM]:d.Map({}),[g.TELEPORT_PLAYER]:d.Map({x:d.Int,y:d.Int}),[g.MOVE_PLAYER]:d.Map({position:d.Vector3,cameraTarget:d.Optional(d.Vector3)}),[g.PLAY_DEFAULT_EMOTE]:d.Map({emote:d.String}),[g.PLAY_CUSTOM_EMOTE]:d.Map({src:d.String,loop:d.Optional(d.Boolean)}),[g.OPEN_LINK]:d.Map({url:d.String}),[g.SHOW_TEXT]:d.Map({text:d.String,hideAfterSeconds:d.Float,font:d.EnumNumber(Mn,Mn.F_SANS_SERIF),fontSize:d.Optional(d.Float),textAlign:d.EnumNumber(Ve,Ve.TAM_MIDDLE_CENTER)}),[g.HIDE_TEXT]:d.Map({}),[g.START_DELAY]:d.Map({actions:d.Array(d.String),timeout:d.Float}),[g.STOP_DELAY]:d.Map({action:d.String}),[g.START_LOOP]:d.Map({actions:d.Array(d.String),interval:d.Float}),[g.STOP_LOOP]:d.Map({action:d.String}),[g.CLONE_ENTITY]:d.Map({position:d.Vector3}),[g.REMOVE_ENTITY]:d.Map({}),[g.SHOW_IMAGE]:d.Map({src:d.String,align:d.EnumNumber(Ve,Ve.TAM_MIDDLE_CENTER),height:d.Float,width:d.Float,hideAfterSeconds:d.Optional(d.Float),text:d.Optional(d.String),fontSize:d.Optional(d.Float)}),[g.HIDE_IMAGE]:d.Map({imageEntity:d.Optional(d.Int)}),[g.DAMAGE]:d.Map({radius:d.Float,layer:d.Optional(d.EnumString(Un,Un.ALL)),hits:d.Optional(d.Int)}),[g.MOVE_PLAYER_HERE]:d.Map({}),[g.PLACE_ON_PLAYER]:d.Map({}),[g.ROTATE_AS_PLAYER]:d.Map({}),[g.PLACE_ON_CAMERA]:d.Map({}),[g.ROTATE_AS_CAMERA]:d.Map({}),[g.SET_POSITION]:d.Map({x:d.Float,y:d.Float,z:d.Float,relative:d.Optional(d.Boolean)}),[g.SET_ROTATION]:d.Map({x:d.Float,y:d.Float,z:d.Float,relative:d.Optional(d.Boolean)}),[g.SET_SCALE]:d.Map({x:d.Float,y:d.Float,z:d.Float,relative:d.Optional(d.Boolean)}),[g.FOLLOW_PLAYER]:d.Map({speed:d.Float,x:d.Boolean,y:d.Boolean,z:d.Boolean,minDistance:d.Float}),[g.STOP_FOLLOWING_PLAYER]:d.Map({}),[g.RANDOM]:d.Map({actions:d.Array(d.String)}),[g.BATCH]:d.Map({actions:d.Array(d.String)}),[g.HEAL_PLAYER]:d.Map({multiplier:d.Int})};function Bc(e,a){try{return a.getComponent(e)}catch(s){throw console.error(`Error using getComponent with componentName="${e}"`),s}}function Ic(e){let a=e.defineComponent(U.ACTION_TYPES,{value:d.Array(d.Map({type:d.String,jsonSchema:d.String}))}),s=e.defineComponent(U.ACTIONS,{id:d.Int,value:d.Array(d.Map({name:d.String,type:d.String,jsonPayload:d.String,allowedInBasicView:d.Optional(d.Boolean),basicViewId:d.Optional(d.String)}))}),t=e.defineComponent(U.COUNTER,{id:d.Number,value:d.Int}),i=e.defineComponent(U.TRIGGERS,{value:d.Array(d.Map({type:d.EnumString(On,On.ON_INPUT_ACTION),conditions:d.Optional(d.Array(d.Map({id:d.Optional(d.Int),type:d.EnumString(Nn,Nn.WHEN_STATE_IS),value:d.String}))),operation:d.Optional(d.EnumString(Pn,Pn.AND)),actions:d.Array(d.Map({id:d.Optional(d.Int),name:d.Optional(d.String)})),basicViewId:d.Optional(d.String)}))}),n=e.defineComponent(U.STATES,{id:d.Number,value:d.Array(d.String),defaultValue:d.Optional(d.String),currentValue:d.Optional(d.String),previousValue:d.Optional(d.String)}),c=e.defineComponent(U.COUNTER_BAR,{primaryColor:d.Optional(d.String),secondaryColor:d.Optional(d.String),maxValue:d.Optional(d.Float)});return{ActionTypes:a,Actions:s,Counter:t,Triggers:i,States:n,CounterBar:c}}function xc(e){let a=Object.values(g);for(let c of a){let r=c;gc(e,r,Gu[r])}let t=e.getComponent(U.COUNTER).getOrCreateMutable(e.RootEntity);t.value=t.value||0;let{VideoPlayer:i,Material:n}=Ei(e);Hu(e,{VideoPlayer:i,Material:n})}function Vu({material:e}){if(e?.$case==="pbr"&&e.pbr.texture?.tex?.$case==="videoTexture")return e.pbr.texture.tex.videoTexture}function zu(e,{Material:a},s){if(!s||!s.material||s.material.$case!=="pbr")return null;a.setPbrMaterial(e,{...s.material.pbr,texture:a.Texture.Video({videoPlayerEntity:e})})}function Hu(e,a){function s(){let{Material:t,VideoPlayer:i}=a;e.removeSystem(s);for(let[n,c]of e.getEntitiesWith(t,i))Vu(c)?.videoPlayerEntity===e.RootEntity&&zu(n,a,c)}e.addSystem(s)}var _c=(b=>(b.ANIMATOR="core::Animator",b.AUDIO_SOURCE="core::AudioSource",b.AUDIO_STREAM="core::AudioStream",b.AVATAR_ATTACH="core::AvatarAttach",b.GLTF_CONTAINER="core::GltfContainer",b.NETWORK_ENTITY="core-schema::Network-Entity",b.MATERIAL="core::Material",b.MESH_COLLIDER="core::MeshCollider",b.MESH_RENDERER="core::MeshRenderer",b.NFT_SHAPE="core::NftShape",b.POINTER_EVENTS="core::PointerEvents",b.SYNC_COMPONENTS="core-schema::Sync-Components",b.TEXT_SHAPE="core::TextShape",b.TRANSFORM="core::Transform",b.TWEEN="core::Tween",b.TWEEN_SEQUENCE="core::TweenSequence",b.VIDEO_PLAYER="core::VideoPlayer",b.VISIBILITY_COMPONENT="core::VisibilityComponent",b))(_c||{}),on=(E=>(E.Selection="inspector::Selection",E.Scene="inspector::SceneMetadata",E.Nodes="inspector::Nodes",E[E.ActionTypes=U.ACTION_TYPES]="ActionTypes",E[E.Actions=U.ACTIONS]="Actions",E[E.Counter=U.COUNTER]="Counter",E[E.CounterBar=U.COUNTER_BAR]="CounterBar",E[E.Triggers=U.TRIGGERS]="Triggers",E[E.States=U.STATES]="States",E.TransformConfig="inspector::TransformConfig",E.Hide="inspector::Hide",E.Lock="inspector::Lock",E.Config="inspector::Config",E.Ground="inspector::Ground",E.Tile="inspector::Tile",E))(on||{}),Ci=(s=>(s.Teen="T",s.Adult="A",s))(Ci||{}),wc={..._c,...on},Rr=(l=>(l.ART="art",l.GAME="game",l.CASINO="casino",l.SOCIAL="social",l.MUSIC="music",l.FASHION="fashion",l.CRYPTO="crypto",l.EDUCATION="education",l.SHOP="shop",l.BUSINESS="business",l.SPORTS="sports",l))(Rr||{});function Rc(e){let a=bn(e),s=gn(e),t=ai(e),i=Qt(e),n=Wt(e),c=Te(e),r=Sn(e),o=In(e),f=Bn(e),u=ge(e),l=de(e),p=ir(e),A=ae(e),y=xn(e),E=ar(e),m=Z(e),T=ve(e),b=Se(e),w=Ue(e),_=Vt(e);return{Animator:a,AudioSource:s,AudioStream:t,AvatarAttach:i,Billboard:n,GltfContainer:c,Material:r,MeshCollider:o,MeshRenderer:f,Name:u,NetworkEntity:l,NftShape:p,PointerEvents:A,SyncComponents:y,TextShape:E,Transform:m,Tween:T,TweenSequence:b,VideoPlayer:w,VisibilityComponent:_}}function kc(e){let a=e.defineComponent("inspector::Selection",{gizmo:d.Int}),s=d.Map({x:d.Int,y:d.Int});e.defineComponent("inspector::Scene",{layout:d.Map({base:s,parcels:d.Array(s)})});let t=e.defineComponent("inspector::SceneMetadata",{name:d.Optional(d.String),description:d.Optional(d.String),thumbnail:d.Optional(d.String),ageRating:d.Optional(d.EnumString(Ci,"T")),categories:d.Optional(d.Array(d.EnumString(Rr,"game"))),author:d.Optional(d.String),email:d.Optional(d.String),tags:d.Optional(d.Array(d.String)),layout:d.Map({base:s,parcels:d.Array(s)}),silenceVoiceChat:d.Optional(d.Boolean),disablePortableExperiences:d.Optional(d.Boolean),spawnPoints:d.Optional(d.Array(d.Map({name:d.String,default:d.Optional(d.Boolean),position:d.Map({x:d.OneOf({single:d.Int,range:d.Array(d.Int)}),y:d.OneOf({single:d.Int,range:d.Array(d.Int)}),z:d.OneOf({single:d.Int,range:d.Array(d.Int)})}),cameraTarget:d.Optional(d.Map({x:d.Int,y:d.Int,z:d.Int}))})))}),i=e.defineComponent("inspector::Nodes",{value:d.Array(d.Map({entity:d.Entity,open:d.Optional(d.Boolean),children:d.Array(d.Entity)}))}),{ActionTypes:n,Actions:c,Counter:r,Triggers:o,States:f,CounterBar:u}=Ic(e),l=e.defineComponent("inspector::TransformConfig",{porportionalScaling:d.Optional(d.Boolean)}),p=e.defineComponent("inspector::Hide",{value:d.Boolean}),A=e.defineComponent("inspector::Lock",{value:d.Boolean}),y=e.defineComponent("inspector::Config",{isBasicViewEnabled:d.Boolean,componentName:d.String,fields:d.Array(d.Map({name:d.String,type:d.EnumString(wc,wc.Actions),layout:d.Optional(d.String),basicViewId:d.Optional(d.String)})),assetId:d.Optional(d.String)}),E=e.defineComponent("inspector::Ground",{}),m=e.defineComponent("inspector::Tile",{});return{Selection:a,Scene:t,Nodes:i,TransformConfig:l,Hide:p,Lock:A,Config:y,ActionTypes:n,Actions:c,Counter:r,Triggers:o,States:f,CounterBar:u,Ground:E,Tile:m}}function yi(e){let a=new O;for(let s of e.componentsIter())s.dumpCrdtStateToBuffer(a);return a.toBinary()}function vn(e){let a=gr(e),s={...Rc(a),...kc(a)};return{engine:a,components:s}}async function rn(e,a,s,t=!0,i=[]){try{let n=await e.readdir(a);for(let c of n){if(i.includes(c.name))continue;let r=a.length&&!a.endsWith("/")&&"/"||"",o=a+r+c.name;c.isDirectory&&t?await rn(e,o,s,t):s.push(o)}return s}catch{return[]}}var kr={ASSETS:"assets",SCENE:"scene",THUMBNAILS:"thumbnails"},Oc=[".glb",".png",".composite",".composite.bin",".gltf",".jpg",".mp3",".ogg",".wav",".mp4"];function Ln(e=""){return e?`${kr.ASSETS}/${e}`:kr.ASSETS}function Nc(e=""){return e.startsWith(kr.ASSETS)}function Pc(){return Ln(`${kr.SCENE}/main.composite`)}var Dc=require("@well-known-components/pushable-channel");async function Mc(e,a){for await(let s of e)s.data.byteLength&&a(s.data)}function Uc(e,a,s){let t=new Dc.AsyncQueue(r=>{}),i=yi(a.engine);t.enqueue({data:i});let n={filter(){return!t.closed},async send(r){t.closed||t.enqueue({data:r})}};Object.assign(n,{name:"DataLayerHost"}),a.engine.addTransport(n);function c(r){n.onmessage(r),a.engine.update(1),s()}return Mc(e,c).catch(r=>{r instanceof Error&&!r.message.includes("RPC Transport closed")&&console.error("Failed to consume stream from data layer ",r),t.close()}),a.engine.update(1),t}async function Yu(e,a,s){s?await e.writeFile(a,Buffer.from(s)):await e.rm(a)}var Or=Yu;var vc="2.1.1";var ju=vc.includes("commit")?"https://builder-items.decentraland.zone":"https://builder-items.decentraland.org";function Fn(){let e=globalThis.InspectorConfig,a=new URLSearchParams(globalThis?.location?.search||"");return{dataLayerRpcWsUrl:a.get("ws")||a.get("dataLayerRpcWsUrl")||e?.dataLayerRpcWsUrl||null,dataLayerRpcParentUrl:a.get("parent")||a.get("dataLayerRpcParentUrl")||e?.dataLayerRpcParentUrl||null,binIndexJsUrl:a.get("binIndexJsUrl")||e?.binIndexJsUrl||null,disableSmartItems:a.has("disableSmartItems")||!!e?.disableSmartItems,contentUrl:a.get("contentUrl")||e?.contentUrl||ju,segmentAppId:a.get("segmentAppId")||e?.segmentAppId||null,segmentUserId:a.get("segmentUserId")||e?.segmentUserId||null,segmentKey:a.get("segmentKey")||e?.segmentKey||null,projectId:a.get("projectId")||e?.projectId||null}}function Fc(e,a,s){let i=e.components.find(n=>n.name===a)?.data.get(s);return i?.data?.$case!=="json"?null:i.data.json}var Lc=e=>{let[a,s]=e.split(",");return{x:parseInt(a),y:parseInt(s)}};function Qc(e){let a=[];for(let i of e.categories||[])a.push(i);for(let i of e.tags||[]){let n=i.trim();n&&!a.includes(n)&&a.push(n)}let s=Fn(),t={display:{title:e.name||"",description:e.description||"",navmapThumbnail:e.thumbnail||""},scene:{parcels:e.layout.parcels.map(i=>`${i.x},${i.y}`),base:`${e.layout.base.x},${e.layout.base.y}`},contact:{name:e.author||"",email:e.email||""},tags:a,spawnPoints:e.spawnPoints?e.spawnPoints.map(i=>({name:i.name,default:i.default,position:{x:i.position.x.value,y:i.position.y.value,z:i.position.z.value},cameraTarget:i.cameraTarget})):[],featureToggles:{voiceChat:e.silenceVoiceChat?"disabled":"enabled",portableExperiences:e.disablePortableExperiences?"disabled":"enabled"},rating:e.ageRating};return s.segmentAppId&&s.projectId&&(t.source={origin:s.segmentAppId,projectId:s.projectId}),t}function hi(e){let a=[],s=[];for(let i of e.tags||[])Object.values(Rr).includes(i)?a.push(i):s.push(i);return{name:e.display?.title||"",description:e.display?.description||"",thumbnail:e.display?.navmapThumbnail||"",layout:{parcels:e.scene.parcels.map(i=>Lc(i)),base:Lc(e.scene.base)},author:e.contact?.name||"",email:e.contact?.email||"",categories:a,tags:s,silenceVoiceChat:e.featureToggles?.voiceChat==="disabled",disablePortableExperiences:e.featureToggles?.portableExperiences==="disabled",ageRating:e.rating,spawnPoints:e.spawnPoints?.map((i,n)=>({name:i.name||`Spawn Point ${n+1}`,default:i.default,position:{x:Array.isArray(i.position.x)?{$case:"range",value:i.position.x}:{$case:"single",value:i.position.x},y:Array.isArray(i.position.y)?{$case:"range",value:i.position.y}:{$case:"single",value:i.position.y},z:Array.isArray(i.position.z)?{$case:"range",value:i.position.z}:{$case:"single",value:i.position.z}},cameraTarget:i.cameraTarget}))}}var Ju=1048576,qu=Ju*1024;function Ti(e,a=qu){let s=[],t=0;function i(n){let c=0;if(n?.$case==="file")for(let r of n.operations)c+=r.newValue?.length??0,c+=r.prevValue?.length??0;return c}return{push(n){for(;s.length>=e;){let r=s.shift();t-=i(r)}let c=i(n);for(t+=c,s.push(n);t>=a;)for(let r=0;r<=s.length-1;r++){let o=i(s[r]);if(o){t-=o,s.splice(r,1);break}}return s[s.length-1]===n?n:void 0},pop(){let n=s.pop();return t-=i(n),n},clear(){t=0,s.length=0},values(){return Array.from(s)},get memorySize(){return t}}}function Si(e){return e.splice(0,e.length)}var Xu=e=>e==null,Zu=e=>e.prevValue,$u=e=>e.newValue;function Wc(e,a,s){let t=Ti(1024),i=Ti(1024),n=[];function c(o,f,u,l){let p=s();if(p&&(f===C.PUT_COMPONENT||f===C.DELETE_COMPONENT)){let A=Fc(p,u.componentName,o);n.push({entity:o,operation:f,componentName:u.componentName,prevValue:A,newValue:l})}}async function r(o,f){if(o.$case==="crdt")for(let u of o.operations){let l=a.getComponent(u.componentName),p=f(u);Xu(p)?l.deleteFrom(u.entity):l.createOrReplace(u.entity,p)}else if(o.$case==="file")for(let u of o.operations)await Or(e,Nc(u.path)?u.path:Ln(u.path),f(u))}return{async undo(){let o=t.pop();return o&&(i.push(o),await r(o,Zu),await a.update(1/16)),Si(n),{type:o?.$case??""}},async redo(){let o=i.pop();return o&&(t.push(o),await r(o,$u),await a.update(1/16)),Si(n),{type:o?.$case??""}},onChange:c,addUndoFile(o){i.clear(),t.push({$case:"file",operations:o})},addUndoCrdt(){let o=Si(n);o.length&&(i.clear(),t.push({$case:"crdt",operations:o}))}}}var Gc=require("ts-deepmerge");function bi(e){return JSON.parse(new TextDecoder().decode(e))}function ep(e){return Buffer.from(JSON.stringify(e,null,2),"utf-8")}async function tp(e){let a={};try{a=bi(await e.readFile("scene.json"))}catch(t){console.error("Reading scene.json file failed: ",t)}return Vc(e,a)}function Vc(e,a){return{...a,display:{...a.display,title:a.display?.title||""}}}async function zc(e){let a=await tp(e);return{onChange(s,t,i,n){if(t===C.PUT_COMPONENT&&i?.componentName==="inspector::SceneMetadata"){let c=Qc(n),r=Gc.merge.withOptions({mergeArrays:!1},a,c);a=Vc(e,r),e.writeFile("scene.json",ep(a)).catch(o=>console.error("Failed saving scene.json: ",o))}},getScene(){return a}}}var Kc=h(require("ajv/dist/jtd"));function Nr(){return{freeCameraInvertRotation:!1,autosaveEnabled:!0}}var np={properties:{version:{type:"uint16"},data:{properties:{},additionalProperties:!0}}},op={optionalProperties:{freeCameraInvertRotation:{type:"boolean"},autosaveEnabled:{type:"boolean"}}},Pr=new Kc.default,Hc=Pr.compile(np),Yc=Pr.compile(op),ze=class extends Error{};function rp(e){let a;try{a=JSON.parse(e)}catch(s){throw new ze(`invalid json: ${s}`)}if(!Hc(a))throw new ze(`invalid shell: ${Pr.errorsText(Hc.errors)}`);if(a.version===1){if(Yc(a.data))return{...Nr(),...a.data};throw new ze(`invalid v1 data: ${Pr.errorsText(Yc.errors)}`)}else throw new ze(`invalid version: ${a.version}`)}async function jc(e,a){if(!await e.existFile(a))return Nr();let t=await e.readFile(a);try{return rp(new TextDecoder().decode(t))}catch(i){if(i instanceof ze)return console.log(`bad preferences file: ${i}, returning default preferences`),Nr();throw i}}function Jc(e){return Buffer.from(JSON.stringify({version:1,data:e},null,2),"utf-8")}function qc(e,a,s){if(e==="json")return{data:{$case:e,json:a}};{let t=new O;return s.schema.serialize(a,t),{data:{$case:e,binary:t.toBinary()}}}}function Qn(e,a){let s=new Set,t={version:1,components:[]},i=_n(e),n=Array.from(e.getEntitiesWith(i));if(n.length>0){let r={name:i.componentName,jsonSchema:i.schema.jsonSchema,data:new Map};for(let[o,f]of n){if(o===e.RootEntity)continue;f.entities.forEach(l=>s.add(l.dest));let u=qc(a,{src:f.src,entities:[]},i);r.data.set(o,u)}t.components.push(r)}let c=["inspector:Selection","editor::Toggle",i.componentName];for(let r of e.componentsIter()){if(c.includes(r.componentName)||r.componentType===br.GrowOnlyValueSet)continue;let o={name:r.componentName,jsonSchema:r.schema.jsonSchema,data:new Map};for(let[f,u]of e.getEntitiesWith(r)){if(s.has(f))continue;let l=qc(a,u,r);o.data.set(f,l)}o.data.size>0&&t.components.push(o)}return t}function gi(e){let a=new O,s=new O;for(let t of e.componentsIter())for(let[i,n]of e.getEntitiesWith(t))n&&(a.resetBuffer(),t.schema.serialize(n,a),ie.write(i,0,t.componentId,a.toBinary(),s));return s.toBinary()}async function Xc(e,a=""){let i=(await rn(e,a,[],!0,["node_modules","dist","bin","src",".vscode"])).filter(c=>c.endsWith(".composite")||c.endsWith(".composite.bin")).map(c=>e.join(e.dirname(c),e.basename(c).toLowerCase())).map(async c=>{try{if(c.endsWith(".bin")){let r=new Uint8Array(await e.readFile(c)),o=ne.fromBinary(r);return{src:c,composite:o}}else{let r=new TextDecoder().decode(await e.readFile(c)),o=JSON.parse(r),f=ne.fromJson(o);return{src:c,composite:f}}}catch(r){return console.error(`Error loading composite ${c}: ${r.toString()}`),null}}),n=(await Promise.all(i)).filter(c=>c);return{getCompositeOrNull(c,r){function o(f){return f.replace(/\\/g,"/").toLocaleLowerCase()}return n.find(f=>o(f.src)===o(c))||null},save:async(c,r)=>{let o;if(r==="binary"){let u=Buffer.from(ne.toBinary(c.composite));await e.writeFile(c.src,u),o=ne.fromBinary(u)}else{let u=JSON.stringify(ne.toJson(c.composite),null,2);await e.writeFile(c.src,Buffer.from(u,"utf-8")),o=ne.fromJson(JSON.parse(u))}let f=n.find(u=>u.src===c.src);f&&(f.composite=o)}}}function Zc(e={}){let a=new Map;for(let[s,t]of Object.entries(e))a.set(s,t);return{async writeFile(s,t){a.set(s,t)},async exists(s){return a.has(s)},async readFile(s){let t=a.get(s);if(!t)throw new Error(`File ${s} doesn't exists`);return t},async delete(s){a.delete(s)},async list(s){let t=[];for(let i of Array.from(a.keys())){if(!i.startsWith(s))continue;let n=i.substring(s.length),c=n.indexOf("/");if(c!==-1){let r=n.substring(0,c);t.find(o=>o.name===r)||t.push({name:r,isDirectory:!0})}else t.push({name:n,isDirectory:!1})}return t}}}function ip(){let{engine:e,components:a}=vn();return{engine:e,components:{...a,Material:dr(e),PointerEvents:ae(e)}}}function ap({engine:e,components:a}){a.Nodes.create(e.RootEntity,{value:[{entity:e.RootEntity,children:[],open:!0},{entity:e.PlayerEntity,children:[]},{entity:e.CameraEntity,children:[]}]}),a.Scene.create(e.RootEntity,{name:"Test Scene",description:"This is a test scene",thumbnail:"assets/scene/thumbnail.png",ageRating:"T",categories:[],author:"",email:"",tags:[],layout:{base:{x:0,y:0},parcels:[{x:0,y:0}]}});let s=Qn(e,"json");return ne.toJson(s)}var $c=()=>ap(ip());function Bi(e,a){return Array.from(new Set(e).add(a))}function sp(e){let a=new Map([[e.RootEntity,{entity:e.RootEntity,open:!0,children:[]}]]);for(let t of e.componentsIter())for(let[i]of e.getEntitiesWith(t))a.set(i,{entity:i,children:[]});for(let[t]of a){if(t===e.RootEntity)continue;let i=_r.getOrNull(t)?.parent;if(i){let n=a.get(i)?.children||[];a.set(i,{entity:i,children:Bi(n,t)})}else{let n=a.get(e.RootEntity).children;a.set(e.RootEntity,{entity:e.RootEntity,open:!0,children:Bi(n,t)})}}a.set(e.PlayerEntity,{entity:e.PlayerEntity,children:[]}),a.set(e.CameraEntity,{entity:e.CameraEntity,children:[]});let s=a.get(e.RootEntity);return a.set(e.RootEntity,{...s,open:!0}),Array.from(a.values())}function ef(e){let a=e.getComponentOrNull("inspector::Nodes");if(a){let i=function(){e.removeSystem(i),a.createOrReplace(e.RootEntity,{value:sp(e)})};var s=i;if((a.getOrNull(e.RootEntity)?.value||[]).length)return;e.addSystem(i)}}function tf(e){function a(){e.removeSystem(a);let s=e.getComponentOrNull("inspector::EntityNode");if(s){for(let[t,i]of e.getEntitiesWith(s)){s.deleteFrom(t);let n=e.getComponent(bc.componentId),c=e.getComponent(_r.componentId);n.createOrReplace(t,{value:i.label}),c.getMutableOrNull(t)||c.create(t,{parent:i.parent})}e.removeComponentDefinition(s.componentId)}}e.addSystem(a)}function nf(e){function a(){e.removeSystem(a);let s=e.getComponentOrNull("inspector::Nodes");if(!s)return;let i=[...s.getOrNull(e.RootEntity)?.value||[]],n=!1;i.some(c=>c.entity===e.PlayerEntity)||(i.push({entity:e.PlayerEntity,children:[]}),n=!0),i.some(c=>c.entity===e.CameraEntity)||(i.push({entity:e.CameraEntity,children:[]}),n=!0),n&&s.createOrReplace(e.RootEntity,{value:i})}e.addSystem(a)}function cp(e){tf(e),ef(e),nf(e)}async function fp(e,a,s){await e.existFile(s)?console.log("Main composite exists!"):(console.log("Main composite does not exists!"),await e.writeFile(s,Buffer.from(JSON.stringify($c(),null,2),"utf-8")));let t=await Xc(e),i=t.getCompositeOrNull(s);if(!i)throw new Error("Invalid composite");console.log("Instanciating composite..."),ne.instance(a,i,t,{entityMapping:{type:Be.EMM_DIRECT_MAPPING,getCompositeEntity:c=>c}});let n=a.getComponent("inspector::SceneMetadata");if(await e.existFile("scene.json")){console.log("Overriding SceneMetadata with scene.json");let c=await e.readFile("scene.json"),r=bi(c);n.createOrReplace(a.RootEntity,hi(r))}return cp(a),xc(a),t}async function of(e,a,s,t){let i,n=0,c=await fp(e,a,t);async function r(f=!0){try{if(i=Qn(a,"json"),!f)return i;let u=gi(a);return await e.writeFile("main.crdt",Buffer.from(u)),await c.save({src:t,composite:i},"json"),i}catch{console.log("Failed saving composite")}return null}async function o(f=!0){i=await r(f)??i}return a.addSystem(()=>{n!==0&&o(s().autosaveEnabled&&n===2),n=0},-1e9),{onChange:(f,u,l,p)=>{if(!l||l.componentName==="inspector::SceneMetadata"||l.componentName==="inspector::Selection"){n===0&&(n=1);return}u!==C.PUT_COMPONENT&&u!==C.DELETE_COMPONENT||(n=2)},get composite(){return i},get dirty(){return n},saveComposite:o}}var rf=h(require("node-fetch"));async function af(e){let a=Fn();if(!a.binIndexJsUrl)return;console.log("Installing binaries");let s=await(0,rf.default)(a.binIndexJsUrl).then(t=>t.text());await e.writeFile("bin/index.js",Buffer.from(s))}var sf="inspector-preferences.json";async function cf(e,a,s){let t=await zc(e),i=Pc(),n=await jc(e,sf),c=await of(e,a,()=>n,i),r=Wc(e,a,()=>c.composite);return s.push(r.onChange),s.push(t.onChange),s.push(c.onChange),await af(e),{async redo(){return await r.redo()},async undo(){return await r.undo()},crdtStream(o){return Uc(o,{engine:a},()=>r?.addUndoCrdt())},async getAssetData(o){if(!o.path)throw new Error("Invalid path");if(await e.existFile(o.path))return{data:await e.readFile(o.path)};throw new Error(`Couldn't find the asset ${o.path}`)},async getFiles({path:o,ignore:f=[]}){let u=await rn(e,o,[],!0,f);return{files:await Promise.all(u.map(async p=>({path:p,content:await e.readFile(p)})))}},async saveFile({path:o,content:f}){return await e.writeFile(o,Buffer.from(f)),{}},async getAssetCatalog(){let o=[".git","node_modules"],f=Ln(),u=(await rn(e,f,[],!0,o)).filter(l=>{let p=l.toLowerCase();return Oc.some(A=>p.endsWith(A))});return{basePath:f,assets:u.map(l=>({path:l}))}},async importAsset({assetPackageName:o,basePath:f,content:u}){let l=f.length?f+"/":"",p=[];for(let[A,y]of u){let E=o?`${o}/${A}`:A,m=(l+E).replaceAll("//","/"),T=await e.existFile(m)?await e.readFile(m):null;p.push({prevValue:T,newValue:y,path:m}),await Or(e,m,y)}return r.addUndoFile(p),{}},async removeAsset(o){let f=o.path;if(await e.existFile(f)){let u=await e.readFile(f);await e.rm(f),r.addUndoFile([{prevValue:u,newValue:null,path:f}])}return{}},async save(){return await c.saveComposite(!0),{}},async getInspectorPreferences(){return n},async setInspectorPreferences(o){return n=o,await e.writeFile(sf,Jc(o)),{}}}}async function dp(e){let a=[],{engine:s}=vn({onChangeFunction:(i,n,c,r)=>{a.forEach(o=>o(i,n,c,r))}});return Object.assign(globalThis,{dataLayerEngine:s}),{rpcMethods:await cf(e,s,a),engine:s}}var mf=h(Gn());var Ri;(s=>{s.name="CameraRPC";let a;(c=>(c.TAKE_SCREENSHOT="take_screenshot",c.SET_TARGET="set_target",c.SET_POSITION="set_position"))(a=s.Method||={})})(Ri||={});var ki=class extends mf.RPC{constructor(s){super(Ri.name,s);this.takeScreenshot=(s,t,i)=>this.request("take_screenshot",{width:s,height:t,precision:i});this.setTarget=(s,t,i)=>this.request("set_target",{x:s,y:t,z:i});this.setPosition=(s,t,i)=>this.request("set_position",{x:s,y:t,z:i})}};var Ef=h(Gn());var Oi;(s=>{s.name="UiRPC";let a;(u=>(u.TOGGLE_COMPONENT="toggle_component",u.TOGGLE_PANEL="toggle_panel",u.TOGGLE_GIZMOS="toggle_gizmos",u.SELECT_ASSETS_TAB="select_assets_tab",u.SELECT_SCENE_INSPECTOR_TAB="select_scene_inspector_tab",u.TOGGLE_SCENE_INSPECTOR_TAB="toggle_scene_inspector_tab",u.TOGGLE_GROUND_GRID="toggle_ground_grid"))(a=s.Method||={})})(Oi||={});var Ni=class extends Ef.RPC{constructor(s){super(Oi.name,s);this.toggleComponent=(s,t)=>this.request("toggle_component",{component:s,enabled:t});this.togglePanel=(s,t)=>this.request("toggle_panel",{panel:s,enabled:t});this.toggleGizmos=s=>this.request("toggle_gizmos",{enabled:s});this.toggleGroundGrid=s=>this.request("toggle_ground_grid",{enabled:s});this.selectAssetsTab=s=>this.request("select_assets_tab",{tab:s});this.selectSceneInspectorTab=s=>this.request("select_scene_inspector_tab",{tab:s});this.toggleSceneInspectorTab=(s,t)=>this.request("toggle_scene_inspector_tab",{tab:s,enabled:t})}};var Vn=h(Gn()),Pi;(i=>{let e;(u=>(u.READ_FILE="read_file",u.WRITE_FILE="write_file",u.EXISTS="exists",u.DELETE="delete",u.LIST="list"))(e=i.Method||={}),i.id="IframeStorage";class s extends Vn.RPC{constructor(c){super(i.id,c)}readFile(c){return this.request("read_file",{path:c})}writeFile(c,r){return this.request("write_file",{path:c,content:r})}exists(c){return this.request("exists",{path:c})}delete(c){return this.request("delete",{path:c})}list(c){return this.request("list",{path:c})}}i.Client=s;class t extends Vn.RPC{constructor(c){super(i.id,c)}}i.Server=t})(Pi||={});function hp(e){if(!window.parent)throw new Error("To use this storage the webapp needs to be inside an iframe");let a=new Vn.MessageTransport(window,window.parent,e);return new Pi.Client(a)}var Cf=h(Gn());var cn;(s=>{s.name="SceneMetricsRPC";let a;(c=>(c.GET_METRICS="get_metrics",c.GET_LIMITS="get_limits",c.GET_ENTITIES_OUT_OF_BOUNDARIES="get_entities_out_of_boundaries"))(a=s.Method||={})})(cn||={});var Mi=class extends Cf.RPC{constructor(s){super(cn.name,s);this.getMetrics=()=>this.request(cn.Method.GET_METRICS,void 0);this.getLimits=()=>this.request(cn.Method.GET_LIMITS,void 0);this.getEntitiesOutOfBoundaries=()=>this.request(cn.Method.GET_ENTITIES_OUT_OF_BOUNDARIES,void 0)}};0&&(module.exports={Asset,AssetCatalogResponse,AssetData,CameraClient,CrdtStreamMessage,DataServiceDefinition,Empty,GetFilesRequest,GetFilesResponse,GetFilesResponse_File,IframeStorage,ImportAssetRequest,ImportAssetRequest_ContentEntry,InspectorPreferencesMessage,SaveFileRequest,SceneMetricsClient,UiClient,UndoRedoResponse,createDataLayerHost,createEngineContext,createIframeStorage,createInMemoryStorage,dumpEngineToComposite,dumpEngineToCrdtCommands,serializeEngine});
//# sourceMappingURL=data:application/json;base64,
