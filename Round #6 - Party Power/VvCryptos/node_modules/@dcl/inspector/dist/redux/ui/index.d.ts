import { PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../store';
import { AssetsTab, PanelName, SceneInspectorTab } from './types';
export interface UiState {
    hiddenComponents: Record<string, boolean>;
    hiddenPanels: Partial<Record<PanelName, boolean>>;
    disableGizmos: boolean;
    disableGroundGrid: boolean;
    selectedAssetsTab: AssetsTab;
    selectedSceneInspectorTab: SceneInspectorTab;
    hiddenSceneInspectorTabs: Partial<Record<SceneInspectorTab, boolean>>;
}
export declare const initialState: UiState;
export declare const appState: import("@reduxjs/toolkit").Slice<UiState, {
    toggleComponent: (state: import("immer/dist/internal").WritableDraft<UiState>, { payload }: PayloadAction<{
        component: string;
        enabled: boolean;
    }>) => void;
    togglePanel: (state: import("immer/dist/internal").WritableDraft<UiState>, { payload }: PayloadAction<{
        panel: PanelName;
        enabled: boolean;
    }>) => void;
    toggleGizmos: (state: import("immer/dist/internal").WritableDraft<UiState>, { payload }: PayloadAction<{
        enabled: boolean;
    }>) => void;
    toggleGroundGrid: (state: import("immer/dist/internal").WritableDraft<UiState>, { payload }: PayloadAction<{
        enabled: boolean;
    }>) => void;
    selectAssetsTab: (state: import("immer/dist/internal").WritableDraft<UiState>, { payload }: PayloadAction<{
        tab: AssetsTab;
    }>) => void;
    selectSceneInspectorTab: (state: import("immer/dist/internal").WritableDraft<UiState>, { payload }: PayloadAction<{
        tab: SceneInspectorTab;
    }>) => void;
    toggleSceneInspectorTab: (state: import("immer/dist/internal").WritableDraft<UiState>, { payload }: PayloadAction<{
        tab: SceneInspectorTab;
        enabled: boolean;
    }>) => void;
}, "ui">;
export declare const toggleComponent: import("@reduxjs/toolkit").ActionCreatorWithPayload<{
    component: string;
    enabled: boolean;
}, "ui/toggleComponent">, togglePanel: import("@reduxjs/toolkit").ActionCreatorWithPayload<{
    panel: PanelName;
    enabled: boolean;
}, "ui/togglePanel">, toggleGizmos: import("@reduxjs/toolkit").ActionCreatorWithPayload<{
    enabled: boolean;
}, "ui/toggleGizmos">, toggleGroundGrid: import("@reduxjs/toolkit").ActionCreatorWithPayload<{
    enabled: boolean;
}, "ui/toggleGroundGrid">, selectAssetsTab: import("@reduxjs/toolkit").ActionCreatorWithPayload<{
    tab: AssetsTab;
}, "ui/selectAssetsTab">, selectSceneInspectorTab: import("@reduxjs/toolkit").ActionCreatorWithPayload<{
    tab: SceneInspectorTab;
}, "ui/selectSceneInspectorTab">, toggleSceneInspectorTab: import("@reduxjs/toolkit").ActionCreatorWithPayload<{
    tab: SceneInspectorTab;
    enabled: boolean;
}, "ui/toggleSceneInspectorTab">;
export declare const getHiddenComponents: (state: RootState) => Record<string, boolean>;
export declare const getHiddenPanels: (state: RootState) => Partial<Record<PanelName, boolean>>;
export declare const getSelectedAssetsTab: (state: RootState) => AssetsTab;
export declare const getSelectedSceneInspectorTab: (state: RootState) => SceneInspectorTab;
export declare const getHiddenSceneInspectorTabs: (state: RootState) => Partial<Record<SceneInspectorTab, boolean>>;
export declare const areGizmosDisabled: (state: RootState) => boolean;
export declare const isGroundGridDisabled: (state: RootState) => boolean;
declare const _default: import("redux").Reducer<UiState>;
export default _default;
