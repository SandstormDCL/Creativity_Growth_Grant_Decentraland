import { PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../store';
import { SceneMetrics } from './types';
export interface SceneMetricsState {
    metrics: SceneMetrics;
    limits: SceneMetrics;
    entitiesOutOfBoundaries: number;
}
export declare const initialState: SceneMetricsState;
export declare const sceneMetrics: import("@reduxjs/toolkit").Slice<SceneMetricsState, {
    setMetrics: (state: import("immer/dist/internal").WritableDraft<SceneMetricsState>, { payload }: PayloadAction<SceneMetrics>) => void;
    setLimits(state: import("immer/dist/internal").WritableDraft<SceneMetricsState>, { payload }: PayloadAction<SceneMetrics>): void;
    setEntitiesOutOfBoundaries: (state: import("immer/dist/internal").WritableDraft<SceneMetricsState>, { payload }: PayloadAction<number>) => void;
}, "scene-metrics">;
export declare const setMetrics: import("@reduxjs/toolkit").ActionCreatorWithPayload<SceneMetrics, "scene-metrics/setMetrics">, setEntitiesOutOfBoundaries: import("@reduxjs/toolkit").ActionCreatorWithPayload<number, "scene-metrics/setEntitiesOutOfBoundaries">, setLimits: import("@reduxjs/toolkit").ActionCreatorWithPayload<SceneMetrics, "scene-metrics/setLimits">;
export declare const getMetrics: (state: RootState) => SceneMetrics;
export declare const getLimits: (state: RootState) => SceneMetrics;
export declare const getEntitiesOutOfBoundaries: (state: RootState) => number;
declare const _default: import("redux").Reducer<SceneMetricsState>;
export default _default;
