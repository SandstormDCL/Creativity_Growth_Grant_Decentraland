import { ErrorType, IDataLayer, importAsset } from '..';
import { Empty } from '../../../lib/data-layer/remote-data-layer';
export declare function importAssetSaga(action: ReturnType<typeof importAsset>): Generator<import("redux-saga/effects").PutEffect<{
    payload: {
        error: ErrorType;
    };
    type: "data-layer/error";
}> | import("redux-saga/effects").CallEffect<IDataLayer> | import("redux-saga/effects").CallEffect<Empty> | import("redux-saga/effects").PutEffect<{
    payload: undefined;
    type: "data-layer/getAssetCatalog";
}>, void, Readonly<import("@dcl/rpc/dist/codegen-types").RawClient<import("@dcl/rpc/dist/codegen-types").FromTsProtoServiceDefinition<{
    readonly name: "DataService";
    readonly fullName: "DataService";
    readonly methods: {
        readonly crdtStream: {
            readonly name: "CrdtStream";
            readonly requestType: typeof import("../../../lib/data-layer/remote-data-layer").CrdtStreamMessage;
            readonly requestStream: true;
            readonly responseType: typeof import("../../../lib/data-layer/remote-data-layer").CrdtStreamMessage;
            readonly responseStream: true;
            readonly options: {};
        };
        readonly undo: {
            readonly name: "Undo";
            readonly requestType: typeof Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../../lib/data-layer/remote-data-layer").UndoRedoResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly redo: {
            readonly name: "Redo";
            readonly requestType: typeof Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../../lib/data-layer/remote-data-layer").UndoRedoResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getFiles: {
            readonly name: "getFiles";
            readonly requestType: typeof import("../../../lib/data-layer/remote-data-layer").GetFilesRequest;
            readonly requestStream: false;
            readonly responseType: typeof import("../../../lib/data-layer/remote-data-layer").GetFilesResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly saveFile: {
            readonly name: "saveFile";
            readonly requestType: typeof import("../../../lib/data-layer/remote-data-layer").SaveFileRequest;
            readonly requestStream: false;
            readonly responseType: typeof Empty;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getAssetCatalog: {
            readonly name: "GetAssetCatalog";
            readonly requestType: typeof Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../../lib/data-layer/remote-data-layer").AssetCatalogResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getAssetData: {
            readonly name: "GetAssetData";
            readonly requestType: typeof import("../../../lib/data-layer/remote-data-layer").Asset;
            readonly requestStream: false;
            readonly responseType: typeof import("../../../lib/data-layer/remote-data-layer").AssetData;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly importAsset: {
            readonly name: "ImportAsset";
            readonly requestType: typeof import("../../../lib/data-layer/remote-data-layer").ImportAssetRequest;
            readonly requestStream: false;
            readonly responseType: typeof Empty;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly removeAsset: {
            readonly name: "RemoveAsset";
            readonly requestType: typeof import("../../../lib/data-layer/remote-data-layer").Asset;
            readonly requestStream: false;
            readonly responseType: typeof Empty;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly save: {
            readonly name: "Save";
            readonly requestType: typeof Empty;
            readonly requestStream: false;
            readonly responseType: typeof Empty;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getInspectorPreferences: {
            readonly name: "GetInspectorPreferences";
            readonly requestType: typeof Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../../lib/data-layer/remote-data-layer").InspectorPreferencesMessage;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly setInspectorPreferences: {
            readonly name: "SetInspectorPreferences";
            readonly requestType: typeof import("../../../lib/data-layer/remote-data-layer").InspectorPreferencesMessage;
            readonly requestStream: false;
            readonly responseType: typeof Empty;
            readonly responseStream: false;
            readonly options: {};
        };
    };
}>, import("../../../lib/data-layer/types").DataLayerContext>> & Empty>;
