import { ErrorType, IDataLayer } from '../';
import { InspectorPreferences } from '../../../lib/logic/preferences/types';
export declare function getInspectorPreferencesSaga(): Generator<import("redux-saga/effects").PutEffect<{
    payload: {
        error: ErrorType;
    };
    type: "data-layer/error";
}> | import("redux-saga/effects").CallEffect<IDataLayer> | import("redux-saga/effects").CallEffect<import("../../../tooling-entrypoint").InspectorPreferencesMessage> | import("redux-saga/effects").PutEffect<{
    payload: {
        preferences: InspectorPreferences;
    };
    type: "app-state/updatePreferences";
}>, void, Readonly<import("@dcl/rpc/dist/codegen-types").RawClient<import("@dcl/rpc/dist/codegen-types").FromTsProtoServiceDefinition<{
    readonly name: "DataService";
    readonly fullName: "DataService";
    readonly methods: {
        readonly crdtStream: {
            readonly name: "CrdtStream";
            readonly requestType: typeof import("../../../tooling-entrypoint").CrdtStreamMessage;
            readonly requestStream: true;
            readonly responseType: typeof import("../../../tooling-entrypoint").CrdtStreamMessage;
            readonly responseStream: true;
            readonly options: {};
        };
        readonly undo: {
            readonly name: "Undo";
            readonly requestType: typeof import("../../../tooling-entrypoint").Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../../tooling-entrypoint").UndoRedoResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly redo: {
            readonly name: "Redo";
            readonly requestType: typeof import("../../../tooling-entrypoint").Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../../tooling-entrypoint").UndoRedoResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getFiles: {
            readonly name: "getFiles";
            readonly requestType: typeof import("../../../tooling-entrypoint").GetFilesRequest;
            readonly requestStream: false;
            readonly responseType: typeof import("../../../tooling-entrypoint").GetFilesResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly saveFile: {
            readonly name: "saveFile";
            readonly requestType: typeof import("../../../tooling-entrypoint").SaveFileRequest;
            readonly requestStream: false;
            readonly responseType: typeof import("../../../tooling-entrypoint").Empty;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getAssetCatalog: {
            readonly name: "GetAssetCatalog";
            readonly requestType: typeof import("../../../tooling-entrypoint").Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../../tooling-entrypoint").AssetCatalogResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getAssetData: {
            readonly name: "GetAssetData";
            readonly requestType: typeof import("../../../tooling-entrypoint").Asset;
            readonly requestStream: false;
            readonly responseType: typeof import("../../../tooling-entrypoint").AssetData;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly importAsset: {
            readonly name: "ImportAsset";
            readonly requestType: typeof import("../../../tooling-entrypoint").ImportAssetRequest;
            readonly requestStream: false;
            readonly responseType: typeof import("../../../tooling-entrypoint").Empty;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly removeAsset: {
            readonly name: "RemoveAsset";
            readonly requestType: typeof import("../../../tooling-entrypoint").Asset;
            readonly requestStream: false;
            readonly responseType: typeof import("../../../tooling-entrypoint").Empty;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly save: {
            readonly name: "Save";
            readonly requestType: typeof import("../../../tooling-entrypoint").Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../../tooling-entrypoint").Empty;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getInspectorPreferences: {
            readonly name: "GetInspectorPreferences";
            readonly requestType: typeof import("../../../tooling-entrypoint").Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../../tooling-entrypoint").InspectorPreferencesMessage;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly setInspectorPreferences: {
            readonly name: "SetInspectorPreferences";
            readonly requestType: typeof import("../../../tooling-entrypoint").InspectorPreferencesMessage;
            readonly requestStream: false;
            readonly responseType: typeof import("../../../tooling-entrypoint").Empty;
            readonly responseStream: false;
            readonly options: {};
        };
    };
}>, import("../../../tooling-entrypoint").DataLayerContext>> & InspectorPreferences>;
