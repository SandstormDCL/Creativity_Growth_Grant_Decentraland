import { EventChannel } from 'redux-saga';
import { RpcClient, RpcClientPort, Transport } from '@dcl/rpc';
import { IDataLayer } from '../';
import { InspectorConfig } from '../../../lib/logic/config';
export declare function createWebSocketConnection(url: string): WebSocket;
export declare function createSocketChannel(socket: WebSocket): EventChannel<WsActions>;
export type WsActions = {
    type: 'WS_OPENED';
} | {
    type: 'WS_ERROR';
    error: unknown;
};
export declare function connectSaga(): Generator<import("redux-saga/effects").CallEffect<InspectorConfig> | import("redux-saga/effects").CallEffect<import("@dcl/rpc/dist/codegen-types").RawClient<import("@dcl/rpc/dist/codegen-types").FromTsProtoServiceDefinition<{
    readonly name: "DataService";
    readonly fullName: "DataService";
    readonly methods: {
        readonly crdtStream: {
            readonly name: "CrdtStream";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").CrdtStreamMessage;
            readonly requestStream: true;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").CrdtStreamMessage;
            readonly responseStream: true;
            readonly options: {};
        };
        readonly undo: {
            readonly name: "Undo";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").UndoRedoResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly redo: {
            readonly name: "Redo";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").UndoRedoResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getFiles: {
            readonly name: "getFiles";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").GetFilesRequest;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").GetFilesResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly saveFile: {
            readonly name: "saveFile";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").SaveFileRequest;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getAssetCatalog: {
            readonly name: "GetAssetCatalog";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").AssetCatalogResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getAssetData: {
            readonly name: "GetAssetData";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Asset;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").AssetData;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly importAsset: {
            readonly name: "ImportAsset";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").ImportAssetRequest;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly removeAsset: {
            readonly name: "RemoveAsset";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Asset;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly save: {
            readonly name: "Save";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getInspectorPreferences: {
            readonly name: "GetInspectorPreferences";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").InspectorPreferencesMessage;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly setInspectorPreferences: {
            readonly name: "SetInspectorPreferences";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").InspectorPreferencesMessage;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly responseStream: false;
            readonly options: {};
        };
    };
}>, import("../../../lib/data-layer/types").DataLayerContext>> | import("redux-saga/effects").PutEffect<{
    payload: {
        dataLayer: IDataLayer;
    };
    type: "data-layer/connected";
}> | import("redux-saga/effects").CallEffect<WebSocket> | import("redux-saga/effects").CallEffect<EventChannel<WsActions>> | import("redux-saga/effects").ChannelTakeEffect<{
    type: "WS_OPENED";
} | {
    type: "WS_ERROR";
    error: unknown;
}> | import("redux-saga/effects").CallEffect<Transport> | import("redux-saga/effects").CallEffect<RpcClient> | import("redux-saga/effects").CallEffect<RpcClientPort> | import("redux-saga/effects").PutEffect<{
    payload: undefined;
    type: "data-layer/reconnect";
}>, void, (((InspectorConfig & Readonly<import("@dcl/rpc/dist/codegen-types").RawClient<import("@dcl/rpc/dist/codegen-types").FromTsProtoServiceDefinition<{
    readonly name: "DataService";
    readonly fullName: "DataService";
    readonly methods: {
        readonly crdtStream: {
            readonly name: "CrdtStream";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").CrdtStreamMessage;
            readonly requestStream: true;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").CrdtStreamMessage;
            readonly responseStream: true;
            readonly options: {};
        };
        readonly undo: {
            readonly name: "Undo";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").UndoRedoResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly redo: {
            readonly name: "Redo";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").UndoRedoResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getFiles: {
            readonly name: "getFiles";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").GetFilesRequest;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").GetFilesResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly saveFile: {
            readonly name: "saveFile";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").SaveFileRequest;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getAssetCatalog: {
            readonly name: "GetAssetCatalog";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").AssetCatalogResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getAssetData: {
            readonly name: "GetAssetData";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Asset;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").AssetData;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly importAsset: {
            readonly name: "ImportAsset";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").ImportAssetRequest;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly removeAsset: {
            readonly name: "RemoveAsset";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Asset;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly save: {
            readonly name: "Save";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getInspectorPreferences: {
            readonly name: "GetInspectorPreferences";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").InspectorPreferencesMessage;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly setInspectorPreferences: {
            readonly name: "SetInspectorPreferences";
            readonly requestType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").InspectorPreferencesMessage;
            readonly requestStream: false;
            readonly responseType: typeof import("../../..//lib/data-layer/proto/gen/data-layer.gen").Empty;
            readonly responseStream: false;
            readonly options: {};
        };
    };
}>, import("../../../lib/data-layer/types").DataLayerContext>> & (WebSocket & EventChannel<WsActions> & WsActions)) & Pick<import("mitt").Emitter<import("@dcl/rpc").TransportEvents>, "on" | "emit"> & {
    sendMessage(message: Uint8Array): void;
    close(): void;
    readonly isConnected: boolean;
}) & RpcClient) & Pick<import("mitt").Emitter<import("@dcl/rpc").RpcPortEvents>, "on" | "all"> & {
    readonly portId: number;
    readonly portName: string;
    loadModule(moduleName: string): Promise<unknown>;
    close(): void;
    readonly state: "open" | "closed";
}>;
