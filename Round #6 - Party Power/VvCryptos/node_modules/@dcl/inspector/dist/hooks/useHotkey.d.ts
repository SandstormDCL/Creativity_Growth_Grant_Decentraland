import { KeyHandler } from 'hotkeys-js';
export declare const SHIFT = "shift";
export declare const CTRL = "ctrl";
export declare const ALT = "alt";
export declare const COMMAND = "command";
export declare const DELETE = "delete";
export declare const BACKSPACE = "backspace";
export declare const COPY = "ctrl+c";
export declare const COPY_ALT = "command+c";
export declare const PASTE = "ctrl+v";
export declare const PASTE_ALT = "command+v";
export declare const UNDO = "ctrl+z";
export declare const UNDO_ALT = "command+z";
export declare const REDO = "ctrl+shift+z";
export declare const REDO_2 = "ctrl+y";
export declare const REDO_ALT = "command+shift+z";
export declare const REDO_ALT_2 = "command+y";
export declare const ZOOM_IN = "=";
export declare const ZOOM_IN_ALT = "+";
export declare const ZOOM_OUT = "-";
export declare const ZOOM_OUT_ALT = "_";
export declare const RESET_CAMERA = "space";
export declare const SAVE = "ctrl+s";
export declare const SAVE_ALT = "command+s";
export declare const DUPLICATE = "ctrl+d";
export declare const DUPLICATE_ALT = "command+d";
/**
 * Hook that listens for key presses and triggers a callback function when the specified keys are pressed.
 *
 * @param keys - An array of strings representing the keys to listen for.
 * @param callback - The callback function to be executed when the specified keys are pressed.
 * @param node - The target DOM node to attach the event listener to. If not provided, the listener will be attached to the entire document.
 */
export declare const useHotkey: (keys: string | string[], callback: KeyHandler | (() => void), node?: any) => void;
