import { Entity, LastWriteWinElementSetComponentDefinition } from '@dcl/ecs';
import { SdkContextValue } from '../../lib/sdk/context';
export declare const DISABLED_COMPONENTS: string[];
export declare const SMART_ITEM_COMPONENTS: string[];
export declare const ROOT_COMPONENTS: Record<Entity, string[]>;
export declare function isRoot(entity: Entity): boolean;
export declare function getEnabledComponents(disabledComponents?: string[]): Set<string>;
export declare const getComponentName: (value: string) => string;
export declare const useEntityComponent: () => {
    getComponents: (entity: Entity, missing?: boolean) => Map<number, string>;
    addComponent: (entity: Entity, componentId: number, value?: any) => void;
    removeComponent: (entity: Entity, component: LastWriteWinElementSetComponentDefinition<SdkContextValue["components"]>) => void;
    getAvailableComponents: (entity: Entity) => {
        id: number;
        name: string;
    }[];
};
