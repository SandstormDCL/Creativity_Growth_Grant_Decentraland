import { ComponentDefinition, CompositeDefinition, CrdtMessageType, Entity, IEngine } from '@dcl/ecs';
import { FileSystemInterface } from '../types';
export type UndoRedoCrdt = {
    $case: 'crdt';
    operations: CrdtOperation[];
};
export type UndoRedoFile = {
    $case: 'file';
    operations: FileOperation[];
};
export type CrdtOperation = {
    entity: Entity;
    componentName: string;
    prevValue: unknown;
    newValue: unknown;
    operation: CrdtMessageType;
};
export type FileOperation = {
    path: string;
    prevValue: Uint8Array | null;
    newValue: Uint8Array | null;
};
export type UndoRedo = UndoRedoFile | UndoRedoCrdt;
export type UndoRedoOp = UndoRedo['operations'][0];
export type UndoRedoGetter = <T extends UndoRedoOp>(op: T) => T['newValue'];
export declare function initUndoRedo(fs: FileSystemInterface, engine: IEngine, getComposite: () => CompositeDefinition): {
    undo(): Promise<{
        type: string;
    }>;
    redo(): Promise<{
        type: string;
    }>;
    onChange: (entity: Entity, operation: CrdtMessageType, component: ComponentDefinition<unknown> | undefined, _componentValue: unknown) => void;
    addUndoFile(operations: FileOperation[]): void;
    addUndoCrdt(): void;
};
