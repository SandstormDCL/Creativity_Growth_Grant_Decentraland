import { Analytics as SegmentAnalytics } from '@segment/analytics-node';
export declare enum Event {
    ADD_ITEM = "Add Item",
    ADD_COMPONENT = "Add Component",
    REMOVE_COMPONENT = "Remove Component",
    SEARCH_ITEM = "Search Item",
    SWITCH_BUILDER_MODE = "Switch Builder Mode",
    SET_GROUND = "Set Ground",
    LOCK = "Lock",
    HIDE = "Hide"
}
export type Events = {
    [Event.ADD_ITEM]: {
        itemId?: string;
        itemName: string;
        itemPath: string;
        isSmart: boolean;
    };
    [Event.ADD_COMPONENT]: {
        componentName: string;
        itemId?: string;
        itemPath: string;
    };
    [Event.REMOVE_COMPONENT]: {
        componentName: string;
        itemId?: string;
        itemPath: string;
    };
    [Event.SEARCH_ITEM]: {
        keyword: string;
        itemsFound: number;
        category?: string;
    };
    [Event.SWITCH_BUILDER_MODE]: {
        itemId: string;
        itemName: string;
        isAdvancedView: boolean;
    };
    [Event.SET_GROUND]: {
        itemId?: string;
        itemName: string;
        itemPath: string;
    };
    [Event.LOCK]: {
        value: boolean;
    };
    [Event.HIDE]: {
        value: boolean;
    };
};
declare class Analytics {
    private static instance;
    private analytics;
    private userId;
    private appId;
    constructor();
    getAnalytics(): SegmentAnalytics | {
        track(): void;
    };
    getTraits(): Record<string, unknown>;
    getBaseProperties(): {};
    track<T extends keyof Events>(eventName: T, eventProps: Events[T]): void;
}
export declare const analytics: Analytics;
export {};
