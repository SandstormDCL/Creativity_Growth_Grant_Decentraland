export type FieldType<Obj, Path> = Path extends `${infer Left}.${infer Right}` ? Left extends keyof Obj ? FieldType<Exclude<Obj[Left], undefined>, Right> | Extract<Obj[Left], undefined> : undefined : Path extends keyof Obj ? Obj[Path] : undefined;
export type NestedKey<Obj extends object> = {
    [Key in keyof Obj & (string | number)]: Obj[Key] extends object ? `${Key}` | `${Key}.${NestedKey<Obj[Key]>}` : `${Key}`;
}[keyof Obj & (string | number)];
export declare function setValue<Obj extends object, Path extends string>(obj: Obj, path: Path, value: FieldType<Obj, Path>, returnNew?: boolean): Obj;
export declare function getValue<Obj, Path extends string, Def = FieldType<Obj, Path>>(obj: Obj, path: Path, defaultValue?: Def): FieldType<Obj, Path> | Def;
