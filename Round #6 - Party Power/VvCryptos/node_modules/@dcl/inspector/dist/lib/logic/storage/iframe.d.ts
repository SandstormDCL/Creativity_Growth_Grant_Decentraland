import { RPC, Transport } from '@dcl/mini-rpc';
import { Storage } from './types';
export declare namespace IframeStorage {
    enum Method {
        READ_FILE = "read_file",
        WRITE_FILE = "write_file",
        EXISTS = "exists",
        DELETE = "delete",
        LIST = "list"
    }
    type Params = {
        [Method.READ_FILE]: {
            path: string;
        };
        [Method.WRITE_FILE]: {
            path: string;
            content: Buffer;
        };
        [Method.DELETE]: {
            path: string;
        };
        [Method.EXISTS]: {
            path: string;
        };
        [Method.LIST]: {
            path: string;
        };
    };
    type Result = {
        [Method.READ_FILE]: Buffer;
        [Method.WRITE_FILE]: void;
        [Method.DELETE]: void;
        [Method.EXISTS]: boolean;
        [Method.LIST]: {
            name: string;
            isDirectory: boolean;
        }[];
    };
    const id = "IframeStorage";
    class Client extends RPC<Method, Params, Result> {
        constructor(transport: Transport);
        readFile(path: string): Promise<Buffer>;
        writeFile(path: string, content: Buffer): Promise<void>;
        exists(path: string): Promise<boolean>;
        delete(path: string): Promise<void>;
        list(path: string): Promise<{
            name: string;
            isDirectory: boolean;
        }[]>;
    }
    class Server extends RPC<Method, Params, Result> {
        constructor(transport: Transport);
    }
}
export declare function createIframeStorage(origin: string): Storage;
