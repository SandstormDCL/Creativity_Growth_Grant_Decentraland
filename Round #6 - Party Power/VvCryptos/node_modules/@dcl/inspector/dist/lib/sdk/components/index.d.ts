import { ComponentDefinition, Entity, IEngine, LastWriteWinElementSetComponentDefinition } from '@dcl/ecs';
import * as components from '@dcl/ecs/dist/components';
import { States, ActionTypes, Actions, Triggers, Counter, CounterBar } from '@dcl/asset-packs';
import { Layout } from '../../utils/layout';
import { GizmoType } from '../../utils/gizmo';
import { TransformConfig } from './TransformConfig';
export type Component<T = unknown> = ComponentDefinition<T>;
export type Node = {
    entity: Entity;
    open?: boolean;
    children: Entity[];
};
export declare enum CoreComponents {
    ANIMATOR = "core::Animator",
    AUDIO_SOURCE = "core::AudioSource",
    AUDIO_STREAM = "core::AudioStream",
    AVATAR_ATTACH = "core::AvatarAttach",
    GLTF_CONTAINER = "core::GltfContainer",
    NETWORK_ENTITY = "core-schema::Network-Entity",
    MATERIAL = "core::Material",
    MESH_COLLIDER = "core::MeshCollider",
    MESH_RENDERER = "core::MeshRenderer",
    NFT_SHAPE = "core::NftShape",
    POINTER_EVENTS = "core::PointerEvents",
    SYNC_COMPONENTS = "core-schema::Sync-Components",
    TEXT_SHAPE = "core::TextShape",
    TRANSFORM = "core::Transform",
    TWEEN = "core::Tween",
    TWEEN_SEQUENCE = "core::TweenSequence",
    VIDEO_PLAYER = "core::VideoPlayer",
    VISIBILITY_COMPONENT = "core::VisibilityComponent"
}
export declare enum EditorComponentNames {
    Selection = "inspector::Selection",
    Scene = "inspector::SceneMetadata",
    Nodes = "inspector::Nodes",
    ActionTypes = "asset-packs::ActionTypes",
    Actions = "asset-packs::Actions",
    Counter = "asset-packs::Counter",
    CounterBar = "asset-packs::CounterBar",
    Triggers = "asset-packs::Triggers",
    States = "asset-packs::States",
    TransformConfig = "inspector::TransformConfig",
    Hide = "inspector::Hide",
    Lock = "inspector::Lock",
    Config = "inspector::Config",
    Ground = "inspector::Ground",
    Tile = "inspector::Tile"
}
export declare enum SceneAgeRating {
    Teen = "T",
    Adult = "A"
}
export type SceneSpawnPointCoord = {
    $case: 'single';
    value: number;
} | {
    $case: 'range';
    value: number[];
};
export type SceneSpawnPoint = {
    name: string;
    default?: boolean;
    position: {
        x: SceneSpawnPointCoord;
        y: SceneSpawnPointCoord;
        z: SceneSpawnPointCoord;
    };
    cameraTarget?: {
        x: number;
        y: number;
        z: number;
    };
};
export type SceneComponent = {
    name?: string;
    description?: string;
    thumbnail?: string;
    ageRating?: SceneAgeRating;
    main?: string;
    categories?: SceneCategory[];
    author?: string;
    email?: string;
    tags?: string[];
    layout: Layout;
    silenceVoiceChat?: boolean;
    disablePortableExperiences?: boolean;
    spawnPoints?: SceneSpawnPoint[];
};
type AllComponentsType = CoreComponents | EditorComponentNames;
export type ConfigComponent = {
    isBasicViewEnabled: boolean;
    componentName: string;
    fields: {
        name: string;
        type: AllComponentsType;
        layout?: string;
        basicViewId?: string;
    }[];
    assetId?: string;
};
export type GroundComponent = {};
export type TileComponent = {};
export declare enum SceneCategory {
    ART = "art",
    GAME = "game",
    CASINO = "casino",
    SOCIAL = "social",
    MUSIC = "music",
    FASHION = "fashion",
    CRYPTO = "crypto",
    EDUCATION = "education",
    SHOP = "shop",
    BUSINESS = "business",
    SPORTS = "sports"
}
export type EditorComponentsTypes = {
    Selection: {
        gizmo: GizmoType;
    };
    Scene: SceneComponent;
    Nodes: {
        value: Node[];
    };
    TransformConfig: TransformConfig;
    ActionTypes: ActionTypes;
    Actions: Actions;
    Triggers: Triggers;
    States: States;
    Counter: Counter;
    Hide: {
        value: boolean;
    };
    Lock: {
        value: boolean;
    };
    CounterBar: CounterBar;
    Config: ConfigComponent;
    Ground: GroundComponent;
    Tile: TileComponent;
};
export type EditorComponents = {
    Selection: LastWriteWinElementSetComponentDefinition<EditorComponentsTypes['Selection']>;
    Scene: LastWriteWinElementSetComponentDefinition<EditorComponentsTypes['Scene']>;
    Nodes: LastWriteWinElementSetComponentDefinition<EditorComponentsTypes['Nodes']>;
    TransformConfig: LastWriteWinElementSetComponentDefinition<EditorComponentsTypes['TransformConfig']>;
    ActionTypes: LastWriteWinElementSetComponentDefinition<EditorComponentsTypes['ActionTypes']>;
    Actions: LastWriteWinElementSetComponentDefinition<EditorComponentsTypes['Actions']>;
    Counter: LastWriteWinElementSetComponentDefinition<EditorComponentsTypes['Counter']>;
    Triggers: LastWriteWinElementSetComponentDefinition<EditorComponentsTypes['Triggers']>;
    States: LastWriteWinElementSetComponentDefinition<EditorComponentsTypes['States']>;
    Hide: LastWriteWinElementSetComponentDefinition<EditorComponentsTypes['Hide']>;
    Lock: LastWriteWinElementSetComponentDefinition<EditorComponentsTypes['Lock']>;
    CounterBar: LastWriteWinElementSetComponentDefinition<EditorComponentsTypes['CounterBar']>;
    Config: LastWriteWinElementSetComponentDefinition<EditorComponentsTypes['Config']>;
    Ground: LastWriteWinElementSetComponentDefinition<EditorComponentsTypes['Ground']>;
    Tile: LastWriteWinElementSetComponentDefinition<EditorComponentsTypes['Tile']>;
};
export type SdkComponents = {
    Animator: ReturnType<typeof components.Animator>;
    AudioSource: ReturnType<typeof components.AudioSource>;
    AudioStream: ReturnType<typeof components.AudioStream>;
    AvatarAttach: ReturnType<typeof components.AvatarAttach>;
    Billboard: ReturnType<typeof components.Billboard>;
    GltfContainer: ReturnType<typeof components.GltfContainer>;
    Material: ReturnType<typeof components.Material>;
    MeshCollider: ReturnType<typeof components.MeshCollider>;
    MeshRenderer: ReturnType<typeof components.MeshRenderer>;
    Name: ReturnType<typeof components.Name>;
    NetworkEntity: ReturnType<typeof components.NetworkEntity>;
    NftShape: ReturnType<typeof components.NftShape>;
    PointerEvents: ReturnType<typeof components.PointerEvents>;
    SyncComponents: ReturnType<typeof components.SyncComponents>;
    TextShape: ReturnType<typeof components.TextShape>;
    Transform: ReturnType<typeof components.Transform>;
    Tween: ReturnType<typeof components.Tween>;
    TweenSequence: ReturnType<typeof components.TweenSequence>;
    VideoPlayer: ReturnType<typeof components.VideoPlayer>;
    VisibilityComponent: ReturnType<typeof components.VisibilityComponent>;
};
export declare function createComponents(engine: IEngine): SdkComponents;
export declare function createEditorComponents(engine: IEngine): EditorComponents;
export {};
