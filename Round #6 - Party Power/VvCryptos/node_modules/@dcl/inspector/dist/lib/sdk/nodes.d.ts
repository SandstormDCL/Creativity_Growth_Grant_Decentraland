import { DeepReadonlyObject, Entity, IEngine } from '@dcl/ecs';
import { Node } from './components';
export declare function getParent(entity: Entity, nodes: DeepReadonlyObject<Node[]>): Entity;
export declare function isRoot(entity: Entity): boolean;
export declare function getRoot(entity: Entity, nodes: DeepReadonlyObject<Node[]>): Entity;
export declare function getNodes(engine: IEngine): readonly DeepReadonlyObject<Node>[];
export declare function removeNode(engine: IEngine, entity: Entity): Node[];
export declare function addNode(engine: IEngine, entity: Entity): Node[];
export declare function pushChild(engine: IEngine, parent: Entity, child: Entity): Node[];
export declare function removeChild(engine: IEngine, parent: Entity, child: Entity): Node[];
export declare function filterChild(parent: Node, child: Entity): Node;
export declare function getAncestors(engine: IEngine, entity: Entity): Set<Entity>;
export declare function isAncestor(ancestors: Set<Entity>, entity: Entity): boolean;
export declare function mapNodes(engine: IEngine, fn: (node: Node) => Node): Node[];
