import { Coords } from '@dcl/ecs';
import { GridError } from './types';
export type GridCoord = Coords & {
    disabled?: boolean;
};
export type GridInfo = {
    min: Coords;
    max: Coords;
    length: Coords;
    grid: GridCoord[];
};
export declare function getGridInfo(parcels: Coords[]): GridInfo;
/**
 * Generates an array of coordinates between two points (inclusive).
 * The coordinates are generated in grid order, from top-left to bottom-right,
 * starting from the maximum y-value to the minimum y-value, and within each row,
 * from the minimum x-value to the maximum x-value.
 *
 * @param {Coords} pointA - The first point (can be any of the two corners of the grid).
 * @param {Coords} pointB - The second point (can be any of the two corners of the grid).
 * @returns {Coords[]} - An array of coordinates between the two points, inclusive,
 * ordered from top-left to bottom-right.
 */
export declare function generateCoordinatesBetweenPoints(pointA: Coords, pointB: Coords): Coords[];
/**
 * Generates a grid of coordinates between the specified min and max points.
 * Marks coordinates as "disabled" based on the provided grid's existing disabled coordinates.
 *
 * @param {GridCoord[]} grid - The existing grid of coordinates, some of which may be disabled.
 * @param {Coords} min - The minimum coordinate point (bottom-left) to define the grid bounds.
 * @param {Coords} max - The maximum coordinate point (top-right) to define the grid bounds.
 * @returns {GridCoord[]} - A new grid of coordinates between the min and max points,
 * with coordinates marked as disabled if they exist as disabled in the original grid.
 */
export declare function generateGridFrom(grid: GridCoord[], min: Coords, max: Coords): GridCoord[];
export declare function getLayoutInfoFromString(parcels: string): GridInfo;
export declare function getOption(value: number): number;
export declare function clampParcels(value: number): number;
export declare function getMinMaxFromOrderedCoords(coords: Coords[]): [Coords, Coords];
/**
 * Converts a coordinate object to its string representation.
 * @param {Coords} coords - The coordinate object.
 * @returns {string} The string representation of the coordinates.
 */
export declare function coordToStr({ x, y }: Coords): string;
export declare function strToCoord(coord: string): Coords;
export declare function getEnabledCoords(coords: GridCoord[]): GridCoord[];
export declare function isCoord(coord1: Coords, coord2: Coords): boolean;
export declare function findCoord(coords: Coords[], needle: Coords): Coords | undefined;
export declare function hasCoord(coords: Coords[], needle: Coords): boolean;
export declare function transformCoordsToString(coords: Coords[]): string;
export declare function stringifyGridError(error: GridError): string;
