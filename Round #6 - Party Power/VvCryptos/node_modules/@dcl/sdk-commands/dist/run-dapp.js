"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runDapp = void 0;
const http_server_1 = require("@well-known-components/http-server");
const interfaces_1 = require("@well-known-components/interfaces");
const env_config_provider_1 = require("@well-known-components/env-config-provider");
const logger_1 = require("@well-known-components/logger");
const path_1 = require("path");
const open_1 = __importDefault(require("open"));
const get_free_port_1 = require("./logic/get-free-port");
async function runDapp(cliComponents, router, { isHttps, openBrowser, uri, linkerPort }) {
    const resolvedPort = await (0, get_free_port_1.getPort)(linkerPort);
    const protocol = isHttps ? 'https' : 'http';
    const url = `${protocol}://localhost:${resolvedPort}${uri}`;
    const program = await interfaces_1.Lifecycle.run({
        async initComponents() {
            const config = (0, env_config_provider_1.createRecordConfigComponent)({
                HTTP_SERVER_PORT: resolvedPort.toString(),
                HTTP_SERVER_HOST: '0.0.0.0',
                ...process.env
            });
            const logs = await (0, logger_1.createConsoleLogComponent)({});
            const https = isHttps ? await getCredentials(cliComponents) : undefined;
            const server = await (0, http_server_1.createServerComponent)({ ...cliComponents, config, logs }, { https, cors: {} });
            return { ...cliComponents, config, logs, server };
        },
        async main(program) {
            const { components, startComponents } = program;
            components.server.setContext(components);
            components.server.use(router.allowedMethods());
            components.server.use(router.middleware());
            await startComponents();
            if (openBrowser)
                await browse(components, url);
        }
    });
    return { program };
}
exports.runDapp = runDapp;
async function browse({ logger }, url) {
    setTimeout(async () => {
        try {
            await (0, open_1.default)(`${url}`);
        }
        catch (e) {
            logger.error(`Unable to open browser automatically. Please manually navigate to:\n  ${url}`);
        }
    }, 5000);
    logger.info(`App ready at ${url}`);
}
async function getCredentials({ fs }) {
    const privateKey = await fs.readFile((0, path_1.resolve)(__dirname, '../../../certs/localhost.key'), 'utf-8');
    const certificate = await fs.readFile((0, path_1.resolve)(__dirname, '../../../certs/localhost.crt'), 'utf-8');
    return { key: privateKey, cert: certificate };
}
//# sourceMappingURL=run-dapp.js.map