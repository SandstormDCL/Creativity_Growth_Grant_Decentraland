"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runSdkCommand = void 0;
const args_1 = require("./logic/args");
const beautiful_logs_1 = require("./logic/beautiful-logs");
const commands_1 = require("./logic/commands");
const error_1 = require("./logic/error");
const listCommandsStr = (commands) => commands.map(($) => `\t *sdk-commands ${$} \n`).join('');
/* istanbul ignore next */
function asserValidCommand(fns) {
    const { help, main } = fns;
    if (!help || !main) {
        throw new error_1.CliError(`Command does not follow implementation rules:
      * Requires a "help" function
      * Requires a "main" function
    `);
    }
    return true;
}
async function runSdkCommand(components, command, argv) {
    const helpMessage = (commands) => `Here is the list of commands:\n${listCommandsStr(commands)}`;
    const needsHelp = argv.includes('--help') || argv.includes('-h');
    const needsJson = argv.includes('--json');
    const commands = await (0, commands_1.getCommands)(components);
    if (!commands.includes(command)) {
        if (needsHelp) {
            components.logger.log(helpMessage(commands));
            return;
        }
        /* istanbul ignore next */
        throw new error_1.CliError(`Command ${command} is invalid. ${helpMessage(commands)}`);
    }
    const cmd = await Promise.resolve(`${`./commands/${command}`}`).then(s => __importStar(require(s)));
    if (asserValidCommand(cmd)) {
        let args;
        try {
            args = (0, args_1.parseArgs)(argv, cmd.args);
        }
        catch (e) {
            components.logger.error(e.message);
            return cmd.help({ args: {}, components });
        }
        if (needsHelp) {
            await cmd.help({ args, components });
        }
        else {
            (0, beautiful_logs_1.printCommand)(components.logger, command);
            const ret = await cmd.main({ args, components });
            // print the result of the evaluation as json in the standard output
            if (needsJson) {
                process.stdout.write(JSON.stringify(ret, null, 2));
            }
            return ret;
        }
    }
}
exports.runSdkCommand = runSdkCommand;
//# sourceMappingURL=run-command.js.map