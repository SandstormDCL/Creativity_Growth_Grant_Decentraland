"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = exports.help = exports.args = void 0;
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const open_1 = __importDefault(require("open"));
const build_1 = require("../build");
const args_1 = require("../../logic/args");
const scene_validations_1 = require("../../logic/scene-validations");
const get_free_port_1 = require("../../logic/get-free-port");
const metrics_1 = require("@well-known-components/metrics");
const interfaces_1 = require("@well-known-components/interfaces");
const env_config_provider_1 = require("@well-known-components/env-config-provider");
const rooms_1 = require("@dcl/mini-comms/dist/adapters/rooms");
const http_server_1 = require("@well-known-components/http-server");
const logger_1 = require("@well-known-components/logger");
const eth_1 = require("../../components/eth");
const log_1 = require("../../components/log");
const file_watch_notifier_1 = require("./server/file-watch-notifier");
const routes_1 = require("./server/routes");
const ws_1 = require("./server/ws");
const project_files_1 = require("../../logic/project-files");
const rpc_1 = require("./data-layer/rpc");
const exit_signal_1 = require("../../components/exit-signal");
const workspace_validations_1 = require("../../logic/workspace-validations");
const beautiful_logs_1 = require("../../logic/beautiful-logs");
const project_validations_1 = require("../../logic/project-validations");
const explorer_alpha_1 = require("./explorer-alpha");
exports.args = (0, args_1.declareArgs)({
    '--dir': String,
    '--help': Boolean,
    '--port': Number,
    '--no-debug': Boolean,
    '--no-browser': Boolean,
    '--no-watch': Boolean,
    '--ci': Boolean,
    '--skip-install': Boolean,
    '--web3': Boolean,
    '-h': '--help',
    '-p': '--port',
    '-d': '--no-debug',
    '-b': '--no-browser',
    '-w': '--no-watch',
    '--skip-build': Boolean,
    '--desktop-client': Boolean,
    '--data-layer': Boolean,
    '--explorer-alpha': Boolean,
    '--hub': Boolean
});
async function help(options) {
    options.components.logger.log(`
  Usage: sdk-commands start [options]

    Options:

      -h, --help                Displays complete help
      -p, --port        [port]  Select a custom port for the development server
      -d, --no-debug            Disable debugging panel
      -b, --no-browser          Do not open a new browser window
      -w, --no-watch            Do not open watch for filesystem changes
      -c, --ci                  Run the parcel previewer on a remote unix server
      --web3                    Connects preview to browser wallet to use the associated avatar and account
      --skip-build              Skip build and only serve the files in preview mode
      --desktop-client          Show URL to launch preview in the desktop client (BETA)

    Examples:

    - Start a local development server for a Decentraland Scene at port 3500

      $ sdk-commands start -p 3500

    - Start a local development server for a Decentraland Scene at a docker container

      $ sdk-commands start --ci
`);
}
exports.help = help;
async function main(options) {
    let baseCoords = { x: 0, y: 0 };
    const workingDirectory = path.resolve(process.cwd(), options.args['--dir'] || '.');
    const isCi = options.args['--ci'] || process.env.CI || false;
    const debug = !options.args['--no-debug'] && !isCi;
    const openBrowser = !options.args['--no-browser'] && !isCi;
    const build = !options.args['--skip-build'];
    const watch = !options.args['--no-watch'];
    const withDataLayer = options.args['--data-layer'];
    const enableWeb3 = options.args['--web3'];
    const explorerAlpha = options.args['--explorer-alpha'];
    const isHub = !!options.args['--hub'];
    let hasSmartWearable = false;
    const workspace = await (0, workspace_validations_1.getValidWorkspace)(options.components, workingDirectory);
    /* istanbul ignore if */
    if (workspace.projects.length > 1)
        (0, beautiful_logs_1.printWarning)(options.components.logger, 'Support for multiple projects is still experimental.');
    for (const project of workspace.projects) {
        if (project.kind === 'smart-wearable')
            hasSmartWearable = true;
        if (project.kind === 'scene' || project.kind === 'smart-wearable') {
            (0, beautiful_logs_1.printCurrentProjectStarting)(options.components.logger, project, workspace);
            // first run `npm run build`, this can be disabled with --skip-build
            // then start the embedded compiler, this can be disabled with --no-watch
            if (watch || build) {
                await (0, build_1.buildScene)({ ...options, args: { '--dir': project.workingDirectory, '--watch': watch, _: [] } }, project);
                await (0, project_validations_1.startValidations)(options.components, project.workingDirectory);
            }
            // track the event
            baseCoords = (0, scene_validations_1.getBaseCoords)(project.scene);
            options.components.analytics.track('Preview started', {
                projectHash: await (0, project_files_1.b64HashingFunction)(project.workingDirectory),
                coords: baseCoords,
                isWorkspace: false,
                isPortableExperience: !!project.scene.isPortableExperience
            });
        }
    }
    (0, beautiful_logs_1.printProgressInfo)(options.components.logger, 'Starting preview server');
    const port = await (0, get_free_port_1.getPort)(options.args['--port'] || 0);
    const program = await interfaces_1.Lifecycle.run({
        async initComponents() {
            const metrics = (0, metrics_1.createTestMetricsComponent)(rooms_1.roomsMetrics);
            const config = (0, env_config_provider_1.createRecordConfigComponent)({
                HTTP_SERVER_PORT: port.toString(),
                HTTP_SERVER_HOST: '0.0.0.0',
                ...process.env
            });
            const logs = await (0, logger_1.createConsoleLogComponent)({});
            const ws = await (0, ws_1.createWsComponent)({ logs });
            const server = await (0, http_server_1.createServerComponent)({ config, ws: ws.ws, logs }, { cors: {} });
            const rooms = await (0, rooms_1.createRoomsComponent)({
                metrics,
                logs,
                config
            });
            const signaler = (0, exit_signal_1.createExitSignalComponent)();
            return {
                ...options.components,
                logger: (0, log_1.createStderrCliLogger)(),
                logs,
                ethereumProvider: eth_1.providerInstance,
                rooms,
                config,
                metrics,
                server,
                ws,
                signaler
            };
        },
        async main({ components, startComponents }) {
            let dataLayer;
            if (withDataLayer) {
                try {
                    dataLayer = await (0, rpc_1.createDataLayer)(components);
                }
                catch (e) {
                    components.logger.error(e);
                }
            }
            await (0, routes_1.wireRouter)(components, workspace, dataLayer);
            if (watch) {
                for (const project of workspace.projects) {
                    await (0, file_watch_notifier_1.wireFileWatcherToWebSockets)(components, project.workingDirectory, project.kind, !!explorerAlpha);
                }
            }
            await startComponents();
            const networkInterfaces = os.networkInterfaces();
            const availableURLs = [];
            (0, beautiful_logs_1.printProgressInfo)(options.components.logger, 'Preview server is now running!');
            if (!explorerAlpha) {
                components.logger.log('Available on:\n');
            }
            Object.keys(networkInterfaces).forEach((dev) => {
                ;
                (networkInterfaces[dev] || []).forEach((details) => {
                    if (details.family === 'IPv4') {
                        const oldBackpack = 'DISABLE_backpack_editor_v2=&ENABLE_backpack_editor_v1';
                        let addr = `http://${details.address}:${port}?position=${baseCoords.x}%2C${baseCoords.y}&${oldBackpack}`;
                        if (debug) {
                            addr = `${addr}&SCENE_DEBUG_PANEL`;
                        }
                        if (enableWeb3 || hasSmartWearable) {
                            addr = `${addr}&ENABLE_WEB3`;
                        }
                        availableURLs.push(addr);
                    }
                });
            });
            // Push localhost and 127.0.0.1 at top
            const sortedURLs = availableURLs.sort((a, _b) => {
                return a.toLowerCase().includes('localhost') || a.includes('127.0.0.1') || a.includes('0.0.0.0') ? -1 : 1;
            });
            if (!explorerAlpha) {
                for (const addr of sortedURLs) {
                    components.logger.log(`    ${addr}`);
                }
            }
            if (options.args['--desktop-client']) {
                components.logger.log('\n  Desktop client:\n');
                for (const addr of sortedURLs) {
                    const searchParams = new URLSearchParams();
                    searchParams.append('PREVIEW-MODE', addr);
                    components.logger.log(`    dcl://${searchParams.toString()}&`);
                }
            }
            if (!explorerAlpha) {
                components.logger.log('\n  Details:\n');
            }
            components.logger.log('\nPress CTRL+C to exit\n');
            if (explorerAlpha) {
                const realm = new URL(sortedURLs[0]).origin;
                await (0, explorer_alpha_1.runExplorerAlpha)(components, { cwd: workingDirectory, realm, baseCoords, isHub });
            }
            // Open preferably localhost/127.0.0.1
            if (!explorerAlpha && openBrowser && sortedURLs.length && !options.args['--desktop-client']) {
                try {
                    await (0, open_1.default)(sortedURLs[0]);
                }
                catch (_) {
                    components.logger.warn('Unable to open browser automatically.');
                }
            }
        }
    });
    // this signal is resolved by: (wkc)program.stop(), SIGTERM, SIGHUP
    // we must wait for it to resolve (when the server stops) to continue with the
    // program
    await program.components.signaler.programClosed;
}
exports.main = main;
//# sourceMappingURL=index.js.map