"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadGithubFolder = void 0;
const path_1 = __importDefault(require("path"));
async function downloadFile(components, fileUrl, outputPath) {
    const response = await (await components.fetch.fetch(fileUrl)).arrayBuffer();
    const buffer = Buffer.from(response);
    await components.fs.writeFile(outputPath, buffer);
}
// Function to parse GitHub URL for root or subfolder
function parseGitHubUrl(githubUrl) {
    const rootRegex = /https:\/\/github\.com\/([^\/]+)\/([^\/]+)$/;
    const subfolderRegex = /https:\/\/github\.com\/([^\/]+)\/([^\/]+)\/tree\/([^\/]+)\/?(.*)/;
    let match = githubUrl.match(subfolderRegex);
    if (match) {
        return {
            owner: match[1],
            repo: match[2],
            branch: match[3],
            path: match[4]
        };
    }
    else {
        match = githubUrl.match(rootRegex);
        if (match) {
            return {
                owner: match[1],
                repo: match[2],
                branch: 'main',
                path: '' // No specific path for root
            };
        }
    }
    throw new Error("URL doesn't match the expected GitHub format.");
}
async function downloadGithubFolder(components, githubUrl, destination) {
    const { owner, repo, branch, path: subfolderPath } = parseGitHubUrl(githubUrl);
    const apiUrl = `https://api.github.com/repos/${owner}/${repo}/contents/${subfolderPath}?ref=${branch}`;
    try {
        const data = await (await components.fetch.fetch(apiUrl)).json();
        if (Array.isArray(data)) {
            for await (const file of data) {
                const filePath = path_1.default.join(destination, file.name);
                if (file.type === 'file') {
                    await downloadFile(components, file.download_url, filePath);
                }
                else if (file.type === 'dir') {
                    if (!(await components.fs.directoryExists(filePath))) {
                        await components.fs.mkdir(filePath, { recursive: true });
                    }
                    const nextUrl = `https://github.com/${owner}/${repo}/tree/${branch}/${file.path}`;
                    await downloadGithubFolder(components, nextUrl, filePath);
                }
            }
        }
        else {
            // Handle single file or root without subfolders
            const filePath = path_1.default.join(destination, data.name);
            await downloadFile(components, data.download_url, filePath);
        }
    }
    catch (error) {
        components.logger.error(`Error downloading folder: ${apiUrl} \n ${error.message}`);
    }
}
exports.downloadGithubFolder = downloadGithubFolder;
//# sourceMappingURL=download-github-folder.js.map