import { ChainId, Scene } from '@dcl/schemas';
import { Lifecycle } from '@well-known-components/interfaces';
import { ContentClient } from 'dcl-catalyst-client';
import { CliComponents } from '../../components';
import { IFile } from '../../logic/scene-validations';
import { LinkerResponse } from '../../linker-dapp/routes';
import { IFuture } from 'fp-future';
import { dAppOptions } from '../../run-dapp';
export declare function getCatalyst(chainId?: ChainId, target?: string, targetContent?: string): Promise<{
    client: ContentClient;
    url: string;
}>;
export declare function getAddressAndSignature(components: CliComponents, awaitResponse: IFuture<void>, messageToSign: string, scene: Scene, files: IFile[], skipValidations: boolean, linkOptions: Omit<dAppOptions, 'uri'>, deployCallback: (response: LinkerResponse) => Promise<void>): Promise<{
    program?: Lifecycle.ComponentBasedProgram<unknown>;
}>;
export declare function sceneHasWorldCfg(scene: Scene): boolean;
export interface SceneInfo {
    baseParcel: string;
    parcels: string[];
    rootCID: string;
    landRegistry?: string;
    estateRegistry?: string;
    debug: boolean;
    title?: string;
    description?: string;
    skipValidations: boolean;
    isPortableExperience: boolean;
    isWorld: boolean;
}
export declare function getSceneInfo(components: Pick<CliComponents, 'config'>, scene: Scene, rootCID: string, skipValidations: boolean): Promise<{
    baseParcel: string;
    parcels: string[];
    rootCID: string;
    landRegistry: string | undefined;
    estateRegistry: string | undefined;
    debug: boolean;
    title: string | undefined;
    description: string | undefined;
    skipValidations: boolean;
    isPortableExperience: boolean;
    isWorld: boolean;
}>;
