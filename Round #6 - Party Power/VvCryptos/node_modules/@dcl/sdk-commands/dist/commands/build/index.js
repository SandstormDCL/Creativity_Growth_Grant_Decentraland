"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildScene = exports.main = exports.help = exports.args = void 0;
const path_1 = __importDefault(require("path"));
const args_1 = require("../../logic/args");
const project_validations_1 = require("../../logic/project-validations");
const scene_validations_1 = require("../../logic/scene-validations");
const project_files_1 = require("../../logic/project-files");
const bundle_1 = require("../../logic/bundle");
const beautiful_logs_1 = require("../../logic/beautiful-logs");
const workspace_validations_1 = require("../../logic/workspace-validations");
exports.args = (0, args_1.declareArgs)({
    '--watch': Boolean,
    '-w': '--watch',
    '--production': Boolean,
    '--single': String,
    '--emitDeclaration': Boolean,
    '--ignoreComposite': Boolean,
    '--customEntryPoint': Boolean,
    '-p': '--production',
    '--skip-install': Boolean,
    '--dir': String
});
function help(options) {
    options.components.logger.log(`
  Usage: 'sdk-commands build [options]'
    Options:'
      -h, --help                Displays complete help
      -w, --watch               Watch for file changes and build on change
      -p, --production          Build without sourcemaps
      --skip-install            Skip installing dependencies
      --dir                     Path to directory to build

    Example:
    - Build your scene:
      '$ sdk-commands build'
  `);
}
exports.help = help;
async function main(options) {
    const workingDirectory = path_1.default.resolve(process.cwd(), options.args['--dir'] || '.');
    const workspace = await (0, workspace_validations_1.getValidWorkspace)(options.components, workingDirectory);
    for (const project of workspace.projects) {
        (0, beautiful_logs_1.printCurrentProjectStarting)(options.components.logger, project, workspace);
        if (project.kind === 'scene' || project.kind === 'smart-wearable') {
            await buildScene(options, project);
        }
    }
}
exports.main = main;
async function buildScene(options, project) {
    const canInstall = !options.args['--skip-install'];
    if (canInstall) {
        if (await (0, project_validations_1.needsDependencies)(options.components, project.workingDirectory)) {
            await (0, project_validations_1.installDependencies)(options.components, project.workingDirectory);
        }
    }
    const watch = !!options.args['--watch'];
    const { sceneJson, inputs } = await (0, bundle_1.bundleProject)(options.components, {
        workingDirectory: project.workingDirectory,
        watch,
        single: options.args['--single'],
        production: !!options.args['--production'],
        emitDeclaration: !!options.args['--emitDeclaration'],
        ignoreComposite: !!options.args['--ignoreComposite'],
        customEntryPoint: !!options.args['--customEntryPoint']
    }, project.scene);
    const coords = (0, scene_validations_1.getBaseCoords)(sceneJson);
    options.components.analytics.track('Build scene', {
        projectHash: await (0, project_files_1.b64HashingFunction)(project.workingDirectory),
        coords,
        isWorkspace: inputs.length > 1,
        isPortableExperience: !!sceneJson.isPortableExperience
    });
}
exports.buildScene = buildScene;
//# sourceMappingURL=index.js.map