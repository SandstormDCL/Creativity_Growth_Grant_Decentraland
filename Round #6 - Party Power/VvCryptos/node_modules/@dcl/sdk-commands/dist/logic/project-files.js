"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageJson = exports.b64HashingFunction = exports.getProjectPublishableFilesWithHashes = exports.projectFilesToContentMappings = exports.normalizeDecentralandFilename = exports.getPublishableFiles = void 0;
const dcl_ignore_1 = require("./dcl-ignore");
const glob_1 = require("glob");
const ignore_1 = __importDefault(require("ignore"));
const path_1 = __importStar(require("path"));
const error_1 = require("./error");
/**
 * Returns an array of the publishable files for a given folder.
 *
 */
async function getPublishableFiles(components, projectRoot) {
    const ignorePatterns = await (0, dcl_ignore_1.getDCLIgnorePatterns)(components, projectRoot);
    const ig = (0, ignore_1.default)().add(ignorePatterns);
    const allFiles = (0, glob_1.sync)('**/*', {
        cwd: projectRoot,
        absolute: false,
        dot: false,
        ignore: ignorePatterns,
        nodir: true
    });
    return ig.filter(allFiles);
}
exports.getPublishableFiles = getPublishableFiles;
/**
 * This function converts paths to decentraland-compatible paths.
 * - From windows separators to unix separators.
 * - All to lowercase
 */
function normalizeDecentralandFilename(projectRoot, filename) {
    const newAbsolute = path_1.default.resolve(projectRoot, filename);
    const relativePath = path_1.default.relative(projectRoot, newAbsolute);
    // 1. win->unix style
    // 2. remove heading /
    return relativePath.replace(/(\\)/g, '/').replace(/^\/+/, '').toLowerCase();
}
exports.normalizeDecentralandFilename = normalizeDecentralandFilename;
/**
 * This function normalizes the content mappings of a project to be used by the
 * Decentraland file system
 */
function projectFilesToContentMappings(projectRoot, files) {
    return files.map((file) => {
        return {
            file: normalizeDecentralandFilename(projectRoot, file.absolutePath),
            hash: file.hash
        };
    });
}
exports.projectFilesToContentMappings = projectFilesToContentMappings;
/**
 * Returns the content mappings for a specific project folder.
 * NOTE: the result of this function IS NOT NORMALIZED. Paths sould be normalized
 * with normalizeDecentralandFilename before usage
 *
 * TODO: Unit test this function
 */
async function getProjectPublishableFilesWithHashes(components, projectRoot, hashingFunction) {
    const projectFiles = await getPublishableFiles(components, projectRoot);
    const ret = [];
    const usedFilenames = new Set();
    for (const file of projectFiles) {
        const absolutePath = path_1.default.resolve(projectRoot, file);
        /* istanbul ignore if */
        if (!(await components.fs.fileExists(absolutePath)))
            continue;
        const normalizedFile = normalizeDecentralandFilename(projectRoot, file);
        /* istanbul ignore if */
        if (usedFilenames.has(normalizedFile)) {
            throw new error_1.CliError(`DuplicatedFilenameError: the file ${file} exists with a different casing. Please manually remove one occurrence`);
        }
        usedFilenames.add(normalizedFile);
        ret.push({
            absolutePath,
            hash: await hashingFunction(absolutePath)
        });
    }
    return ret;
}
exports.getProjectPublishableFilesWithHashes = getProjectPublishableFilesWithHashes;
const b64HashingFunction = (str) => 'b64-' + Buffer.from(str).toString('base64');
exports.b64HashingFunction = b64HashingFunction;
/* istanbul ignore next */
async function getPackageJson(components, projectRoot) {
    try {
        const packageJsonRaw = await components.fs.readFile((0, path_1.resolve)(projectRoot, 'package.json'), 'utf8');
        const packageJson = JSON.parse(packageJsonRaw);
        return packageJson;
    }
    catch (err) {
        throw new error_1.CliError(`Error reading the package.json file: ${err.message}`);
    }
}
exports.getPackageJson = getPackageJson;
//# sourceMappingURL=project-files.js.map