"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getValidWorkspace = exports.workspaceFromFolders = exports.assertValidWorkspace = exports.getWorkspaceFilePath = exports.WorkspaceJson = void 0;
const path_1 = __importStar(require("path"));
const schemas_1 = require("@dcl/schemas");
const error_1 = require("./error");
const project_validations_1 = require("./project-validations");
var WorkspaceJson;
(function (WorkspaceJson) {
    WorkspaceJson.schema = {
        type: 'object',
        additionalProperties: true,
        properties: {
            folders: {
                type: 'array',
                minItems: 1,
                items: {
                    type: 'object',
                    properties: {
                        path: {
                            type: 'string'
                        }
                    },
                    required: ['path'],
                    additionalProperties: true
                }
            }
        },
        required: ['folders']
    };
    WorkspaceJson.validate = (0, schemas_1.generateLazyValidator)(WorkspaceJson.schema);
})(WorkspaceJson = exports.WorkspaceJson || (exports.WorkspaceJson = {}));
// this is "overridable" by env var to test integrations like ".code-workspace" instead
const WORKSPACE_FILE = process.env.WORKSPACE_FILE || 'dcl-workspace.json';
/**
 * Composes the path to the `dcl-workspace.json` file based on the provided path.
 * @param projectRoot The path to the directory containing the file.
 */
function getWorkspaceFilePath(projectRoot) {
    return (0, path_1.resolve)(projectRoot, WORKSPACE_FILE);
}
exports.getWorkspaceFilePath = getWorkspaceFilePath;
/* istanbul ignore next */
function assertValidWorkspace(workspace) {
    if (!WorkspaceJson.validate(workspace)) {
        const errors = [];
        if (WorkspaceJson.validate.errors) {
            for (const error of WorkspaceJson.validate.errors) {
                errors.push(`Error validating ${WORKSPACE_FILE}: ${error.message}`);
            }
        }
        /* istanbul ignore next */
        throw new error_1.CliError(`Invalid ${WORKSPACE_FILE} file:\n${errors.join('\n')}`);
    }
}
exports.assertValidWorkspace = assertValidWorkspace;
// This function takes a list of folders and returns a workspace containing the projects in the folders.
// The working directory of each project is the absolute path of the folder.
// The root working directory of the workspace is the absolute path of the working directory.
async function workspaceFromFolders(components, workingDirectory, folders) {
    const ret = {
        rootWorkingDirectory: workingDirectory,
        projects: []
    };
    for (const folder of folders) {
        const wd = path_1.default.resolve(workingDirectory, folder);
        const project = await (0, project_validations_1.assertValidProjectFolder)(components, wd);
        ret.projects.push(project);
    }
    return ret;
}
exports.workspaceFromFolders = workspaceFromFolders;
/**
 * Returns a workspace by loading the workspace file or generating a single-folder workspace on the fly.
 */
async function getValidWorkspace(components, projectRoot) {
    const workingDirectory = path_1.default.resolve(projectRoot);
    const workspaceFile = getWorkspaceFilePath(workingDirectory);
    if (await components.fs.fileExists(workspaceFile)) {
        // either we load a workspace
        try {
            const workspaceJsonRaw = await components.fs.readFile(workspaceFile, 'utf8');
            const workspaceJson = JSON.parse(workspaceJsonRaw);
            // assert valid data structure
            assertValidWorkspace(workspaceJson);
            return await workspaceFromFolders(components, workingDirectory, workspaceJson.folders.map((f) => f.path));
        }
        catch (err) {
            /* istanbul ignore next */
            throw new error_1.CliError(`Error reading the ${getWorkspaceFilePath(workingDirectory)} file: ${err.message}`);
        }
    }
    else {
        // or generate a single-folder workspace on the fly
        return await workspaceFromFolders(components, workingDirectory, ['.']);
    }
}
exports.getValidWorkspace = getValidWorkspace;
//# sourceMappingURL=workspace-validations.js.map