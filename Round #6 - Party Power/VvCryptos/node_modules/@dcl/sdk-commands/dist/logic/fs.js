"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readJson = exports.extract = exports.download = exports.isDirectoryEmpty = void 0;
const extract_zip_1 = __importDefault(require("extract-zip"));
const path_1 = require("path");
/**
 * Check's if directory is empty
 * @param dir Directory to check for emptyness
 */
async function isDirectoryEmpty(components, dir) {
    const files = await components.fs.readdir(dir);
    return !files.length;
}
exports.isDirectoryEmpty = isDirectoryEmpty;
/**
 * Download a file
 * @param url URL of the file
 * @param dest Path to where to save the file
 */
async function download(components, url, dest) {
    // we should remove this package and use the native "fetch" when Node
    // releases it as stable: https://nodejs.org/docs/latest-v18.x/api/globals.html#fetch
    const data = await (await components.fetch.fetch(url)).arrayBuffer();
    await components.fs.writeFile(dest, Buffer.from(data));
    return dest;
}
exports.download = download;
/**
 * Extracts a .zip file
 * @param url Path of the zip file
 * @param dest Path to where to extract the zip file
 */
async function extract(path, dest) {
    const destPath = (0, path_1.resolve)(dest);
    const topLevelFolders = new Set();
    await (0, extract_zip_1.default)((0, path_1.resolve)(path), {
        dir: destPath,
        onEntry(entry, _zipfile) {
            const topLevel = entry.fileName.split('/')[0];
            topLevelFolders.add(topLevel);
        }
    });
    return { destPath, topLevelFolders: Array.from(topLevelFolders) };
}
exports.extract = extract;
/**
 * Reads a file and parses it's JSON content
 * @param path The path to the subject json file
 */
async function readJson(components, path) {
    const content = await components.fs.readFile(path, 'utf-8');
    return JSON.parse(content);
}
exports.readJson = readJson;
//# sourceMappingURL=fs.js.map