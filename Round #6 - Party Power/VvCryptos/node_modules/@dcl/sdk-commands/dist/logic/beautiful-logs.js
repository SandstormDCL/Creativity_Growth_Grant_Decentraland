"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.printError = exports.printSuccess = exports.printWarning = exports.printCommand = exports.printCurrentProjectStarting = exports.printStep = exports.printProgressInfo = exports.printProgressStep = void 0;
const path_1 = __importDefault(require("path"));
const log_1 = require("../components/log");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const { name, version } = require('../../package.json');
function printProgressStep(logger, log, currentStep, maxStep) {
    logger.log(log_1.colors.dim(`[${currentStep}/${maxStep}]`) + ' ' + log);
}
exports.printProgressStep = printProgressStep;
function printProgressInfo(logger, log) {
    logger.log(log_1.colors.dim(log));
}
exports.printProgressInfo = printProgressInfo;
function printStep(logger, log) {
    logger.log(log);
}
exports.printStep = printStep;
/**
 * If there are more than one project, we print the current project as "progress info"
 */
function printCurrentProjectStarting(logger, project, workspace) {
    if (workspace.projects.length > 1) {
        const relativePath = path_1.default.relative(workspace.rootWorkingDirectory, project.workingDirectory);
        const progress = log_1.colors.dim(`[${workspace.projects.indexOf(project) + 1}/${workspace.projects.length}]`);
        logger.log(log_1.colors.cyan(`\n${progress} in ${relativePath}:`));
    }
}
exports.printCurrentProjectStarting = printCurrentProjectStarting;
function printCommand(logger, commandName) {
    logger.log(log_1.colors.bold(`${name} ${commandName} v${version}`));
}
exports.printCommand = printCommand;
function printWarning(logger, warning) {
    logger.log(log_1.colors.bgBlack(log_1.colors.yellow(log_1.colors.bold(`⚠️ WARNING!`) + ' ' + warning)));
}
exports.printWarning = printWarning;
function printSuccess(logger, operationSuccessfulMessage, summary) {
    // print a space before the success callout
    logger.log('');
    logger.log(log_1.colors.greenBright(operationSuccessfulMessage));
    if (typeof summary === 'string') {
        logger.log(summary);
    }
}
exports.printSuccess = printSuccess;
function printError(logger, comment, error) {
    logger.log(log_1.colors.redBright(comment));
    logger.error(error);
}
exports.printError = printError;
//# sourceMappingURL=beautiful-logs.js.map