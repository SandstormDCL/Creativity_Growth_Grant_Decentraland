/// <reference types="node" />
import { Scene } from '@dcl/schemas';
import { CliComponents } from '../components';
export interface IFile {
    path: string;
    content: Buffer;
    size: number;
}
export declare const SCENE_FILE = "scene.json";
export declare const MAX_FILE_SIZE_BYTES: number;
/**
 * Composes the path to the `scene.json` file based on the provided path.
 * @param projectRoot The path to the directory containing the scene file.
 */
export declare function getSceneFilePath(projectRoot: string): string;
export declare function assertValidScene(components: Pick<CliComponents, 'logger'>, scene: Scene, opts?: {
    log?: boolean;
}): void;
/**
 * Get valid Scene JSON
 */
export declare function getValidSceneJson(components: Pick<CliComponents, 'fs' | 'logger'>, projectRoot: string, opts?: {
    log?: boolean;
}): Promise<Scene>;
export declare function getBaseCoords(scene: Scene): {
    x: number;
    y: number;
};
/**
 * Returns a promise of an array of objects containing the path and the content for all the files in the project.
 * All the paths added to the `.dclignore` file will be excluded from the results.
 * Windows directory separators are replaced for POSIX separators.
 * @param ignoreFile The contents of the .dclignore file
 */
export declare function getFiles(components: Pick<CliComponents, 'fs' | 'logger'>, dir: string): Promise<IFile[]>;
export declare function validateFilesSizes(files: IFile[]): void;
