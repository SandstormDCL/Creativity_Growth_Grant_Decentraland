"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllComposites = void 0;
const glob_1 = require("glob");
const path_1 = __importDefault(require("path"));
const dist_cjs_1 = require("@dcl/ecs/dist-cjs");
const beautiful_logs_1 = require("./beautiful-logs");
async function getAllComposites(components, workingDirectory) {
    let withErrors = false;
    const composites = {};
    const watchFiles = (0, glob_1.globSync)('**/*.composite', { cwd: workingDirectory });
    const textDecoder = new TextDecoder();
    for (const file of watchFiles) {
        try {
            const fileBuffer = await components.fs.readFile(path_1.default.join(workingDirectory, file));
            const json = JSON.parse(textDecoder.decode(fileBuffer));
            composites[file] = dist_cjs_1.Composite.fromJson(json);
        }
        catch (err) {
            (0, beautiful_logs_1.printError)(components.logger, `Composite '${file}' can't be read. Please check if is a valid JSON and composite formated.`, err);
            withErrors = true;
        }
    }
    const compositeProvider = {
        getCompositeOrNull(src) {
            if (src in composites) {
                return { src, composite: composites[src] };
            }
            return null;
        }
    };
    const compositeLines = [];
    for (const compositeSource in composites) {
        const engine = (0, dist_cjs_1.Engine)();
        try {
            const composite = compositeProvider.getCompositeOrNull(compositeSource);
            dist_cjs_1.Composite.instance(engine, composite, compositeProvider);
            compositeLines.push(`'${composite.src}':${JSON.stringify(dist_cjs_1.Composite.toJson(composite.composite))}`);
        }
        catch (err) {
            (0, beautiful_logs_1.printError)(components.logger, `Composite '${compositeSource}' can't be instanced.`, err);
            withErrors = true;
        }
    }
    return { compositeLines, watchFiles, withErrors };
}
exports.getAllComposites = getAllComposites;
//# sourceMappingURL=composite.js.map