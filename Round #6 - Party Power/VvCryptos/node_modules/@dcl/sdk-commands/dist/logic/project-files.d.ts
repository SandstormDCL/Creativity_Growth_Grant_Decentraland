import { ContentMapping } from '@dcl/schemas/dist/misc/content-mapping';
import { CliComponents } from '../components';
export type ProjectFile = {
    absolutePath: string;
    hash: string;
};
/**
 * Returns an array of the publishable files for a given folder.
 *
 */
export declare function getPublishableFiles(components: Pick<CliComponents, 'fs'>, projectRoot: string): Promise<Array<string>>;
/**
 * This function converts paths to decentraland-compatible paths.
 * - From windows separators to unix separators.
 * - All to lowercase
 */
export declare function normalizeDecentralandFilename(projectRoot: string, filename: string): string;
/**
 * This function normalizes the content mappings of a project to be used by the
 * Decentraland file system
 */
export declare function projectFilesToContentMappings(projectRoot: string, files: ProjectFile[]): ContentMapping[];
/**
 * Returns the content mappings for a specific project folder.
 * NOTE: the result of this function IS NOT NORMALIZED. Paths sould be normalized
 * with normalizeDecentralandFilename before usage
 *
 * TODO: Unit test this function
 */
export declare function getProjectPublishableFilesWithHashes(components: Pick<CliComponents, 'fs'>, projectRoot: string, hashingFunction: (filePath: string) => Promise<string>): Promise<ProjectFile[]>;
export declare const b64HashingFunction: (str: string) => string;
interface PackageJson {
    dependencies: Record<string, string>;
    devDependencies: Record<string, string>;
}
export declare function getPackageJson(components: Pick<CliComponents, 'fs'>, projectRoot: string): Promise<PackageJson>;
export {};
