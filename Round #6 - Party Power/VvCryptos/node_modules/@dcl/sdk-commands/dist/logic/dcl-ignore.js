"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDCLIgnorePatterns = exports.getDCLIgnoreFileContents = exports.defaultDclIgnore = void 0;
const path_1 = __importDefault(require("path"));
exports.defaultDclIgnore = [
    '.*',
    'package.json',
    'package-lock.json',
    'yarn-lock.json',
    'build.json',
    'export',
    'tsconfig.json',
    'tslint.json',
    'node_modules',
    '**/*.ts',
    '**/*.tsx',
    'Dockerfile',
    'dist',
    'README.md',
    '*.blend',
    '*.fbx',
    '*.zip',
    '*.rar'
];
async function getDCLIgnoreFileContents(components, dir) {
    try {
        return await components.fs.readFile(path_1.default.resolve(dir, '.dclignore'), 'utf8');
        //     ^^^^^ never remove that await.
    }
    catch (e) { }
    return null;
}
exports.getDCLIgnoreFileContents = getDCLIgnoreFileContents;
/**
 * Returns the default .dclignore entries plus the ones provided by the user.
 * In case of .dclignore not existing, it returns a pre-defined list.
 */
async function getDCLIgnorePatterns(components, dir) {
    const ignoredContent = await getDCLIgnoreFileContents(components, dir);
    const ignored = (ignoredContent?.split('\n') || exports.defaultDclIgnore).filter(Boolean);
    ignored.push(...exports.defaultDclIgnore);
    // by default many files need to be ignored
    ignored.push('.*', 'node_modules', '**/*.ts', '**/*.tsx', 'node_modules/**');
    return Array.from(new Set(ignored));
}
exports.getDCLIgnorePatterns = getDCLIgnorePatterns;
//# sourceMappingURL=dcl-ignore.js.map