"use strict";
/// <reference types="@types/node" />
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFsComponent = void 0;
const fs = __importStar(require("fs"));
const fsPromises = __importStar(require("fs/promises"));
async function fileExists(path) {
    try {
        await fs.promises.access(path, fs.constants.F_OK | fs.constants.R_OK);
        return true;
    }
    catch (error) {
        return false;
    }
}
async function directoryExists(path) {
    try {
        return (await fs.promises.lstat(path)).isDirectory();
    }
    catch (error) {
        return false;
    }
}
/**
 * @public
 */
function createFsComponent() {
    return {
        createReadStream: fs.createReadStream,
        createWriteStream: fs.createWriteStream,
        access: fsPromises.access,
        appendFile: fsPromises.appendFile,
        writeFile: fsPromises.writeFile,
        opendir: fsPromises.opendir,
        stat: fsPromises.stat,
        unlink: fsPromises.unlink,
        mkdir: fsPromises.mkdir,
        rmdir: fsPromises.rmdir,
        rm: fsPromises.rm,
        readdir: fsPromises.readdir,
        readFile: fsPromises.readFile,
        constants: {
            F_OK: fs.constants.F_OK,
            R_OK: fs.constants.R_OK
        },
        rename: fsPromises.rename,
        fileExists,
        directoryExists
    };
}
exports.createFsComponent = createFsComponent;
//# sourceMappingURL=fs.js.map