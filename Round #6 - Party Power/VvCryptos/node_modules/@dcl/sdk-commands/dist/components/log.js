"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStderrCliLogger = exports.colors = exports.writeToStderr = void 0;
const colorette_1 = require("colorette");
const error_1 = require("../logic/error");
/**
 * This file imitates "cargo" logs. The words are aligned with the colon like this:
 *        V
 *   Error: some text provided as argument
 *    Info: some text provided as argument
 * Success: some text provided as argument
 * Warning: some text provided as argument
 *        ^
 */
const writeToStderr = (...parameters) => {
    process.stderr.write(`${parameters.filter(($) => $ !== undefined).join('')}\n`);
};
exports.writeToStderr = writeToStderr;
// @see https://no-color.org
// @see https://www.npmjs.com/package/chalk
exports.colors = (0, colorette_1.createColors)({
    useColor: process.env.FORCE_COLOR !== '0' && !process.env.NO_COLOR
});
function createStderrCliLogger() {
    return {
        log(message, extra) {
            (0, exports.writeToStderr)(message, extra && JSON.stringify(extra));
        },
        debug(message, extra) {
            (0, exports.writeToStderr)(exports.colors.blueBright('debug: '), message, extra && JSON.stringify(extra));
        },
        error(error, extra) {
            (0, exports.writeToStderr)(exports.colors.redBright('error: '), error, extra && JSON.stringify(extra));
            /* istanbul ignore next */
            if (!(error instanceof error_1.CliError)) {
                if (error instanceof Error && error.stack) {
                    // print the stacktrace if it is not a CliError
                    (0, exports.writeToStderr)(error.stack);
                }
                else if (process.env.DEBUG) {
                    // print the stacktrace if it is not a CliError
                    (0, exports.writeToStderr)(error.toString());
                }
            }
        },
        info(message, extra) {
            (0, exports.writeToStderr)(exports.colors.blueBright('info: '), message, extra && JSON.stringify(extra));
        },
        warn(message, extra) {
            (0, exports.writeToStderr)(exports.colors.yellow('warning: '), message, extra && JSON.stringify(extra));
        }
    };
}
exports.createStderrCliLogger = createStderrCliLogger;
//# sourceMappingURL=log.js.map