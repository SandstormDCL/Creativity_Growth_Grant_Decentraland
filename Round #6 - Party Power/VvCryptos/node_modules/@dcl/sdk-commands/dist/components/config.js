"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requireStringConfig = exports.readStringConfig = exports.getGlobalDclRcPath = exports.writeGlobalConfig = exports.createConfigComponent = exports.DCL_RC = void 0;
const env_config_provider_1 = require("@well-known-components/env-config-provider");
const os_1 = require("os");
const path_1 = __importDefault(require("path"));
const error_1 = require("../logic/error");
exports.DCL_RC = '.dclrc';
/**
 * This function creates a chained .env loader for configurations.
 * It loads sdk-commands/.dclrc then ~/.dclrc and lastly $(pwd)/.dclrc
 * By default, process.env overrides any configuration.
 */
async function createConfigComponent({ fs }) {
    const dotEnvFilesToLoad = [await getSdkCommandsDclRcPath(fs)];
    const userDclRc = getGlobalDclRcPath();
    if (await fs.fileExists(userDclRc))
        dotEnvFilesToLoad.push(userDclRc);
    const projectDclRc = exports.DCL_RC;
    /* istanbul ignore if */
    if (await fs.fileExists(projectDclRc))
        dotEnvFilesToLoad.push(projectDclRc);
    return (0, env_config_provider_1.createDotEnvConfigComponent)({ path: dotEnvFilesToLoad });
}
exports.createConfigComponent = createConfigComponent;
async function writeGlobalConfig({ fs }, key, value) {
    const data = ['', '# ' + new Date().toISOString(), key + '=' + value, ''];
    await fs.appendFile(getGlobalDclRcPath(), data.join('\n'));
}
exports.writeGlobalConfig = writeGlobalConfig;
function getGlobalDclRcPath() {
    return path_1.default.resolve((0, os_1.homedir)(), exports.DCL_RC);
}
exports.getGlobalDclRcPath = getGlobalDclRcPath;
async function getSdkCommandsDclRcPath(fs) {
    const dclRc = path_1.default.resolve(__dirname, '..', '..', exports.DCL_RC);
    /* istanbul ignore if */
    if (!(await fs.fileExists(dclRc))) {
        throw new Error(dclRc + ' not found');
    }
    return dclRc;
}
async function readStringConfig(components, key) {
    return components.config.getString(key);
}
exports.readStringConfig = readStringConfig;
async function requireStringConfig(components, key) {
    const address = await readStringConfig(components, key);
    if (!address)
        throw new error_1.CliError(`configuration ${key} was not provided`);
    return address;
}
exports.requireStringConfig = requireStringConfig;
//# sourceMappingURL=config.js.map