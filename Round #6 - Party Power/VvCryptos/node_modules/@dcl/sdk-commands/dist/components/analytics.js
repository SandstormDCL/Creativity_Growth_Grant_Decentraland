"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAnalyticsComponent = void 0;
const uuid_1 = require("uuid");
const analytics_node_1 = require("@segment/analytics-node");
const fp_future_1 = __importDefault(require("fp-future"));
const log_1 = require("./log");
const config_1 = require("./config");
const config_2 = require("../logic/config");
const noopAnalytics = {
    track() { },
    async stop() { }
};
async function createAnalyticsComponent(components) {
    const analyticsEnabled = (await (0, config_1.readStringConfig)(components, 'DCL_DISABLE_ANALYTICS')) !== 'true';
    if (!analyticsEnabled) {
        return noopAnalytics;
    }
    const USER_ID = 'sdk-commands-user';
    let anonId = await (0, config_1.readStringConfig)(components, 'DCL_ANON_ID');
    const analytics = new analytics_node_1.Analytics({ writeKey: (0, config_2.getSegmentKey)() });
    if (!anonId) {
        anonId = (0, uuid_1.v4)();
        await (0, config_1.writeGlobalConfig)(components, 'DCL_ANON_ID', anonId);
        analytics.identify({
            userId: USER_ID,
            traits: {
                devId: anonId,
                createdAt: new Date()
            }
        });
        components.logger.info([
            `By default, Decentraland CLI sends anonymous usage stats to improve the products, if you want to disable it, add the following line to the configuration file at ${log_1.colors.bold((0, config_1.getGlobalDclRcPath)())}.`,
            `  DCL_DISABLE_ANALYTICS=true`,
            `More info https://dcl.gg/sdk/analytics`
        ].join('\n'));
    }
    const promises = [];
    const sdkVersion = await (0, config_2.getInstalledPackageVersion)(components, '@dcl/sdk', process.cwd());
    // the following properties are added to every telemetry report
    const baseTelemetryProperties = {
        os: process.platform,
        nodeVersion: process.version,
        cliVersion: await (0, config_2.getSdkCommandsVersion)(),
        isCI: (0, config_2.isCI)(),
        isEditor: (0, config_2.isEditor)(),
        devId: anonId,
        projectId: process.env.ANALYTICS_PROJECT_ID || null,
        appId: process.env.ANALYTICS_APP_ID || null,
        ecs: {
            ecsVersion: 'ecs7',
            packageVersion: sdkVersion
        }
    };
    function track(eventName, eventProps) {
        const trackFuture = (0, fp_future_1.default)();
        const trackInfo = {
            userId: USER_ID,
            event: eventName,
            properties: {
                ...eventProps,
                ...baseTelemetryProperties
            }
        };
        analytics.track(trackInfo, () => {
            trackFuture.resolve();
        });
        promises.push(trackFuture);
    }
    return {
        get() {
            return analytics;
        },
        track,
        async stop() {
            await Promise.all(promises);
        }
    };
}
exports.createAnalyticsComponent = createAnalyticsComponent;
//# sourceMappingURL=analytics.js.map