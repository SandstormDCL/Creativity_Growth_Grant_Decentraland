import type { IFetchComponent, WebSocketServer } from '@well-known-components/http-server';
import type { IConfigComponent, ILoggerComponent, IHttpServerComponent, IBaseComponent, IMetricsComponent } from '@well-known-components/interfaces';
import { metricDeclarations } from './metrics';
import { WebSocket } from 'ws';
import { HTTPProvider } from 'eth-connect';
import { RoomComponent } from './adapters/rooms';
export declare type GlobalContext = {
    components: BaseComponents;
};
export declare type RpcContext = GlobalContext;
export declare type WebSocketComponent = IBaseComponent & {
    ws: WebSocketServer;
};
export declare type BaseComponents = {
    config: IConfigComponent;
    logs: ILoggerComponent;
    server: IHttpServerComponent<GlobalContext>;
    fetch: IFetchComponent;
    metrics: IMetricsComponent<keyof typeof metricDeclarations>;
    ws: WebSocketComponent;
    ethereumProvider: HTTPProvider;
    rooms: RoomComponent;
};
export declare type Channel<T> = {
    close: () => void;
    [Symbol.asyncIterator]: () => AsyncGenerator<T>;
};
export declare type AppComponents = BaseComponents & {
    statusChecks: IBaseComponent;
};
export declare type TestComponents = BaseComponents & {
    localFetch: IFetchComponent;
    createLocalWebSocket: IWsTestComponent;
};
export declare type IWsTestComponent = {
    createWs(relativeUrl: string): WebSocket;
};
export declare type HandlerContextWithPath<ComponentNames extends keyof AppComponents, Path extends string = any> = IHttpServerComponent.PathAwareContext<IHttpServerComponent.DefaultContext<{
    components: Pick<AppComponents, ComponentNames>;
}>, Path>;
export declare type Context<Path extends string = any> = IHttpServerComponent.PathAwareContext<GlobalContext, Path>;
