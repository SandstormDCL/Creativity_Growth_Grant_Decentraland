"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initComponents = void 0;
const eth_connect_1 = require("eth-connect");
const env_config_provider_1 = require("@well-known-components/env-config-provider");
const http_server_1 = require("@well-known-components/http-server");
const logger_1 = require("@well-known-components/logger");
const fetch_1 = require("./adapters/fetch");
const metrics_1 = require("@well-known-components/metrics");
const metrics_2 = require("./metrics");
const ws_1 = require("./adapters/ws");
const build_info_1 = require("./logic/build-info");
const rooms_1 = require("./adapters/rooms");
const DEFAULT_ETH_NETWORK = 'goerli';
// Initialize all the components of the app
async function initComponents() {
    const config = await (0, env_config_provider_1.createDotEnvConfigComponent)({ path: ['.env.default', '.env'] });
    const ethNetwork = (await config.getString('ETH_NETWORK')) ?? DEFAULT_ETH_NETWORK;
    const logs = await (0, logger_1.createLogComponent)({});
    const ws = await (0, ws_1.createWsComponent)({ logs });
    const server = await (0, http_server_1.createServerComponent)({ config, logs, ws: ws.ws }, {});
    const statusChecks = await (0, http_server_1.createStatusCheckComponent)({ server, config });
    const fetch = await (0, fetch_1.createFetchComponent)();
    const metrics = await (0, metrics_1.createMetricsComponent)(metrics_2.metricDeclarations, { config });
    const ethereumProvider = new eth_connect_1.HTTPProvider(`https://rpc.decentraland.org/${encodeURIComponent(ethNetwork)}?project=mini-comms`, { fetch: fetch.fetch });
    const rooms = await (0, rooms_1.createRoomsComponent)({ logs, metrics, config });
    await (0, build_info_1.observeBuildInfo)({ config, metrics });
    await (0, metrics_1.instrumentHttpServerWithMetrics)({ metrics, config, server });
    return {
        config,
        logs,
        server,
        statusChecks,
        fetch,
        metrics,
        ws,
        ethereumProvider,
        rooms
    };
}
exports.initComponents = initComponents;
//# sourceMappingURL=components.js.map