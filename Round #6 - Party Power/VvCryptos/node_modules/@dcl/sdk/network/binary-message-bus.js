import { ReadWriteByteBuffer } from '@dcl/ecs/dist/serialization/ByteBuffer';
export var CommsMessage;
(function (CommsMessage) {
    CommsMessage[CommsMessage["CRDT"] = 1] = "CRDT";
    CommsMessage[CommsMessage["REQ_CRDT_STATE"] = 2] = "REQ_CRDT_STATE";
    CommsMessage[CommsMessage["RES_CRDT_STATE"] = 3] = "RES_CRDT_STATE";
})(CommsMessage || (CommsMessage = {}));
export function BinaryMessageBus(send) {
    const mapping = new Map();
    return {
        on: (message, callback) => {
            mapping.set(message, callback);
        },
        emit: (message, value) => {
            send(craftCommsMessage(message, value));
        },
        __processMessages: (messages) => {
            for (const message of messages) {
                const commsMsg = decodeCommsMessage(message);
                if (!commsMsg)
                    continue;
                const { sender, messageType, data } = commsMsg;
                const fn = mapping.get(messageType);
                if (fn)
                    fn(data, sender);
            }
        }
    };
}
export function craftCommsMessage(messageType, payload) {
    const msg = new Uint8Array(payload.byteLength + 1);
    msg.set([messageType]);
    msg.set(payload, 1);
    return msg;
}
export function decodeCommsMessage(data) {
    try {
        let offset = 0;
        const r = new Uint8Array(data);
        const view = new DataView(r.buffer);
        const senderLength = view.getUint8(offset);
        offset += 1;
        const sender = decodeString(data.subarray(1, senderLength + 1));
        offset += senderLength;
        const messageType = view.getUint8(offset);
        offset += 1;
        const message = r.subarray(offset);
        return {
            sender,
            messageType,
            data: message
        };
    }
    catch (e) {
        console.error('Invalid Comms message', e);
    }
}
export function decodeString(data) {
    const buffer = new ReadWriteByteBuffer();
    buffer.writeBuffer(data, true);
    return buffer.readUtf8String();
}
export function encodeString(s) {
    const buffer = new ReadWriteByteBuffer();
    buffer.writeUtf8String(s);
    return buffer.readBuffer();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluYXJ5LW1lc3NhZ2UtYnVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL25ldHdvcmsvYmluYXJ5LW1lc3NhZ2UtYnVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFBO0FBRTVFLE1BQU0sQ0FBTixJQUFZLFlBSVg7QUFKRCxXQUFZLFlBQVk7SUFDdEIsK0NBQVEsQ0FBQTtJQUNSLG1FQUFrQixDQUFBO0lBQ2xCLG1FQUFrQixDQUFBO0FBQ3BCLENBQUMsRUFKVyxZQUFZLEtBQVosWUFBWSxRQUl2QjtBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBeUIsSUFBbUM7SUFDMUYsTUFBTSxPQUFPLEdBQXdELElBQUksR0FBRyxFQUFFLENBQUE7SUFDOUUsT0FBTztRQUNMLEVBQUUsRUFBRSxDQUFjLE9BQVUsRUFBRSxRQUFxRCxFQUFFLEVBQUU7WUFDckYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFDaEMsQ0FBQztRQUNELElBQUksRUFBRSxDQUFjLE9BQVUsRUFBRSxLQUFpQixFQUFFLEVBQUU7WUFDbkQsSUFBSSxDQUFDLGlCQUFpQixDQUFJLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFBO1FBQzVDLENBQUM7UUFDRCxpQkFBaUIsRUFBRSxDQUFDLFFBQXNCLEVBQUUsRUFBRTtZQUM1QyxLQUFLLE1BQU0sT0FBTyxJQUFJLFFBQVEsRUFBRTtnQkFDOUIsTUFBTSxRQUFRLEdBQUcsa0JBQWtCLENBQUksT0FBTyxDQUFDLENBQUE7Z0JBQy9DLElBQUksQ0FBQyxRQUFRO29CQUFFLFNBQVE7Z0JBQ3ZCLE1BQU0sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQTtnQkFDOUMsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQTtnQkFDbkMsSUFBSSxFQUFFO29CQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7YUFDekI7UUFDSCxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQXlCLFdBQWMsRUFBRSxPQUFtQjtJQUMzRixNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ2xELEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFBO0lBQ3RCLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ25CLE9BQU8sR0FBRyxDQUFBO0FBQ1osQ0FBQztBQUVELE1BQU0sVUFBVSxrQkFBa0IsQ0FDaEMsSUFBZ0I7SUFFaEIsSUFBSTtRQUNGLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQTtRQUNkLE1BQU0sQ0FBQyxHQUFHLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzlCLE1BQU0sSUFBSSxHQUFHLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNuQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQzFDLE1BQU0sSUFBSSxDQUFDLENBQUE7UUFDWCxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDL0QsTUFBTSxJQUFJLFlBQVksQ0FBQTtRQUN0QixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBTSxDQUFBO1FBQzlDLE1BQU0sSUFBSSxDQUFDLENBQUE7UUFDWCxNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBRWxDLE9BQU87WUFDTCxNQUFNO1lBQ04sV0FBVztZQUNYLElBQUksRUFBRSxPQUFPO1NBQ2QsQ0FBQTtLQUNGO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixPQUFPLENBQUMsS0FBSyxDQUFDLHVCQUF1QixFQUFFLENBQUMsQ0FBQyxDQUFBO0tBQzFDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBZ0I7SUFDM0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxtQkFBbUIsRUFBRSxDQUFBO0lBQ3hDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQzlCLE9BQU8sTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFBO0FBQ2hDLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLENBQVM7SUFDcEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxtQkFBbUIsRUFBRSxDQUFBO0lBQ3hDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDekIsT0FBTyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUE7QUFDNUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlYWRXcml0ZUJ5dGVCdWZmZXIgfSBmcm9tICdAZGNsL2Vjcy9kaXN0L3NlcmlhbGl6YXRpb24vQnl0ZUJ1ZmZlcidcblxuZXhwb3J0IGVudW0gQ29tbXNNZXNzYWdlIHtcbiAgQ1JEVCA9IDEsXG4gIFJFUV9DUkRUX1NUQVRFID0gMixcbiAgUkVTX0NSRFRfU1RBVEUgPSAzXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCaW5hcnlNZXNzYWdlQnVzPFQgZXh0ZW5kcyBDb21tc01lc3NhZ2U+KHNlbmQ6IChtZXNzYWdlOiBVaW50OEFycmF5KSA9PiB2b2lkKSB7XG4gIGNvbnN0IG1hcHBpbmc6IE1hcDxULCAodmFsdWU6IFVpbnQ4QXJyYXksIHNlbmRlcjogc3RyaW5nKSA9PiB2b2lkPiA9IG5ldyBNYXAoKVxuICByZXR1cm4ge1xuICAgIG9uOiA8SyBleHRlbmRzIFQ+KG1lc3NhZ2U6IEssIGNhbGxiYWNrOiAodmFsdWU6IFVpbnQ4QXJyYXksIHNlbmRlcjogc3RyaW5nKSA9PiB2b2lkKSA9PiB7XG4gICAgICBtYXBwaW5nLnNldChtZXNzYWdlLCBjYWxsYmFjaylcbiAgICB9LFxuICAgIGVtaXQ6IDxLIGV4dGVuZHMgVD4obWVzc2FnZTogSywgdmFsdWU6IFVpbnQ4QXJyYXkpID0+IHtcbiAgICAgIHNlbmQoY3JhZnRDb21tc01lc3NhZ2U8VD4obWVzc2FnZSwgdmFsdWUpKVxuICAgIH0sXG4gICAgX19wcm9jZXNzTWVzc2FnZXM6IChtZXNzYWdlczogVWludDhBcnJheVtdKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgbWVzc2FnZXMpIHtcbiAgICAgICAgY29uc3QgY29tbXNNc2cgPSBkZWNvZGVDb21tc01lc3NhZ2U8VD4obWVzc2FnZSlcbiAgICAgICAgaWYgKCFjb21tc01zZykgY29udGludWVcbiAgICAgICAgY29uc3QgeyBzZW5kZXIsIG1lc3NhZ2VUeXBlLCBkYXRhIH0gPSBjb21tc01zZ1xuICAgICAgICBjb25zdCBmbiA9IG1hcHBpbmcuZ2V0KG1lc3NhZ2VUeXBlKVxuICAgICAgICBpZiAoZm4pIGZuKGRhdGEsIHNlbmRlcilcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyYWZ0Q29tbXNNZXNzYWdlPFQgZXh0ZW5kcyBDb21tc01lc3NhZ2U+KG1lc3NhZ2VUeXBlOiBULCBwYXlsb2FkOiBVaW50OEFycmF5KTogVWludDhBcnJheSB7XG4gIGNvbnN0IG1zZyA9IG5ldyBVaW50OEFycmF5KHBheWxvYWQuYnl0ZUxlbmd0aCArIDEpXG4gIG1zZy5zZXQoW21lc3NhZ2VUeXBlXSlcbiAgbXNnLnNldChwYXlsb2FkLCAxKVxuICByZXR1cm4gbXNnXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVDb21tc01lc3NhZ2U8VCBleHRlbmRzIENvbW1zTWVzc2FnZT4oXG4gIGRhdGE6IFVpbnQ4QXJyYXlcbik6IHsgc2VuZGVyOiBzdHJpbmc7IG1lc3NhZ2VUeXBlOiBUOyBkYXRhOiBVaW50OEFycmF5IH0gfCB1bmRlZmluZWQge1xuICB0cnkge1xuICAgIGxldCBvZmZzZXQgPSAwXG4gICAgY29uc3QgciA9IG5ldyBVaW50OEFycmF5KGRhdGEpXG4gICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhyLmJ1ZmZlcilcbiAgICBjb25zdCBzZW5kZXJMZW5ndGggPSB2aWV3LmdldFVpbnQ4KG9mZnNldClcbiAgICBvZmZzZXQgKz0gMVxuICAgIGNvbnN0IHNlbmRlciA9IGRlY29kZVN0cmluZyhkYXRhLnN1YmFycmF5KDEsIHNlbmRlckxlbmd0aCArIDEpKVxuICAgIG9mZnNldCArPSBzZW5kZXJMZW5ndGhcbiAgICBjb25zdCBtZXNzYWdlVHlwZSA9IHZpZXcuZ2V0VWludDgob2Zmc2V0KSBhcyBUXG4gICAgb2Zmc2V0ICs9IDFcbiAgICBjb25zdCBtZXNzYWdlID0gci5zdWJhcnJheShvZmZzZXQpXG5cbiAgICByZXR1cm4ge1xuICAgICAgc2VuZGVyLFxuICAgICAgbWVzc2FnZVR5cGUsXG4gICAgICBkYXRhOiBtZXNzYWdlXG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcignSW52YWxpZCBDb21tcyBtZXNzYWdlJywgZSlcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlU3RyaW5nKGRhdGE6IFVpbnQ4QXJyYXkpOiBzdHJpbmcge1xuICBjb25zdCBidWZmZXIgPSBuZXcgUmVhZFdyaXRlQnl0ZUJ1ZmZlcigpXG4gIGJ1ZmZlci53cml0ZUJ1ZmZlcihkYXRhLCB0cnVlKVxuICByZXR1cm4gYnVmZmVyLnJlYWRVdGY4U3RyaW5nKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZVN0cmluZyhzOiBzdHJpbmcpOiBVaW50OEFycmF5IHtcbiAgY29uc3QgYnVmZmVyID0gbmV3IFJlYWRXcml0ZUJ5dGVCdWZmZXIoKVxuICBidWZmZXIud3JpdGVVdGY4U3RyaW5nKHMpXG4gIHJldHVybiBidWZmZXIucmVhZEJ1ZmZlcigpXG59XG4iXX0=