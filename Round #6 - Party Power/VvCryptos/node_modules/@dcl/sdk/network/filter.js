import { EntityUtils, RESERVED_STATIC_ENTITIES, CrdtMessageType, SyncComponents as _SyncComponents, NetworkEntity as _NetworkEntity, NetworkParent as _NetworkParent } from '@dcl/ecs';
import { NOT_SYNC_COMPONENTS_IDS } from './state';
export function syncFilter(engine) {
    const NetworkEntity = engine.getComponent(_NetworkEntity.componentId);
    const SyncComponents = engine.getComponent(_SyncComponents.componentId);
    return function (message) {
        const componentId = message.componentId;
        if (NOT_SYNC_COMPONENTS_IDS.includes(componentId)) {
            return false;
        }
        const [entityId] = EntityUtils.fromEntityId(message.entityId);
        // filter messages from reserved entities.
        if (entityId < RESERVED_STATIC_ENTITIES) {
            return false;
        }
        const network = NetworkEntity.getOrNull(message.entityId);
        // Delete Network Entity Always
        if (message.type === CrdtMessageType.DELETE_ENTITY_NETWORK ||
            (network && message.type === CrdtMessageType.DELETE_ENTITY)) {
            return true;
        }
        const sync = SyncComponents.getOrNull(message.entityId);
        if (!sync)
            return false;
        // First component
        if (message.timestamp <= 1) {
            return true;
        }
        if (componentId === NetworkEntity.componentId) {
            return false;
        }
        // If there is a change in the network parent or syncComponents we should always sync
        if (componentId === _NetworkParent.componentId || componentId === SyncComponents.componentId) {
            return true;
        }
        if (componentId && sync.componentIds.includes(componentId)) {
            return true;
        }
        return false;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL25ldHdvcmsvZmlsdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxXQUFXLEVBQ1gsd0JBQXdCLEVBQ3hCLGVBQWUsRUFDZixjQUFjLElBQUksZUFBZSxFQUNqQyxhQUFhLElBQUksY0FBYyxFQUMvQixhQUFhLElBQUksY0FBYyxFQUVoQyxNQUFNLFVBQVUsQ0FBQTtBQUNqQixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxTQUFTLENBQUE7QUFFakQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxNQUFlO0lBQ3hDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBMEIsQ0FBQTtJQUM5RixNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQTJCLENBQUE7SUFFakcsT0FBTyxVQUFVLE9BQWdEO1FBQy9ELE1BQU0sV0FBVyxHQUFJLE9BQWUsQ0FBQyxXQUFXLENBQUE7UUFFaEQsSUFBSSx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDakQsT0FBTyxLQUFLLENBQUE7U0FDYjtRQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxXQUFXLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUU3RCwwQ0FBMEM7UUFDMUMsSUFBSSxRQUFRLEdBQUcsd0JBQXdCLEVBQUU7WUFDdkMsT0FBTyxLQUFLLENBQUE7U0FDYjtRQUVELE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ3pELCtCQUErQjtRQUMvQixJQUNFLE9BQU8sQ0FBQyxJQUFJLEtBQUssZUFBZSxDQUFDLHFCQUFxQjtZQUN0RCxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLGVBQWUsQ0FBQyxhQUFhLENBQUMsRUFDM0Q7WUFDQSxPQUFPLElBQUksQ0FBQTtTQUNaO1FBRUQsTUFBTSxJQUFJLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDdkQsSUFBSSxDQUFDLElBQUk7WUFBRSxPQUFPLEtBQUssQ0FBQTtRQUV2QixrQkFBa0I7UUFDbEIsSUFBSyxPQUFlLENBQUMsU0FBUyxJQUFJLENBQUMsRUFBRTtZQUNuQyxPQUFPLElBQUksQ0FBQTtTQUNaO1FBRUQsSUFBSSxXQUFXLEtBQUssYUFBYSxDQUFDLFdBQVcsRUFBRTtZQUM3QyxPQUFPLEtBQUssQ0FBQTtTQUNiO1FBRUQscUZBQXFGO1FBQ3JGLElBQUksV0FBVyxLQUFLLGNBQWMsQ0FBQyxXQUFXLElBQUksV0FBVyxLQUFLLGNBQWMsQ0FBQyxXQUFXLEVBQUU7WUFDNUYsT0FBTyxJQUFJLENBQUE7U0FDWjtRQUVELElBQUksV0FBVyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQzFELE9BQU8sSUFBSSxDQUFBO1NBQ1o7UUFFRCxPQUFPLEtBQUssQ0FBQTtJQUNkLENBQUMsQ0FBQTtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBUcmFuc3BvcnRNZXNzYWdlLFxuICBFbnRpdHlVdGlscyxcbiAgUkVTRVJWRURfU1RBVElDX0VOVElUSUVTLFxuICBDcmR0TWVzc2FnZVR5cGUsXG4gIFN5bmNDb21wb25lbnRzIGFzIF9TeW5jQ29tcG9uZW50cyxcbiAgTmV0d29ya0VudGl0eSBhcyBfTmV0d29ya0VudGl0eSxcbiAgTmV0d29ya1BhcmVudCBhcyBfTmV0d29ya1BhcmVudCxcbiAgSUVuZ2luZVxufSBmcm9tICdAZGNsL2VjcydcbmltcG9ydCB7IE5PVF9TWU5DX0NPTVBPTkVOVFNfSURTIH0gZnJvbSAnLi9zdGF0ZSdcblxuZXhwb3J0IGZ1bmN0aW9uIHN5bmNGaWx0ZXIoZW5naW5lOiBJRW5naW5lKSB7XG4gIGNvbnN0IE5ldHdvcmtFbnRpdHkgPSBlbmdpbmUuZ2V0Q29tcG9uZW50KF9OZXR3b3JrRW50aXR5LmNvbXBvbmVudElkKSBhcyB0eXBlb2YgX05ldHdvcmtFbnRpdHlcbiAgY29uc3QgU3luY0NvbXBvbmVudHMgPSBlbmdpbmUuZ2V0Q29tcG9uZW50KF9TeW5jQ29tcG9uZW50cy5jb21wb25lbnRJZCkgYXMgdHlwZW9mIF9TeW5jQ29tcG9uZW50c1xuXG4gIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZTogT21pdDxUcmFuc3BvcnRNZXNzYWdlLCAnbWVzc2FnZUJ1ZmZlcic+KSB7XG4gICAgY29uc3QgY29tcG9uZW50SWQgPSAobWVzc2FnZSBhcyBhbnkpLmNvbXBvbmVudElkXG5cbiAgICBpZiAoTk9UX1NZTkNfQ09NUE9ORU5UU19JRFMuaW5jbHVkZXMoY29tcG9uZW50SWQpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBjb25zdCBbZW50aXR5SWRdID0gRW50aXR5VXRpbHMuZnJvbUVudGl0eUlkKG1lc3NhZ2UuZW50aXR5SWQpXG5cbiAgICAvLyBmaWx0ZXIgbWVzc2FnZXMgZnJvbSByZXNlcnZlZCBlbnRpdGllcy5cbiAgICBpZiAoZW50aXR5SWQgPCBSRVNFUlZFRF9TVEFUSUNfRU5USVRJRVMpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGNvbnN0IG5ldHdvcmsgPSBOZXR3b3JrRW50aXR5LmdldE9yTnVsbChtZXNzYWdlLmVudGl0eUlkKVxuICAgIC8vIERlbGV0ZSBOZXR3b3JrIEVudGl0eSBBbHdheXNcbiAgICBpZiAoXG4gICAgICBtZXNzYWdlLnR5cGUgPT09IENyZHRNZXNzYWdlVHlwZS5ERUxFVEVfRU5USVRZX05FVFdPUksgfHxcbiAgICAgIChuZXR3b3JrICYmIG1lc3NhZ2UudHlwZSA9PT0gQ3JkdE1lc3NhZ2VUeXBlLkRFTEVURV9FTlRJVFkpXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGNvbnN0IHN5bmMgPSBTeW5jQ29tcG9uZW50cy5nZXRPck51bGwobWVzc2FnZS5lbnRpdHlJZClcbiAgICBpZiAoIXN5bmMpIHJldHVybiBmYWxzZVxuXG4gICAgLy8gRmlyc3QgY29tcG9uZW50XG4gICAgaWYgKChtZXNzYWdlIGFzIGFueSkudGltZXN0YW1wIDw9IDEpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgaWYgKGNvbXBvbmVudElkID09PSBOZXR3b3JrRW50aXR5LmNvbXBvbmVudElkKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSBpcyBhIGNoYW5nZSBpbiB0aGUgbmV0d29yayBwYXJlbnQgb3Igc3luY0NvbXBvbmVudHMgd2Ugc2hvdWxkIGFsd2F5cyBzeW5jXG4gICAgaWYgKGNvbXBvbmVudElkID09PSBfTmV0d29ya1BhcmVudC5jb21wb25lbnRJZCB8fCBjb21wb25lbnRJZCA9PT0gU3luY0NvbXBvbmVudHMuY29tcG9uZW50SWQpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgaWYgKGNvbXBvbmVudElkICYmIHN5bmMuY29tcG9uZW50SWRzLmluY2x1ZGVzKGNvbXBvbmVudElkKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuIl19