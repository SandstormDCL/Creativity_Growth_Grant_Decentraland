import { onCommsMessage } from './observables';
import * as communicationsController from '~system/CommunicationsController';
/**
 * @alpha
 * @deprecated this will only exist for a few releases in ECS7
 */
export class MessageBus {
    constructor() {
        this.messageQueue = [];
        this.flushing = false;
    }
    on(message, callback) {
        return onCommsMessage.add((e) => {
            try {
                const m = JSON.parse(e.message);
                if (m.message === message) {
                    callback(m.payload, e.sender);
                }
            }
            catch (_) { }
        });
    }
    // @internal
    sendRaw(message) {
        this.messageQueue.push(message);
        this.flush();
    }
    emit(message, payload) {
        const messageToSend = JSON.stringify({ message, payload });
        this.sendRaw(messageToSend);
        onCommsMessage.notifyObservers({ message: messageToSend, sender: 'self' });
    }
    flush() {
        if (!this.messageQueue.length)
            return;
        if (this.flushing)
            return;
        const message = this.messageQueue.shift();
        communicationsController.send({ message }).then((_) => {
            this.flushing = false;
            this.flush();
        }, (_) => {
            this.flushing = false;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS1idXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzcmMvbWVzc2FnZS1idXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFXLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUN2RCxPQUFPLEtBQUssd0JBQXdCLE1BQU0sa0NBQWtDLENBQUE7QUFFNUU7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLFVBQVU7SUFJckI7UUFIUSxpQkFBWSxHQUFhLEVBQUUsQ0FBQTtRQUMzQixhQUFRLEdBQUcsS0FBSyxDQUFBO0lBRVQsQ0FBQztJQUVoQixFQUFFLENBQUMsT0FBZSxFQUFFLFFBQThDO1FBQ2hFLE9BQU8sY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQzlCLElBQUk7Z0JBQ0YsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUE7Z0JBRS9CLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxPQUFPLEVBQUU7b0JBQ3pCLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtpQkFDOUI7YUFDRjtZQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUU7UUFDaEIsQ0FBQyxDQUFFLENBQUE7SUFDTCxDQUFDO0lBRUQsWUFBWTtJQUNaLE9BQU8sQ0FBQyxPQUFlO1FBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRS9CLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUNkLENBQUM7SUFDRCxJQUFJLENBQUMsT0FBZSxFQUFFLE9BQXlCO1FBQzdDLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUMxRCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBQzNCLGNBQWMsQ0FBQyxlQUFlLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFBO0lBQzVFLENBQUM7SUFFTyxLQUFLO1FBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTTtZQUFFLE9BQU07UUFDckMsSUFBSSxJQUFJLENBQUMsUUFBUTtZQUFFLE9BQU07UUFFekIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUcsQ0FBQTtRQUMxQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDN0MsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUNKLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFBO1lBQ3JCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNkLENBQUMsRUFDRCxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ0osSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUE7UUFDdkIsQ0FBQyxDQUNGLENBQUE7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZlciB9IGZyb20gJy4vaW50ZXJuYWwvT2JzZXJ2YWJsZSdcbmltcG9ydCB7IElFdmVudHMsIG9uQ29tbXNNZXNzYWdlIH0gZnJvbSAnLi9vYnNlcnZhYmxlcydcbmltcG9ydCAqIGFzIGNvbW11bmljYXRpb25zQ29udHJvbGxlciBmcm9tICd+c3lzdGVtL0NvbW11bmljYXRpb25zQ29udHJvbGxlcidcblxuLyoqXG4gKiBAYWxwaGFcbiAqIEBkZXByZWNhdGVkIHRoaXMgd2lsbCBvbmx5IGV4aXN0IGZvciBhIGZldyByZWxlYXNlcyBpbiBFQ1M3XG4gKi9cbmV4cG9ydCBjbGFzcyBNZXNzYWdlQnVzIHtcbiAgcHJpdmF0ZSBtZXNzYWdlUXVldWU6IHN0cmluZ1tdID0gW11cbiAgcHJpdmF0ZSBmbHVzaGluZyA9IGZhbHNlXG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIG9uKG1lc3NhZ2U6IHN0cmluZywgY2FsbGJhY2s6ICh2YWx1ZTogYW55LCBzZW5kZXI6IHN0cmluZykgPT4gdm9pZCk6IE9ic2VydmVyPElFdmVudHNbJ2NvbW1zJ10+IHtcbiAgICByZXR1cm4gb25Db21tc01lc3NhZ2UuYWRkKChlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBtID0gSlNPTi5wYXJzZShlLm1lc3NhZ2UpXG5cbiAgICAgICAgaWYgKG0ubWVzc2FnZSA9PT0gbWVzc2FnZSkge1xuICAgICAgICAgIGNhbGxiYWNrKG0ucGF5bG9hZCwgZS5zZW5kZXIpXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKF8pIHt9XG4gICAgfSkhXG4gIH1cblxuICAvLyBAaW50ZXJuYWxcbiAgc2VuZFJhdyhtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICB0aGlzLm1lc3NhZ2VRdWV1ZS5wdXNoKG1lc3NhZ2UpXG5cbiAgICB0aGlzLmZsdXNoKClcbiAgfVxuICBlbWl0KG1lc3NhZ2U6IHN0cmluZywgcGF5bG9hZDogUmVjb3JkPGFueSwgYW55Pikge1xuICAgIGNvbnN0IG1lc3NhZ2VUb1NlbmQgPSBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2UsIHBheWxvYWQgfSlcbiAgICB0aGlzLnNlbmRSYXcobWVzc2FnZVRvU2VuZClcbiAgICBvbkNvbW1zTWVzc2FnZS5ub3RpZnlPYnNlcnZlcnMoeyBtZXNzYWdlOiBtZXNzYWdlVG9TZW5kLCBzZW5kZXI6ICdzZWxmJyB9KVxuICB9XG5cbiAgcHJpdmF0ZSBmbHVzaCgpIHtcbiAgICBpZiAoIXRoaXMubWVzc2FnZVF1ZXVlLmxlbmd0aCkgcmV0dXJuXG4gICAgaWYgKHRoaXMuZmx1c2hpbmcpIHJldHVyblxuXG4gICAgY29uc3QgbWVzc2FnZSA9IHRoaXMubWVzc2FnZVF1ZXVlLnNoaWZ0KCkhXG4gICAgY29tbXVuaWNhdGlvbnNDb250cm9sbGVyLnNlbmQoeyBtZXNzYWdlIH0pLnRoZW4oXG4gICAgICAoXykgPT4ge1xuICAgICAgICB0aGlzLmZsdXNoaW5nID0gZmFsc2VcbiAgICAgICAgdGhpcy5mbHVzaCgpXG4gICAgICB9LFxuICAgICAgKF8pID0+IHtcbiAgICAgICAgdGhpcy5mbHVzaGluZyA9IGZhbHNlXG4gICAgICB9XG4gICAgKVxuICB9XG59XG4iXX0=