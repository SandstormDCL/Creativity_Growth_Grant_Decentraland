export function getEthereumProvider(sendAsync) {
    async function request(message) {
        const response = await sendAsync({
            id: message.id,
            method: message.method,
            jsonParams: JSON.stringify(message.params)
        });
        return JSON.parse(response.jsonAnyResponse);
    }
    return {
        // @internal
        send(message, callback) {
            if (message && callback && callback instanceof Function) {
                request(message)
                    .then((x) => callback(null, x))
                    .catch(callback);
            }
            else {
                throw new Error('Decentraland provider only allows async calls');
            }
        },
        sendAsync(message, callback) {
            request(message)
                .then((x) => callback(null, x))
                .catch(callback);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW50ZXJuYWwvcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUJBLE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxTQUF3QjtJQUMxRCxLQUFLLFVBQVUsT0FBTyxDQUFDLE9BQTJCO1FBQ2hELE1BQU0sUUFBUSxHQUFHLE1BQU0sU0FBUyxDQUFDO1lBQy9CLEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRTtZQUNkLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtZQUN0QixVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1NBQzNDLENBQUMsQ0FBQTtRQUNGLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUE7SUFDN0MsQ0FBQztJQUVELE9BQU87UUFDTCxZQUFZO1FBQ1osSUFBSSxDQUFDLE9BQTJCLEVBQUUsUUFBc0Q7WUFDdEYsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFFBQVEsWUFBWSxRQUFRLEVBQUU7Z0JBQ3ZELE9BQU8sQ0FBQyxPQUFPLENBQUM7cUJBQ2IsSUFBSSxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO3FCQUNuQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7YUFDbkI7aUJBQU07Z0JBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFBO2FBQ2pFO1FBQ0gsQ0FBQztRQUNELFNBQVMsQ0FBQyxPQUEyQixFQUFFLFFBQXFEO1lBQzFGLE9BQU8sQ0FBQyxPQUFPLENBQUM7aUJBQ2IsSUFBSSxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUNuQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDcEIsQ0FBQztLQUNGLENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBTZW5kQXN5bmNSZXNwb25zZSB7XG4gIGpzb25BbnlSZXNwb25zZTogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VuZEFzeW5jUmVxdWVzdCB7XG4gIGlkOiBudW1iZXJcbiAgbWV0aG9kOiBzdHJpbmdcbiAganNvblBhcmFtczogc3RyaW5nXG59XG5cbmV4cG9ydCB0eXBlIFJQQ1NlbmRhYmxlTWVzc2FnZSA9IHtcbiAganNvbnJwYzogJzIuMCdcbiAgaWQ6IG51bWJlclxuICBtZXRob2Q6IHN0cmluZ1xuICBwYXJhbXM6IGFueVtdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZURpY3Qge1xuICBba2V5OiBzdHJpbmddOiBzdHJpbmdcbn1cblxuZXhwb3J0IHR5cGUgU2VuZEFzeW5jVHlwZSA9IChwYXJhbXM6IFNlbmRBc3luY1JlcXVlc3QpID0+IFByb21pc2U8U2VuZEFzeW5jUmVzcG9uc2U+XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFdGhlcmV1bVByb3ZpZGVyKHNlbmRBc3luYzogU2VuZEFzeW5jVHlwZSkge1xuICBhc3luYyBmdW5jdGlvbiByZXF1ZXN0KG1lc3NhZ2U6IFJQQ1NlbmRhYmxlTWVzc2FnZSkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc2VuZEFzeW5jKHtcbiAgICAgIGlkOiBtZXNzYWdlLmlkLFxuICAgICAgbWV0aG9kOiBtZXNzYWdlLm1ldGhvZCxcbiAgICAgIGpzb25QYXJhbXM6IEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UucGFyYW1zKVxuICAgIH0pXG4gICAgcmV0dXJuIEpTT04ucGFyc2UocmVzcG9uc2UuanNvbkFueVJlc3BvbnNlKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAvLyBAaW50ZXJuYWxcbiAgICBzZW5kKG1lc3NhZ2U6IFJQQ1NlbmRhYmxlTWVzc2FnZSwgY2FsbGJhY2s/OiAoZXJyb3I6IEVycm9yIHwgbnVsbCwgcmVzdWx0PzogYW55KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgICBpZiAobWVzc2FnZSAmJiBjYWxsYmFjayAmJiBjYWxsYmFjayBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICAgIHJlcXVlc3QobWVzc2FnZSlcbiAgICAgICAgICAudGhlbigoeDogYW55KSA9PiBjYWxsYmFjayhudWxsLCB4KSlcbiAgICAgICAgICAuY2F0Y2goY2FsbGJhY2spXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RlY2VudHJhbGFuZCBwcm92aWRlciBvbmx5IGFsbG93cyBhc3luYyBjYWxscycpXG4gICAgICB9XG4gICAgfSxcbiAgICBzZW5kQXN5bmMobWVzc2FnZTogUlBDU2VuZGFibGVNZXNzYWdlLCBjYWxsYmFjazogKGVycm9yOiBFcnJvciB8IG51bGwsIHJlc3VsdD86IGFueSkgPT4gdm9pZCk6IHZvaWQge1xuICAgICAgcmVxdWVzdChtZXNzYWdlKVxuICAgICAgICAudGhlbigoeDogYW55KSA9PiBjYWxsYmFjayhudWxsLCB4KSlcbiAgICAgICAgLmNhdGNoKGNhbGxiYWNrKVxuICAgIH1cbiAgfVxufVxuIl19