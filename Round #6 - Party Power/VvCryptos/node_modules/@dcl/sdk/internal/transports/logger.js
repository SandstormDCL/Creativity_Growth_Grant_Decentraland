import { CrdtMessageType } from '@dcl/ecs';
import { ReadWriteByteBuffer } from '@dcl/ecs/dist/serialization/ByteBuffer';
import { readMessage } from '@dcl/ecs/dist/serialization/crdt/message';
export function* serializeCrdtMessages(prefix, data, engine) {
    const buffer = new ReadWriteByteBuffer(data);
    let message;
    while ((message = readMessage(buffer))) {
        const ent = message.entityId;
        const preface = `${prefix}: ${CrdtMessageType[message.type]} e=${ent}`;
        if (message.type === CrdtMessageType.DELETE_ENTITY || message.type === CrdtMessageType.DELETE_ENTITY_NETWORK) {
            yield `${preface}`;
        }
        if (message.type === CrdtMessageType.PUT_COMPONENT ||
            message.type === CrdtMessageType.PUT_COMPONENT_NETWORK ||
            message.type === CrdtMessageType.DELETE_COMPONENT_NETWORK ||
            message.type === CrdtMessageType.DELETE_COMPONENT ||
            message.type === CrdtMessageType.APPEND_VALUE) {
            const { componentId, timestamp } = message;
            const data = 'data' in message ? message.data : undefined;
            try {
                const c = engine.getComponent(componentId);
                yield `${preface} c=${c.componentName} t=${timestamp} data=${JSON.stringify((data && c.schema.deserialize(new ReadWriteByteBuffer(data))) || null)}`;
            }
            catch {
                yield `${preface} c=${componentId} t=${timestamp} data=?`;
            }
        }
        else if (message.type === CrdtMessageType.DELETE_ENTITY ||
            message.type === CrdtMessageType.DELETE_ENTITY_NETWORK) {
            yield preface;
        }
        else {
            yield `${preface} Unknown CrdtMessageType`;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ludGVybmFsL3RyYW5zcG9ydHMvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBd0IsZUFBZSxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQ2hFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFBO0FBQzVFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQTtBQUV0RSxNQUFNLFNBQVMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLE1BQWMsRUFBRSxJQUFnQixFQUFFLE1BQWU7SUFDdEYsTUFBTSxNQUFNLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUU1QyxJQUFJLE9BQTJCLENBQUE7SUFFL0IsT0FBTyxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRTtRQUN0QyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFBO1FBQzVCLE1BQU0sT0FBTyxHQUFHLEdBQUcsTUFBTSxLQUFLLGVBQWUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUE7UUFDdEUsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLGVBQWUsQ0FBQyxhQUFhLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxlQUFlLENBQUMscUJBQXFCLEVBQUU7WUFDNUcsTUFBTSxHQUFHLE9BQU8sRUFBRSxDQUFBO1NBQ25CO1FBRUQsSUFDRSxPQUFPLENBQUMsSUFBSSxLQUFLLGVBQWUsQ0FBQyxhQUFhO1lBQzlDLE9BQU8sQ0FBQyxJQUFJLEtBQUssZUFBZSxDQUFDLHFCQUFxQjtZQUN0RCxPQUFPLENBQUMsSUFBSSxLQUFLLGVBQWUsQ0FBQyx3QkFBd0I7WUFDekQsT0FBTyxDQUFDLElBQUksS0FBSyxlQUFlLENBQUMsZ0JBQWdCO1lBQ2pELE9BQU8sQ0FBQyxJQUFJLEtBQUssZUFBZSxDQUFDLFlBQVksRUFDN0M7WUFDQSxNQUFNLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxHQUFHLE9BQU8sQ0FBQTtZQUMxQyxNQUFNLElBQUksR0FBRyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUE7WUFFekQsSUFBSTtnQkFDRixNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFBO2dCQUMxQyxNQUFNLEdBQUcsT0FBTyxNQUFNLENBQUMsQ0FBQyxhQUFhLE1BQU0sU0FBUyxTQUFTLElBQUksQ0FBQyxTQUFTLENBQ3pFLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FDdEUsRUFBRSxDQUFBO2FBQ0o7WUFBQyxNQUFNO2dCQUNOLE1BQU0sR0FBRyxPQUFPLE1BQU0sV0FBVyxNQUFNLFNBQVMsU0FBUyxDQUFBO2FBQzFEO1NBQ0Y7YUFBTSxJQUNMLE9BQU8sQ0FBQyxJQUFJLEtBQUssZUFBZSxDQUFDLGFBQWE7WUFDOUMsT0FBTyxDQUFDLElBQUksS0FBSyxlQUFlLENBQUMscUJBQXFCLEVBQ3REO1lBQ0EsTUFBTSxPQUFPLENBQUE7U0FDZDthQUFNO1lBQ0wsTUFBTSxHQUFHLE9BQU8sMEJBQTBCLENBQUE7U0FDM0M7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRW5naW5lLCBDcmR0TWVzc2FnZSwgQ3JkdE1lc3NhZ2VUeXBlIH0gZnJvbSAnQGRjbC9lY3MnXG5pbXBvcnQgeyBSZWFkV3JpdGVCeXRlQnVmZmVyIH0gZnJvbSAnQGRjbC9lY3MvZGlzdC9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInXG5pbXBvcnQgeyByZWFkTWVzc2FnZSB9IGZyb20gJ0BkY2wvZWNzL2Rpc3Qvc2VyaWFsaXphdGlvbi9jcmR0L21lc3NhZ2UnXG5cbmV4cG9ydCBmdW5jdGlvbiogc2VyaWFsaXplQ3JkdE1lc3NhZ2VzKHByZWZpeDogc3RyaW5nLCBkYXRhOiBVaW50OEFycmF5LCBlbmdpbmU6IElFbmdpbmUpIHtcbiAgY29uc3QgYnVmZmVyID0gbmV3IFJlYWRXcml0ZUJ5dGVCdWZmZXIoZGF0YSlcblxuICBsZXQgbWVzc2FnZTogQ3JkdE1lc3NhZ2UgfCBudWxsXG5cbiAgd2hpbGUgKChtZXNzYWdlID0gcmVhZE1lc3NhZ2UoYnVmZmVyKSkpIHtcbiAgICBjb25zdCBlbnQgPSBtZXNzYWdlLmVudGl0eUlkXG4gICAgY29uc3QgcHJlZmFjZSA9IGAke3ByZWZpeH06ICR7Q3JkdE1lc3NhZ2VUeXBlW21lc3NhZ2UudHlwZV19IGU9JHtlbnR9YFxuICAgIGlmIChtZXNzYWdlLnR5cGUgPT09IENyZHRNZXNzYWdlVHlwZS5ERUxFVEVfRU5USVRZIHx8IG1lc3NhZ2UudHlwZSA9PT0gQ3JkdE1lc3NhZ2VUeXBlLkRFTEVURV9FTlRJVFlfTkVUV09SSykge1xuICAgICAgeWllbGQgYCR7cHJlZmFjZX1gXG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgbWVzc2FnZS50eXBlID09PSBDcmR0TWVzc2FnZVR5cGUuUFVUX0NPTVBPTkVOVCB8fFxuICAgICAgbWVzc2FnZS50eXBlID09PSBDcmR0TWVzc2FnZVR5cGUuUFVUX0NPTVBPTkVOVF9ORVRXT1JLIHx8XG4gICAgICBtZXNzYWdlLnR5cGUgPT09IENyZHRNZXNzYWdlVHlwZS5ERUxFVEVfQ09NUE9ORU5UX05FVFdPUksgfHxcbiAgICAgIG1lc3NhZ2UudHlwZSA9PT0gQ3JkdE1lc3NhZ2VUeXBlLkRFTEVURV9DT01QT05FTlQgfHxcbiAgICAgIG1lc3NhZ2UudHlwZSA9PT0gQ3JkdE1lc3NhZ2VUeXBlLkFQUEVORF9WQUxVRVxuICAgICkge1xuICAgICAgY29uc3QgeyBjb21wb25lbnRJZCwgdGltZXN0YW1wIH0gPSBtZXNzYWdlXG4gICAgICBjb25zdCBkYXRhID0gJ2RhdGEnIGluIG1lc3NhZ2UgPyBtZXNzYWdlLmRhdGEgOiB1bmRlZmluZWRcblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYyA9IGVuZ2luZS5nZXRDb21wb25lbnQoY29tcG9uZW50SWQpXG4gICAgICAgIHlpZWxkIGAke3ByZWZhY2V9IGM9JHtjLmNvbXBvbmVudE5hbWV9IHQ9JHt0aW1lc3RhbXB9IGRhdGE9JHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAoZGF0YSAmJiBjLnNjaGVtYS5kZXNlcmlhbGl6ZShuZXcgUmVhZFdyaXRlQnl0ZUJ1ZmZlcihkYXRhKSkpIHx8IG51bGxcbiAgICAgICAgKX1gXG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgeWllbGQgYCR7cHJlZmFjZX0gYz0ke2NvbXBvbmVudElkfSB0PSR7dGltZXN0YW1wfSBkYXRhPT9gXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIG1lc3NhZ2UudHlwZSA9PT0gQ3JkdE1lc3NhZ2VUeXBlLkRFTEVURV9FTlRJVFkgfHxcbiAgICAgIG1lc3NhZ2UudHlwZSA9PT0gQ3JkdE1lc3NhZ2VUeXBlLkRFTEVURV9FTlRJVFlfTkVUV09SS1xuICAgICkge1xuICAgICAgeWllbGQgcHJlZmFjZVxuICAgIH0gZWxzZSB7XG4gICAgICB5aWVsZCBgJHtwcmVmYWNlfSBVbmtub3duIENyZHRNZXNzYWdlVHlwZWBcbiAgICB9XG4gIH1cbn1cbiJdfQ==