import { Observable } from './internal/Observable';
import { AvatarBase, AvatarEmoteCommand, AvatarEquippedData, PlayerIdentityData, PointerEventsResult, RealmInfo, engine } from '@dcl/ecs';
import { subscribe } from '~system/EngineApi';
import players from './players';
/**
 * @internal
 * This function generates a callback that is passed to the Observable
 * constructor to subscribe to the events of the DecentralandInterface
 */
function createSubscriber(eventName) {
    return () => {
        if (eventName === 'comms') {
            subscribe({ eventId: eventName }).catch(console.error);
        }
        else {
            SDK7ComponentsObservable?.subscribe(eventName);
        }
    };
}
/**
 * These events are triggered after your character enters the scene.
 * @public
 * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.
 */
export const onEnterSceneObservable = new Observable(createSubscriber('onEnterScene'));
/** @public
 * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.
 * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed. Use onEnterSceneObservable instead. */
export const onEnterScene = onEnterSceneObservable;
/**
 * These events are triggered after your character leaves the scene.
 * @public
 * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.
 */
export const onLeaveSceneObservable = new Observable(createSubscriber('onLeaveScene'));
/** @public
 * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.
 * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed. Use onLeaveSceneObservable instead. */
export const onLeaveScene = onLeaveSceneObservable;
/**
 * This event is triggered after all the resources of the scene were loaded (models, textures, etc...)
 * @public
 * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.
 */
export const onSceneReadyObservable = new Observable(createSubscriber('sceneStart'));
/**
 * @public
 * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.
 */
export const onPlayerExpressionObservable = new Observable(createSubscriber('playerExpression'));
/**
 * @public
 * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.
 */
export const onVideoEvent = new Observable(createSubscriber('videoEvent'));
/**
 * @public
 * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.
 */
export const onProfileChanged = new Observable(createSubscriber('profileChanged'));
/**
 * @public
 * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.
 */
export const onPlayerConnectedObservable = new Observable(createSubscriber('playerConnected'));
/**
 * @public
 * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.
 */
export const onPlayerDisconnectedObservable = new Observable(createSubscriber('playerDisconnected'));
/**
 * @public
 * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.
 */
export const onRealmChangedObservable = new Observable(createSubscriber('onRealmChanged'));
/**
 * @public
 * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.
 */
export const onPlayerClickedObservable = new Observable(createSubscriber('playerClicked'));
/**
 * @internal
 * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.
 */
export const onCommsMessage = new Observable(createSubscriber('comms'));
/**
 * @internal
 * @deprecated this is an OLD API.
 * This function uses the SDK6 sendBatch to poll events from the renderer
 */
export async function pollEvents(sendBatch) {
    const { events } = await sendBatch({ actions: [] });
    for (const e of events) {
        if (e.generic) {
            const data = JSON.parse(e.generic.eventData);
            switch (e.generic.eventId) {
                case 'comms': {
                    onCommsMessage.notifyObservers(data);
                    break;
                }
            }
        }
    }
}
const SDK7ComponentsObservable = processObservables();
function processObservables() {
    const subscriptions = new Set();
    function subscribe(eventName) {
        if (subscriptions.has(eventName))
            return;
        switch (eventName) {
            case 'playerClicked': {
                subscribePlayerClick();
            }
            case 'onEnterScene':
            case 'playerConnected': {
                subscribeEnterScene();
            }
            case 'onLeaveScene':
            case 'playerDisconnected': {
                subscribeLeaveScene();
            }
            case 'onRealmChanged': {
                subscribeRealmChange();
            }
            case 'playerExpression': {
                subscribePlayerExpression();
            }
            case 'profileChanged': {
                subscribeProfileChange();
            }
        }
        subscriptions.add(eventName);
    }
    /**
     * PLAYER ENTER/CONNECTED observable
     */
    function subscribeEnterScene() {
        players.onEnterScene((player) => {
            if (subscriptions.has('onEnterScene')) {
                onEnterSceneObservable.notifyObservers({ userId: player.userId });
            }
            if (subscriptions.has('playerConnected')) {
                onPlayerConnectedObservable.notifyObservers({ userId: player.userId });
            }
        });
    }
    /**
     * PLAYER LEAVE/DISCONNECTED observable
     */
    function subscribeLeaveScene() {
        players.onLeaveScene((userId) => {
            if (subscriptions.has('onLeaveScene')) {
                onLeaveSceneObservable.notifyObservers({ userId });
            }
            if (subscriptions.has('playerDisconnected')) {
                onPlayerDisconnectedObservable.notifyObservers({ userId });
            }
        });
    }
    /**
     * REALM CHANGE observable
     */
    function subscribeRealmChange() {
        RealmInfo.onChange(engine.RootEntity, (value) => {
            if (value) {
                onRealmChangedObservable.notifyObservers({
                    domain: value.baseUrl,
                    displayName: value.realmName,
                    room: value.room ?? '',
                    serverName: value.realmName
                });
            }
        });
    }
    /**
     * PLAYER/AVATAR CLICKED observable
     */
    function subscribePlayerClick() {
        const playerEntities = new Set();
        engine.addSystem(() => {
            for (const [entity] of engine.getEntitiesWith(PlayerIdentityData)) {
                if (playerEntities.has(entity))
                    return;
                playerEntities.add(entity);
                PointerEventsResult.onChange(entity, (data) => {
                    if (data?.hit) {
                        onPlayerClickedObservable.notifyObservers({
                            userId: PlayerIdentityData.getOrNull(entity)?.address ?? '',
                            ray: {
                                direction: data.hit.direction,
                                distance: data.hit.length,
                                origin: data.hit.globalOrigin
                            }
                        });
                    }
                });
            }
        });
    }
    /**
     * Player expression observable
     */
    function subscribePlayerExpression() {
        AvatarEmoteCommand.onChange(engine.PlayerEntity, (value) => {
            onPlayerExpressionObservable.notifyObservers({ expressionId: value?.emoteUrn ?? '' });
        });
    }
    /**
     * PROFILE CHANGE observable
     */
    function subscribeProfileChange() {
        AvatarBase.onChange(engine.PlayerEntity, () => {
            if (!profileAddress)
                return;
            onProfileChanged.notifyObservers({ ethAddress: profileAddress, version: 0 });
        });
        AvatarEquippedData.onChange(engine.PlayerEntity, () => {
            if (!profileAddress)
                return;
            onProfileChanged.notifyObservers({ ethAddress: profileAddress, version: 0 });
        });
    }
    // Flag to call once the scene is initalized.
    let sceneReady = false;
    let profileAddress;
    function observableSystem() {
        if (sceneReady && profileAddress) {
            return engine.removeSystem(observableSystem);
        }
        if (!sceneReady) {
            sceneReady = true;
            onSceneReadyObservable.notifyObservers({});
        }
        if (profileAddress)
            return;
        profileAddress = PlayerIdentityData.getOrNull(engine.PlayerEntity)?.address;
    }
    engine.addSystem(observableSystem);
    return { subscribe };
}
//# sourceMappingURL=data:application/json;base64,