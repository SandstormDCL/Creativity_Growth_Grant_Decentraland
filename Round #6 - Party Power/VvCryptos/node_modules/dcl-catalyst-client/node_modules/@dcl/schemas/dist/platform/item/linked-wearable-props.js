"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mapping = exports.MultipleMapping = exports.RangeMapping = exports.AnyMapping = exports.SingleMapping = exports.MappingType = void 0;
const validation_1 = require("../../validation");
/**
 * MappingType
 * @alpha
 */
var MappingType;
(function (MappingType) {
    MappingType["SINGLE"] = "single";
    MappingType["ANY"] = "any";
    MappingType["MULTIPLE"] = "multiple";
    MappingType["RANGE"] = "range";
})(MappingType = exports.MappingType || (exports.MappingType = {}));
/**
 * SingleMapping
 * @alpha
 */
var SingleMapping;
(function (SingleMapping) {
    SingleMapping.schema = {
        type: 'object',
        properties: {
            type: { type: 'string', const: MappingType.SINGLE },
            id: { type: 'string', pattern: '^[0-9]+$' }
        },
        required: ['type', 'id'],
        additionalProperties: false
    };
    SingleMapping.validate = (0, validation_1.generateLazyValidator)(SingleMapping.schema);
})(SingleMapping = exports.SingleMapping || (exports.SingleMapping = {}));
/**
 * AnyMapping
 * @alpha
 */
var AnyMapping;
(function (AnyMapping) {
    AnyMapping.schema = {
        type: 'object',
        properties: {
            type: { type: 'string', const: MappingType.ANY }
        },
        required: ['type'],
        additionalProperties: false
    };
    AnyMapping.validate = (0, validation_1.generateLazyValidator)(AnyMapping.schema);
})(AnyMapping = exports.AnyMapping || (exports.AnyMapping = {}));
/**
 * RangeMapping
 * @alpha
 */
var RangeMapping;
(function (RangeMapping) {
    RangeMapping._fromLessThanOrEqualTo = {
        keyword: '_fromLessThanOrEqualTo',
        validate: function validate(schema, data) {
            if (!data || !data.from || !data.to) {
                return false;
            }
            let { to, from } = data;
            if (typeof from !== 'bigint' || typeof to !== 'bigint') {
                from = BigInt(from);
                to = BigInt(to);
            }
            return from <= to;
        },
        errors: false
    };
    RangeMapping.schema = {
        type: 'object',
        properties: {
            type: { type: 'string', const: MappingType.RANGE },
            from: { type: 'string', pattern: '^[0-9]+$' },
            to: { type: 'string', pattern: '^[0-9]+$' }
        },
        required: ['type', 'from', 'to'],
        additionalProperties: false,
        _fromLessThanOrEqualTo: true
    };
    RangeMapping.validate = (0, validation_1.generateLazyValidator)(RangeMapping.schema, [RangeMapping._fromLessThanOrEqualTo]);
})(RangeMapping = exports.RangeMapping || (exports.RangeMapping = {}));
/**
 * MultipleMapping
 * @alpha
 */
var MultipleMapping;
(function (MultipleMapping) {
    MultipleMapping.schema = {
        type: 'object',
        properties: {
            type: { type: 'string', const: MappingType.MULTIPLE },
            ids: {
                type: 'array',
                items: {
                    type: 'string',
                    pattern: '^[0-9]+$'
                },
                minItems: 1,
                uniqueItems: true
            }
        },
        required: ['type', 'ids'],
        additionalProperties: false
    };
    MultipleMapping.validate = (0, validation_1.generateLazyValidator)(MultipleMapping.schema);
})(MultipleMapping = exports.MultipleMapping || (exports.MultipleMapping = {}));
/**
 * Mappings
 * @alpha
 */
var Mapping;
(function (Mapping) {
    Mapping.schema = {
        type: 'object',
        properties: {
            type: {
                type: 'string',
                enum: Object.values(MappingType)
            }
        },
        required: ['type'],
        oneOf: [SingleMapping.schema, AnyMapping.schema, RangeMapping.schema, MultipleMapping.schema]
    };
    Mapping.validate = (0, validation_1.generateLazyValidator)(Mapping.schema, [
        RangeMapping._fromLessThanOrEqualTo
    ]);
})(Mapping = exports.Mapping || (exports.Mapping = {}));
//# sourceMappingURL=linked-wearable-props.js.map