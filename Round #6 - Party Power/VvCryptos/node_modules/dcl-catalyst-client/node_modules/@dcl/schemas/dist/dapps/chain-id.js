"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNetwork = exports.getNetworkMapping = exports.getURNProtocol = exports.getChainName = exports.ChainId = void 0;
const validation_1 = require("../validation");
const chain_name_1 = require("./chain-name");
const network_1 = require("./network");
/**
 * Different supported chain ids
 * @alpha
 */
var ChainId;
(function (ChainId) {
    ChainId[ChainId["ETHEREUM_MAINNET"] = 1] = "ETHEREUM_MAINNET";
    ChainId[ChainId["ETHEREUM_ROPSTEN"] = 3] = "ETHEREUM_ROPSTEN";
    ChainId[ChainId["ETHEREUM_RINKEBY"] = 4] = "ETHEREUM_RINKEBY";
    ChainId[ChainId["ETHEREUM_GOERLI"] = 5] = "ETHEREUM_GOERLI";
    ChainId[ChainId["ETHEREUM_KOVAN"] = 42] = "ETHEREUM_KOVAN";
    ChainId[ChainId["ETHEREUM_SEPOLIA"] = 11155111] = "ETHEREUM_SEPOLIA";
    ChainId[ChainId["MATIC_MAINNET"] = 137] = "MATIC_MAINNET";
    ChainId[ChainId["MATIC_MUMBAI"] = 80001] = "MATIC_MUMBAI";
    ChainId[ChainId["MATIC_AMOY"] = 80002] = "MATIC_AMOY";
    ChainId[ChainId["BSC_MAINNET"] = 56] = "BSC_MAINNET";
    ChainId[ChainId["OPTIMISM_MAINNET"] = 10] = "OPTIMISM_MAINNET";
    ChainId[ChainId["ARBITRUM_MAINNET"] = 42161] = "ARBITRUM_MAINNET";
    ChainId[ChainId["FANTOM_MAINNET"] = 250] = "FANTOM_MAINNET";
    ChainId[ChainId["AVALANCHE_MAINNET"] = 43114] = "AVALANCHE_MAINNET";
})(ChainId = exports.ChainId || (exports.ChainId = {}));
/**
 * Get the chain name by chain id
 * @alpha
 */
function getChainName(chainId) {
    switch (chainId) {
        case ChainId.ETHEREUM_MAINNET:
            return chain_name_1.ChainName.ETHEREUM_MAINNET;
        case ChainId.ETHEREUM_ROPSTEN:
            return chain_name_1.ChainName.ETHEREUM_ROPSTEN;
        case ChainId.ETHEREUM_RINKEBY:
            return chain_name_1.ChainName.ETHEREUM_RINKEBY;
        case ChainId.ETHEREUM_GOERLI:
            return chain_name_1.ChainName.ETHEREUM_GOERLI;
        case ChainId.ETHEREUM_KOVAN:
            return chain_name_1.ChainName.ETHEREUM_KOVAN;
        case ChainId.ETHEREUM_SEPOLIA:
            return chain_name_1.ChainName.ETHEREUM_SEPOLIA;
        case ChainId.MATIC_MAINNET:
            return chain_name_1.ChainName.MATIC_MAINNET;
        case ChainId.MATIC_MUMBAI:
            return chain_name_1.ChainName.MATIC_MUMBAI;
        case ChainId.MATIC_AMOY:
            return chain_name_1.ChainName.MATIC_AMOY;
        case ChainId.BSC_MAINNET:
            return chain_name_1.ChainName.BINANCE_MAINNET;
        case ChainId.ARBITRUM_MAINNET:
            return chain_name_1.ChainName.ARBITRUM_MAINNET;
        case ChainId.OPTIMISM_MAINNET:
            return chain_name_1.ChainName.OPTIMISM_MAINNET;
        case ChainId.FANTOM_MAINNET:
            return chain_name_1.ChainName.FANTOM_MAINNET;
        case ChainId.AVALANCHE_MAINNET:
            return chain_name_1.ChainName.AVALANCHE_MAINNET;
        default:
            return null;
    }
}
exports.getChainName = getChainName;
/**
 * Get the chain name by chain id
 * @alpha
 */
function getURNProtocol(chainId) {
    switch (chainId) {
        case ChainId.ETHEREUM_MAINNET:
            return 'ethereum';
        case ChainId.ETHEREUM_ROPSTEN:
            return 'ropsten';
        case ChainId.ETHEREUM_RINKEBY:
            return 'rinkeby';
        case ChainId.ETHEREUM_GOERLI:
            return 'goerli';
        case ChainId.ETHEREUM_KOVAN:
            return 'kovan';
        case ChainId.ETHEREUM_SEPOLIA:
            return 'sepolia';
        case ChainId.MATIC_MAINNET:
            return 'matic';
        case ChainId.MATIC_MUMBAI:
            return 'mumbai';
        case ChainId.MATIC_AMOY:
            return 'amoy';
        default:
            return '';
    }
}
exports.getURNProtocol = getURNProtocol;
/**
 * Using a base chain id, it'll map the corresponding chain id for the ethereum and matic networks.
 * For example, if trying to determine which chain id is used to map Goerli in Matic you'd do:
 *    getNetworkMapping(ChainId.ETHEREUM_GOERLI)[Network.MATIC]
 * @alpha
 */
function getNetworkMapping(chainId) {
    const baseEVMCompatibleChains = {
        [network_1.Network.BSC]: ChainId.BSC_MAINNET,
        [network_1.Network.OPTIMISM]: ChainId.OPTIMISM_MAINNET,
        [network_1.Network.ARBITRUM]: ChainId.ARBITRUM_MAINNET,
        [network_1.Network.FANTOM]: ChainId.FANTOM_MAINNET,
        [network_1.Network.AVALANCHE]: ChainId.AVALANCHE_MAINNET
    };
    switch (chainId) {
        case ChainId.ETHEREUM_MAINNET:
            return Object.assign({ [network_1.Network.ETHEREUM]: ChainId.ETHEREUM_MAINNET, [network_1.Network.MATIC]: ChainId.MATIC_MAINNET }, baseEVMCompatibleChains);
        case ChainId.ETHEREUM_ROPSTEN:
            return Object.assign({ [network_1.Network.ETHEREUM]: ChainId.ETHEREUM_ROPSTEN, [network_1.Network.MATIC]: ChainId.MATIC_MUMBAI }, baseEVMCompatibleChains);
        case ChainId.ETHEREUM_RINKEBY:
            return Object.assign({ [network_1.Network.ETHEREUM]: ChainId.ETHEREUM_RINKEBY, [network_1.Network.MATIC]: ChainId.MATIC_MUMBAI }, baseEVMCompatibleChains);
        case ChainId.ETHEREUM_GOERLI:
            return Object.assign({ [network_1.Network.ETHEREUM]: ChainId.ETHEREUM_GOERLI, [network_1.Network.MATIC]: ChainId.MATIC_MUMBAI }, baseEVMCompatibleChains);
        case ChainId.ETHEREUM_KOVAN:
            return Object.assign({ [network_1.Network.ETHEREUM]: ChainId.ETHEREUM_KOVAN, [network_1.Network.MATIC]: ChainId.MATIC_MUMBAI }, baseEVMCompatibleChains);
        case ChainId.ETHEREUM_SEPOLIA:
            return Object.assign({ [network_1.Network.ETHEREUM]: ChainId.ETHEREUM_SEPOLIA, [network_1.Network.MATIC]: ChainId.MATIC_AMOY }, baseEVMCompatibleChains);
        case ChainId.MATIC_MAINNET:
            return Object.assign({ [network_1.Network.ETHEREUM]: ChainId.MATIC_MAINNET, [network_1.Network.MATIC]: ChainId.MATIC_MAINNET }, baseEVMCompatibleChains);
        case ChainId.MATIC_MUMBAI:
            return Object.assign({ [network_1.Network.ETHEREUM]: ChainId.MATIC_MUMBAI, [network_1.Network.MATIC]: ChainId.MATIC_MUMBAI }, baseEVMCompatibleChains);
        case ChainId.MATIC_AMOY:
            return Object.assign({ [network_1.Network.ETHEREUM]: ChainId.MATIC_AMOY, [network_1.Network.MATIC]: ChainId.MATIC_AMOY }, baseEVMCompatibleChains);
        default:
            return Object.assign({ [network_1.Network.ETHEREUM]: ChainId.ETHEREUM_MAINNET, [network_1.Network.MATIC]: ChainId.MATIC_MAINNET }, baseEVMCompatibleChains);
    }
}
exports.getNetworkMapping = getNetworkMapping;
/**
 * Get's the network for a specific chain id
 * @alpha
 */
function getNetwork(chainId) {
    switch (chainId) {
        case ChainId.ETHEREUM_MAINNET:
        case ChainId.ETHEREUM_ROPSTEN:
        case ChainId.ETHEREUM_GOERLI:
        case ChainId.ETHEREUM_KOVAN:
        case ChainId.ETHEREUM_RINKEBY:
        case ChainId.ETHEREUM_SEPOLIA:
            return network_1.Network.ETHEREUM;
        case ChainId.MATIC_MAINNET:
        case ChainId.MATIC_MUMBAI:
        case ChainId.MATIC_AMOY:
            return network_1.Network.MATIC;
        case ChainId.BSC_MAINNET:
            return network_1.Network.BSC;
        case ChainId.OPTIMISM_MAINNET:
            return network_1.Network.OPTIMISM;
        case ChainId.ARBITRUM_MAINNET:
            return network_1.Network.ARBITRUM;
        case ChainId.FANTOM_MAINNET:
            return network_1.Network.FANTOM;
        case ChainId.AVALANCHE_MAINNET:
            return network_1.Network.AVALANCHE;
    }
}
exports.getNetwork = getNetwork;
/**
 * @alpha
 */
(function (ChainId) {
    ChainId.schema = {
        type: 'number',
        enum: Object.values(ChainId)
    };
    ChainId.validate = (0, validation_1.generateLazyValidator)(ChainId.schema);
})(ChainId = exports.ChainId || (exports.ChainId = {}));
//# sourceMappingURL=chain-id.js.map