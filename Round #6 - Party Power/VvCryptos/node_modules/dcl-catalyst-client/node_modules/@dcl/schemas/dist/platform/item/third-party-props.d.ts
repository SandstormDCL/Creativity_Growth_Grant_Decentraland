import { JSONSchema } from '../../validation';
import { MerkleProof } from '../merkle-tree';
import { BaseItem } from './base-item';
import { Mapping } from './linked-wearable-props';
export type ThirdPartyProps = {
    merkleProof: MerkleProof;
    content: Record<string, string>;
    mappings?: Mapping[];
};
export declare const thirdPartyProps: {
    readonly merkleProof: JSONSchema<MerkleProof>;
    readonly content: {
        readonly type: "object";
        readonly nullable: false;
        readonly additionalProperties: {
            readonly type: "string";
        };
        readonly required: any[];
    };
    readonly mappings: {
        readonly type: "array";
        readonly items: JSONSchema<Mapping>;
        readonly minItems: 1;
        readonly maxItems: 1;
        readonly nullable: true;
    };
};
export declare function isThirdParty<T extends BaseItem>(item: T): item is T & ThirdPartyProps;
//# sourceMappingURL=third-party-props.d.ts.map