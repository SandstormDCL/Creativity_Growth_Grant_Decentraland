"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChainId = exports.ChainName = void 0;
const validation_1 = require("../validation");
const chain_id_1 = require("./chain-id");
/**
 * Different supported chain names
 * @alpha
 */
var ChainName;
(function (ChainName) {
    ChainName["ETHEREUM_MAINNET"] = "Ethereum Mainnet";
    ChainName["ETHEREUM_ROPSTEN"] = "Ropsten";
    ChainName["ETHEREUM_RINKEBY"] = "Rinkeby";
    ChainName["ETHEREUM_GOERLI"] = "Goerli";
    ChainName["ETHEREUM_KOVAN"] = "Kovan";
    ChainName["ETHEREUM_SEPOLIA"] = "Sepolia";
    ChainName["MATIC_MAINNET"] = "Polygon";
    ChainName["MATIC_MUMBAI"] = "Mumbai";
    ChainName["MATIC_AMOY"] = "Amoy";
    ChainName["AVALANCHE_MAINNET"] = "Avalanche";
    ChainName["BINANCE_MAINNET"] = "Binance Smart Chain";
    ChainName["ARBITRUM_MAINNET"] = "Arbitrum";
    ChainName["OPTIMISM_MAINNET"] = "Optimism";
    ChainName["FANTOM_MAINNET"] = "Fantom";
})(ChainName = exports.ChainName || (exports.ChainName = {}));
/**
 * Get chain id by chain name
 * @alpha
 */
function getChainId(chainName) {
    switch (chainName) {
        case ChainName.ETHEREUM_MAINNET:
            return chain_id_1.ChainId.ETHEREUM_MAINNET;
        case ChainName.ETHEREUM_ROPSTEN:
            return chain_id_1.ChainId.ETHEREUM_ROPSTEN;
        case ChainName.ETHEREUM_RINKEBY:
            return chain_id_1.ChainId.ETHEREUM_RINKEBY;
        case ChainName.ETHEREUM_GOERLI:
            return chain_id_1.ChainId.ETHEREUM_GOERLI;
        case ChainName.ETHEREUM_KOVAN:
            return chain_id_1.ChainId.ETHEREUM_KOVAN;
        case ChainName.ETHEREUM_SEPOLIA:
            return chain_id_1.ChainId.ETHEREUM_SEPOLIA;
        case ChainName.MATIC_MAINNET:
            return chain_id_1.ChainId.MATIC_MAINNET;
        case ChainName.MATIC_MUMBAI:
            return chain_id_1.ChainId.MATIC_MUMBAI;
        case ChainName.MATIC_AMOY:
            return chain_id_1.ChainId.MATIC_AMOY;
        case ChainName.AVALANCHE_MAINNET:
            return chain_id_1.ChainId.AVALANCHE_MAINNET;
        case ChainName.BINANCE_MAINNET:
            return chain_id_1.ChainId.BSC_MAINNET;
        case ChainName.ARBITRUM_MAINNET:
            return chain_id_1.ChainId.ARBITRUM_MAINNET;
        case ChainName.OPTIMISM_MAINNET:
            return chain_id_1.ChainId.OPTIMISM_MAINNET;
        case ChainName.FANTOM_MAINNET:
            return chain_id_1.ChainId.FANTOM_MAINNET;
        default:
            return null;
    }
}
exports.getChainId = getChainId;
/**
 * @alpha
 */
(function (ChainName) {
    ChainName.schema = {
        type: 'string',
        enum: Object.values(ChainName)
    };
    ChainName.validate = (0, validation_1.generateLazyValidator)(ChainName.schema);
})(ChainName = exports.ChainName || (exports.ChainName = {}));
//# sourceMappingURL=chain-name.js.map