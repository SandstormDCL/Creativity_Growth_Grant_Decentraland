import { ClientOptions } from './types';
import * as client from './specs/lambdas-client';
export type LambdasClient = ReturnType<typeof createLambdasClient>;
export declare function createLambdasClient(options: ClientOptions): {
    getLambdaStatus: () => Promise<client.StatusLambdas>;
    getCollections: () => Promise<client.GetCollections200>;
    getThumbnail: (urn: string) => Promise<Blob>;
    getImage: (urn: string) => Promise<Blob>;
    getStandardErc721: (chainId: string, contract: string, option: string, emission: string) => Promise<client.Erc721>;
    getWearables: (address: string, params?: client.GetWearablesParams | undefined) => Promise<client.GetWearables200>;
    getEmotes: (address: string, params?: client.GetEmotesParams | undefined) => Promise<client.GetEmotes200>;
    getNames: (address: string, params?: client.GetNamesParams | undefined) => Promise<client.NamesPaginated>;
    getLands: (address: string, params?: client.GetLandsParams | undefined) => Promise<client.LandsPaginated>;
    getThirdPartyWearables: (address: string, params?: client.GetThirdPartyWearablesParams | undefined) => Promise<client.GetThirdPartyWearables200>;
    getThirdPartyCollection: (address: string, collectionId: string, params?: client.GetThirdPartyCollectionParams | undefined) => Promise<client.GetThirdPartyCollection200>;
    getHotScenes: () => Promise<client.HotScenes>;
    getRealms: () => Promise<client.Realms>;
    getAvatarsDetailsByPost: (postProfiles: client.PostProfiles) => Promise<client.Profile[]>;
    getAvatarDetails: (id: string) => Promise<client.Profile>;
    getThirdPartyIntegrations: () => Promise<client.ThirdPartyIntegrations>;
};
//# sourceMappingURL=LambdasClient.d.ts.map