"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLambdasClient = void 0;
const Helper_1 = require("./utils/Helper");
const client = __importStar(require("./specs/lambdas-client"));
function createLambdasClient(options) {
    const lambdasUrl = (0, Helper_1.sanitizeUrl)(options.url);
    function wrap(f) {
        return (...args) => {
            return f(...args)(lambdasUrl, options.fetcher);
        };
    }
    return {
        getLambdaStatus: wrap(client.getLambdaStatus),
        getCollections: wrap(client.getCollections),
        getThumbnail: wrap(client.getThumbnail),
        getImage: wrap(client.getImage),
        getStandardErc721: wrap(client.getStandardErc721),
        getWearables: wrap(client.getWearables),
        getEmotes: wrap(client.getEmotes),
        getNames: wrap(client.getNames),
        getLands: wrap(client.getLands),
        getThirdPartyWearables: wrap(client.getThirdPartyWearables),
        getThirdPartyCollection: wrap(client.getThirdPartyCollection),
        getHotScenes: wrap(client.getHotScenes),
        getRealms: wrap(client.getRealms),
        getAvatarsDetailsByPost: wrap(client.getAvatarsDetailsByPost),
        getAvatarDetails: wrap(client.getAvatarDetails),
        getThirdPartyIntegrations: wrap(client.getThirdPartyIntegrations)
    };
}
exports.createLambdasClient = createLambdasClient;
//# sourceMappingURL=LambdasClient.js.map