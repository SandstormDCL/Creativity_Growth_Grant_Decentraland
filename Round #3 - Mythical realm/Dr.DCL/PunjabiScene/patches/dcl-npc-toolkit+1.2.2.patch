diff --git a/node_modules/dcl-npc-toolkit/dist/ui.js b/node_modules/dcl-npc-toolkit/dist/ui.js
index e1236f3..5462f5c 100644
--- a/node_modules/dcl-npc-toolkit/dist/ui.js
+++ b/node_modules/dcl-npc-toolkit/dist/ui.js
@@ -92,21 +92,21 @@ function getScaledButtonWidth(button) {
     return typeof (getbuttonSize(button)) === 'number' ? getScaledSize(getbuttonSize(button)) : 'auto';
 }
 export const NpcUtilsUi = () => {
-    const width = getScaledSize(realWidth(700));
-    const height = getScaledSize(realHeight(284));
-    return (ReactEcs.createElement(UiEntity, { uiTransform: {
+    return (ReactEcs.createElement(UiEntity, {
+        uiTransform: {
             display: displayDialog() ? 'flex' : 'none',
             flexDirection: 'column',
             alignItems: 'center',
             justifyContent: 'center',
             positionType: 'absolute',
-            position: { bottom: '10%', left: '50%' },
-            margin: { top: -height / 2, left: -width / 2 },
+            position: { bottom: '10%', left: '25vw' },
             padding: { top: 40, bottom: 40 },
-            width,
-            height: typeof (getWindowHeight()) === 'number' ? getWindowHeight() : 'auto'
-        } },
-        ReactEcs.createElement(UiEntity, { uiTransform: {
+            width: '40vw',
+            height: '14vw'
+        }
+    },
+        ReactEcs.createElement(UiEntity, {
+            uiTransform: {
                 positionType: 'absolute',
                 position: { top: 0, left: 0 },
                 width: '100%',
@@ -114,28 +114,31 @@ export const NpcUtilsUi = () => {
             }, uiBackground: {
                 textureMode: 'stretch',
                 texture: {
-                    src: getTheme()
-                },
-                uvs: getImageAtlasMapping(section)
+                    src: 'images/Dialogue.png'
+                }
             }, onMouseDown: () => {
                 handleDialogClick();
-            } }),
-        ReactEcs.createElement(UiEntity, { uiTransform: {
+            }
+        }),
+        ReactEcs.createElement(UiEntity, {
+            uiTransform: {
                 display: displayPortrait() ? 'flex' : 'none',
-                width: getScaledSize(portraitWidth()),
-                height: getScaledSize(portraitHeight()),
+                width: '35%',
+                height: '70%',
                 positionType: 'absolute',
                 position: {
-                    bottom: getScaledSize(positionPortaitY()),
-                    left: getScaledSize(positionPortaitX())
+                    bottom: '15%',
+                    right: '70%'
                 }
             }, uiBackground: {
                 textureMode: 'stretch',
                 texture: {
                     src: getPortrait()
                 }
-            } }),
-        ReactEcs.createElement(UiEntity, { uiTransform: {
+            }
+        }),
+        ReactEcs.createElement(UiEntity, {
+            uiTransform: {
                 display: displayImage() ? 'flex' : 'none',
                 width: getScaledSize(imageWidth()),
                 height: getScaledSize(imageHeight()),
@@ -146,8 +149,10 @@ export const NpcUtilsUi = () => {
                 texture: {
                     src: getImage()
                 }
-            } }),
-        ReactEcs.createElement(UiEntity, { uiTransform: {
+            }
+        }),
+        ReactEcs.createElement(UiEntity, {
+            uiTransform: {
                 display: displaySkipable() ? 'flex' : 'none',
                 width: getScaledSize(15),
                 height: getScaledSize(15),
@@ -161,8 +166,10 @@ export const NpcUtilsUi = () => {
                 uvs: getImageAtlasMapping(getSkipableTheme())
             }, onMouseDown: () => {
                 skipDialogs(activeNPC);
-            } },
-            ReactEcs.createElement(UiEntity, { uiTransform: {
+            }
+        },
+            ReactEcs.createElement(UiEntity, {
+                uiTransform: {
                     display: 'flex',
                     positionType: 'absolute',
                     position: { left: '215%' }
@@ -170,21 +177,19 @@ export const NpcUtilsUi = () => {
                     value: 'Skip',
                     color: getTextColor(),
                     fontSize: getScaledFontSize(12)
-                } })),
-        ReactEcs.createElement(UiEntity, { uiTransform: {
+                }
+            })),
+        ReactEcs.createElement(UiEntity, {
+            uiTransform: {
                 display: 'flex',
                 width: getScaledSize(24),
                 height: getScaledSize(36),
                 positionType: 'absolute',
                 position: { bottom: '5%', right: '2%' }
-            }, uiBackground: {
-                textureMode: 'stretch',
-                texture: {
-                    src: getTheme()
-                },
-                uvs: getImageAtlasMapping(getLeftClickTheme())
-            } }),
-        ReactEcs.createElement(UiEntity, { uiTransform: {
+            }
+        }),
+        ReactEcs.createElement(UiEntity, {
+            uiTransform: {
                 height: 'auto',
                 width: 'auto',
                 alignSelf: 'flex-start',
@@ -198,20 +203,26 @@ export const NpcUtilsUi = () => {
             }, uiText: {
                 value: getText(),
                 color: getTextColor(),
-                fontSize: getScaledFontSize(getFontSize()),
+                fontSize: '1vw',
                 textAlign: 'middle-left'
-            } }),
-        ReactEcs.createElement(UiEntity, { uiTransform: {
+            }
+        }),
+        ReactEcs.createElement(UiEntity, {
+            uiTransform: {
                 width: getScaledButtonWidth(450),
                 alignItems: 'center',
                 flexDirection: 'row',
                 justifyContent: 'center',
                 display: displayFirstButtonContainer() ? 'flex' : 'none',
-            } },
-            ReactEcs.createElement(UiEntity, { onMouseDown: () => {
+            }
+        },
+            ReactEcs.createElement(UiEntity, {
+                onMouseDown: () => {
                     buttonClick(0);
-                } },
-                ReactEcs.createElement(UiEntity, { uiTransform: {
+                }
+            },
+                ReactEcs.createElement(UiEntity, {
+                    uiTransform: {
                         height: 'auto',
                         width: getScaledSize(12)
                     }, uiBackground: {
@@ -220,8 +231,10 @@ export const NpcUtilsUi = () => {
                             src: getTheme()
                         },
                         uvs: getImageAtlasMapping(darkButtonCorner)
-                    } }),
-                ReactEcs.createElement(UiEntity, { uiTransform: {
+                    }
+                }),
+                ReactEcs.createElement(UiEntity, {
+                    uiTransform: {
                         width: getScaledButtonWidth(0),
                         maxWidth: getScaledSize(300),
                         height: getScaledSize(45),
@@ -236,8 +249,10 @@ export const NpcUtilsUi = () => {
                             src: getTheme()
                         },
                         uvs: getImageAtlasMapping(darkButtonSection)
-                    } },
-                    ReactEcs.createElement(UiEntity, { uiTransform: {
+                    }
+                },
+                    ReactEcs.createElement(UiEntity, {
+                        uiTransform: {
                             width: getScaledSize(25),
                             height: getScaledSize(25),
                             margin: { right: getScaledSize(5) },
@@ -248,15 +263,19 @@ export const NpcUtilsUi = () => {
                                 src: getTheme()
                             },
                             uvs: getImageAtlasMapping(secondaryButtonSection)
-                        } }),
-                    ReactEcs.createElement(UiEntity, { uiTransform: {
+                        }
+                    }),
+                    ReactEcs.createElement(UiEntity, {
+                        uiTransform: {
                             width: 'auto',
                             overflow: 'hidden',
                             maxWidth: getScaledSize(217),
                             padding: { right: getScaledSize(5) },
                             margin: { left: getScaledSize(30) }
-                        }, uiText: { value: getButtonText(0), fontSize: getScaledFontSize(getButtonFontSize(0)), textAlign: 'middle-left' } })),
-                ReactEcs.createElement(UiEntity, { uiTransform: {
+                        }, uiText: { value: getButtonText(0), fontSize: getScaledFontSize(getButtonFontSize(0)), textAlign: 'middle-left' }
+                    })),
+                ReactEcs.createElement(UiEntity, {
+                    uiTransform: {
                         height: 'auto',
                         width: getScaledSize(12),
                         margin: { right: '5%' },
@@ -266,11 +285,15 @@ export const NpcUtilsUi = () => {
                             src: getTheme()
                         },
                         uvs: getImageAtlasMapping(darkButtonEdge)
-                    } })),
-            ReactEcs.createElement(UiEntity, { onMouseDown: () => {
+                    }
+                })),
+            ReactEcs.createElement(UiEntity, {
+                onMouseDown: () => {
                     buttonClick(1);
-                } },
-                ReactEcs.createElement(UiEntity, { uiTransform: {
+                }
+            },
+                ReactEcs.createElement(UiEntity, {
+                    uiTransform: {
                         height: 'auto',
                         width: getScaledSize(12)
                     }, uiBackground: {
@@ -279,8 +302,10 @@ export const NpcUtilsUi = () => {
                             src: getTheme()
                         },
                         uvs: getImageAtlasMapping(redButtonCorner)
-                    } }),
-                ReactEcs.createElement(UiEntity, { uiTransform: {
+                    }
+                }),
+                ReactEcs.createElement(UiEntity, {
+                    uiTransform: {
                         width: getScaledButtonWidth(1),
                         maxWidth: getScaledSize(300),
                         height: getScaledSize(45),
@@ -295,8 +320,10 @@ export const NpcUtilsUi = () => {
                             src: getTheme()
                         },
                         uvs: getImageAtlasMapping(redButtonSection)
-                    } },
-                    ReactEcs.createElement(UiEntity, { uiTransform: {
+                    }
+                },
+                    ReactEcs.createElement(UiEntity, {
+                        uiTransform: {
                             width: getScaledSize(25),
                             height: getScaledSize(25),
                             margin: { right: getScaledSize(5) },
@@ -307,15 +334,19 @@ export const NpcUtilsUi = () => {
                                 src: getTheme()
                             },
                             uvs: getImageAtlasMapping(primaryButtonSection)
-                        } }),
-                    ReactEcs.createElement(UiEntity, { uiTransform: {
+                        }
+                    }),
+                    ReactEcs.createElement(UiEntity, {
+                        uiTransform: {
                             width: 'auto',
                             maxWidth: getScaledSize(217),
                             overflow: 'hidden',
                             padding: { right: getScaledSize(5) },
                             margin: { left: getScaledSize(30) }
-                        }, uiText: { value: getButtonText(1), fontSize: getScaledFontSize(getButtonFontSize(1)), textAlign: 'middle-left' } })),
-                ReactEcs.createElement(UiEntity, { uiTransform: {
+                        }, uiText: { value: getButtonText(1), fontSize: getScaledFontSize(getButtonFontSize(1)), textAlign: 'middle-left' }
+                    })),
+                ReactEcs.createElement(UiEntity, {
+                    uiTransform: {
                         height: 'auto',
                         width: getScaledSize(12)
                     }, uiBackground: {
@@ -324,19 +355,25 @@ export const NpcUtilsUi = () => {
                             src: getTheme()
                         },
                         uvs: getImageAtlasMapping(redButtonEdge)
-                    } }))),
-        ReactEcs.createElement(UiEntity, { uiTransform: {
+                    }
+                }))),
+        ReactEcs.createElement(UiEntity, {
+            uiTransform: {
                 width: getScaledButtonWidth(450),
                 alignItems: 'center',
                 flexDirection: 'row',
                 justifyContent: 'center',
                 margin: { top: getScaledSize(20) },
                 display: displaySecondButtonContainer() ? 'flex' : 'none',
-            } },
-            ReactEcs.createElement(UiEntity, { onMouseDown: () => {
+            }
+        },
+            ReactEcs.createElement(UiEntity, {
+                onMouseDown: () => {
                     buttonClick(3);
-                } },
-                ReactEcs.createElement(UiEntity, { uiTransform: {
+                }
+            },
+                ReactEcs.createElement(UiEntity, {
+                    uiTransform: {
                         height: 'auto',
                         width: getScaledSize(12),
                     }, uiBackground: {
@@ -345,8 +382,10 @@ export const NpcUtilsUi = () => {
                             src: getTheme()
                         },
                         uvs: getImageAtlasMapping(darkButtonCorner)
-                    } }),
-                ReactEcs.createElement(UiEntity, { uiTransform: {
+                    }
+                }),
+                ReactEcs.createElement(UiEntity, {
+                    uiTransform: {
                         width: getScaledButtonWidth(2),
                         maxWidth: getScaledSize(300),
                         overflow: 'hidden',
@@ -361,13 +400,17 @@ export const NpcUtilsUi = () => {
                             src: getTheme()
                         },
                         uvs: getImageAtlasMapping(darkButtonSection)
-                    } },
-                    ReactEcs.createElement(UiEntity, { uiTransform: {
+                    }
+                },
+                    ReactEcs.createElement(UiEntity, {
+                        uiTransform: {
                             width: 'auto',
                             maxWidth: getScaledSize(252),
                             overflow: 'hidden',
-                        }, uiText: { value: getButtonText(2), fontSize: getScaledFontSize(getButtonFontSize(2)), textAlign: 'middle-left' } })),
-                ReactEcs.createElement(UiEntity, { uiTransform: {
+                        }, uiText: { value: getButtonText(2), fontSize: getScaledFontSize(getButtonFontSize(2)), textAlign: 'middle-left' }
+                    })),
+                ReactEcs.createElement(UiEntity, {
+                    uiTransform: {
                         height: 'auto',
                         width: getScaledSize(12),
                         margin: { right: '5%' },
@@ -377,11 +420,15 @@ export const NpcUtilsUi = () => {
                             src: getTheme()
                         },
                         uvs: getImageAtlasMapping(darkButtonEdge)
-                    } })),
-            ReactEcs.createElement(UiEntity, { onMouseDown: () => {
+                    }
+                })),
+            ReactEcs.createElement(UiEntity, {
+                onMouseDown: () => {
                     buttonClick(4);
-                } },
-                ReactEcs.createElement(UiEntity, { uiTransform: {
+                }
+            },
+                ReactEcs.createElement(UiEntity, {
+                    uiTransform: {
                         height: 'auto',
                         width: getScaledSize(12),
                     }, uiBackground: {
@@ -390,8 +437,10 @@ export const NpcUtilsUi = () => {
                             src: getTheme()
                         },
                         uvs: getImageAtlasMapping(darkButtonCorner)
-                    } }),
-                ReactEcs.createElement(UiEntity, { uiTransform: {
+                    }
+                }),
+                ReactEcs.createElement(UiEntity, {
+                    uiTransform: {
                         width: getScaledButtonWidth(3),
                         maxWidth: getScaledSize(300),
                         overflow: 'hidden',
@@ -406,13 +455,17 @@ export const NpcUtilsUi = () => {
                             src: getTheme()
                         },
                         uvs: getImageAtlasMapping(darkButtonSection)
-                    } },
-                    ReactEcs.createElement(UiEntity, { uiTransform: {
+                    }
+                },
+                    ReactEcs.createElement(UiEntity, {
+                        uiTransform: {
                             width: 'auto',
                             maxWidth: getScaledSize(252),
                             overflow: 'hidden',
-                        }, uiText: { value: getButtonText(3), fontSize: getScaledFontSize(getButtonFontSize(3)), textAlign: 'middle-left' } })),
-                ReactEcs.createElement(UiEntity, { uiTransform: {
+                        }, uiText: { value: getButtonText(3), fontSize: getScaledFontSize(getButtonFontSize(3)), textAlign: 'middle-left' }
+                    })),
+                ReactEcs.createElement(UiEntity, {
+                    uiTransform: {
                         height: 'auto',
                         width: getScaledSize(12),
                     }, uiBackground: {
@@ -421,6 +474,7 @@ export const NpcUtilsUi = () => {
                             src: getTheme()
                         },
                         uvs: getImageAtlasMapping(darkButtonEdge)
-                    } })))));
+                    }
+                })))));
 };
 //# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
